Résumé,Clé de ticket,ID de ticket,ID parent,Type de ticket,État,Clé de projet,Nom du projet,Type de projet,Chef de projet,ID de responsable de projet,Description du projet,URL du projet,Priorité,Résolution,Responsable,ID de responsable,Rapporteur,ID de rapporteur,Créateur,ID de créateur,Création,Mise à jour,Dernier affichage,Résolu,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions affectées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Versions corrigées,Composants,Composants,Composants,Composants,Votes,Étiquettes,Étiquettes,Étiquettes,Étiquettes,Étiquettes,Description,Environnement,Observateurs,ID des personnes en charge du suivi,Estimation originale,Estimation restante,Temps consacré,Ratio du travail réel comparé à l'estimation,Σ Estimation originale,Σ Estimation restante,Σ Temps consacré,Niveau de sécurité,Lien de ticket sortant (Blocks),Lien de ticket sortant (Cause),Lien de ticket sortant (Cause),Lien de ticket sortant (Cloners),Lien de ticket sortant (Duplicate),Lien de ticket sortant (Duplicate),Lien de ticket sortant (Fix),Lien de ticket sortant (Follow Up),Lien de ticket sortant (Follow Up),Lien de ticket sortant (Follow Up),Lien de ticket sortant (Prerequisite),Lien de ticket sortant (Prerequisite),Lien de ticket sortant (Relates),Lien de ticket sortant (Relates),Lien de ticket sortant (Relates),Lien de ticket sortant (Relates),Lien de ticket sortant (Relates),Pièce jointe,Pièce jointe,Pièce jointe,Pièce jointe,Pièce jointe,Champs personnalisés (Bug Testcase Reminder (view)),Champs personnalisés (Business Value),Champs personnalisés (Développement),Champs personnalisés (Epic Color),Champs personnalisés (Epic Link),Champs personnalisés (Epic Name),Champs personnalisés (Epic Status),Champs personnalisés (Estimation en story points),Champs personnalisés (Feedback Requested),Champs personnalisés (Feedback Requested By),Champs personnalisés (Feedback Requested By)ID,Champs personnalisés (Issue color),Champs personnalisés (Last commented by a user?),Champs personnalisés (Number of Attachments),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Participants),Champs personnalisés (Patch Reminder (view)),Champs personnalisés (Pull Request),Champs personnalisés (Rank),Champs personnalisés (Request Type),Champs personnalisés (Request participants),Champs personnalisés (Requires Release Note),Niveau de satisfaction,Champs personnalisés (Sortable Priority),Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Sprint,Champs personnalisés (Start date),Champs personnalisés (Story Points),Champs personnalisés (Suitable for new contributors),Champs personnalisés (Target end),Champs personnalisés (Target start),Champs personnalisés (Team),Champs personnalisés (Worked in),Champs personnalisés ([CHART] Date of First Response),Champs personnalisés (backPortable),Champs personnalisés (backportDecision),Champs personnalisés (backportReEvaluate),Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Commentaire,Catégorie d'état,Parent,Parent summary
Upgrade -orm6 artifacts to Hibernate ORM 6.0.0.CR2,HSEARCH-4509,72060,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/mars/2022 01:30 AM,14/mars/2022 07:39 AM,14/mars/2022 12:54 PM,14/mars/2022 07:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.2.Final,6.2.0.Alpha1,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-14T07:39:28.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2942,0|104xn3:zzy,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
PooledOptimizer generates duplicate ids when several JVMs initialize optimizer and sequence value is the initial value,HHH-15118,72058,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Guillaume Chapel,557058:9ab9d183-2e4c-4c02-b973-6de1e63d0739,Guillaume Chapel,557058:9ab9d183-2e4c-4c02-b973-6de1e63d0739,Guillaume Chapel,557058:9ab9d183-2e4c-4c02-b973-6de1e63d0739,11/mars/2022 13:17 PM,11/mars/2022 13:17 PM,14/mars/2022 10:59 AM,,5.4.0,5.5.0,5.6.0,6.0.0.CR2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,,,,,"Hello,

I have overlapping ids with PooledOptimizer when :

* the sequence value is the initial value (1 in the following example)
* several JVMs initialize its optimizer for the first time (hiValue = null) in the same time

In this context, we may have JVMs that generate duplicate ids. Here the explanation :



!pooledOptimizer-overlaping.drawio.png|width=798,height=571!

!code-way.png|width=584,height=443!

There are two ways to fix that :

# Don't call nextval() again, but intialize optimizer values like this -> hiValue = value. The next generate() will necessarily request a new fresh range of ids (nextval)
# Call another time nextval (like the function generate() currently do), but we need to check that the new value generated from the sequence is the one we expected (i.e. there is no gap due to an external nextval).

In the PR, I chose the first solution : simpliest to implement and to understand. I can implement solution 2 if needed

Regards,",,,,,,,,,,,,,,,,,,,,,,,,,,,,,11/mars/2022 13:17 PM;ug:3d5e12fb-6a95-4ac6-8577-8fe819ae4a0d;code-way.png;https://hibernate.atlassian.net/secure/attachment/49977/code-way.png,11/mars/2022 13:17 PM;ug:3d5e12fb-6a95-4ac6-8577-8fe819ae4a0d;pooledOptimizer-overlaping.drawio.png;https://hibernate.atlassian.net/secure/attachment/49978/pooledOptimizer-overlaping.drawio.png,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-11T13:42:16.000-0800"",""stateCount"":2,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,ug:3d5e12fb-6a95-4ac6-8577-8fe819ae4a0d(ug:3d5e12fb-6a95-4ac6-8577-8fe819ae4a0d),,,,,,,,,0|104yig:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
ConstraintViolationException is thrown using same @SecondaryTable on two entities,HHH-15117,72057,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,bberto,557058:cf89539d-dd3f-42d1-9622-62b097471611,bberto,557058:cf89539d-dd3f-42d1-9622-62b097471611,11/mars/2022 08:31 AM,14/mars/2022 02:44 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Using the same SecondaryTable both on a parent and a child entity, you get a constraint violation cause HIbernate tries to perform two inserts with same id.

Expected behaviour: an update should be used instead of the second insert

Motivation: this is useful when a mix of SINGLE_TABLE / JOINED inheritance strategy is required. On the provided test case, parent entity A should have its own table, while childs B an C should sare the same one.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,11/mars/2022 08:31 AM;ug:01f798f2-af16-4cd5-81d8-fa886c9e881a;test-case.zip;https://hibernate.atlassian.net/secure/attachment/49976/test-case.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-14T02:51:11.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,dreab8(dreab8),ug:01f798f2-af16-4cd5-81d8-fa886c9e881a(ug:01f798f2-af16-4cd5-81d8-fa886c9e881a),,,,,,,,0|104yi8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Document the equivalent of aws.* properties in the Search 5 => Search 6 migration guide,HSEARCH-4508,72055,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/mars/2022 23:55 PM,10/mars/2022 23:59 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.9.Final,,,,,,,,,backend-elasticsearch,documentation,,,0,,,,,,"It seems I forgot about those when I wrote the migration guide.



See [https://discourse.hibernate.org/t/what-are-the-equivalent-properties-added-in-hibernate-search-6/6137|https://discourse.hibernate.org/t/what-are-the-equivalent-properties-added-in-hibernate-search-6/6137|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|102zq1:,,,,,,HSEARCH - 2022-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
@Audited or @AuditTable annotation to hold configuration for specifying a custom FK name for the constraint of the audit table to the main revisions table,HHH-15116,72054,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Vincent Jansen,557058:93fc9125-c25f-48bf-bf99-e919954a6659,Momchil Milev,557058:1bf47599-39c7-4fec-9ca7-e1406636015c,Momchil Milev,557058:1bf47599-39c7-4fec-9ca7-e1406636015c,10/mars/2022 07:51 AM,11/mars/2022 05:44 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"It would be nice if it would be able to specify a custom name for the FK constraint of the entity_aud table to the main revisions table (rev → id). Currently, it generates a hashed string with FK prefix.

{code:java}...
@Audited()
@AuditTable(
    @JoinColumn(name = ""custom_entity_rev"", referencedColumnName = ""id"", foreignKey = @ForeignKey(name = ""fk_custom_entity_rev_revisions_id""))
)
@AuditJoinTable()
public class CustomEntity {

}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:1ec26c0c-c870-45c9-bfef-25d4d59bbcd9(ug:1ec26c0c-c870-45c9-bfef-25d4d59bbcd9),ug:1d498424-fe81-4ac4-a6b6-2557d283e0f4(ug:1d498424-fe81-4ac4-a6b6-2557d283e0f4),,,,,,,,0|104yhs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Deleting an entity with Joined inheritance and default schema set is throwing and error,HHH-15115,72053,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Adrian Derevenschi,557058:e5776fbe-2dae-4371-b56a-6ebde7147800,Adrian Derevenschi,557058:e5776fbe-2dae-4371-b56a-6ebde7147800,09/mars/2022 07:31 AM,11/mars/2022 02:38 AM,14/mars/2022 12:54 PM,11/mars/2022 02:38 AM,5.6.2,5.6.3,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,,,,,,,,,hibernate-core,,,,0,,,,,,"Hello,

While upgrading to hibernate 5.6.5 I have noticed a strange scenario that occurs on deleting only when you have entities with Joined inheritance and default schema set.

While debugging, I saw that hibernate tries to execute the following queries:



{code:sql}create temporary  table HT_table1 (id int8 not null) ;

insert into myDefaultSchema.HT_table1 select .....;

DROP table HT_table1;{code}



I compared with how hibernate (5.4.x) was previously generating those queries and the difference is that now it’s adding the default schema to the insert statement, which results in an exception.

Taking a look in your code, I discovered that the issue originates in org.hibernate.hql.spi.id.local.LocalTemporaryTableBulkIdStrategy, buildIdTableInfo method. Starting with version 5.6.2, the code that sets the idTableName was changed from:



{noformat}jdbcServices.getJdbcEnvironment().getQualifiedObjectNameFormatter().format(idTable.getQualifiedTableName(), jdbcServices.getJdbcEnvironment().getDialect()){noformat}

to:

{noformat}sqlStringGenerationContext.format(idTable.getQualifiedTableName()){noformat}

and sqlStringGenerationContext is adding the default schema.



Thanks for looking into that\!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-12T05:02:22.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:099d3fe2-a55a-417b-8fb2-478bc138ad8b(ug:099d3fe2-a55a-417b-8fb2-478bc138ad8b),dreab8(dreab8),,,,,,,,0|104yhk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,,,,,,,,,,,,,Terminé,,
Use a (safer) helper to set system properties in tests,HSEARCH-4507,72052,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/mars/2022 04:59 AM,09/mars/2022 06:33 AM,14/mars/2022 12:54 PM,09/mars/2022 06:33 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-09T06:33:44.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2936,0|104xn3:zzx,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 8.1.0,HSEARCH-4506,72051,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/mars/2022 02:02 AM,09/mars/2022 04:24 AM,14/mars/2022 12:54 PM,09/mars/2022 04:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-09T04:24:40.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2935,0|104xn3:zzt,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add compatibility with Elasticsearch 8.1.0,HSEARCH-4505,72048,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/mars/2022 23:08 PM,08/mars/2022 23:08 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,backend-elasticsearch,,,,0,,,,,,[https://www.elastic.co/guide/en/elasticsearch/reference/8.1/release-highlights.html?elektra=stack-and-cloud-8-1-blog#doc_values_only_search_on_numeric_date_keyword_ip_boolean_fields|https://www.elastic.co/guide/en/elasticsearch/reference/8.1/release-highlights.html?elektra=stack-and-cloud-8-1-blog#doc_values_only_search_on_numeric_date_keyword_ip_boolean_fields|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|102zq2:,,,,,,HSEARCH - 2022-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Clean up deprecations,HHH-15114,72047,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/mars/2022 16:39 PM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,08/mars/2022 18:31 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-14T01:59:36.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,jschatte(jschatte),steve(steve),,,,,,,,0|104ygw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Exception setting ParameterExpressions on Update Queries,HHH-15113,72046,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Will Dazey,6183fd9425f313007050fa32,Will Dazey,6183fd9425f313007050fa32,08/mars/2022 16:19 PM,09/mars/2022 13:02 PM,14/mars/2022 12:54 PM,,5.2.18,5.5.8,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.next,,,,,,,,,,,,0,,,,,,"I was testing Hibernate's behavior with CriteriaBuilder Queries and noticed that when setting ParameterExpressions, Hibernate throws an IllegalArgumentException concerning the parameter type even though the type is correct.



Test:

{code:java}    CriteriaBuilder cb = entityManager.getCriteriaBuilder();
    CriteriaUpdate<SimpleEntity> cquery = cb.createCriteriaUpdate(SimpleEntity.class);
    Root<SimpleEntity> root = cquery.from(SimpleEntity.class);

    ParameterExpression<Integer> intValue = cb.parameter(Integer.class);
    ParameterExpression<String> strValue = cb.parameter(String.class);

    cquery.set(root.get(SimpleEntity_.itemInteger1), intValue);
    cquery.where(cb.equal(root.get(SimpleEntity_.itemString1), strValue));

    Query query = entityManager.createQuery(cquery);
    query.setParameter(intValue, 9);
    query.setParameter(strValue, ""B"");

    query.executeUpdate();{code}



Exception:

{noformat}java.lang.IllegalArgumentException: Parameter value [org.hibernate.query.criteria.internal.expression.ParameterExpressionImpl@4e1ce44] did not match expected type [java.lang.Integer (n/a)]
	at org.hibernate.query.spi.QueryParameterBindingValidator.validate(QueryParameterBindingValidator.java:54)
	at org.hibernate.query.spi.QueryParameterBindingValidator.validate(QueryParameterBindingValidator.java:27)
	at org.hibernate.query.internal.QueryParameterBindingImpl.validate(QueryParameterBindingImpl.java:90)
	at org.hibernate.query.internal.QueryParameterBindingImpl.setBindValue(QueryParameterBindingImpl.java:55)
	at org.hibernate.query.internal.AbstractProducedQuery.setParameter(AbstractProducedQuery.java:501)
	at org.hibernate.query.internal.AbstractProducedQuery.setParameter(AbstractProducedQuery.java:122)
	at org.hibernate.query.criteria.internal.compile.CriteriaCompiler$1$1.bind(CriteriaCompiler.java:135)
	at org.hibernate.query.criteria.internal.AbstractManipulationCriteriaQuery$1.buildCompiledQuery(AbstractManipulationCriteriaQuery.java:136)
	at org.hibernate.query.criteria.internal.compile.CriteriaCompiler.compile(CriteriaCompiler.java:165)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:785)
	at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:23){noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-09T06:21:03.000-0800"",""stateCount"":2,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139(ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139),,,,,,,,0|104ygo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,08/mars/2022 16:26 PM;6183fd9425f313007050fa32;I created a test on [https://github.com/hibernate/hibernate-test-case-templates/pull/131|https://github.com/hibernate/hibernate-test-case-templates/pull/131|smart-link] that reproduces the failure. Let me know if there is anything else needed.,,,,,,,,,,,,,,,,A faire,,
Please remove me from hibernate.atlassian.net,HHH-15112,72045,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,,,,Daniel Monteiro,557058:116bdaaa-3282-432b-862d-cc3654302cb0,Daniel Monteiro,557058:116bdaaa-3282-432b-862d-cc3654302cb0,08/mars/2022 06:18 AM,08/mars/2022 06:18 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,williecaolho(williecaolho),,,,,,,,,0|104ygg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to JBeret 1.4.6.Final,HSEARCH-4504,72042,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/mars/2022 02:22 AM,08/mars/2022 23:46 PM,14/mars/2022 12:54 PM,08/mars/2022 23:46 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,mapper-orm-jsr352,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T23:45:56.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2934,0|104xn3:zzv,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Disable version logging through system properties,HSEARCH-4503,72039,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Won't Do,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/mars/2022 00:52 AM,09/mars/2022 06:36 AM,14/mars/2022 12:54 PM,09/mars/2022 06:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,engine,,,,0,,,,,,"See [https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/INFO.20messages.20on.20native-image|https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/INFO.20messages.20on.20native-image]

The property key is still TBD, last suggestion was “jboss.log-versions”.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-09T06:35:32.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2933,0|104xn3:zzr,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,09/mars/2022 06:36 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;We won't need this after all.,,,,,,,,,,,,,,,,Terminé,,
MappingException is thrown for @JoinColumn with referencedColumnName on a @SecondaryTable ,HHH-15111,72036,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,T3rm1,557058:e34a1906-c149-4fe3-9368-312bc8057341,T3rm1,557058:e34a1906-c149-4fe3-9368-312bc8057341,07/mars/2022 07:17 AM,10/mars/2022 00:33 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,,,"On a @ManyToOne association if you specify a @JoinColumn with a {{referencedColumnName}} that is part of a secondary table, Hibernate is not able to find this column and quits with an error on startup.

Expected behaviour: Even though the references column in on another table this should be possible without any further annotations. Hibernate know that the references column is in another table.

A JPAUnitTestCase is attached.

Example:

{noformat}@Entity
@Table(name = ""being"")
@Inheritance
@DiscriminatorColumn(name = ""type"")
public abstract class Being {

    @Id
    private Long id;
}

@Entity
@SecondaryTable(name = ""animal"")
public abstract class Animal extends Being {
    @Column(name = ""uuid"", table = ""animal"")
    private String uuid;
}

@Entity
@SecondaryTable(name = ""cat"")
@DiscriminatorValue(value = ""CAT"")
class Cat extends Animal {
    @Column(name = ""name"", table = ""cat"")
    private String name;
}

@Entity
public class Toy {
    @Id
    private Long id;

    // @Column(name = ""animal_uuid"")
    // private String animalUuid;

    // what mapping can I use here? The following does't work.
    @ManyToOne
    @JoinColumn(name = ""animal_uuid"", referencedColumnName = ""uuid"")
    private Cat cat;
}{noformat}

The error is:

{quote}org.hibernate.MappingException: Unable to find column with logical name: uuid in org.hibernate.mapping.Table(being) and its related supertables and secondary tables{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/mars/2022 09:00 AM;t3rm1;testcase-bug.zip;https://hibernate.atlassian.net/secure/attachment/49975/testcase-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-10T07:44:39.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,dreab8(dreab8),t3rm1(t3rm1),,,,,,,,0|104yew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
JPQL generates invalid SQL for condition based on subquery,HHH-15110,72033,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Manuel,5ad1a78a8349062a7782b645,Manuel,5ad1a78a8349062a7782b645,07/mars/2022 04:12 AM,07/mars/2022 07:16 AM,14/mars/2022 12:54 PM,,4.2.21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Giving the following entities:





{code:java}@Entity
@Table(name = ""POST"")
public class Post implements Serializable {
    private Long postId;
    private Date someDate; 
    private List<Comment> comments = new ArrayList<>();
    
    @Id
    @Column(name = ""POST_ID"")
    public Long getPostId() {
        return this.postId;
    }

    public void setPostId(Long postId) {
        this.postId = postId;
    }
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = ""SOME_DATE"")
    public Date getSomeDate() {
        return this.someDate;
    }

    public void setSomeDate(Date someDate) {
        this.someDate = someDate;
    }
    
    @OneToMany(mappedBy = ""post"")
    public List<Comment> getComments() {
        return this.comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }
 }{code}



{code:java}@Entity
@Table(name = ""COMMENT"")
public class Comment implements Serializable {
    private Long commentId;
    private Post post;
    private User user; 
    
    @Id
    @Column(name = ""COMMENT_ID"")
    public Long getCommentId() {
        return this.commentId;
    }

    public void setCommentId(Long commentId) {
        this.commentId = commentId;
    }
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = ""POST_ID"")
    public Post getPost() {
        return this.post;
    }

    public void setPost(Post aroUnitaDoc) {
        this.post = post;
    }
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = ""USER_ID"")
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}{code}



{code:java}@Entity
@Table(name = ""USER"")
public class User implements Serializable {
    private Long userId;
    private List<Comment> comments = new ArrayList<>();
    
    @Id
    @Column(name = ""USER_ID"")
    public Long getUserId() {
        return this.userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }
    
    @OneToMany(mappedBy = ""user"")
    public List<Comment> getComments() {
        return this.comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }
 }{code}

The following JPQL

{code:sql}UPDATE Post postAlias
SET postAlias.someDate = :someDateValue,
WHERE EXISTS 
(SELECT commentAlias
FROM Comment commentAlias
WHERE commentAlias.user.userId = :idUserValue
AND commentAlias.post = postAlias){code}

Generate the following SQL for Oracle



{code:sql}update POST
set SOME_DATE=?
where exists
(select comment1_.COMMENT_ID
from COMMENT comment1_
where comment1_.USER_ID=?
and comment1_.POST_ID=POST_ID){code}

But it's wrong, the condition *comment1_.POST_ID=POST_ID* evaluate always true

The right way is something like this (pay attention to alias)

{code:sql}update POST post1_
set post1_.SOME_DATE=?
where exists
(select comment1_.COMMENT_ID
from COMMENT comment1_
where comment1_.USER_ID=?
and comment1_.POST_ID=post1_.POST_ID){code}","hibernate-core-4.2.27.Final-redhat-1
Jboss EAP 6.4
Java 1.8
Oracle 19",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:365f608c-f27c-4263-b3f3-8a5cfeac5a7e(ug:365f608c-f27c-4263-b3f3-8a5cfeac5a7e),,,,,,,,,0|104ye8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,07/mars/2022 07:16 AM;5ad1a78a8349062a7782b645;[https://github.com/hibernate/hibernate-test-case-templates/pull/129|https://github.com/hibernate/hibernate-test-case-templates/pull/129|smart-link] ,,,,,,,,,,,,,,,,A faire,,
Fetch join ignored and cross join added automatically,HHH-15109,72032,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Adam Csiszar,557058:adea843d-cc0a-4633-a1ec-213e00e10659,Adam Csiszar,557058:adea843d-cc0a-4633-a1ec-213e00e10659,07/mars/2022 03:17 AM,07/mars/2022 03:17 AM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Given 3 entities in a hierarchy. We need to run a query that selects the whole subtree in a single query instead of multiple selects. Using {{fetch}} helps but it does not work “recursively”. See the following simplified example:

{code:java}class EntityA {

	private Integer id;
	private String fieldA;
	
	@ManyToOne(optional = false, fetch = LAZY)
	@JoinColumn(name = ""B_ID"", nullable = false)
	private EntityB entityB;
}

class EntityB {

	private Integer id;
	private String fieldB;
	
	@ManyToOne(optional = false, fetch = LAZY)
	@JoinColumn(name = ""C_ID"", nullable = false)
	private EntityC entityC;
}

class EntityC {

	private Integer id;
	private String fieldC;
}{code}

Here, we want to select {{EntityA}} with all its descendents in a single query. We are using criteria builder to do so:

{code:java}final var builder = entityManager.getCriteriaBuilder();
final var query = builder.createQuery(EntityA.class);

final var root = query.from(EntityA.class);
// v1
//root.fetch(""entityB"");
// v2
//root.fetch(""entityB"").fetch(""entityC"");

query.where(builder.and(
	builder.like(root.get(""entityB"").get(""fieldB""), ""%foo%""),
	builder.like(root.get(""entityB"").get(""entityC"").get(""fieldC""), ""%foo%"")
));

entityManager.createQuery(query).getResultList();{code}

Results for {{v1}} is expected and seems to be correct

{noformat}- entityB columns selected with inner join, where condition uses the joined table
- entityC columns are not selected
- entityC added with a cross join
- where condition uses the cross-joined entityC

select
 entityA_.ID,
 entityA_.fieldA,
 entityB_.ID,
 entityB_.fieldB
from
 table_A entityA_
 inner join table_B entityB_ on entityA_.B_ID = entityB_.ID
 cross join table_C entityC_
where
 entityB_.C_ID = entityC_.ID
 and entityB_.fieldB like '%foo%'
 and entityC_.fieldC like '%foo%'{noformat}

However, the {{v2}} result is not correct, it adds an extra cross join despite the already specified fetch.

{noformat}- entityB columns selected with inner join, where condition uses the joined table
- entityC columns selected with inner join
- entityC added with a cross join as well
- where condition uses the cross-joined entityC

select
 entityA_.ID,
 entityA_.fieldA,
 entityB_.ID,
 entityB_.fieldB,
 entityC1_.ID,
 entityC1_.fieldC
from
 table_A entityA_
 inner join table_B entityB_ on entityA_.B_ID = entityB_.ID
 inner join table_C entityC1_ on entityB_.C_ID = entityC1_.ID
 cross join table_C entityC2_
where
 entityB_.C_ID = entityC2_.ID
 and entityB_.fieldB like '%foo%'
 and entityC2_.fieldC like '%foo%'{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:3c6e0c5a-23ff-497c-a602-83e1ac940c19(ug:3c6e0c5a-23ff-497c-a602-83e1ac940c19),,,,,,,,,0|104ye0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Jackson 2.13.2,HSEARCH-4502,72030,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/mars/2022 01:12 AM,08/mars/2022 02:02 AM,14/mars/2022 12:54 PM,08/mars/2022 02:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T02:02:18.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2931,0|104xn3:zzi,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
AggregateClassLoader.findClass() drops all exceptions,HHH-15108,72028,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,,,Nathan Reynolds,616b0a7472f69700690c9ca3,Nathan Reynolds,616b0a7472f69700690c9ca3,05/mars/2022 09:38 AM,05/mars/2022 09:38 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"AggregatedClassLoader.findClass(String name) has 2 catch blocks that drop the exception.  Please include these exceptions in the ClassNotFoundException.  This will help when trying to figure out why a class won’t load.

Currently, the ClassNotFoundException only shows which is not helpful.

{noformat}Exception:
java.lang.ExceptionInInitializerError
    ...
Caused by: org.hibernate.boot.registry.classloading.spi.ClassLoadingException: Unable to load class [...]
	at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:133)
	at org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.<init>(AnnotationMetadataSourceProcessorImpl.java:101)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.<init>(MetadataBuildingProcess.java:164)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:158)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1460)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1494)
	at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:141)
	...
Caused by: java.lang.ClassNotFoundException: Could not load requested class : ...
	at org.hibernate.boot.registry.classloading.internal.AggregatedClassLoader.findClass(AggregatedClassLoader.java:210)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:589)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:398)
	at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:130)
	... 9 more
{noformat}",,,,7200,7200,,0 %,7200,7200,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:255c4c09-af31-41c6-a876-e3caaec4db17(ug:255c4c09-af31-41c6-a876-e3caaec4db17),,,,,,,,,0|104ydc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix copy/paste error in documentation of Elasticsearch's fromJson() predicate,HSEARCH-4501,72027,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2022 04:36 AM,04/mars/2022 04:40 AM,14/mars/2022 12:54 PM,04/mars/2022 04:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.9.Final,6.1.2.Final,6.2.0.Alpha1,,,,,,,backend-elasticsearch,documentation,,,0,,,,,,See [https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-dsl-predicate-extensions-elasticsearch-from-json|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-dsl-predicate-extensions-elasticsearch-from-json|smart-link] : the text mentions {{fromLuceneQuery}} instead of {{fromJson}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2022-03-04T04:37:24.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104xn3:zz,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Provide more context in error messages about fields with invalid type (value vs. object),HSEARCH-4500,72026,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2022 04:26 AM,04/mars/2022 04:27 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,engine,,,,0,,,,,,"See [https://discourse.hibernate.org/t/error-while-searching-with-unavailable-attribute-in-hibernate-search/6115|https://discourse.hibernate.org/t/error-while-searching-with-unavailable-attribute-in-hibernate-search/6115|smart-link] 

{noformat}SearchException: HSEARCH400611: Invalid type: 'archetype.archetypeId' is a value field, not an object field.
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexSchemaValueFieldNode.toObjectField(ElasticsearchIndexSchemaValueFieldNode.java:48)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.AbstractElasticsearchIndexSchemaFieldTemplate.lambda$createNodeIfMatching$0(AbstractElasticsearchIndexSchemaFieldTemplate.java:43)
        at java.util.Optional.map(Optional.java:215)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.AbstractElasticsearchIndexSchemaFieldTemplate.createNodeIfMatching(AbstractElasticsearchIndexSchemaFieldTemplate.java:42)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexModel.fieldOrNullIgnoringInclusion(ElasticsearchIndexModel.java:142)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexModel.fieldOrNull(ElasticsearchIndexModel.java:104)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexModel.fieldOrNull(ElasticsearchIndexModel.java:100)
        at org.hibernate.search.backend.elasticsearch.scope.model.impl.ElasticsearchScopeSearchIndexesContext.field(ElasticsearchScopeSearchIndexesContext.java:93)
        at org.hibernate.search.backend.elasticsearch.search.predicate.impl.ElasticsearchSimpleQueryStringPredicate$Builder.field(ElasticsearchSimpleQueryStringPredicate.java:181)
        at org.hibernate.search.engine.search.predicate.dsl.impl.SimpleQueryStringPredicateFieldMoreStepImpl$CommonState.field(SimpleQueryStringPredicateFieldMoreStepImpl.java:74)
        at org.hibernate.search.engine.search.predicate.dsl.impl.SimpleQueryStringPredicateFieldMoreStepImpl.<init>(SimpleQueryStringPredicateFieldMoreStepImpl.java:38)
        at org.hibernate.search.engine.search.predicate.{noformat}

See [https://discourse.hibernate.org/t/hsearch400609-unknown-field-attributes-someattributename/6114/5?u=yrodiere|https://discourse.hibernate.org/t/hsearch400609-unknown-field-attributes-someattributename/6114/5?u=yrodiere|smart-link] 

{noformat}Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400611: Invalid type: 'attributes.archetype' is a value field, not an object field.
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexSchemaValueFieldNode.toObjectField(ElasticsearchIndexSchemaValueFieldNode.java:48)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.AbstractElasticsearchIndexSchemaFieldTemplate.lambda$createNodeIfMatching$0(AbstractElasticsearchIndexSchemaFieldTemplate.java:43)
        at java.util.Optional.map(Optional.java:215)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.AbstractElasticsearchIndexSchemaFieldTemplate.createNodeIfMatching(AbstractElasticsearchIndexSchemaFieldTemplate.java:42)
        at org.hibernate.search.backend.elasticsearch.document.model.impl.ElasticsearchIndexModel.fieldOrNullIgnoringInclusion(ElasticsearchIndexModel.java:142)
        at org.hibe{noformat}

The error message explains why the operation went wrong (trying to interpret field {{attributes.archetypeId}} as an object field when it’s actually a value field) , but it doesn’t mention why Hibernate Search was trying to do it (it was trying to add a sub-field to {{attributes.archetypeId.}}

Ideally the error message should be  something like {{HSEARCH400XXX: Error trying to add value to field attributes.archetypeId.someValueField: HSEARCH400611: Invalid type: 'attributes.archetype' is a value field, not an object field.}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104yd4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fluent definition of nested predicates,HSEARCH-4499,72024,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2022 01:45 AM,14/mars/2022 02:29 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,engine,,,,0,,,,,,"Currently, nested predicates are defined that way:

{code:java}List<Book> hits = searchSession.search( Book.class )
        .where( f -> f.nested().objectField( ""authors"" ) 
                .nest( f.bool()
                        .must( f.match().field( ""authors.firstName"" )
                                .matching( ""isaac"" ) ) 
                        .must( f.match().field( ""authors.lastName"" )
                                .matching( ""asimov"" ) ) ) )
        .fetchHits( 20 ); {code}

There are two problems to this syntax:

# The wording is confusing: {{.nested(...)...nest(...)}}. Is it the predicate itself that is nested? Or the one we pass to {{.nest}}?
# It’s verbose, with the call to {{.objectField}} and the fact that users are forced to call {{f.bool()}} explicitly, even though a {{nested}} predicate only makes sense when there are multiple inner predicates.

We could probably introduce a clearer, more fluent, more succinct API?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|102zq6:,,,,,,HSEARCH - 2022-06,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/mars/2022 02:27 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Exposing the following API could eliminate these problems:

{code:java}List<Book> hits = searchSession.search( Book.class )
        .where( f -> f.nested( ""authors"" )
                .must( f.match().field( ""authors.firstName"" )
                         .matching( ""isaac"" ) ) 
                .must( f.match().field( ""authors.lastName"" )
                        .matching( ""asimov"" ) ) )
        .fetchHits( 20 ); {code}

Additionally, we could also consider exposing this, for users who need conditional clauses:

{code:java}MySearchParams params = ...;
List<Book> hits = searchSession.search( Book.class )
        .where( f -> f.nested( ""authors"", b -> {
                if ( params.firstName != null ) {
                    b.must( f.match().field( ""authors.firstName"" )
                             .matching( firstName ) );
                }
                if ( params.lastName != null ) {
                    b.must( f.match().field( ""authors.lastName"" )
                             .matching( lastName ) );
                }
        } )
        .fetchHits( 20 ); {code}

(this last syntax should be rather easy to implement, basically the same as {{org.hibernate.search.engine.search.predicate.dsl.SearchPredicateFactory#bool(java.util.function.Consumer<? super org.hibernate.search.engine.search.predicate.dsl.BooleanPredicateClausesStep<?>>)}})","14/mars/2022 02:29 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Alternatively, we could just make .nested(...) an option of the boolean predicate:

{code:java}List<Book> hits = searchSession.search( Book.class )
        .where( f -> f.bool()
                .must( f.match().field( ""authors.firstName"" )
                         .matching( ""isaac"" ) ) 
                .must( f.match().field( ""authors.lastName"" )
                        .matching( ""asimov"" ) )
                .nested( ""authors"" ) )
        .fetchHits( 20 );{code}

Or maybe rename {{.nested(...)}} it to {{.forSame(...)}}, for consistency with the forEach introduced in HSEARCH-3943?

{code:java}List<Book> hits = searchSession.search( Book.class )
        .where( f -> f.bool()
                .must( f.match().field( ""authors.firstName"" )
                         .matching( ""isaac"" ) ) 
                .must( f.match().field( ""authors.lastName"" )
                        .matching( ""asimov"" ) )
                .forSame( ""authors"" ) )
        .fetchHits( 20 );{code}",,,,,,,,,,,,,,,A faire,,
Update build to make tests pass against JDK19,HHH-15107,72023,,Tâche,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/mars/2022 23:58 PM,08/mars/2022 23:11 PM,14/mars/2022 12:54 PM,08/mars/2022 23:11 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T23:11:10.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4854,0|104yco:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
 fk() SQM function,HHH-15106,72022,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,03/mars/2022 12:59 PM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,08/mars/2022 04:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.CR2,,,,,,,,,,,,0,,,,,,"Sometimes it is useful to unequivocally refer to the key-side of a foreign-key.  This mostly comes up with {{@NotFound}} mappings, where we generally join and use the target-side of the foreign-key.

Given a not-found mapping {{Coin#currency}} (from the testsuite), a query like {{from Coin c where c.currency.id = 1}} will result in a SQL query with a join and the predicate based on the Currency’s id column.  

But it is sometimes useful to be able to refer explicitly to the foreign-key key-side.  To allow for this, add a {{fk(...)}} “function” to SQM

E.g. {{from Coin c where fk(c.currency) = 1}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-14T01:59:36.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104ycg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Getting the CacheRegionStatistics before executing a query leads to a NPE later on,HHH-15105,72021,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Vlad Mihalcea,557058:f5e8c0d3-3aae-4bb4-a4e1-25463d60d232,Vlad Mihalcea,557058:f5e8c0d3-3aae-4bb4-a4e1-25463d60d232,03/mars/2022 10:33 AM,09/mars/2022 03:10 AM,14/mars/2022 12:54 PM,09/mars/2022 03:10 AM,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.next,,,,,,,,hibernate-core,,,,0,,,,,,"Consider the following test case:

{noformat}EntityManager entityManager = entityManagerFactory.createEntityManager();
entityManager.getTransaction().begin();

CacheRegionStatistics cacheRegionStatistics = entityManagerFactory   .unwrap(SessionFactoryImplementor.class)
   .getStatistics()
   .getQueryRegionStatistics(""default-query-results-region"");

entityManager.createQuery(
   ""select pc "" +
   ""from PostComment pc "" +
   ""order by pc.post.id desc"", PostComment.class)
   .setMaxResults(10)
   .setHint(QueryHints.HINT_CACHEABLE, true)
   .getResultList();

entityManager.getTransaction().commit();
entityManager.close();{noformat}

When executing it, we get this issue:

{noformat}java.lang.NullPointerException: Cannot invoke ""org.hibernate.stat.internal.CacheRegionStatisticsImpl.incrementMissCount()"" because the return value of ""org.hibernate.stat.internal.StatisticsImpl.getQueryRegionStats(String)"" is null{noformat}

This is what causes the problem.

When calling the {{getQueryRegionStatistics}}, this is what is being fetched:

{{l2CacheStatsMap.getOrCompute( regionName, this::computeQueryRegionStatistics );}}

And, the {{computeQueryRegionStatistics}} will be called and will cache a value of {{null}} because the region is not available yet:

{{final QueryResultsCache regionAccess = cache.getQueryResultsCacheStrictly( regionName );}}

Returns {{null}} at this point.

That region is built upon executing the query later on.

What I saw that worked was something like this:

{noformat}SessionFactory sessionFactory = sessionFactory();
Statistics statistics = sessionFactory.getStatistics();
CacheRegionStatisticsImpl stats = ReflectionUtils.invokeMethod(statistics, ""getQueryRegionStats"", ""default-query-results-region"");{noformat}

Executing this before calling {{getQueryRegionStatistics(""default-query-results-region"")}} fixed the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,03/mars/2022 10:33 AM;mih_vlad;hibernate-orm-56-query-stats.zip;https://hibernate.atlassian.net/secure/attachment/49974/hibernate-orm-56-query-stats.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-09T03:10:15.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,christian.beikov(christian.beikov),mih_vlad(mih_vlad),,,,,,,,0|104yc8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fluent definition of composite projections,HSEARCH-4498,72020,,Nouvelle fonctionnalité,Pull Request Sent,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/mars/2022 02:10 AM,04/mars/2022 08:39 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,engine,,,,0,,,,,,"Currently, projections are always defined in one step:

{noformat}List<MyPair<String, Genre>> hits = searchSession.search( Book.class )
        .select( f -> f.composite( 
                MyPair::new, 
                f.field( ""title"", String.class ), 
                f.field( ""genre"", Genre.class ) ) )
        .where( f -> f.matchAll() )
        .fetchHits( 20 ); {noformat}

This has the disadvantage of exposing all variations of composite projections as many methods directly on the {{SearchProjectionFactory}}.

This means the feature cannot easily be reused for a specialized type of projections, for example the “nested” projection from [https://hibernate.atlassian.net/browse/HSEARCH-3943|https://hibernate.atlassian.net/browse/HSEARCH-3943|smart-link] .

Let’s introduce a more “fluent” API to define composite projections:

{noformat}List<MyPair<String, Genre>> hits = searchSession.search( Book.class )
        .select( f -> f.composite()
                .add( f.field( ""title"", String.class ) )
                .add( f.field( ""genre"", Genre.class ) )
                .transform( MyPair::new ) ) )
        .where( f -> f.matchAll() )
        .fetchHits( 20 ); {noformat}

This syntax have the advantage of making the transformations “discoverable”: you add as many components as you need, and then you can type {{.}} and use IDE auto-completion to discover what you can do with these components (i.e. {{.asList()}}, or {{.transform(Function}}, or {{.transform(BiFunction)}}, depending on the number of components).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-04T08:39:34.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-1800,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2921,0|104xn3:zy,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,En cours,,
Run tests against Elasticsearch 8.0.1,HSEARCH-4497,72019,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/mars/2022 00:14 AM,03/mars/2022 00:15 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|102zq4:,,,,,,HSEARCH - 2022-06,,,,,,,,,,,,,,,,,,,,,,,,,,,03/mars/2022 00:15 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Currently blocked by [https://github.com/elastic/elasticsearch/issues/84601|https://github.com/elastic/elasticsearch/issues/84601|smart-link] ,,,,,,,,,,,,,,,,A faire,,
"Consolidate CurrentTimestamp, UpdateTimestamp and CreationTimestamp with Generated annotation",HHH-15104,72018,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,02/mars/2022 08:37 AM,02/mars/2022 08:37 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,We have multiple annotations that allow controlling when/how timestamps should be generated. We should consolidate that into a single or two annotations.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104yc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"SequenceGenerator on MapperSuperClass is not picked up, unless the annotation is used at field level",HHH-15103,72017,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Jonas Tänzer,6151c6db64ff010071e6a367,Jonas Tänzer,6151c6db64ff010071e6a367,02/mars/2022 08:04 AM,02/mars/2022 08:04 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"I have the following configuration, where I'm using a shared sequence between 2 classes that are identical besides the table used. While Hibernate does support using the same generator with 2 sequences, this isn't in the JPA spec and I wanted to implemented this following the spec.


{code:java}
@MappedSuperclass
@SequenceGenerator(name = ""SEQ_SHARED"", sequenceName = ""shared_sequence"", allocationSize = 1)
public class SuperEntityType {

    @Id
    @Column(name = ""id"", nullable = false)
    @GeneratedValue(generator = ""SEQ_SHARED"")
    private Long id;
{code}

Two classes inherit from this. When trying to write the classes, I'm met with the exception that ""relation SEQ_SHARED does not exist"" as an SQL error by Postgres.

Inheriting classes are as follows:

{code:java}
@Entity
@Table(name = ""sub_entity_type"")
public class SubEntityType extends SuperEntityType {

}
{code}

Moving the SequenceGenerator annotation to the field id, instead of class level solves that problem. I'm not sure what exactly causes this - I suppose the annotation isn't being picked up by reflection. 
Overall, this isn't a big problem. I just wanted to notify you in case it's a symptom of something bigger.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:326aefa9-3b39-47c7-9519-f3cb78afa971(ug:326aefa9-3b39-47c7-9519-f3cb78afa971),,,,,,,,,0|104ybs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Processing of annotation recognition in BasicFormatterImpl,HHH-15102,72016,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,규형남,5e7d47a58f31f90c2f0ede5c,규형남,5e7d47a58f31f90c2f0ede5c,규형남,5e7d47a58f31f90c2f0ede5c,02/mars/2022 06:12 AM,03/mars/2022 10:32 AM,14/mars/2022 10:59 AM,,5.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"In the process of formatting the default SQL statement in the BasicFormatterImpl class, the recognition of SQL statements affects the line when inserting annotations --.

Example)


{code:sql}/* VoucherIssueTotalMapper.xml, list3 */SELECT
        *  
    FROM
        (  SELECT
            COUNT(*) OVER () AS RN_MAX,
            a.*    
        FROM
            (          SELECT
                ROW_NUMBER() OVER(
            ORDER BY
                a.USE_DATE DESC NULLS FIRST) AS listNum        ,
                a.STTUS sttusName        ,
                TO_CHAR(a.USE_DATE,
                'YYYY-MM-DD HH24:MI:SS') occurDate        ,
                a.USE_IDX issueIdx        ,
                a.AFFILIATE_CODE affiliateCode        ,
                d.AFFILIATE_NAME affiliateName        ,
                d.EXCCLC_TYPE excclcType        ,
                CASE 
                    WHEN d.EXCCLC_TYPE = '1' THEN '발행' 
                    ELSE '사용' 
                END excclcTypeName        ,
                a.BNDUNT_TYPE bnduntType        ,
                (SELECT
                    CODE_NAME 
                FROM
                    VW_CODE x 
                WHERE
                    x.MST_ID = 'bnduntType' 
                    AND x.CODE = a.BNDUNT_TYPE) bnduntTypeName        ,
                a.BNDUNT_CODE bnduntCode        ,
                (SELECT
                    CODE_NAME 
                FROM
                    VW_CODE x 
                WHERE
                    x.MST_ID = 'bnduntCode' 
                    AND x.CODE = a.BNDUNT_CODE) bnduntCodeName        ,
                a.VOUCHER_CODE voucherCode        ,
                e.VOUCHER_NAME voucherName        ,
                f.EVENT_NAME eventName        ,
                a.USE_IDX approvalNo        ,
                f.VOUCHER_PRICE voucherPrice        ,
                a.BARCODE_NO barcodeNo        ,
                UF_DECRYPT(f.RECV_NO) recvNo        ,
                a.BEFORE_BALANCE beforeBalance        ,
                a.STTUS sttus        ,
                CASE 
                    WHEN a.BNDUNT_TYPE = 'BP0000' 
                    AND a.BNDUNT_CODE = 'BP0101' THEN NVL(PDT.ITEM_CNT,
                    1) 
                    ELSE 1 
                END * (case 
                    when a.sttus = '50' 
                    or a.sttus = '60' then a.USE_PRICE 
                    else -a.USE_PRICE 
                end) usePrice        ,
                a.AFTER_BALANCE afterBalance        ,
                NVL(c.ORDER_NO,
                b.ORDER_NO) orderNo                       ,
                x.CHAINSTORE_NAME AS useStoreName        ,
                a.STORE_CODE useStoreCode        ,
                f.ISSUE_TYPE issueType        ,
                (SELECT
                    CODE_NAME 
                FROM
                    CODE_DETAIL x 
                WHERE
                    f.ISSUE_TYPE = x.CODE 
                    AND x.MST_CODE = 'ISSUE_TYPE') issueTypeName        ,
                CASE 
                    WHEN a.FIRST_CNT > 0 THEN 'Y' 
                    ELSE 'N' 
                END firstYn        ,
                PDT.PLUCD1 AS plucd1                       ,
                PDT.ITEM_NM AS itemNm                       --,f.VOUCHER_PRICE AS hyhnMaega                       
				,(CASE 
                    WHEN a.BNDUNT_CODE IN ('TP2000',
                    'TP2100',
                    'TP2200',
                    'TP2300') THEN (CASE 
                        WHEN vpp.VAL_TYPE='1' THEN f.VOUCHER_PRICE - vpp.VAL 
                        ELSE f.VOUCHER_PRICE - (f.VOUCHER_PRICE * vpp.VAL/100) 
                    END) 
                    ELSE f.VOUCHER_PRICE 
                END) AS hyhnMaega                       ,
                f.FIRST_YN             ,
                c.FIRST_CNT firstCnt        ,
                (SELECT
                    AFFILIATE_NAME 
                FROM
                    AFFILIATE 
                WHERE
                    AFFILIATE_CODE = a.USE_AFFILIATE_CODE) AS useAffiliateCode              ,
                a.FIRST_CNT firstUseCnt        ,
                substr(f.barcode_no,
                0,
                3) preFix            
            FROM
                (                  SELECT
                    *                    
                FROM
                    VOUCHER_USE_LIST a                                     
                WHERE
                    1=1                  
                    AND a.STTUS IN (
                        '50', '51', '95', '60', '90'
                    )                            
                    AND a.AFFILIATE_CODE IN (
                        SELECT
                            AFFILIATE_CODE 
                        FROM
                            AFFILIATE 
                        WHERE
                            AFFILIATE_CODE =  :1  
                            OR UPPER_AFFILIATE_CODE = :2 
                    )                                                                                                    
                ) a                     
            JOIN
                ISSUE_DTL c 
                    on a.BARCODE_NO     = c.BARCODE_NO                 
            JOIN
                ISSUE_MST b 
                    on b.ISSUE_IDX      = c.ISSUE_IDX 
                    AND b.STTUS='40'                               
            JOIN
                AFFILIATE d 
                    on a.AFFILIATE_CODE = d.AFFILIATE_CODE                 
            JOIN
                VOUCHER e 
                    on a.VOUCHER_CODE   = e.VOUCHER_CODE                 
            JOIN
                PIN_NUMBER f 
                    on a.BARCODE_NO     = f.BARCODE_NO                 
            LEFT                  JOIN
                (
                    SELECT
                        A.USE_IDX,
                        MAX(B.PLUCD1) AS PLUCD1             ,
                        MAX(B.ITEM_NM) AS ITEM_NM             ,
                        A.BARCODE_NO              ,
                        MAX(B.HYUN_MAEGA) AS HYUN_MAEGA              ,
                        SUM(B.ITEM_CNT) AS ITEM_CNT          
                    FROM
                        VOUCHER_USE_LIST A,
                        (           SELECT
                            BARCODE_NO                  ,
                            USE_IDX,
                            PLUCD1                  ,
                            ITEM_NM                   ,
                            HYUN_MAEGA                   ,
                            ITEM_CNT                   
                        FROM
                            VOUCHER_USE_PRODUCT                   
                        GROUP BY
                            BARCODE_NO,
                            USE_IDX,
                            PLUCD1,
                            ITEM_NM ,
                            HYUN_MAEGA ,
                            ITEM_CNT          ) B,
                        VOUCHER_PRODUCT C            
                    WHERE
                        A.BARCODE_NO = B.BARCODE_NO               
                        AND A.USE_IDX = B.USE_IDX               
                        AND B.PLUCD1 = C.PLUCD1               
                        AND A.VOUCHER_CODE = C.VOUCHER_CODE                            
                    GROUP BY
                        A.USE_IDX,
                        A.BARCODE_NO       ) PDT 
                            ON (PDT.USE_IDX = CASE 
                                WHEN a.STTUS = 51 THEN a.CANCL_USE_IDX 
                                ELSE a.USE_IDX 
                            END 
                            AND a.BARCODE_NO = PDT.BARCODE_NO)            
                    LEFT JOIN
                        CHAINSTORE x 
                            ON a.STORE_CODE = x.CHAINSTORE_CODE                        
                    LEFT OUTER JOIN
                        VOUCHER_PRICE_POLICY vpp 
                            ON vpp.VOUCHER_CODE = a.VOUCHER_CODE           
                    WHERE
                        1=1             
                        AND d.AFFILIATE_TYPE = :3                        
                        AND d.AFFILIATE_NAME LIKE '%'||:4 ||'%'                                                              
                        AND b.STTUS   = 40                                                                    
                        AND b.ISSUE_DATE BETWEEN TO_DATE(:5 ||'000000','YYYY-MM-DDHH24MISS') AND TO_DATE(:6 ||'235959','YYYY-MM-DDHH24MISS')                                            
                ) a       
            ) a{code}

after FormatProcess 



{code:sql}/* VoucherIssueTotalMapper.xml, list3 */SELECT
        *  
    FROM
        (  SELECT
            COUNT(*) OVER () AS RN_MAX,
            a.*    
        FROM
            (          SELECT
                ROW_NUMBER() OVER(
            ORDER BY
                a.USE_DATE DESC NULLS FIRST) AS listNum        ,
                a.STTUS sttusName        ,
                TO_CHAR(a.USE_DATE,
                'YYYY-MM-DD HH24:MI:SS') occurDate        ,
                a.USE_IDX issueIdx        ,
                a.AFFILIATE_CODE affiliateCode        ,
                d.AFFILIATE_NAME affiliateName        ,
                d.EXCCLC_TYPE excclcType        ,
                CASE 
                    WHEN d.EXCCLC_TYPE = '1' THEN '발행' 
                    ELSE '사용' 
                END excclcTypeName        ,
                a.BNDUNT_TYPE bnduntType        ,
                (SELECT
                    CODE_NAME 
                FROM
                    VW_CODE x 
                WHERE
                    x.MST_ID = 'bnduntType' 
                    AND x.CODE = a.BNDUNT_TYPE) bnduntTypeName        ,
                a.BNDUNT_CODE bnduntCode        ,
                (SELECT
                    CODE_NAME 
                FROM
                    VW_CODE x 
                WHERE
                    x.MST_ID = 'bnduntCode' 
                    AND x.CODE = a.BNDUNT_CODE) bnduntCodeName        ,
                a.VOUCHER_CODE voucherCode        ,
                e.VOUCHER_NAME voucherName        ,
                f.EVENT_NAME eventName        ,
                a.USE_IDX approvalNo        ,
                f.VOUCHER_PRICE voucherPrice        ,
                a.BARCODE_NO barcodeNo        ,
                UF_DECRYPT(f.RECV_NO) recvNo        ,
                a.BEFORE_BALANCE beforeBalance        ,
                a.STTUS sttus        ,
                CASE 
                    WHEN a.BNDUNT_TYPE = 'BP0000' 
                    AND a.BNDUNT_CODE = 'BP0101' THEN NVL(PDT.ITEM_CNT,
                    1) 
                    ELSE 1 
                END * (case 
                    when a.sttus = '50' 
                    or a.sttus = '60' then a.USE_PRICE 
                    else -a.USE_PRICE 
                end) usePrice        ,
                a.AFTER_BALANCE afterBalance        ,
                NVL(c.ORDER_NO,
                b.ORDER_NO) orderNo                       ,
                x.CHAINSTORE_NAME AS useStoreName        ,
                a.STORE_CODE useStoreCode        ,
                f.ISSUE_TYPE issueType        ,
                (SELECT
                    CODE_NAME 
                FROM
                    CODE_DETAIL x 
                WHERE
                    f.ISSUE_TYPE = x.CODE 
                    AND x.MST_CODE = 'ISSUE_TYPE') issueTypeName        ,
                CASE 
                    WHEN a.FIRST_CNT > 0 THEN 'Y' 
                    ELSE 'N' 
                END firstYn        ,
                PDT.PLUCD1 AS plucd1                       ,
                PDT.ITEM_NM AS itemNm                       --,
                f.VOUCHER_PRICE AS hyhnMaega                       ,
                (CASE 
                    WHEN a.BNDUNT_CODE IN ('TP2000',
                    'TP2100',
                    'TP2200',
                    'TP2300') THEN (CASE 
                        WHEN vpp.VAL_TYPE='1' THEN f.VOUCHER_PRICE - vpp.VAL 
                        ELSE f.VOUCHER_PRICE - (f.VOUCHER_PRICE * vpp.VAL/100) 
                    END) 
                    ELSE f.VOUCHER_PRICE 
                END) AS hyhnMaega                       ,
                f.FIRST_YN             ,
                c.FIRST_CNT firstCnt        ,
                (SELECT
                    AFFILIATE_NAME 
                FROM
                    AFFILIATE 
                WHERE
                    AFFILIATE_CODE = a.USE_AFFILIATE_CODE) AS useAffiliateCode              ,
                a.FIRST_CNT firstUseCnt        ,
                substr(f.barcode_no,
                0,
                3) preFix            
            FROM
                (                  SELECT
                    *                    
                FROM
                    VOUCHER_USE_LIST a                                     
                WHERE
                    1=1                  
                    AND a.STTUS IN (
                        '50', '51', '95', '60', '90'
                    )                            
                    AND a.AFFILIATE_CODE IN (
                        SELECT
                            AFFILIATE_CODE 
                        FROM
                            AFFILIATE 
                        WHERE
                            AFFILIATE_CODE =  :1  
                            OR UPPER_AFFILIATE_CODE = :2 
                    )                                                                                                    
                ) a                     
            JOIN
                ISSUE_DTL c 
                    on a.BARCODE_NO     = c.BARCODE_NO                 
            JOIN
                ISSUE_MST b 
                    on b.ISSUE_IDX      = c.ISSUE_IDX 
                    AND b.STTUS='40'                               
            JOIN
                AFFILIATE d 
                    on a.AFFILIATE_CODE = d.AFFILIATE_CODE                 
            JOIN
                VOUCHER e 
                    on a.VOUCHER_CODE   = e.VOUCHER_CODE                 
            JOIN
                PIN_NUMBER f 
                    on a.BARCODE_NO     = f.BARCODE_NO                 
            LEFT                  JOIN
                (
                    SELECT
                        A.USE_IDX,
                        MAX(B.PLUCD1) AS PLUCD1             ,
                        MAX(B.ITEM_NM) AS ITEM_NM             ,
                        A.BARCODE_NO              ,
                        MAX(B.HYUN_MAEGA) AS HYUN_MAEGA              ,
                        SUM(B.ITEM_CNT) AS ITEM_CNT          
                    FROM
                        VOUCHER_USE_LIST A,
                        (           SELECT
                            BARCODE_NO                  ,
                            USE_IDX,
                            PLUCD1                  ,
                            ITEM_NM                   ,
                            HYUN_MAEGA                   ,
                            ITEM_CNT                   
                        FROM
                            VOUCHER_USE_PRODUCT                   
                        GROUP BY
                            BARCODE_NO,
                            USE_IDX,
                            PLUCD1,
                            ITEM_NM ,
                            HYUN_MAEGA ,
                            ITEM_CNT          ) B,
                        VOUCHER_PRODUCT C            
                    WHERE
                        A.BARCODE_NO = B.BARCODE_NO               
                        AND A.USE_IDX = B.USE_IDX               
                        AND B.PLUCD1 = C.PLUCD1               
                        AND A.VOUCHER_CODE = C.VOUCHER_CODE                            
                    GROUP BY
                        A.USE_IDX,
                        A.BARCODE_NO       ) PDT 
                            ON (PDT.USE_IDX = CASE 
                                WHEN a.STTUS = 51 THEN a.CANCL_USE_IDX 
                                ELSE a.USE_IDX 
                            END 
                            AND a.BARCODE_NO = PDT.BARCODE_NO)            
                    LEFT JOIN
                        CHAINSTORE x 
                            ON a.STORE_CODE = x.CHAINSTORE_CODE                        
                    LEFT OUTER JOIN
                        VOUCHER_PRICE_POLICY vpp 
                            ON vpp.VOUCHER_CODE = a.VOUCHER_CODE           
                    WHERE
                        1=1             
                        AND d.AFFILIATE_TYPE = :3                        
                        AND d.AFFILIATE_NAME LIKE '%'||:4 ||'%'                                                              
                        AND b.STTUS   = 40                                                                    
                        AND b.ISSUE_DATE BETWEEN TO_DATE(:5 ||'000000','YYYY-MM-DDHH24MISS') AND TO_DATE(:6 ||'235959','YYYY-MM-DDHH24MISS')                                            
                ) a       
            ) a{code}",Hibernate ORM 5.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-04T03:09:47.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,02/mars/2022 00:00 AM,,,,true,0.0,ug:2d8470a4-d239-4b98-a7ea-178fd9c15999(ug:2d8470a4-d239-4b98-a7ea-178fd9c15999),,,,,,,,,0|104ybk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Elasticsearch client 8.0.1,HSEARCH-4496,72011,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/mars/2022 03:12 AM,03/mars/2022 02:20 AM,14/mars/2022 12:54 PM,03/mars/2022 02:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-03T02:19:43.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2919,0|104xn3:zx,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Schema creation for UUID identifiers broken on H2 2.0,HHH-15101,72007,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,jschauder,61eece935a0988006b20848f,jschauder,61eece935a0988006b20848f,01/mars/2022 22:49 PM,08/mars/2022 08:45 AM,14/mars/2022 12:54 PM,08/mars/2022 08:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,,,,,,"Entities with identifiers of type {{UUID}} work on H2 1.4.200 but fail on 2.0.202 if Hibernate is tasked to create the schema for the model. Data can be persisted but neither JPA lookups, nor finder or delete queries by identifier work.

A difference I can spot in the logs is that for 1.4.200 the table is created as follows:

{noformat}create table MyOrder (id binary not null, primary key (id)){noformat}

while it looks like this on 2.0.202:

{noformat}create table MyOrder (id binary(255) not null, primary key (id)){noformat}

I’m wildly guessing that due to the dedicated length specified for 2.0 the parameter value would have to be padded to actually let the query match? Does it make sense to rather restrict the columns to a length more appropriate for UUIDs?



A reproducer is here: [https://github.com/odrotbohm/hibernate-bugs/tree/main/uuid-h2-2|https://github.com/odrotbohm/hibernate-bugs/tree/main/uuid-h2-2|smart-link] ",H2 2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:21ab730b-b175-415d-aa01-f7e8c15b0409(ug:21ab730b-b175-415d-aa01-f7e8c15b0409),,,,,,,,0|104y9s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-03-08 16:45:46.34,,,,"08/mars/2022 08:45 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;This has nothing to do with H2 specifically, but is mostly about the fact that we chose to use the parameterized column type {{binary($l)}} for H2 2.0+. You could have run into the same issue with e.g. MySQL as well. The solution for 5.x is to define a proper length i.e. 16 for binary.",,,,,,,,,,,,,,,,Terminé,,
Limitation of metamodel imports cache causes severe performance drops in large projects,HHH-15100,72006,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Bernd Meisel,6214f10bba649b006aac4140,Bernd Meisel,6214f10bba649b006aac4140,01/mars/2022 10:03 AM,01/mars/2022 10:04 AM,14/mars/2022 12:54 PM,,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"[https://hibernate.atlassian.net/browse/HHH-14948|https://hibernate.atlassian.net/browse/HHH-14948|smart-link] introduces an unconfigurable, hard limitation of the metamodel imports cache to 1000 entries for the purpose of avoiding an OOM in environments using dynamically generated aliases in HQL queries.

Unfortunately this causes severe performance drops in large projects containing much more than 1000 persistent classes and query aliases and also a large amount of classes in the classpath.

In our project (a large spring boot application using hibernate 5.6.4) we already have about 1800 persistent classes contained in the imports cache after metamodel initialization, so every alias contained in a HQL-Query results in a call of ClassLoaderService::classForName() for a string never representing an existing class, which is very expensive and takes multiple seconds to return (with a ClassLoadingException).

This lead to severe performance issues in many places of our application, so we were forced to overcome the limitation of the imports cache. Unfortunately the limitation is implemented by a hardcoded literal (“1_000”),  so we had no chance other than to temporarily fork our private hibernate version and remove the limitation completely.

We therefore urgently suggest the introduction of a configuration parameter instead of the hardcoded literal, so that it is possible to increase or remove the limit of the imports cache, depending on the requirements of the individual application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:30f26b6a-ff7e-4b71-8ee8-6da5257729d6(ug:30f26b6a-ff7e-4b71-8ee8-6da5257729d6),,,,,,,,,0|104y9k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Improve handling of associations marked with @NotFound,HHH-15099,72005,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,01/mars/2022 09:22 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,08/mars/2022 07:03 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,HHH-15060,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-14T01:59:36.000-0700"",""stateCount"":2,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104y9c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Disable JDK 19 testing on older branches,HSEARCH-4495,72003,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/mars/2022 06:51 AM,02/mars/2022 06:47 AM,14/mars/2022 12:54 PM,02/mars/2022 06:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.2.Final,,,,,,,,,build,,,,0,,,,,,"We’re testing against JDK 19 on Hibernate Search 6.2, that’s enough.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-01T06:52:04.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104xn3:zv,,,,,,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
suboptimal/incorrect behavior when updating managed oneToMany collection on entity with naturalId,HHH-15098,72002,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,martin mucha,70121:a3a43104-0780-44ed-bfe4-2f9e53bc2ff7,martin mucha,70121:a3a43104-0780-44ed-bfe4-2f9e53bc2ff7,01/mars/2022 05:48 AM,10/mars/2022 05:38 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"It's 2 different problems, minimalistic example referenced at the end.

Having entity with natural ID, which associates N entities. Those one has composite, natural ID. The issue was found via SpringData SimpleJpaRepository, which calls persist/merge based on what ID entity has and what state it is, which should explain why I'm kinda trying to use merge incorrectly. But that's not important, this should work. Whole scenario happens within 1 tx, where we perform:

1. create entity with naturalID and single associated entity
2. persist/merge
3. remove item from collection of associated entities (or call clear on managed collection).
4. add item into collection of associated entities
5. tx commit.

notes: no call to flush is used, all happens in single opened tx. All entities managed state is what I'd expect it to be: ie. not managed before persist/merge, managed after. Both cascade and orphanRemoval is specified, collection instances are not somehow replaced during this process, which could make hibernate unaware of changes on them. Well .... as far as I understand.

Problem 1: if I use `persist` in step 2, to bring entity into persistence context, root entity and non-removed associated entity will be in DB after commit. The problem with persist is, that first associated entity is first added, and then removed, creating unnecessary delete operation. But at least the result is OK.

Problem 2: if I use merge instead of persist to bring entity into persistence context, the deleted entity is persisted, and the whole flow behaves differently. If persist is used, the DefaultDeleteEventListener is hit when trying to remove the item from managed collection. If merge is used, it's not, and removed entity is stored into db.

another attempt to describe/discuss it: https://stackoverflow.com/questions/71271201/orphanremoval-does-not-work-for-entities-with-naturalid-persisted-via-springdata

minimal working sample: https://github.com/alfonz19/orphan-removal-test/tree/justMergeFlow
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,bdshadow(bdshadow),ug:0ceec36d-8f56-4dd2-8676-e72919ac4df6(ug:0ceec36d-8f56-4dd2-8676-e72919ac4df6),,,,,,,,0|104y8w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-03-10 13:38:26.59,,,,"10/mars/2022 05:38 AM;557058:79c0789b-779d-44f3-8dcc-1dea16c0b5c2;I have created the test replicating this problem right in the hibernate-orm project, by modifying existing test: [https://github.com/bdshadow/hibernate-orm/commit/24ecaa7b0aa7e3244995a1032564c41ac204d1cb#diff-6f3e0efaf5f17e0d2d1375e5a58501fc0c4215f88e52f33908641c907908423fR72|https://github.com/bdshadow/hibernate-orm/commit/24ecaa7b0aa7e3244995a1032564c41ac204d1cb#diff-6f3e0efaf5f17e0d2d1375e5a58501fc0c4215f88e52f33908641c907908423fR72|smart-link] 

Hopefully, it will be easier for investigation.",,,,,,,,,,,,,,,,A faire,,
Hibernate fails to detect SQL type for AttributeConverter to UUID,HHH-15097,72001,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,jschauder,61eece935a0988006b20848f,jschauder,61eece935a0988006b20848f,28/févr./2022 22:58 PM,08/mars/2022 13:01 PM,14/mars/2022 12:54 PM,08/mars/2022 13:01 PM,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,,,,,,,,,,,,,2,,,,,,"Hibernate persists an entity looking like this just fine:

{noformat}@Entity
class User {
  private @GeneratedValue @Id Long id;
  private UUID uuid;
}{noformat}

In other words, {{UUID}} is a type supported basic for fields. That said, if you register a JPA {{AttributeConverter<SomeValue, UUID}}> and change the entity to:

{noformat}@Entity
class User {
  private @GeneratedValue @Id Long id;
  private SomeValue wrapper;
}{noformat}

The bootstrap of Hibernate fails with:

{noformat}  …
Caused by: org.hibernate.MappingException: No Dialect mapping for JDBC type: 370370379
  at org.hibernate.dialect.TypeNames.get(TypeNames.java:71)
  at org.hibernate.dialect.TypeNames.get(TypeNames.java:103)
  at org.hibernate.dialect.Dialect.getTypeName(Dialect.java:404)
  at org.hibernate.mapping.Column.getSqlType(Column.java:238)
  at org.hibernate.tool.schema.internal.StandardTableExporter.getSqlCreateStrings(StandardTableExporter.java:91)
  at org.hibernate.tool.schema.internal.StandardTableExporter.getSqlCreateStrings(StandardTableExporter.java:30)
  at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.createTable(AbstractSchemaMigrator.java:295)
  at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:74)
  at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:220)
  at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:123)
  at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:192)
  at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:81)
  at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
  at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
  at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
  ... 31 more{noformat}

It looks like it is trying to determine the SQL type to be used solely from the registered SQL types, while the plain property type analysis takes the database dialects into account earlier.

Reproducer: [https://github.com/odrotbohm/hibernate-bugs/tree/main/ac-to-uuid|https://github.com/odrotbohm/hibernate-bugs/tree/main/ac-to-uuid|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T13:00:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:21ab730b-b175-415d-aa01-f7e8c15b0409(ug:21ab730b-b175-415d-aa01-f7e8c15b0409),,,,,,,,0|104y8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Hibernate throwing TransactionException instead of LockAcquisitionException for serialization error on Postgres,HHH-15096,72000,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Daniel Pelaez Lopez,602d7a9700636b006f928b64,Daniel Pelaez Lopez,602d7a9700636b006f928b64,28/févr./2022 07:21 AM,28/févr./2022 07:21 AM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I am trying to trace an error regarding the Serialization Isolation level in a transaction.

Hibernate throwing *TransactionException* instead of *LockAcquisitionException* for serialization error on Postgres, as you can see in the following stacktrace (this is an integration with Spring Data JPA, I apologize not having an isolated Hibernate test for this):



{noformat}Caused by: org.springframework.dao.CannotAcquireLockException: Failed to lock mutex at 19414b49-c76b-3b77-a05d-3aca07a855aa; nested exception is org.springframework.orm.jpa.JpaSystemException: Unable to commit against JDBC Connection; nested exception is org.hibernate.TransactionException: Unable to commit against JDBC Connection
	at org.springframework.integration.jdbc.lock.JdbcLockRegistry$JdbcLock.rethrowAsLockException(JdbcLockRegistry.java:197)
	at org.springframework.integration.jdbc.lock.JdbcLockRegistry$JdbcLock.tryLock(JdbcLockRegistry.java:262)
	at com.geniussports.geniuslive.ingressmanager.domain.pipeline.ingress.IngressPipelineService.create(IngressPipelineService.kt:35)
	at com.geniussports.geniuslive.ingressmanager.application.adapters.pipeline.ingress.gateway.graphql.PipelineMutationResolver.createFromJSON(PipelineMutationResolver.kt:51)
	at jdk.internal.reflect.GeneratedMethodAccessor254.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:282)
	at com.netflix.graphql.dgs.internal.DgsSchemaProvider.invokeDataFetcher(DgsSchemaProvider.kt:402)
	at com.netflix.graphql.dgs.internal.DgsSchemaProvider.access$invokeDataFetcher(DgsSchemaProvider.kt:64)
	at com.netflix.graphql.dgs.internal.DgsSchemaProvider$createBasicDataFetcher$1.get(DgsSchemaProvider.kt:279)
	at com.netflix.graphql.dgs.metrics.micrometer.DgsGraphQLMetricsInstrumentation$instrumentDataFetcher$1.get(DgsGraphQLMetricsInstrumentation.kt:101)
	at graphql.execution.instrumentation.dataloader.DataLoaderDispatcherInstrumentation.lambda$instrumentDataFetcher$0(DataLoaderDispatcherInstrumentation.java:86)
	at graphql.execution.ExecutionStrategy.fetchField(ExecutionStrategy.java:270)
	... 76 more
Caused by: org.springframework.orm.jpa.JpaSystemException: Unable to commit against JDBC Connection; nested exception is org.hibernate.TransactionException: Unable to commit against JDBC Connection
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:331)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:233)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:566)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.cloud.sleuth.instrument.tx.TracePlatformTransactionManager.commit(TracePlatformTransactionManager.java:121)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at org.springframework.integration.jdbc.lock.DefaultLockRepository$$EnhancerBySpringCGLIB$$29ab5ce4.acquire(<generated>)
	at org.springframework.integration.jdbc.lock.JdbcLockRegistry$JdbcLock.doLock(JdbcLockRegistry.java:268)
	at org.springframework.integration.jdbc.lock.JdbcLockRegistry$JdbcLock.tryLock(JdbcLockRegistry.java:249)
	... 88 more
Caused by: org.hibernate.TransactionException: Unable to commit against JDBC Connection
			3 lines skipped for [org.hibernate]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562)
	... 100 more
Caused by: org.postgresql.util.PSQLException: ERROR: could not serialize access due to read/write dependencies among transactions
  Detail: Reason code: Canceled on identification as a pivot, during commit attempt.
  Hint: The transaction might succeed if retried.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2364)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:354)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:314)
	at org.postgresql.jdbc.PgConnection.executeTransactionCommand(PgConnection.java:853)
	at org.postgresql.jdbc.PgConnection.commit(PgConnection.java:875)
	at com.zaxxer.hikari.pool.ProxyConnection.commit(ProxyConnection.java:387)
	at com.zaxxer.hikari.pool.HikariProxyConnection.commit(HikariProxyConnection.java)
			1 line skipped for [org.hibernate]{noformat}



As you can see on the final part, HIbernate seems translating the Postgres error to *TransactionException* instead of *LockAcquisitionException*. Checking the Hibernate code, I see [this validation|https://github.com/hibernate/hibernate-orm/blob/5.6/hibernate-core/src/main/java/org/hibernate/exception/internal/SQLStateConversionDelegate.java#L119]:



{noformat}if ( ""40001"".equals( sqlState ) ) {
	return new LockAcquisitionException( message, sqlException, sql );
}{noformat}

As far as I know, 40001 is the right sql state for the Postgres serialization failure.

Is this a expected behavior?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3e634b88-fa2c-484a-823c-9e3018346eab(ug:3e634b88-fa2c-484a-823c-9e3018346eab),,,,,,,,,0|104y8g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add Intersystems IRIS as community dialect,HHH-15095,71998,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Alister Pino,621cc83b94f7e20069fcbd83,Alister Pino,621cc83b94f7e20069fcbd83,Alister Pino,621cc83b94f7e20069fcbd83,28/févr./2022 05:47 AM,28/févr./2022 05:52 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,dialect,,,,,Add InterSystems IRIS dialect as community dialect as described: [https://github.com/hibernate/hibernate-orm/blob/main/dialects.adoc#requirements-for-moving-to-hibernate-core|https://github.com/hibernate/hibernate-orm/blob/main/dialects.adoc#requirements-for-moving-to-hibernate-core|smart-link] .,,,,,,,,,,,,,,,,,,,HHH-14693,HHH-12597,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:00519577-4d6c-40c2-8fae-9959129fda83(ug:00519577-4d6c-40c2-8fae-9959129fda83),,,,,,,,,0|104y80:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix performance test failure caused by https://lists.jboss.org/pipermail/hibernate-dev/2016-January.txt not being available anymore,HSEARCH-4494,71997,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/févr./2022 05:20 AM,01/mars/2022 03:19 AM,14/mars/2022 12:54 PM,01/mars/2022 03:19 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.9.Final,6.1.2.Final,6.2.0.Alpha1,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2022-03-01T03:19:02.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2914,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzti,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Handle http://hibernate.org and https://* for all DTDs in LocalXmlResourceResolver,HHH-15094,71995,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/févr./2022 04:30 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,01/mars/2022 08:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.CR2,,,,,,,,hibernate-core,,,,0,,,,,,"See [https://discourse.hibernate.org/t/the-markup-declarations-contained-or-pointed-to-by-the-document-type-declaration-must-be-well-formed/6067/28?u=yrodiere|https://discourse.hibernate.org/t/the-markup-declarations-contained-or-pointed-to-by-the-document-type-declaration-must-be-well-formed/6067/28?u=yrodiere|smart-link]

Basically, when we parse a hibernate.cfg.xml or a hbm.xml and LocalXmlResourceResolver doesn’t handle a particular DTD URL, Xerces will try to download a DTD. Which can go wrong depending on the DTD URL because Xerces has some bugs related to HTTP redirection, in particular when redirecting from HTTP to HTTPS.

So… Let’s handle DTDs with the https:// scheme, and let’s support DTD URLs targeting {{http://hibernate.org}} or {{https://hibernate.org}} directly (instead of {{www.hibernate.org}}), so that [some workardounds we had to recommend|https://discourse.hibernate.org/t/the-markup-declarations-contained-or-pointed-to-by-the-document-type-declaration-must-be-well-formed/6067/28?u=yrodiere] will eventually behave correctly (without any DTD download).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-01T08:24:40.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4841,0|104y7k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/mars/2022 02:19 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;As it turns out, Hibernate ORM 6 already supports DTD URLs using https://. But that’s not the case in Hibernate ORM 5.x.",,,,,,,,,,,,,,,,Terminé,,
Definition of static fields on dynamic object field templates,HSEARCH-4493,71993,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/févr./2022 01:20 AM,28/févr./2022 01:21 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"In [https://hibernate.atlassian.net/browse/HSEARCH-4299|https://hibernate.atlassian.net/browse/HSEARCH-4299|smart-link], we consider supporting this mapping:

{noformat}@ObjectField
Map<String, @ObjectField MyEntity> myMap;{noformat}

To this Elasticsearch document:

{noformat}{
  ""myMap"": {
    ""key1"": {
      ""entityProperty1"": ""val1"",
      ""entityProperty2"": ""val2""
    },
    ""key2"": {
      ""entityProperty1"": ""val3"",
      ""entityProperty2"": ""val4""
    }
  }
}{noformat}

This is an interesting feature, but would require the ability to define a dynamic object field template (for {{key1}}, {{key2}}, etc.) and then define “static” fields on that object field template (for {{entityProperty1}}, {{entityProperty2}}, etc.). This is what this ticket is about.

Essentially we will need to be able to write code like this:

{noformat}IndexSchemaElement summaryField = context.indexSchemaElement() 
        .objectFieldTemplate( ""templateName"" );

IndexFieldType<BigDecimal> amountFieldType = // ... (unrelated)

IndexFieldReference<BigDecimal> totalField = summaryField.field( ""total"", amountFieldType ).toReference();
IndexFieldReference<BigDecimal> booksField = summaryField.field( ""books"", amountFieldType ).toReference(), 
IndexFieldReference<BigDecimal> shippingField = summaryField.field( ""shipping"", amountFieldType ).toReference();{noformat}

This means:

* {{objectFieldTemplate}}() must return a new interface extending {{IndexSchemaFieldTemplateOptionsStep}}, say {{IndexSchemaObjectFieldTemplateOptionsStep}}.
* {{IndexSchemaObjectFieldTemplateOptionsStep}} must extend {{IndexSchemaElement}}, or at least provide a {{toSchemaElement() }}method  to convert it to the {{IndexSchemaElement}} interface.
* Whenever we declare a (static) field on an object field template, that field must be registered accordingly in the backend.
* When we call {{toReference()}} on such static field definitions, the backend must return a field reference that will work for _any_ instance of the object field template.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104y74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Remove PojoGenericTypeModel and move its methods to PojoTypeModel,HSEARCH-4492,71992,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/févr./2022 09:55 AM,02/mars/2022 03:13 AM,14/mars/2022 12:54 PM,02/mars/2022 03:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Just a clean-up task. I originally had a reason to do it (for [https://hibernate.atlassian.net/browse/HSEARCH-4299|https://hibernate.atlassian.net/browse/HSEARCH-4299|smart-link] ), but I went with a different approach in the end, and no longer stricly need it.

It’s a nice clean-up, though, so we may as well merge it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-02T03:12:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2907,0|104xn3:zr,,,,,,HSEARCH - 2022-04,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
DenormalizedTable builds giant index names that don't work,HHH-15093,71991,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Stephen Buergler,557058:c6ba0682-cf23-435a-bd0e-b6618faed924,Stephen Buergler,557058:c6ba0682-cf23-435a-bd0e-b6618faed924,25/févr./2022 01:45 AM,25/févr./2022 01:45 AM,14/mars/2022 12:54 PM,,5.6.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,If you have a big table hierarchy DenormalizedTable can end up building giant index names since it recursively concatenates the table names to the index names. This later breaks when the database gets the big index name. In my case mysql doesn’t like the big identifier.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,sixcorners(sixcorners),,,,,,,,,0|104y6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate can't create table with column name 'value' in H2 2.1.210,HHH-15092,71990,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Knoop,557058:71cad09b-6b7e-4124-b15f-bbac517949e1,Christian Knoop,557058:71cad09b-6b7e-4124-b15f-bbac517949e1,25/févr./2022 00:41 AM,25/févr./2022 00:58 AM,14/mars/2022 12:54 PM,25/févr./2022 00:42 AM,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The following entity with a column named “value” can’t create a proper table since hibernate 5.6.5 and H2 2.x - the same table could be created with hibernate 5.6.4/5 and H2 1.x. 


{code:java}@Entity
@Table
public class TestEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Long id;

  @Column(name = ""value"", length = 500, nullable = false)
  private String value;
}{code}

Exception:


{noformat}org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""create table PUBLIC.TestEntity (id bigint not null, value varchar(500) not null, primary key (id))"" via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlString(SchemaCreatorImpl.java:458)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applySqlStrings(SchemaCreatorImpl.java:442)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.createFromMetadata(SchemaCreatorImpl.java:325)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:169)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:138)
	at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:124)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:164)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:81)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498){noformat}



{noformat}Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax Fehler in SQL Befehl ""create table PUBLIC.TestEntity (id bigint not null, [*]value varchar(500) not null, primary key (id))""; erwartet ""identifier""
Syntax error in SQL statement ""create table PUBLIC.TestEntity (id bigint not null, [*]value varchar(500) not null, primary key (id))""; expected ""identifier""; SQL statement:
create table PUBLIC.TestEntity (id bigint not null, value varchar(500) not null, primary key (id)) [42001-210]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:521)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:496)
	at org.h2.message.DbException.getSyntaxError(DbException.java:265)
	at org.h2.command.Parser.readIdentifier(Parser.java:5759)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:9355)
	at org.h2.command.Parser.parseCreateTable(Parser.java:9298)
	at org.h2.command.Parser.parseCreate(Parser.java:6779)
	at org.h2.command.Parser.parsePrepared(Parser.java:746)
	at org.h2.command.Parser.parse(Parser.java:674)
	at org.h2.command.Parser.parse(Parser.java:644)
	at org.h2.command.Parser.prepareCommand(Parser.java:551)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:615)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:553)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54){noformat}

A similar issue with the column name “value” had Spring Boot while updating to the latest H2 as well: [https://github.com/spring-projects/spring-boot/commit/8c8c9c5f28baef63dad6bdd8a4ebe3baa58e6ded#diff-b5ee684486222340437d16a3d4f585f7a7cf4ebceb0fecb0aed7ebaf33662c15L14|https://github.com/spring-projects/spring-boot/commit/8c8c9c5f28baef63dad6bdd8a4ebe3baa58e6ded#diff-b5ee684486222340437d16a3d4f585f7a7cf4ebceb0fecb0aed7ebaf33662c15L14|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:12eb7f48-37be-4332-9661-62adf43cfef3(ug:12eb7f48-37be-4332-9661-62adf43cfef3),,,,,,,,0|104y6o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-25 08:42:58.038,,,,25/févr./2022 00:42 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Not sure what you expect. H2 changed a lot in 2.0 and introduced new keywords. We were hit by this in the testsuite as well. You will have to quote the column name or change it.,25/févr./2022 00:47 AM;557058:71cad09b-6b7e-4124-b15f-bbac517949e1;Thanks for the prompt response\! I kinda expected this response - at least I wanted to mention the problem for other people to find.,"25/févr./2022 00:58 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Yeah it’s an annoying change in the new H2 version, but unfortunately we can’t do anything about that 😕 ",,,,,,,,,,,,,,Terminé,,
"EntityManager.persist does not verify the existence of the one side of a many-to-one relationship, introduced 5.4.17",HHH-15091,71989,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,David Moten,557058:4d654796-81ec-4fe1-b1c2-be13341fd4a5,David Moten,557058:4d654796-81ec-4fe1-b1c2-be13341fd4a5,24/févr./2022 17:07 PM,24/févr./2022 17:07 PM,14/mars/2022 12:54 PM,,5.4.17,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"I have a Lazy ManyToOne relationship defined on class B to class A. When I create a B and persist it without specifying the A side I expect to see this exception:

{noformat}javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : one_to_many.B.a_R1
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)
	at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)
	at one_to_many.B.persist(B.java:397)
	at xuml.tools.jaxb.compiler.test.BinaryAssociationOneToManyTest.testCannotCreateBWithoutA(BinaryAssociationOneToManyTest.java:50){noformat}



This worked as expected until 5.4.17 with which no exception was thrown. The problem occurs also in 5.4.18, 5.4.22, 5.4.31, 5.5.8, 5.6.5 (the results of my binary search through the versions to isolate when it was introduced).

Here’s my A:

{noformat}   /**
     * ONE A characterizes MANY B
     */
    @OneToMany(mappedBy=""a_R1"", cascade={CascadeType.MERGE,CascadeType.REFRESH,CascadeType.REMOVE}, fetch=FetchType.LAZY, targetEntity=B.class)
    private Set<B> b_R1 = Sets.newHashSet();
    
    @EmbeddedId
    private AId id;

    @Embeddable
    @SuppressWarnings(""serial"")
    public static class AId implements Serializable {

        public AId() {
            //JPA requires no-arg constructor
        }

        /**
         * Primary identifier constructor.
         */
        public AId(String aOne, String aTwo) {
            this.aOne = aOne;
            this.aTwo = aTwo;
        }

        /**
         * Field for attribute 'A one'.
         */
        @Column(name=""a_one"", nullable=false,length=4096)
        private String aOne = new String("""");
        
        /**
         * Field for attribute 'A two'.
         */
        @Column(name=""a_two"", nullable=false,length=4096)
        private String aTwo = new String("""");
        
        ...
    }
    ...{noformat}

Here’s my B:

{noformat}  /**
     * MANY B is characterized by ONE A
     */
    @ManyToOne(targetEntity=one_to_many.A.class, fetch=FetchType.LAZY)
    @JoinColumns(value={
        @JoinColumn(name=""b_a_one"", referencedColumnName=""a_one"", nullable=false, insertable=true, updatable=true),
        @JoinColumn(name=""b_a_two"", referencedColumnName=""a_two"", nullable=false, insertable=true, updatable=true)})
    private A a_R1;
    
    @EmbeddedId
    private BId id;

    @Embeddable
    @SuppressWarnings(""serial"")
    public static class BId implements Serializable {

        public BId() {
            //JPA requires no-arg constructor
        }

        /**
         * Primary identifier constructor.
         */
        public BId(String bTwo, String bOne) {
            this.bTwo = bTwo;
            this.bOne = bOne;
        }
        
        /**
         * Field for attribute 'B one'.
         */
        @Column(name=""b_one"", nullable=false,length=4096)
        private String bOne = new String("""");

        /**
         * Field for attribute 'B two'.
         */
        @Column(name=""b_two"", nullable=false,length=4096)
        private String bTwo = new String("""");
        
        ...
    }
    ...
{noformat}

Here’s the unit test that fails in 5.4.17+ (but should pass I think):

{noformat}    @Test(expected = PersistenceException.class)
    public void testCannotCreateBWithoutA() {

        EntityManager em = Context.createEntityManager();
        em.getTransaction().begin();
        try {
            B.create(new BId(""some"", ""thing"")).persist(em);
        } finally {
            em.getTransaction().rollback();
            em.close();
        }
    }
{noformat}

FYI here are the commits between 5.4.16 and 5.4.17: [https://github.com/hibernate/hibernate-orm/compare/5.4.16...5.4.17|https://github.com/hibernate/hibernate-orm/compare/5.4.16...5.4.17|smart-link] ","hibernate 5.4.17 - 5.6.5
OpenJDK 8
Linux
hsqldb, h2 (unit testing)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,david.moten(david.moten),,,,,,,,,0|104y6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.16,,,,,,,,,,,,,,,,,,,,,A faire,,
Access to public field with extended bytecode enhancement returns null for entity lazy-loaded from polymorphic toOne association,HHH-15090,71988,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/févr./2022 07:34 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,bytecode-enhancement,hibernate-core,,,0,,,,,,"Given this model:

{noformat}
	@Entity(name = ""Containing"")
	public static class Containing {

		@Id
		@GeneratedValue(strategy = GenerationType.AUTO)
		Long id;

		@ManyToOne(fetch = FetchType.LAZY, optional = false)
		Contained contained;
	}

	@Entity(name = ""Contained"")
	public static class Contained {

		@Id
		@GeneratedValue(strategy = GenerationType.AUTO)
		Long id;

		String name;

		Contained() {
		}

		Contained(String name) {
			this.name = name;
		}
	}

	@Entity(name = ""ContainedExtended"")
	public class ContainedExtended extends Contained {

		ContainedExtended() {
		}

		ContainedExtended(String name) {
			this.name = name;
		}

	}{noformat}

The following test fails, even if the {{name}} is not null in the database:

{noformat}Containing containing = s.load( Containing.class, containingID );
Contained contained = containing.contained;
assertThat( contained.name ).isNotNull();{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-03-03T00:39:37.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4845,0|104y68:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
unit test:  org.hibernate.boot.registry.classloading.spi.ClassLoadingException: HHH010003: JDBC Driver class not found:,HHH-15089,71987,,Story,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Tomaž Majerhold,5fb4c295dd0c590075a50ca9,Tomaž Majerhold,5fb4c295dd0c590075a50ca9,22/févr./2022 23:40 PM,22/févr./2022 23:40 PM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"h1. dependencies



{code:xml}<dependency>
  <groupId>org.hibernate</groupId>
  <artifactId>hibernate-envers</artifactId>
  <version>5.6.5.Final</version>
</dependency>

<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
  <version>5.1.34</version>
  <scope>test</scope>
</dependency>
<dependency>
  <groupId>org.hibernate</groupId>
  <artifactId>hibernate-c3p0</artifactId>
  <version>5.6.5.Final</version>
  <scope>test</scope>
</dependency>{code}



h1. DaoTest



{code:java}protected static EntityManagerFactory entityManagerFactory = null;
public static EntityManager em = null;

@BeforeAll
public static void initializeDatabaseConnections() throws IOException, SQLException {
   // initialize database connections
   if (isNull(entityManagerFactory)){

       Properties prop = new Properties();
       ClassLoader loader = Thread.currentThread().getContextClassLoader();
       InputStream stream = loader.getResourceAsStream(""aris-dao-test.properties"");
       prop.load(stream);
       System.out.println(""TestDAO::setUpBeforeClass:sql.host=""+prop.getProperty(""sql.host""));

       Map<String,String> configMap = new HashMap<>();
       configMap.put(""hibernate.connection.username"", ""arisdao"");
       configMap.put(""hibernate.connection.password"", ""*****"");
       configMap.put(""hibernate.connection.autocommit"", ""false"");

        configMap.put(""hibernate.connection.url"",""jdbc:mysql://""+prop.getProperty(""sql.host"")
                    +""/aris_24_nodata?zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8"");


        entityManagerFactory = Persistence.createEntityManagerFactory(""aris"", configMap);
        em = entityManagerFactory.createEntityManager();


        HibernateEntityManager hem = (HibernateEntityManager) em;
        SessionImplementor sess = (SessionImplementor) hem.getSession();
        ScriptRunner scriptRunner = new ScriptRunner(sess.connection(), false, true);
        scriptRunner.runScript(new BufferedReader(new FileReader(PATH + ""drop_and_create_tables.sql"")));

        } else {
            em = entityManagerFactory.createEntityManager();
        }
    }{code}



h1. Error



{code:none}INFO: HHH000204: Processing PersistenceUnitInfo [name: aris]
feb. 23, 2022 8:05:05 AM org.hibernate.c3p0.internal.C3P0ConnectionProvider configure
INFO: HHH010002: C3P0 using driver:  at URL: jdbc:mysql://localhost:3306/aris_24_nodata?zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=UTF-8
feb. 23, 2022 8:05:05 AM org.hibernate.c3p0.internal.C3P0ConnectionProvider configure
INFO: HHH10001001: Connection properties: {user=arisdao, password=****, autocommit=false}
feb. 23, 2022 8:05:05 AM org.hibernate.c3p0.internal.C3P0ConnectionProvider configure
INFO: HHH10001003: Autocommit mode: false
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.231 s <<< FAILURE! - in si.arnes.db.aris.factory.test.whsendlist.WhSendListDaoFactoryGetSendListsByStatusTest
[ERROR] s.a.d.a.f.test.whsendlist.WhSendListDaoFactoryGetSendListsByStatusTest  Time elapsed: 0.231 s  <<< ERROR!
org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
Caused by: org.hibernate.boot.registry.classloading.spi.ClassLoadingException: HHH010003: JDBC Driver class not found:
Caused by: org.hibernate.boot.registry.classloading.spi.ClassLoadingException: Unable to load class []
Caused by: java.lang.ClassNotFoundException:{code}



jdbc is on classpath, {{c3p0}} configured but hibernate.boot can’t load driver","Apache Maven 3.6.3
Java version: 1.8.0_112
OS name: ""windows 10"", version: ""10.0""
MySQL:  5.5.54
junit-jupiter:  5.8.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:2ac7440d-36ff-48fb-a20d-be4f51c9d08b(ug:2ac7440d-36ff-48fb-a20d-be4f51c9d08b),,,,,,,,,0|104y60:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
User Guide: deficient wrapping for too long lines in code excerpts / examples,HHH-15088,71986,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,,,Philippe Cloutier,557058:25a80535-f68f-4b3b-838c-adc5740d3120,Philippe Cloutier,557058:25a80535-f68f-4b3b-838c-adc5740d3120,22/févr./2022 07:36 AM,22/févr./2022 09:21 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"Some of the examples in [the Hibernate ORM’s User Guide|https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html] contain logical code lines with too many characters to fit in one actual line. Since example code is indented but continuation of wrapped lines isn’t, the result is confusing/suboptimal.

For example, example #2, in [section 2.2.2. PhysicalNamingStrategy|https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#PhysicalNamingStrategy], contains the following logical line of code, which - no matter what the zoom level is - displays on 2 actual lines:

{{	public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {}}

That example alone contains at least 3 more examples of poorly wrapped lines, as can be seen in the following screenshot:

!image-20220222-171336.png|width=2484,height=1367!

At least the following can solve or mitigate:

# Reducing the length (number of characters) of logical lines (splitting them manually)
# Use a smaller font
# Reduce the document’s huge lateral margins (the white zones around the smaller yellow margins )
# Add visual indicators identifying wrapped lines",,,,,,,,,,,,,,,,,,,,,,,,,,,,,22/févr./2022 09:19 AM;ug:023ae914-724a-4017-aa3e-83006ea450e7;image-20220222-171336.png;https://hibernate.atlassian.net/secure/attachment/49973/image-20220222-171336.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:023ae914-724a-4017-aa3e-83006ea450e7(ug:023ae914-724a-4017-aa3e-83006ea450e7),,,,,,,,,0|104y5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Support `@Immutable` declaration on attribute,HHH-15087,71985,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,22/févr./2022 06:27 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"To be honest, I thought it was already this way.  We currently allow it for collections, but there is no reason to not also accept it for basic attributes.  

In 6 we already support {{@MutabilityPlan}} on basic attributes; we should support {{@Immutable}} as well (symmetry).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104y5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Test hack involving fromOtherEntity and getSelf to support runtime polymorphism in bridges,HSEARCH-4491,71984,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2022 04:26 AM,23/févr./2022 00:15 AM,14/mars/2022 12:54 PM,23/févr./2022 00:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,[https://discourse.hibernate.org/t/runtime-polymophism-with-typebinder-bridge/6057/2?u=yrodiere|https://discourse.hibernate.org/t/runtime-polymophism-with-typebinder-bridge/6057/2?u=yrodiere|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-23T00:15:03.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2906,0|104xn3:zi,,,,,,HSEARCH - 2022-04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Work around change of syntax for Annotation#toString (JDK-8282230) in tests,HSEARCH-4490,71983,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2022 02:21 AM,22/févr./2022 07:03 AM,14/mars/2022 12:54 PM,22/févr./2022 07:03 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,,,,,0,,,,,,See [https://bugs.openjdk.java.net/browse/JDK-8282230|https://bugs.openjdk.java.net/browse/JDK-8282230|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-22T07:03:33.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2905,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
matchNone() predicate,HSEARCH-4489,71981,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2022 00:14 AM,22/févr./2022 00:15 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"We have a [matchAll predicate|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#search-dsl-predicate-match-all], equivalent to Lucene’s {{MatchAllDocsQuery}} and Elasticsearch’s [match_all query|https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html].

However, we don’t have a {{matchNone}} predicate at the moment. It would be equivalent to Lucene’s {{MatchNoDocsQuery}} or Elasticsearch’s [match_none query|https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-all-query.html#query-dsl-match-none-query] .

Let’s add the {{matchNone}} predicate. Note we don’t need the {{except}} feature we current expose on {{matchAll}}, because “match none except documents matching these other predicates” is precisely the behavior of a {{bool}} predicate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104y54:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Configurable query cache structure layout,HHH-15086,71978,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,21/févr./2022 07:36 AM,22/févr./2022 09:21 AM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,hibernate-core,,,,0,,,,,,"In 6.0 we changed the query cache structure so that it contains all the data, whereas in 5.x a cache value for an entity stored only the PK value. Both approaches have advantages and disadvantages, so we should try to provide a way to configure how the cache for an entity should be structured.

When we have that, we should enable the test {{org.hibernate.orm.test.jpa.query.CachedQueryTest#testCacheableQuery}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),steve(steve),,,,,,,,0|104y4g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-22 17:21:36.023,,,,"22/févr./2022 09:21 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Another aspect to this is that we currently do not populate the second-level cache for “transactional data” (entity, collection, natural-id) when things are loaded via Query.  We should also handle that even when storing “all data” into the query-cache.

Anyway, I don’t think what you say is going to be easy and/or worth the effort.  But as it is under “wishlist”, no biggie",,,,,,,,,,,,,,,,A faire,,
Declaration of dependencies for certain subtypes only,HSEARCH-4488,71977,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/févr./2022 04:45 AM,21/févr./2022 04:51 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-pojo-base,,,,1,,,,,,"See [https://discourse.hibernate.org/t/runtime-polymophism-with-typebinder-bridge/6057|https://discourse.hibernate.org/t/runtime-polymophism-with-typebinder-bridge/6057|smart-link]  , [https://discourse.hibernate.org/t/propertybinder-for-base-type-reports-no-children-property-found-in-parent-class/5493?u=yrodiere|https://discourse.hibernate.org/t/propertybinder-for-base-type-reports-no-children-property-found-in-parent-class/5493?u=yrodiere|smart-link] 

Essentially, sometimes people write bridges that include casts. Those bridge access properties that are not declared on the type to which the binder is applied, and thus there is currently no way to declare dependencies to those properties, [except through hacks|https://discourse.hibernate.org/t/propertybinder-for-base-type-reports-no-children-property-found-in-parent-class/5493/2?u=yrodiere].

It would be nice to provide a way to declare dependencies that apply to certain subtypes only; essentially dependencies that include casts.

Something like this:

{noformat}context.dependencies().cast(MySubtype.class).use(""mySubTypeProperty"");{noformat}

But maybe it would be more future-proof to just include the concept of casts in {{PojoModelPath}}, so that we can introduce casts at any point in a given path?

{noformat}// Same as above
context.dependencies()
				.use( PojoModelPath.builder()
						.cast( MySubtype.class )
						.property( ""mySubTypeProperty"" )
						.toValuePath() );
// Other example: cast at any point in the path
context.dependencies()
				.use( PojoModelPath.builder()
						.property( ""myProperty"" )
						.cast( MySubtype.class )
						.property( ""mySubTypeProperty"" )
						.toValuePath() );{noformat}

The challenges here will be to:

* Represent casts in {{PojoModelPath}}, probably by adding a new kind of node.
* Handle casts everywhere we currently process a {{PojoModelPath}}.
* Find a good syntax for these casts in {{PojoModelPath#parse}}.

Implementing support for polymorphic dependencies might not be too hard, as we already have _some_ support for that ({{PojoIndexingDependencyCollectorPolymorphicDirectValueNode}}, for example). Not sure it’s completely relevant, though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104y48:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add log ActionQueue.java,HHH-15085,71976,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,sylvain debras,61d6c4be326554006c15e6cc,sylvain debras,61d6c4be326554006c15e6cc,18/févr./2022 07:08 AM,18/févr./2022 07:09 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

In the file ActionQueue.java in method, there is the comment :

{{//cycle detected, no need to continue}}

It would be more convenient to have logs. We lost a lot of time to detect the presence of cycle.

Because of that silently hibernate does not order sql queries and the batch processing disengaged. 

We had performance issues.

Is it possible to add a log in a next release who shows the problem ?

Ex. : LOG.warn(“There are cycle detected, no need to continue“);

Thank you.

This issue is related to [https://hibernate.atlassian.net/browse/BVAL-778|https://hibernate.atlassian.net/browse/BVAL-778|smart-link].",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:3a374297-a2d1-47ac-9073-af9dcfb300a2(ug:3a374297-a2d1-47ac-9073-af9dcfb300a2),,,,,,,,,0|104y40:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
JpaCompliantLifecycleStrategy uses deprecated BeanManager method that's gone in CDI 4.0,HHH-15084,71975,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Brian Stansberry,70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854,Brian Stansberry,70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854,Brian Stansberry,70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854,17/févr./2022 19:26 PM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,28/févr./2022 04:49 AM,5.3.24,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.CR2,,,,,,,,hibernate-core,,,,0,,,,,,"JpaCompliantLifecycleStrategy uses BeanManager.createInjectionTarget(AnnotatedType) which is documented (in text, not annoation or javadoc annotation) as “deprecated from CDI 1.1” and has been removed in CDI 4.0\[1]. In CDI 1.2 an alternative API was introduced\[4], which is now required. Using the old API leads to a test failure in WildFly Preview when I try and integrate CDI 4 and Weld 5\[2].



This leads to a failure in WildFly’s EntityListenerInjectionSupportTestCase\[3] when it tries to deploy a test deployment:

\{code}

Caused by: java.lang.NoSuchMethodError: 'jakarta.enterprise.inject.spi.InjectionTarget jakarta.enterprise.inject.spi.BeanManager.createInjectionTarget(jakarta.enterprise.inject.spi.AnnotatedType)'
at org.hibernate@5.3.24.Final//org.hibernate.resource.beans.container.internal.JpaCompliantLifecycleStrategy$BeanImpl.initialize(JpaCompliantLifecycleStrategy.java:116)
at org.hibernate@5.3.24.Final//org.hibernate.resource.beans.container.internal.CdiBeanContainerExtendedAccessImpl$BeanImpl.initialize(CdiBeanContainerExtendedAccessImpl.java:113)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.hibernate@5.3.24.Final//org.hibernate.resource.beans.container.spi.AbstractCdiBeanContainer.forEachBean(AbstractCdiBeanContainer.java:139)
at org.hibernate@5.3.24.Final//org.hibernate.resource.beans.container.internal.CdiBeanContainerExtendedAccessImpl.beanManagerInitialized(CdiBeanContainerExtendedAccessImpl.java:74)
at org.hibernate.jipijapa-hibernate5-3@27.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.hibernate5.HibernateExtendedBeanManager.beanManagerIsAvailableForUse(HibernateExtendedBeanManager.java:69)
at org.hibernate.jipijapa-hibernate5-3@27.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor.markPersistenceUnitAvailable(HibernatePersistenceProviderAdaptor.java:226)
at org.jboss.as.jpa@27.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.beanmanager.BeanManagerAfterDeploymentValidation$DeferredCall.markPersistenceUnitAvailable(BeanManagerAfterDeploymentValidation.java:83)
at org.jboss.as.jpa@27.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.beanmanager.BeanManagerAfterDeploymentValidation.markPersistenceUnitAvailable(BeanManagerAfterDeploymentValidation.java:68)

\{code}



Note that my branch is using a bytecode transformed Hibernate 5.3 .24when this happens, but my real interest is 6.0.0.CR1 as we want to move to 6.0, and I see the code is the same there.

Per section 11.3.21 of the CDI 1.2 spec\[4] the replacement code seems to be BeanManager.getInjectionTargetFactory(type).createInjectionTarget((Bean)null). That is also what the Weld impl of createInjectionTarget does. 

\[1] [https://github.com/eclipse-ee4j/cdi/commit/efba672d65d41f87b3cb2fb2b3e00778cdaccc31|https://github.com/eclipse-ee4j/cdi/commit/efba672d65d41f87b3cb2fb2b3e00778cdaccc31|smart-link] 

\[2] [https://github.com/bstansberry/wildfly/commits/JpaCompliantLifecycleStrategy|https://github.com/bstansberry/wildfly/commits/JpaCompliantLifecycleStrategy|smart-link] 

\[3] [https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/jpa/EntityListenerInjectionSupportTestCase.java|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/injection/support/jpa/EntityListenerInjectionSupportTestCase.java|smart-link] 

\[4] [https://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bm_obtain_injectiontarget|https://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bm_obtain_injectiontarget|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-28T04:34:35.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:9fb683d6-e0ec-4f97-8271-e92bef9c6957(ug:9fb683d6-e0ec-4f97-8271-e92bef9c6957),sanne(sanne),steve(steve),,,,,,,0|104y3s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-18 14:56:16.316,,,,"18/févr./2022 06:56 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;For now we should not do this unless/until we can get the JPA spec matched up.  From the spec (ref 3.5.1 Entity Listeners), steps #3 for CDI integration is:

{quote}Create an InjectionTarget instance for the annotated type.{quote}","18/févr./2022 13:14 PM;70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854;I’m not suggesting not creating an InjectionTarget. It’s just that the API CDI wants used to do that was changed in CDI 1.2, from asking the BeanManager to do it directly, to instead asking the BeanManager for an InjectionTargetFactory, which you then ask for an InjectionTarget. See 11.3.21 of the CDI 1.2 spec ([https://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bm_obtain_injectiontarget|https://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bm_obtain_injectiontarget|smart-link] ), particularly



“Null should be passed to InjectionTargetFactory.createInjectionTarget() to create a noncontextual injection target. The method BeanManager.createInjectionTarget() is deprecated since version 1.1 of Contexts and Dependency Injection.”



As 3.5.1 of the JPA spec notes, an entity listener is a non-contextual object.



Now in CDI that recommended way of doing it has become the required way.","18/févr./2022 13:25 PM;70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854;Sorry, I realize now my issue description buried the fact that there is a different API that CDI wants used; I updated it and now that I’ve found it I added a link to the relevant bit of the CDI 1.2 spec.",25/févr./2022 01:54 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;[~accountid:70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854] I see your experiments are running on Hibernate 5.3 - will you need this backported to 5.3?,"25/févr./2022 05:27 AM;70121:e1fbc9eb-4697-484b-9e87-7c16f80b6854;  No, 6 is enough. Our CDI 4.0 work is only using 5.3 pending completion of [https://github.com/wildfly/wildfly/pull/15165|https://github.com/wildfly/wildfly/pull/15165|smart-link]  If that takes a while and we’re otherwise ready to merge work with CDI 4 we can just temporarily disable the handful of tests affected by this. We’ll never release again from main with Hibernate 5.3.",,,,,,,,,,,,Terminé,,
After update to spring boot 2.6.3 from 2.5.X hibernate does not work in some query syntax,HHH-15083,71974,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Davide,5c80dba986d6772572b2bef5,Davide,5c80dba986d6772572b2bef5,17/févr./2022 07:03 AM,17/févr./2022 07:03 AM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,query-sql,,,,0,core,hibernate,java-8,spring-boot,,"after update spring boot version from 2.5 to 2.6, and then hibernate update from 5.4 to 5.6. the same query syntax does not work.



[https://stackoverflow.com/questions/71159804/after-update-to-spring-boot-2-6-3-from-2-5-x-hibernate-does-not-work-in-some-que|https://stackoverflow.com/questions/71159804/after-update-to-spring-boot-2-6-3-from-2-5-x-hibernate-does-not-work-in-some-que|smart-link] 



i have verified the syntax of the query genereted from both version, and the syntax is the same, but with last version give an error:

Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Incorrect syntax near ','.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2b93f2f1-a4d4-4315-894a-243f3f2f7109(ug:2b93f2f1-a4d4-4315-894a-243f3f2f7109),,,,,,,,,0|104y3k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.33,,,,,,,,,,,,,,,,,,,,,A faire,,
JDBC Statement leaks after exceptions other than SQLException during insert/update/...,HHH-15082,71973,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/févr./2022 05:37 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,18/févr./2022 12:39 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,6.0.0.CR2,,,,,,,,hibernate-core,,,,0,,,,,,"See [https://github.com/quarkusio/quarkus/issues/23469|https://github.com/quarkusio/quarkus/issues/23469|smart-link] 

Essentially, it seems we release batched statements after a certain type of exception happens during an insert/update/etc., but for some strange reason we only do that for SQLException, and sometimes JDBC exception. See for example this: [https://github.com/hibernate/hibernate-orm/blob/82815cc09a0c68ddeb1545fdcb1a0872b12de77c/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java|https://github.com/hibernate/hibernate-orm/blob/82815cc09a0c68ddeb1545fdcb1a0872b12de77c/hibernate-core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java|smart-link] 

As a result, any other exception (such as StaleStateException) will lead to batched statements not being released: that’s a leak, and while Agroal for example will catch that and release the statement, it will also log pesky warnings. It would be better to release statements correctly ourselves.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-02-18T12:38:41.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4822,0|104y3c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
JSR-352 Mass Indexing job fails with @IndexedEmbedded entity and MySQL,HSEARCH-4487,71972,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Ivan Kotev,70121:8bd20b29-e551-467d-a964-39012a9b1f80,Ivan Kotev,70121:8bd20b29-e551-467d-a964-39012a9b1f80,17/févr./2022 03:19 AM,17/févr./2022 03:45 AM,14/mars/2022 12:54 PM,,6.1.1.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,mapper-orm-jsr352,,,,0,,,,,,"Hello, 

I’m trying to use the JSR-352 Mass Indexing job with MySQL and due to the specifics of the MySQL Connector/J driver, I have specified {{entityFetchSize(Integer.MIN_VALUE)}}. The indexed entity also has an association which is annotated with  {{@IndexedEmbedded}}.

Mass Indexing fails with an exception:

{{Caused by: org.hibernate.exception.GenericJDBCException: could not extract ResultSet}}
{{at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)}}
{{at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)}}
{{at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)}}
{{at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:67)}}
{{at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:390)}}
{{at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:163)}}
{{at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeLoad(AbstractLoadPlanBasedLoader.java:104)}}
{{at org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader.load(AbstractLoadPlanBasedEntityLoader.java:285)}}
{{at org.hibernate.persister.entity.AbstractEntityPersister.doLoad(AbstractEntityPersister.java:4521)}}
{{at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4511)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:571)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:539)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:208)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:327)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:108)}}
{{at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:74)}}
{{at org.hibernate.internal.SessionImpl$$Lambda$1176/0x0000000000000000.applyEventToListener(Unknown Source)}}
{{at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)}}
{{at org.hibernate.internal.SessionImpl.fireLoadNoChecks(SessionImpl.java:1226)}}
{{at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1091)}}
{{at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:699)}}
{{at org.hibernate.type.EntityType.resolve(EntityType.java:464)}}
{{at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:240)}}
{{at org.hibernate.engine.internal.TwoPhaseLoad$EntityResolver.lambda$static$0(TwoPhaseLoad.java:576)}}
{{at org.hibernate.engine.internal.TwoPhaseLoad$EntityResolver$$Lambda$603/0x00000000bc61e280.resolve(Unknown Source)}}
{{at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntityEntryLoadedState(TwoPhaseLoad.java:221)}}
{{at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:155)}}
{{at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:126)}}
{{at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1201)}}
{{at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1153)}}
{{at org.hibernate.loader.Loader.loadSingleRow(Loader.java:415)}}
{{at org.hibernate.internal.ScrollableResultsImpl.prepareCurrentRow(ScrollableResultsImpl.java:197)}}
{{at org.hibernate.internal.ScrollableResultsImpl.next(ScrollableResultsImpl.java:102)}}
{{at org.hibernate.search.batch.jsr352.core.massindexing.step.spi.EntityReader$ChunkState.next(EntityReader.java:446)}}
{{at org.hibernate.search.batch.jsr352.core.massindexing.step.spi.EntityReader.readItem(EntityReader.java:263)}}
{{at com.ibm.jbatch.container.artifact.proxy.ItemReaderProxy.readItem(ItemReaderProxy.java:68)}}
{{at com.ibm.jbatch.container.impl.ChunkStepControllerImpl.readItem(ChunkStepControllerImpl.java:321)}}
{{... 12 more}}
{{Caused by: java.sql.SQLException: Streaming result set com.mysql.cj.protocol.a.result.ResultsetRowsStreaming@171fbc6e is still active. No statements may be issued when any streaming result sets are open and in use on a given connection. Ensure that you have called .close() on any active streaming result sets before attempting more queries.}}
{{at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)}}
{{at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)}}
{{at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)}}
{{at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1009)}}
{{at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57)}}
{{... 45 more}}

Also providing a reproducer: [https://github.com/hibernate/hibernate-test-case-templates/pull/123|https://github.com/hibernate/hibernate-test-case-templates/pull/123|smart-link] ","Java 11
MySQL 8.0.28
MacOS",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:51f78e2d-20d0-4369-a089-ba000414528d(ug:51f78e2d-20d0-4369-a089-ba000414528d),,,,,,,,https://github.com/hibernate/hibernate-test-case-templates/pull/123,0|104y34:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Changing a string inside a ColumnTransformer,HHH-15081,71971,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Viktor Alenkov,6050b1eb009fee0069271c10,Viktor Alenkov,6050b1eb009fee0069271c10,16/févr./2022 01:04 AM,16/févr./2022 01:04 AM,14/mars/2022 12:54 PM,,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,2,,,,,,"
{code:java}
import org.hibernate.annotations.ColumnTransformer;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

@Entity
@Table
class AuthTokenEntity {
    @Column(name = ""access_token"", columnDefinition = ""bytea"")
    @ColumnTransformer(
            forColumn = ""access_token"",
            write = ""pgp_sym_encrypt(?, current_setting('encrypt.access_token_key'))"",
            read = ""pgp_sym_decrypt(access_token, current_setting('encrypt.access_token_key'))""
    )
    String accessToken;
}
{code}

the string `encrypt.access_token_key` is replaced with `encrypt.authtokene0_.access_token_key`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:05e2a7ec-66fa-4b51-92ff-72a8df047d23(ug:05e2a7ec-66fa-4b51-92ff-72a8df047d23),,,,,,,,,0|104y2w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Session Refresh can cause StaleObjectStateException when entry in 2LC is reread,HHH-15080,71970,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,William Rosenquist Burns,5a7b38fc7b3477447c5ab1db,William Rosenquist Burns,5a7b38fc7b3477447c5ab1db,15/févr./2022 13:51 PM,15/févr./2022 13:52 PM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When versions are enabled and an entry is read from the 2LC it is marked as not having a lock mode for the session entry. If that entry is then refreshed via Session.refresh if the version is out of date it will throw an exception. The refresh method should not do this and instead just return the updated entry.

Please see [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Read.20Upgrade.20Semantics.20with.202LC|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Read.20Upgrade.20Semantics.20with.202LC] for more information

Reproducer and possible fix at [https://github.com/hibernate/hibernate-orm/pull/4817|https://github.com/hibernate/hibernate-orm/pull/4817|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-16T06:43:39.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:3d5a7819-8c48-4301-8fc4-d0ab38c7b8f0(ug:3d5a7819-8c48-4301-8fc4-d0ab38c7b8f0),,,,,,,,,0|104y2o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Throw Runtime Exception for Reserved Keyword Usage in Entities,HHH-15079,71969,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Gentry Tran,70121:12d3e1a6-47d7-459b-9610-0e29ecfa1a1a,Gentry Tran,70121:12d3e1a6-47d7-459b-9610-0e29ecfa1a1a,14/févr./2022 15:50 PM,14/févr./2022 15:50 PM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-jpamodelgen,,,,0,,,,,,"Hello ladies and gents,

I recently came across this hibernate question that I submitted an answer to. 

https://stackoverflow.com/questions/70797504/spring-data-jpa-h2-database-is-returning-ddl-error-during-table-creation

I have seen this issue happen over many years of developing. I think it would be nice to address this small issue.  When creating a simple table of User -> defaults to ""user"", this reserved keyword has unexpected behavior and it not easy to diagnose unless you have seen the error before or enable hibernate sql output and inspect it carefully.


{code}
1481 [main] DEBUG org.hibernate.SQL  - drop table if exists user CASCADE 
Hibernate: drop table if exists user CASCADE 
1482 [main] WARN  org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl  - GenerationTarget encountered exception accepting command : Error executing DDL ""drop table if exists user CASCADE "" via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""drop table if exists user CASCADE "" via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlString(SchemaDropperImpl.java:387)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlStrings(SchemaDropperImpl.java:371)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:246)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:156)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:128)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:114)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:153)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:81)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:335)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1498)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:732)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:414)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:302)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:136)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement ""drop table if exists [*]user CASCADE ""; expected ""identifier""; SQL statement:
drop table if exists user CASCADE  [42001-210]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:521)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:496)
	at org.h2.message.DbException.getSyntaxError(DbException.java:265)
	at org.h2.command.Parser.readIdentifier(Parser.java:5759)
	at org.h2.command.Parser.readIdentifierWithSchema(Parser.java:5719)
	at org.h2.command.Parser.readIdentifierWithSchema(Parser.java:5748)
	at org.h2.command.Parser.parseDrop(Parser.java:2194)
	at org.h2.command.Parser.parsePrepared(Parser.java:759)
	at org.h2.command.Parser.parse(Parser.java:674)
	at org.h2.command.Parser.parse(Parser.java:644)
	at org.h2.command.Parser.prepareCommand(Parser.java:551)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:615)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:553)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 104 more
{code}



Specifically, I do not believe that this should be intended behavior by hibernate. 

{code}
1482 [main] WARN  org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl  - GenerationTarget encountered exception accepting command : Error executing DDL ""drop table if exists user CASCADE "" via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""drop table if exists user CASCADE "" via JDBC Statement
{code}

And, 

{code}

Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement ""drop table if exists [*]user CASCADE ""; expected ""identifier""; SQL statement:
drop table if exists user CASCADE  [42001-210]

{code}


Is jdbc.JdbcSQLSyntaxErrorException indicative of a reserved keyword usage? I do not believe so, hence the reason for why I am writing this up. I ran into this problem many years ago as a student and the functionality still hasn't changed, so thought it would be good timing as a working adult.


I think there could be a few different ways to implement some type of validation to the user. 

1. Checked exceptions for reserved keywords, like how Java handles this - though many people would argue against this route for cluttering up code (I, too, do not recommend this)

2. Runtime exception at startup using the classloader via reflection and just comparing all of the table.name() entity names. If there is a conflict, throw an exception to notify that things could get weird. Maybe this could be written at a different level now that I think about it - in the Spring Context Intializer when all of the beans are loaded... that might be a better idea, but there should still be a mechanism to notify a user at runtime.","MacOS - hibernate-core:5.6.4 with Spring boot


< openjdk-17 >
Maven: antlr:antlr:2.7.7
Maven: ch.qos.logback:logback-classic:1.2.10
Maven: ch.qos.logback:logback-core:1.2.10
Maven: com.fasterxml.jackson.core:jackson-annotations:2.13.1
Maven: com.fasterxml.jackson.core:jackson-core:2.13.1
Maven: com.fasterxml.jackson.core:jackson-databind:2.13.1
Maven: com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.1
Maven: com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1
Maven: com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.1
Maven: com.fasterxml:classmate:1.5.1
Maven: com.h2database:h2:2.1.210
Maven: com.jayway.jsonpath:json-path:2.6.0
Maven: com.sun.activation:jakarta.activation:1.2.2
Maven: com.sun.istack:istack-commons-runtime:3.0.12
Maven: com.vaadin.external.google:android-json:0.0.20131108.vaadin1
Maven: com.zaxxer:HikariCP:4.0.3
Maven: jakarta.activation:jakarta.activation-api:1.2.2
Maven: jakarta.annotation:jakarta.annotation-api:1.3.5
Maven: jakarta.persistence:jakarta.persistence-api:2.2.3
Maven: jakarta.transaction:jakarta.transaction-api:1.3.3
Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.3
Maven: log4j:log4j:1.2.17
Maven: net.bytebuddy:byte-buddy:1.11.22
Maven: net.bytebuddy:byte-buddy-agent:1.11.22
Maven: net.minidev:accessors-smart:2.4.7
Maven: net.minidev:json-smart:2.4.7
Maven: org.apache.logging.log4j:log4j-api:2.17.1
Maven: org.apache.logging.log4j:log4j-core:2.15.0
Maven: org.apache.logging.log4j:log4j-to-slf4j:2.17.1
Maven: org.apache.tomcat.embed:tomcat-embed-core:9.0.56
Maven: org.apache.tomcat.embed:tomcat-embed-el:9.0.56
Maven: org.apache.tomcat.embed:tomcat-embed-websocket:9.0.56
Maven: org.apiguardian:apiguardian-api:1.1.2
Maven: org.aspectj:aspectjweaver:1.9.7
Maven: org.assertj:assertj-core:3.21.0
Maven: org.atteo:evo-inflector:1.3
Maven: org.checkerframework:checker-qual:3.5.0
Maven: org.glassfish.jaxb:jaxb-runtime:2.3.5
Maven: org.glassfish.jaxb:txw2:2.3.5
Maven: org.hamcrest:hamcrest:2.2
Maven: org.hibernate.common:hibernate-commons-annotations:5.1.2.Final
Maven: org.hibernate:hibernate-core:5.6.4.Final
Maven: org.jboss.logging:jboss-logging:3.4.3.Final
Maven: org.jboss:jandex:2.4.2.Final
Maven: org.junit.jupiter:junit-jupiter:5.8.2
Maven: org.junit.jupiter:junit-jupiter-api:5.8.2
Maven: org.junit.jupiter:junit-jupiter-engine:5.8.2
Maven: org.junit.jupiter:junit-jupiter-params:5.8.2
Maven: org.junit.platform:junit-platform-commons:1.8.2
Maven: org.junit.platform:junit-platform-engine:1.8.2
Maven: org.mockito:mockito-core:4.0.0
Maven: org.mockito:mockito-junit-jupiter:4.0.0
Maven: org.modelmapper:modelmapper:3.0.0
Maven: org.objenesis:objenesis:3.2
Maven: org.opentest4j:opentest4j:1.2.0
Maven: org.ow2.asm:asm:9.1
Maven: org.postgresql:postgresql:42.3.2
Maven: org.projectlombok:lombok:1.18.22
Maven: org.skyscreamer:jsonassert:1.5.0
Maven: org.slf4j:jul-to-slf4j:1.7.33
Maven: org.slf4j:slf4j-api:2.0.0-alpha6
Maven: org.slf4j:slf4j-log4j12:2.0.0-alpha6
Maven: org.springframework.boot:spring-boot:2.6.3
Maven: org.springframework.boot:spring-boot-autoconfigure:2.6.3
Maven: org.springframework.boot:spring-boot-starter:2.6.3
Maven: org.springframework.boot:spring-boot-starter-aop:2.6.3
Maven: org.springframework.boot:spring-boot-starter-data-jpa:2.6.3
Maven: org.springframework.boot:spring-boot-starter-data-rest:2.6.3
Maven: org.springframework.boot:spring-boot-starter-jdbc:2.6.3
Maven: org.springframework.boot:spring-boot-starter-json:2.6.3
Maven: org.springframework.boot:spring-boot-starter-logging:2.6.3
Maven: org.springframework.boot:spring-boot-starter-test:2.6.3
Maven: org.springframework.boot:spring-boot-starter-tomcat:2.6.3
Maven: org.springframework.boot:spring-boot-starter-web:2.6.3
Maven: org.springframework.boot:spring-boot-test:2.6.3
Maven: org.springframework.boot:spring-boot-test-autoconfigure:2.6.3
Maven: org.springframework.data:spring-data-commons:2.6.1
Maven: org.springframework.data:spring-data-jpa:2.6.1
Maven: org.springframework.data:spring-data-rest-core:3.6.1
Maven: org.springframework.data:spring-data-rest-webmvc:3.6.1
Maven: org.springframework.hateoas:spring-hateoas:1.4.1
Maven: org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE
Maven: org.springframework:spring-aop:5.3.15
Maven: org.springframework:spring-aspects:5.3.15
Maven: org.springframework:spring-beans:5.3.15
Maven: org.springframework:spring-context:5.3.15
Maven: org.springframework:spring-core:5.3.15
Maven: org.springframework:spring-expression:5.3.15
Maven: org.springframework:spring-jcl:5.3.15
Maven: org.springframework:spring-jdbc:5.3.15
Maven: org.springframework:spring-orm:5.3.15
Maven: org.springframework:spring-test:5.3.15
Maven: org.springframework:spring-tx:5.3.15
Maven: org.springframework:spring-web:5.3.15
Maven: org.springframework:spring-webmvc:5.3.15
Maven: org.xmlunit:xmlunit-core:2.8.4
Maven: org.yaml:snakeyaml:1.29
",,,28800,28800,,0 %,28800,28800,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:213d5e40-d82a-4812-8eeb-712206f95e6d(ug:213d5e40-d82a-4812-8eeb-712206f95e6d),,,,,,,,,0|104y2g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Support for Tuple and SelectionQuery,HHH-15078,71968,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/févr./2022 12:52 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"At the moment, this fails -

{noformat}session.createSelectionQuery( hql, Tuple.class ){noformat}

while this one passes -

{noformat}session.createQuery( hql, Tuple.class ){noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104y28:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
@NotNull ignored on @Embeddable classes,HHH-15077,71967,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sidharth,620a4e79a715c600691226c7,Sidharth,620a4e79a715c600691226c7,14/févr./2022 04:54 AM,14/févr./2022 04:54 AM,14/mars/2022 12:54 PM,,5.4.15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

If I have the following scenario:

{noformat}@Embeddable
@Getter
@Setter
public class ExtraInfo {
...
  
  @NotNull
  private Integer version;

...
}

@Entity
public class MyArtifact {
...

  @Embedded
  private ExtraInfo extraInfo

...
}{noformat}

Then I’m finding the database column that is created for the “version” field is set to null. I know there is a bug that within Embeddable classes some annotations aren’t working if the fields are decorated and a work around is to decorate the getter of that field. I tried doing that to the “version” field but still the same issue.

The only way I’ve been able to fix this is to mark the field in ExtraInfo as @Transient and then put a getter in the parent class and decorate that. 

Is this a known bug? I notice issue [https://hibernate.atlassian.net/browse/HHH-7695|https://hibernate.atlassian.net/browse/HHH-7695|smart-link] but it seems to be resolved in version 5. However I’m using 5.4.15

My POM dependency is of:

{quote}groupId = org.hibernate
artifactId = hibernate-jpamodelgen
version = 5.4.15{quote}



Thanks

Sid",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:61759c4f-623a-4a54-b51f-2ce3fbdde640(ug:61759c4f-623a-4a54-b51f-2ce3fbdde640),,,,,,,,,0|104y20:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to slf4j 1.7.36,HSEARCH-4486,71966,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/févr./2022 00:26 AM,14/févr./2022 03:35 AM,14/mars/2022 12:54 PM,14/févr./2022 03:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-14T03:31:22.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2895,0|104xn3:xz,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to GSON 2.9.0,HSEARCH-4485,71965,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/févr./2022 00:14 AM,08/mars/2022 23:06 PM,14/mars/2022 12:54 PM,14/févr./2022 03:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-14T03:31:22.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2895,0|104xn3:xx,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade build dependencies to the latest version,HSEARCH-4484,71964,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/févr./2022 00:13 AM,21/févr./2022 07:37 AM,14/mars/2022 12:54 PM,14/févr./2022 03:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=6}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":6,""lastUpdated"":""2022-03-14T02:41:51.000-0700"",""stateCount"":6,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2895,0|104xn3:xv,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Display ""instant speed"" or rolling average on top of overall speed in the mass indexer",HSEARCH-4483,71963,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/févr./2022 00:03 AM,14/févr./2022 00:03 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Right now, the mass indexer displays the overall indexing speed (total indexed / total time) as the mass indexing speed in the logs. This has the major downside of allowing extreme data points (like the very fast indexing at start) affect the displayed speed for a very long time.

For example if we index 1000 docs in 1s at the start, then 50 document per second for the rest of the process, we’ll display speeds much larger than 50doc/s for a very long time after this initial spike in indexing speed.

I would argue it’s more useful to display a rolling average, or the instant speed. Let’s try to display that, maybe next to the overall speed? E.g. {{Indexing speed: 22.827003 documents/second [current] / 28.827003 documents/second [since start]}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104y1s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Avoid uses of Hibernate ORM's org.hibernate.tuple.entity.EntityMetamodel internally where possible,HSEARCH-4482,71962,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/févr./2022 06:39 AM,17/févr./2022 06:26 AM,14/mars/2022 12:54 PM,17/févr./2022 06:26 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.2.Final,6.2.0.Alpha1,,,,,,,,,,,,0,,,,,,"There are talks to remove it: [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Get.20rid.20of.20EntityMetamodel|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Get.20rid.20of.20EntityMetamodel]

Let’s try to avoid the problems before they start, this time…

Note this is mostly about Hibernate ORM 6; we will never be able to avoid {{org.hibernate.tuple.entity.EntityMetamodel}} completely in Hibernate ORM 5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-17T06:25:01.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2897,0|104xn3:z,,,,,,HSEARCH - 2022-04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to elasticsearch-rest-client 8.0.0,HSEARCH-4481,71961,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/févr./2022 03:48 AM,14/févr./2022 03:35 AM,14/mars/2022 12:54 PM,14/févr./2022 03:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-14T03:31:22.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2895,0|104xn3:xy,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Table creation failure due to H2 version compatibility,HHH-15076,71959,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,ArpitKumar.Singh,5e0f22dbb783d60db09ff9d2,ArpitKumar.Singh,5e0f22dbb783d60db09ff9d2,10/févr./2022 11:49 AM,11/févr./2022 01:12 AM,14/mars/2022 12:54 PM,10/févr./2022 23:49 PM,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,query-hql,,,,0,,,,,,"Untyped {{ARRAY}} is valid only in H2 1.x.y. H2 2.0.202 and later versions have standard-compliant arrays, we need to specify base data type, such as

* BOOLEAN ARRAY
* VARCHAR(100) ARRAY
* INTEGER ARRAY\[10]

As mentioned in [https://github.com/h2database/h2database/issues/3431|https://github.com/h2database/h2database/issues/3431|smart-link] ,
Hibernate ORM 5.6.5.Final (or later version) should support latest version of H2.

But, even after updating it to 5.6.5.Final, the query is still converted to ARRAY data type:-


{noformat}create table fulfillment (id integer not null, grant_type array, name varchar(255)){noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2c4fb205-ad2e-495b-835c-59704f0bd7fc(ug:2c4fb205-ad2e-495b-835c-59704f0bd7fc),christian.beikov(christian.beikov),,,,,,,,0|104y14:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-11 07:49:30.081,,,,10/févr./2022 23:49 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Support for typed arrays will be done as part of HHH-10999,"11/févr./2022 00:36 AM;5e0f22dbb783d60db09ff9d2;Hi @Christian
Thanks for responding.

Could you please share the plan for [https://hibernate.atlassian.net/browse/HHH-10999|https://hibernate.atlassian.net/browse/HHH-10999|smart-link] release, as this was last updated in 2016; after that there is no update on the ticket.","11/févr./2022 01:12 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;We are working on this, but can’t give you any dates. You should complain about this on the H2 issue, as H2 removed this feature which Hibernate simply made possible for you to use.",,,,,,,,,,,,,,Terminé,,
Hibernate 5.5.3 try to recreate existing tables,HHH-15075,71957,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Zhen Ming Li,62048310733407006754f38b,Zhen Ming Li,62048310733407006754f38b,09/févr./2022 19:31 PM,10/févr./2022 23:20 PM,14/mars/2022 12:54 PM,10/févr./2022 23:20 PM,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Starting from 5.5.3.Final, Hibernate-core changes the unquotedCaseStrategy to UPPER (while the original value is MIXED).

{code:java}public class IdentifierHelperBuilder {
    private IdentifierCaseStrategy unquotedCaseStrategy = IdentifierCaseStrategy.UPPER;
    private IdentifierCaseStrategy quotedCaseStrategy = IdentifierCaseStrategy.MIXED;{code}

Our project uses following url (with Spring boot) to access the MariaDB. After changing to hibernate-core 5.5.3.Final, our project always try to recreate the existing tables. During the investigation, I found that catalog name WebServiceDB will be treated as unquoted, and UPPER case WEBSERVICEDB will be used as the catalog (WebServiceDB will be used before hibernate-core 5.5.3.Final) due to the unquotedCaseStrategy change.

{code:java}spring:
  datasource:
    url: jdbc:mysql://1.1.1.1:3306/WebServiceDB{code}

I tried to use following configuration, but @columnDefinition may be impacted.

{code:java}spring:
  jpa:
    properties:
      hibernate:
        globally_quoted_identifiers: true{code}

But globally_quoted_identifiers_skip_column_definitions is not working in my project and WebServiceDB still be treated as unquoted. 


{code:yaml}spring:  
  jpa:
    properties:      
      hibernate:
        globally_quoted_identifiers_skip_column_definitions: true{code}

Could you please share the workaround for this. Thanks.

And why unquotedCaseStrategy is updated to UPPER?
     

{code:java} private IdentifierCaseStrategy unquotedCaseStrategy = IdentifierCaseStrategy.UPPER;{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,10/févr./2022 00:00 AM,,,,true,0.0,dreab8(dreab8),ug:01ee0671-b368-45e0-9666-368531cb68ee(ug:01ee0671-b368-45e0-9666-368531cb68ee),,,,,,,,0|104y0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,2022-02-10 09:18:57.35,,,,"09/févr./2022 23:56 PM;62048310733407006754f38b;The workaround is to add both *globally_quoted_identifiers: true* and *globally_quoted_identifiers_skip_column_definitions*: *true*

{code:yaml}spring:
  jpa:
    properties:
      hibernate:
        globally_quoted_identifiers: true
        globally_quoted_identifiers_skip_column_definitions: true{code}","10/févr./2022 01:18 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;{{MariaDBDialect}} sets the  {{IdentifierHelperBuilder}} {{unquotedCaseStrategy}} and {{quotedCaseStrategy}} to {{MIXED}}

{noformat}@Override
	public IdentifierHelper buildIdentifierHelper(IdentifierHelperBuilder builder, DatabaseMetaData dbMetaData)
			throws SQLException {

		// some MariaDB drivers does not return case strategy info
		builder.setUnquotedCaseStrategy( IdentifierCaseStrategy.MIXED );
		builder.setQuotedCaseStrategy( IdentifierCaseStrategy.MIXED );

		return super.buildIdentifierHelper( builder, dbMetaData );
	}{noformat}","10/févr./2022 04:57 AM;62048310733407006754f38b;Thanks for your reply. My project is using the following dialect:

{noformat}  hibernate:
    dialect: org.hibernate.dialect.MySQL5InnoDBDialect{noformat}

MySQLDialect provides following code, dbMetaData is not null in my case.

{noformat}@Override
public IdentifierHelper buildIdentifierHelper(IdentifierHelperBuilder builder, DatabaseMetaData dbMetaData)
		throws SQLException {

	if ( dbMetaData == null ) {
		builder.setUnquotedCaseStrategy( IdentifierCaseStrategy.MIXED );
		builder.setQuotedCaseStrategy( IdentifierCaseStrategy.MIXED );
	}

	return super.buildIdentifierHelper( builder, dbMetaData );
}{noformat}

I think the Dialect maybe a legacy value. Now, my project is using the “MariaDB 10.4.21-MariaDB-log”,  and I need to change the Dialect.

Which MariaDB Dialect should I choose? ","10/févr./2022 17:20 PM;62048310733407006754f38b;I change to MariaDBDialect, it works well for my project.

Please  consider to close this ticket.",,,,,,,,,,,,,Terminé,,
Conditional aggregations.,HSEARCH-4480,71955,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Incomplet,,,Olin Blodgett,557058:60e5e650-c540-412d-aeeb-d86c38d88199,Olin Blodgett,557058:60e5e650-c540-412d-aeeb-d86c38d88199,08/févr./2022 20:57 PM,08/févr./2022 23:24 PM,14/mars/2022 12:54 PM,08/févr./2022 23:24 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"So in the case of: 

.aggregation(aggkey, p -> \{

return p.terms().field(""search_field"", String.class).maxTermCount(10);

})

How does one put in a list of fields. I would like to be able to pass in a list of fields to get aggregations for. Or if lets say List<String> aggregation_fields; is empty not call the .aggregation() at all. Maybe this is just an education issue? Please educate me.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,nilo(nilo),yrodiere(fenrhil),,,,,,,,0|104y08:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-09 07:24:00.603,,,,"08/févr./2022 23:24 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I’d say create one aggregation key and call {{.aggregation}} once per field in your list? And none at all if there is no field?

In any case… for usage questions, please use [other channels|https://hibernate.org/community/], such as the forums or stackoverflow. This is for bug reports and feature requests only. We can always create Jira tickets once we determine your question actually requires a new feature.",,,,,,,,,,,,,,,,Terminé,,
Allow partial composite id generation for EmbeddedId,HHH-15074,71954,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/févr./2022 05:58 AM,08/févr./2022 05:58 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,"Hibernate currently allows to define partial generation for composite-ids using non-aggregations (think `@IdClass`).

Extend that to composite ids mapped as `@EmbeddedId` also",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104y00:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Criteria query built from JPA metamodel throws PersistenceException: Specified result type [long] did not match Query selection type [java.lang.Long],HHH-15073,71952,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/févr./2022 04:21 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,14/févr./2022 00:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,hibernate-core,,,,0,,,,,,"See reproducer: [https://github.com/hibernate/hibernate-orm/pull/4800|https://github.com/hibernate/hibernate-orm/pull/4800|smart-link] 

I’m getting things like this:

{noformat}jakarta.persistence.PersistenceException: Converting `org.hibernate.query.QueryTypeMismatchException` to JPA `PersistenceException` : Specified result type [long] did not match Query selection type [java.lang.Long] - multiple selections: use Tuple or array

	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:165)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:175)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:182)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:1284)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:118)
	at org.hibernate.orm.test.query.criteria.CriteriaPrimitiveIdTest.createQueryForIdentifierListing(CriteriaPrimitiveIdTest.java:58)
	at org.hibernate.orm.test.query.criteria.CriteriaPrimitiveIdTest.lambda$test$1(CriteriaPrimitiveIdTest.java:46)
	at org.hibernate.testing.transaction.TransactionUtil2.inTransaction(TransactionUtil2.java:96)
	at org.hibernate.testing.transaction.TransactionUtil2.lambda$inTransaction$0(TransactionUtil2.java:76)
	at org.hibernate.testing.transaction.TransactionUtil2.inSession(TransactionUtil2.java:35)
	at org.hibernate.testing.transaction.TransactionUtil2.inTransaction(TransactionUtil2.java:74)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.inTransaction(BaseCoreFunctionalTestCase.java:553)
	at org.hibernate.orm.test.query.criteria.CriteriaPrimitiveIdTest.test(CriteriaPrimitiveIdTest.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.hibernate.query.QueryTypeMismatchException: Specified result type [long] did not match Query selection type [java.lang.Long] - multiple selections: use Tuple or array
	at org.hibernate.query.spi.AbstractSelectionQuery.verifyResultType(AbstractSelectionQuery.java:323)
	at org.hibernate.query.spi.AbstractSelectionQuery.checkQueryReturnType(AbstractSelectionQuery.java:273)
	at org.hibernate.query.spi.AbstractSelectionQuery.visitQueryReturnType(AbstractSelectionQuery.java:215)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.<init>(QuerySqmImpl.java:256)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:1278)
	... 24 more{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-14T00:34:44.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),yrodiere(fenrhil),,,,,,,,0|104xzk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Default EmbeddableInstantiator for records,HHH-15072,71942,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,jschauder,61eece935a0988006b20848f,jschauder,61eece935a0988006b20848f,07/févr./2022 01:57 AM,08/mars/2022 08:48 AM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,,,,,0,,,,,,"Records seem to be an obvious choice for embbedded ids. Currently one needs to specify an embeddable instantiator to make that work. It would be nice to have records work out of the box, without any special configuration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:21ab730b-b175-415d-aa01-f7e8c15b0409(ug:21ab730b-b175-415d-aa01-f7e8c15b0409),,,,,,,,,0|104xxc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"""this.anticipatedType"" is null",HHH-15071,71941,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,jschauder,61eece935a0988006b20848f,jschauder,61eece935a0988006b20848f,07/févr./2022 01:53 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,08/mars/2022 10:52 AM,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,,,,,0,,,,,,"When using a Querydsl ""contains"" {{Predicate}} (like {{QUser.user.firstname.contains(…)}}), the execution of the predicate

{noformat}java.lang.NullPointerException: Cannot invoke ""org.hibernate.query.BindableType.getBindableJavaType()"" because ""this.anticipatedType"" is null
	at org.hibernate.query.spi.AbstractQueryParameter.getParameterType(AbstractQueryParameter.java:61)
	at com.querydsl.jpa.impl.JPAUtil.setConstants(JPAUtil.java:53)
	at com.querydsl.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:133)
	at com.querydsl.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:125)
	at com.querydsl.jpa.impl.AbstractJPAQuery.fetch(AbstractJPAQuery.java:242)
	…
{noformat}

The issue seems to be caused by the {{Parameter}} implementation's {{anticipatedType}} being {{null}} when resolved against the contains predicate. If the example is changed to an ""equals"" one, the test case doesn't break. Also, the test case runs fine on the latest Hibernate 5.

h2. 


Reproducer: [https://github.com/odrotbohm/hibernate-bugs/tree/main/h6-querydsl|https://github.com/odrotbohm/hibernate-bugs/tree/main/h6-querydsl|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T10:51:56.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:21ab730b-b175-415d-aa01-f7e8c15b0409(ug:21ab730b-b175-415d-aa01-f7e8c15b0409),,,,,,,,0|104xx4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Custom EmbeddedInstantiator not considered for embedded identifier types,HHH-15070,71940,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,jschauder,61eece935a0988006b20848f,jschauder,61eece935a0988006b20848f,07/févr./2022 01:45 AM,08/mars/2022 08:48 AM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,,,,,0,,,,,,"Sorry, the description field is not editable for me. A custom {{EmbeddedInstantiator}} explicitly defined on a type that's used as {{@EmbeddedId}} is not used. This can be observed by defining an embeddable class without a default constructor and specifying an EmbeddedInstantiator for it and then using that as an {{EmbeddedId}}. Hibernate fails to load such an entity because it is not able to instantiate the embedded id. It shouldn't actually need to do that as the construction will ultimately be done by the custom {{EmbeddableInstantiator}} defined. If you add a default constructor to the class, it works but through the default mechanism of actually setting values on the instance created through the default constructor. You can ultimately reveal the problem by rather using a Java record as id type as for those the JVM rejects setting field values in them. Note that the problem does not occur when loading by id since Hibernate seems to reuse the provided id. 



Reproducer: [https://github.com/odrotbohm/hibernate-bugs/tree/main/h6-embedded-id-record|https://github.com/odrotbohm/hibernate-bugs/tree/main/h6-embedded-id-record|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:21ab730b-b175-415d-aa01-f7e8c15b0409(ug:21ab730b-b175-415d-aa01-f7e8c15b0409),,,,,,,,,0|104xww:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Clean up rendundant ""public"" modifiers",HSEARCH-4479,71939,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/févr./2022 23:56 PM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,07/févr./2022 00:03 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,engine,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-07T00:02:31.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2884,0|104xn3:xr,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against AWS OpenSearch service,HSEARCH-4478,71938,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/févr./2022 04:48 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,04/févr./2022 07:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-04T07:35:31.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2879,0|104xn3:xi,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Backwards-incompatible changes in SequenceStyleGenerator (and others) following default_schema changes,HHH-15069,71937,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/févr./2022 01:53 AM,08/févr./2022 03:06 AM,14/mars/2022 12:54 PM,08/févr./2022 03:06 AM,5.6.2,5.6.3,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,,,,,,,,,,,,,0,,,,,,See [https://github.com/liquibase/liquibase/issues/2456|https://github.com/liquibase/liquibase/issues/2456|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-04T05:00:46.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4790,0|104xwo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"After importing dependencies, the startup fails without configuring backend. Can you set a switch so that nothing is done when only dependencies are imported?",HSEARCH-4477,71936,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Chaohui Yang,5a5b464c8461ef677679b88c,Chaohui Yang,5a5b464c8461ef677679b88c,03/févr./2022 22:42 PM,04/févr./2022 07:07 AM,14/mars/2022 12:54 PM,03/févr./2022 23:41 PM,6.1.0.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,integration,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:2e0d2a45-abf7-421f-bb15-8a7c538a107f(ug:2e0d2a45-abf7-421f-bb15-8a7c538a107f),yrodiere(fenrhil),,,,,,,,0|104xwg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-04 07:41:14.091,,,,"03/févr./2022 23:41 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;There already is such a switch: https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#mapper-orm-mapping-configuration-enabling-disabling

Closing.",04/févr./2022 07:07 AM;5a5b464c8461ef677679b88c;very thanks,,,,,,,,,,,,,,,Terminé,,
"""CDI BeanManager not (yet) ready to use"" when refferring to a user type by name and using an ExtendedBeanManager",HHH-15068,71934,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/févr./2022 04:25 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,04/févr./2022 01:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,hibernate-core,,,,0,,,,,,I encountered this problem while working on the ORM 6 / Search 6 integration in WildFly: [https://github.com/wildfly/wildfly/pull/15185|https://github.com/wildfly/wildfly/pull/15185|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-04T01:20:57.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4777,0|104xw0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Make NonNullableTransientDependencies.(String propertyName, Object transientEntity) method public",HHH-15067,71930,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,BARRY LAFOND,617715cb860f78006b1c7f79,BARRY LAFOND,617715cb860f78006b1c7f79,02/févr./2022 10:54 AM,02/févr./2022 10:54 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,Hibernate Reactive issue [#1077|https://github.com/hibernate/hibernate-reactive/issues/1077] requires making this method allow utilizing the {{NonNullableTransientDependencies}} class to support a reactive version of {{ForeignKeys.findNonNullableTransientEntities()}} to support non-nullable associations,hibernate-orm release 5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-03T12:14:05.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:537f89dc-983c-4f70-9106-6f6905f90210(ug:537f89dc-983c-4f70-9106-6f6905f90210),,,,,,,,,0|104xv4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
allow @Bag (and @List) at type and package level,HHH-15066,71929,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,02/févr./2022 10:02 AM,02/févr./2022 10:02 AM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Currently {{@Bag}} is allowed only at the field-level. We could allow it at the type and package level. Then it would also make sense to introduce its inverse, {{@List}}, which would also be allowed at type and package level.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,gavin.king(gavin.king),,,,,,,,,0|104xuw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Lucene 9,HSEARCH-4476,71928,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Doublon,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/févr./2022 09:11 AM,02/févr./2022 09:20 AM,14/mars/2022 12:54 PM,02/févr./2022 09:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,backend-lucene,,,,0,,,,,,,https://cwiki.apache.org/confluence/display/LUCENE/Release+Notes+9.0,,,,,,,,,,,,,,,HSEARCH-4393,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104xuo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"02/févr./2022 09:20 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Closing as duplicate of HSEARCH-4393. We can't do this in 6.x, as it would require dropping JDK 8 support.",,,,,,,,,,,,,,,,Terminé,,
Add compatibility with Elasticsearch 8.0.0,HSEARCH-4475,71927,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/févr./2022 04:52 AM,14/févr./2022 08:23 AM,14/mars/2022 12:54 PM,14/févr./2022 08:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,integration,tests,,0,,,,,,[https://www.elastic.co/guide/en/elasticsearch/reference/8.0/release-notes-8.0.0.html|https://www.elastic.co/guide/en/elasticsearch/reference/8.0/release-notes-8.0.0.html],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-14T08:19:50.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2896,0|104xn3:y,,,,,,HSEARCH - 2022-04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.17.0,HSEARCH-4474,71926,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/févr./2022 03:22 AM,07/févr./2022 09:10 AM,14/mars/2022 12:54 PM,07/févr./2022 09:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-07T09:09:43.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2877,0|104xn3:x,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 7.17,HSEARCH-4473,71925,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/févr./2022 03:21 AM,07/févr./2022 09:10 AM,14/mars/2022 12:54 PM,07/févr./2022 09:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,backend-elasticsearch,integration,tests,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-07T09:09:43.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2877,0|104xn3:v,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Move the release job to a separate Jenkinsfile,HSEARCH-4472,71924,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/févr./2022 01:16 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,02/févr./2022 05:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,6.0.9.Final,6.1.1.Final,,,,,,build,,,,0,,,,,,"I want to cancel previous builds when a new build starts for a given branch/PR, with [this option|https://github.com/jenkinsci/workflow-job-plugin/pull/200], but that would be problematic during releases, since the release pushes to github and triggers new builds _while it’s still ongoing_.

The solution to that problem is to separate the release job from the CI job.

For all intended purposes, they are already separate anyway: we don’t run the default build or tests when we release.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=5}, build={count=1, dataType=build, failedBuildCount=1, successfulBuildCount=0, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":5,""lastUpdated"":""2022-02-08T02:27:26.000-0800"",""stateCount"":5,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":1,""successfulBuildCount"":0,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2876,0|104xn3:i,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Non-deterministic SQL statements when applying an EntityGraph with multiple attributes,HHH-15065,71923,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Benedikt Waldvogel,557058:2b5ba804-6d88-4ebe-944b-996a60a66133,Benedikt Waldvogel,557058:2b5ba804-6d88-4ebe-944b-996a60a66133,01/févr./2022 07:33 AM,02/févr./2022 02:11 AM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"When using an {{EntityGraph}} with multiple attributes, the generated HQL/SQL query is *not deterministic* and varies on different JVM instances.

It might seem irrelevant but non-deterministic SQL statements can be problematic in some cases.
In my case we compare the actual SQL statements in a regression test. With the current implementation of Hibernate, this test breaks _sometimes_.

I can also imagine that changing SQL statements could have a negative impact in production. For example, as far as I remember, [MariaDB’s query cache|https://mariadb.com/kb/en/query-cache/] only works if *identical statements* are used.
Furthermore, it wouldn’t surprise me if changing/non-deterministic statements are a challenge for some query planners/optimizers.

Note: *I cannot reproduce the bug on the main branch*. I’ve submitted [https://github.com/hibernate/hibernate-orm/pull/4767|https://github.com/hibernate/hibernate-orm/pull/4767|smart-link] which adds a test.

It seems that entity graph support was deterministic right from the beginning during the development of Hibernate 6.0. I can see that {{6.0.0.Alpha4}} already generated deterministic statements. {{6.0.0.Alpha3}} apparently didn't (fullly) implement entity graphs.

h2. How to reproduce

I’ve submitted a [pull request for the 5.6 branch|https://github.com/hibernate/hibernate-orm/pull/4766] that contains a minimal reproducer and also a suggestion how it could be fixed for Hibernate 5.6.

h3. *Given* are the two entities that are related to each other:

{code:java}@Entity
public class Book {
    @Id
    Long id;

    String name;

    @ManyToOne
    Person author;

    @ManyToOne
    Person coAuthor;
}

@Entity
public class Person {
    @Id
    Long id;

    String name;
}{code}

h3. *When* creating a query with an EntityGraph that has two attributes…

{code:java}EntityGraph<Book> entityGraph = entityManager.createEntityGraph(Book.class);
entityGraph.addAttributeNodes(""author"", ""coAuthor"");

entityManager.createQuery(""select b from Book b"")
	.setHint(""javax.persistence.fetchgraph"", entityGraph)
	.getResultList();{code}

h3. *Then* I expect that Hibernate generates and executes always the same query:

{code:sql}select b1_0.id, a1_0.id, a1_0.name, c1_0.id, c1_0.name, b1_0.name 
from Book b1_0 
join Person a1_0 on a1_0.id=b1_0.author_id 
left join Person c1_0 on c1_0.id=b1_0.coAuthor_id{code}

However, the joins are sometimes in a *different order*. It’s easier to reproduce if the entity graph has more than two attributes.

From what I understood during a debugging session, the root cause is {{org.hibernate.graph.internal.AbstractGraph}} which internally uses a *HashMap* for the attribute nodes.
When I monkey-patch AbstractGraph to use a *LinkedHashMap* instead of the HashMap, the generated SQL statements are fully deterministic in my scenario.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-02-02T02:10:05.000-0800"",""stateCount"":2,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:062364c3-4f3c-4e05-8637-984c4bbcead0(ug:062364c3-4f3c-4e05-8637-984c4bbcead0),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4766,0|104xug:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,A faire,,
Some cache keys aren't implement  Serializable interface,HHH-15064,71922,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Nikita Koksharov,61f92718c6bd1a00691cd32c,Nikita Koksharov,61f92718c6bd1a00691cd32c,01/févr./2022 04:37 AM,01/févr./2022 04:37 AM,14/mars/2022 12:54 PM,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hello Team,

I'm trying to integrate Redisson project with Hibernate 6.0.0 CR1, but getting errors in attached log file.

It appears that org.hibernate.metamodel.mapping.internal.VirtualEmbeddedAttributeMapping and org.hibernate.query.internal.QueryParameterBindingsImpl$ParameterBindingsMementoImpl aren’t implement Serializable interface.

Could you add Serializable interface to these objects since they participant in query key object.",Java 11,,,,,,,,,,,,,,,,,,,,,,,,,,,,01/févr./2022 04:35 AM;ug:3571c188-c4c5-4bc9-803a-90caf18ef14c;out.log;https://hibernate.atlassian.net/secure/attachment/49970/out.log,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:3571c188-c4c5-4bc9-803a-90caf18ef14c(ug:3571c188-c4c5-4bc9-803a-90caf18ef14c),,,,,,,,,0|104xu8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,A faire,,
Customizable entity loading queries in mass indexer,HSEARCH-4471,71921,,Amélioration,Rouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,masrawi,557058:2f839406-1e1e-43f7-859b-d3c8267bab28,masrawi,557058:2f839406-1e1e-43f7-859b-d3c8267bab28,01/févr./2022 03:21 AM,01/févr./2022 09:07 AM,14/mars/2022 12:54 PM,,6.1.0.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,massindexer,,,,0,,,,,,we have a very large dataset with complex objects. we would like the ability to control how the query is created for the mass reindexing. something like select b.lastname from Entity b. this would allow us to load only relevant fields for the reindexing and dramatically speed up the process. it would be great to be able to plugin out strategy to the {{HibernateOrmMassEntityLoader}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,masrawi(masrawi),yrodiere(fenrhil),,,,,,,,0|104xu0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-01 11:45:53.071,,,,"01/févr./2022 03:45 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Thanks for reporting this, but I’m going to close this ticket as duplicate of [https://hibernate.atlassian.net/browse/HSEARCH-1813|https://hibernate.atlassian.net/browse/HSEARCH-1813|smart-link]  , since it’s very similar.

Let’s continue the discussion there 🙂 ","01/févr./2022 07:47 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It seems this does not duplicate [https://hibernate.atlassian.net/browse/HSEARCH-1813|https://hibernate.atlassian.net/browse/HSEARCH-1813|smart-link] after all, since an entity graph would not get rid of formulas (though maybe it should; probably something to report to the ORM project?).

Reopening.

See also the discussion [here|https://hibernate.atlassian.net/browse/HSEARCH-1813?focusedCommentId=108890]:

{quote}masrawi:

please consider also the ability for us to be able to customize the query needed for the reindexing. in earlier releases we had to overwrite {{IdentifierConsumerDocumentProducer}} in order to reduce the time from several hours to several minutes. it would be nice to be able to have the massindexer expose a parameter for just this

yrodiere:

That’s interesting. I may be ignorant of some of the inefficiencies we’re trying to avoid here, but I thought a fetch graph would be enough.

Do you have an example of a use case where a fetch graph (inferred automatically by Hibernate Search) would not be enough to improve loading time and avoid unnecessary loading, while a custom query would?

masrawi:

we use very heavily the formula annotation to add subquery to the entity for example and we don’t need them for reindexing{quote}","01/févr./2022 07:58 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;We could possibly provide an API similar to {{org.hibernate.search.mapper.javabean.loading.MassLoadingStrategy}} (not currently published, only present in the git repo), but adapted to Hibernate ORM. The main questions are:

* how much customization to allow (customizing the IDs to load might be interesting too, I suppose?)
* how much customization to mandate (do we want to allow customizing ID loading without customizing entity loading, and vice-versa?)
* where to provide the strategy (annotations? programmatic mapping? mass indexer options? something else?)","01/févr./2022 09:06 AM;557058:2f839406-1e1e-43f7-859b-d3c8267bab28;yaml configuration like 

{code:yaml}hibernate.search.backend.loadEntityStrategy: xxx{code}



 _and_ programatic 



{code:java}massIndexer.loadEntityStrategy(xx){code}



id loading might be interesting too but in our case not relevant",,,,,,,,,,,,,A faire,,
Add mapping code examples to the documentation of @IndexedEmbedded.structure,HSEARCH-4470,71919,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/févr./2022 00:37 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,04/févr./2022 05:50 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,documentation,,,,0,,,,,,"This part of the documentation is a bit dry at the moment, and I’ve noticed there isn’t a single code example using {{@IndexedEmbedded(structure = ...)}}, so this might be the right place to add one.

See [https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-orm-indexedembedded-structure|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-orm-indexedembedded-structure|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-04T00:21:45.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2878,0|104xn2:,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support orphan-removal for one-to-one inside @Embeddable,HHH-15063,71918,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,phalas,5c1ce7ac36647b5b9101522c,phalas,5c1ce7ac36647b5b9101522c,01/févr./2022 00:37 AM,01/févr./2022 00:42 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"This is similar case as in [https://hibernate.atlassian.net/browse/HHH-4815|https://hibernate.atlassian.net/browse/HHH-4815|smart-link] (which was fixed in [HHH-9663]) but in case you set the embeddable to null I would expect that orphan OneToOne entity inside Embeddable is also removed. 

See PR for test case example → [https://github.com/hibernate/hibernate-orm/pull/4759|https://github.com/hibernate/hibernate-orm/pull/4759|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-01T00:41:49.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:53ab92e1-55bc-4693-b72b-09b435cc4a7a(ug:53ab92e1-55bc-4693-b72b-09b435cc4a7a),,,,,,,,,0|104xtk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Specifying default_schema breaks joined inheritance delete,HHH-15062,71917,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Magnus Mogren,557058:85e9f876-deef-4a4e-86fe-b6fd13ea8c85,Magnus Mogren,557058:85e9f876-deef-4a4e-86fe-b6fd13ea8c85,31/janv./2022 17:03 PM,20/févr./2022 04:14 AM,14/mars/2022 12:54 PM,,5.6.2,5.6.3,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"If using joined inheritance and non default schema (specifying hibernate.default_schema) then deleting using CriteriaDelete will not work.

The schema is specified in the SQL to insert data into the temporary table created, and that does not seem to work.

In version 5.6.2 and 5.6.3 a faulty statement containing the schema twice is created:
{{insert into testing.testing.MODULE.HT_Employee select ...}}

In version 5.6.4 and 5.6.5 it is still faulty, but the schema is only specified once:
{{insert into testing.MODULE.HT_Employee select ...}}

In version 5.6.1 this works fine.
A temporary table is created first followed by insert and delete and the insert does not prefix the temporary table with schema:
{{declare local temporary table MODULE.HT_Employee ...}}
{{insert into MODULE.HT_Employee select ...}}
{{delete from testing.Employee where (personId) IN (select personId from MODULE.HT_Employee)}}


This is reproduced in a simple Spring Boot project with a JUnit test here: [https://github.com/nytro77/hibernate-default_schema-bug|https://github.com/nytro77/hibernate-default_schema-bug|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,magmog(magmog),,,,,,,,,0|104xtc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,20/févr./2022 04:11 AM;557058:85e9f876-deef-4a4e-86fe-b6fd13ea8c85;Is this bug likely to be fixed in 5.6.6?,,,,,,,,,,,,,,,,A faire,,
Test Hibernate Search against OpenJDK 19,HSEARCH-4469,71907,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,31/janv./2022 04:08 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,31/janv./2022 06:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,integration,tests,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-31T06:15:17.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2875,0|104xn0:,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
temporary orphan with new parent gets removed,HHH-15061,71904,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Johannes Dieckmann,557058:0f386db0-e167-4126-8f81-7f8ce5e697f3,Johannes Dieckmann,557058:0f386db0-e167-4126-8f81-7f8ce5e697f3,31/janv./2022 01:47 AM,31/janv./2022 01:47 AM,31/janv./2022 12:19 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,bidirection,collection,orphan-removal,,,Moving a child from its parent to a new parent that was created in the same transaction removes the child.,"macOS 12.0.1, jdk 15.0.1, h2",,,,,,,,,,,,,,,,,,,,,,,,,,,,31/janv./2022 01:36 AM;ug:11fe0161-14e5-4ffd-8b08-3c8f67e0cdc3;BidirectionalListKeepOrphansWithNewParentTest.java;https://hibernate.atlassian.net/secure/attachment/49969/BidirectionalListKeepOrphansWithNewParentTest.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:11fe0161-14e5-4ffd-8b08-3c8f67e0cdc3(ug:11fe0161-14e5-4ffd-8b08-3c8f67e0cdc3),,,,,,,,,0|104xqo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to slf4j 1.7.35,HSEARCH-4468,71901,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,31/janv./2022 00:22 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,31/janv./2022 03:03 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-31T03:02:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2874,0|104mtz:ze9,,,,,,HSEARCH - 2022-2,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade build dependencies to the latest version,HSEARCH-4467,71900,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,31/janv./2022 00:20 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,07/févr./2022 01:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-02-07T01:38:33.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2874,0|104mtz:ze4,,,,,,HSEARCH - 2022-2,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test automatic indexing of bags as well as lists,HSEARCH-4466,71899,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/janv./2022 23:37 PM,03/mars/2022 02:20 AM,14/mars/2022 12:54 PM,03/mars/2022 02:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,"In ORM 5:

* a {{List}} with list semantic would be {{@OrderColumn List}}
* a {{List}} with bag semantics would be {{Collection}} or {{List}} without {{@OrderColumn}} (but potentially with {{@OrderBy}})

Careful, it’s different in ORM 6 (at least in 6.0.0.CR1; that may change):

* a {{List}} with list semantic would be {{@OrderColumn List}} OR a {{List}} without {{@OrderColumn}} nor {{@Bag}}
* a {{List}} with bag semantics would be {{Collection}} or {{@Bag List}} (potentially with {{@OrderBy}})",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-03T09:07:14.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2917,0|0zzzzc:,,,,,,HSEARCH - 2022-04,HSEARCH - 2022-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix handling of associations with @NotFound,HHH-15060,71898,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,28/janv./2022 07:48 AM,14/mars/2022 08:34 AM,14/mars/2022 12:54 PM,14/mars/2022 08:33 AM,5.3.25,5.6.5,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.26,5.6.6,,,,,,,,hibernate-core,,,,0,,,,,,"After a lot of discussion, we came to the conclusion that the intent of {{@NotFound(IGNORE)}} is to signal that Hibernate has to join the association in case of any attribute de-reference, because the target object might not exist.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-02-28T08:33:30.000-0800"",""stateCount"":2,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),steve(steve),,,,,,,,0|104xq0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-01 18:35:28.293,,,,"01/févr./2022 10:35 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Well to be clear, the intent of {{@NotFound}} is to indicate that a non-null FK may not point to a valid associated row.  The only way to know this situation is to look at both sides of the FK",02/févr./2022 07:21 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Wanted to further clarify my comment… it is not just {{@NotFound(IGNORE)}} that needs this special treatment.  {{@NotFound(EXCEPTION)}} also falls under this discussion.,01/mars/2022 09:21 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Going to split these up into separate 5.x and 6.x issues.  6.x gives us more flexibility for additional improvements beyond what is possible in 5.x,,,,,,,,,,,,,,Terminé,,
Pre-collection remove envers event listener leads to OOM,HHH-15059,71897,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Ivaylo Mitrev,557058:927bb080-5c30-4c06-a121-c4cb61747b5e,Ivaylo Mitrev,557058:927bb080-5c30-4c06-a121-c4cb61747b5e,28/janv./2022 07:37 AM,24/févr./2022 07:32 AM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"h2. Introduction

We recently encountered an out of memory issue in our application that uses Hibernate Envers which we believe to be caused by the force-initialization performed in {{EnversPreCollectionRemoveEventListenerImpl}}.

h2. Setup

We have a setup similar to the following:

{noformat}@Audited
@Entity
@Table(name = ""foo"")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class Foo {

    @Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = ""id"", nullable = false, insertable = true, updatable = false)
	private Long id;

	@NotAudited
	@ManyToMany
	@LazyCollection(LazyCollectionOption.EXTRA)
	@JoinTable(name = ""table"",
			joinColumns = @JoinColumn(name = ""foo_id"", referencedColumnName = ""id""),
			inverseJoinColumns = @JoinColumn(name = ""bar_id"", referencedColumnName = ""id""))

	private Set<Bar> Bar = new LinkedHashSet<>();
}

@Audited
@Entity
@Table(name = ""bar"")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class Bar {

    @Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = ""id"", nullable = false, insertable = true, updatable = false)
	private Long id;

	@ManyToMany(mappedBy = ""Bar"")
	@LazyCollection(LazyCollectionOption.EXTRA)
	private Set<Foo> Foo = new LinkedHashSet<>();
}{noformat}

As can be observed, the setup is fairly simple:

* two audited entities Foo and Bar
* non-audited junction table between the two

You can assume we have many more non-audited references from Foo to other entities similar to Bar. The list of actual entities Foo points to via these references can grow to millions with ease.

h2. Reproduction scenario

The actual problem comes when we try to delete Foo without de-referencing it first:

{noformat}session.delete(foo);
session.flush();{noformat}

What happens underneath in this case is that about 60+ (the number of references we have) {{org.hibernate.action.internal.CollectionRemoveAction}}s are created and executed in an attempt to delete the references to Foo from the junction tables (which is to be expected).

The action, naturally, calls {{preRemove()}} which triggers a {{PreCollectionRemoveEvent}} which is then processed by {{org.hibernate.envers.event.spi}}.{{EnversPreCollectionRemoveEventListenerImpl}}. The event listener’s checks pass since both Foo and the likes of Bar are audited and {{onCollectionAction}} is called which determines there is no work to be done (I would assume because of the {{@NotAudited}} annotation on the {{@ManyToMany}} reference field, but I have not checked since it is not important to the scenario).

What is important to the scenario, however, is that {{org.hibernate.envers.event.spi}}.{{EnversPreCollectionRemoveEventListenerImpl}} force-initializes the collections through {{initializeCollection()}}. As I mentioned earlier, these collections can be quite large and the force-initialization brings them in-memory to never clean them again, thus leading to an OOM after eating up ~3GB of memory.

As a workaround, we can de-reference Foo manually, but we expected that this should not be required?

The question boils down to: are we doing something wrong to provoke this behavior or is there a memory issue in the event listener that needs to be addressed?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,crancran(crancran),ug:279a92ab-0da2-41cd-b8f8-9c783d05cc2f(ug:279a92ab-0da2-41cd-b8f8-9c783d05cc2f),,,,,,,,0|104xps:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/févr./2022 07:32 AM;557058:927bb080-5c30-4c06-a121-c4cb61747b5e;A note: I have purposely not added a test case despite this being a bug report.

The reasoning behind it is that an OOM is usually cumbersome to reproduce. It would need either an application with a sufficient amount of data pre-created or means of showing that the session size grows indefinitely. Both are application/usage-specific and not easily observable by a test case in the hibernate-envers component.

If you think any of these might be helpful, I’ll happily provide them as test cases, but, as per my arguments, I am not convinced such would be of use.",,,,,,,,,,,,,,,,A faire,,
Add unwrap() method to MutationQuery,HHH-15058,71896,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/janv./2022 03:17 AM,28/janv./2022 06:18 AM,14/mars/2022 12:54 PM,28/janv./2022 06:18 AM,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Otherwise, legacy applications that must rely on the {{Query}} interface for update/delete queries cannot avoid using the deprecated {{createQuery(String)}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-28T06:18:04.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4733,0|104xpk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"JdbcSQLException: NULL not allowed for column ""BOOKS_ORDER"" when inserting into many-to-many list",HHH-15057,71894,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/janv./2022 00:51 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,02/févr./2022 09:10 AM,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,hibernate-core,,,,0,,,,,,"See [https://github.com/hibernate/hibernate-orm/pull/4727|https://github.com/hibernate/hibernate-orm/pull/4727|smart-link] 

{noformat}jakarta.persistence.PersistenceException: Converting `org.hibernate.exception.ConstraintViolationException` to JPA `PersistenceException` : could not execute statement

	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:165)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:175)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:182)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1394)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:464)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2201)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1897)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.hibernate.testing.orm.transaction.TransactionUtil.wrapInTransaction(TransactionUtil.java:54)
	at org.hibernate.testing.orm.transaction.TransactionUtil.inTransaction(TransactionUtil.java:24)
	at org.hibernate.testing.orm.junit.SessionFactoryExtension$SessionFactoryScopeImpl.inTransaction(SessionFactoryExtension.java:362)
	at org.hibernate.testing.orm.junit.SessionFactoryExtension$SessionFactoryScopeImpl.inTransaction(SessionFactoryExtension.java:339)
	at org.hibernate.orm.test.mapping.manytomany.ManyToManyListBidirectionalTest.test(ManyToManyListBidirectionalTest.java:39)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:95)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:56)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:109)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:95)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:39)
	at org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1525)
	at org.hibernate.action.internal.CollectionRecreateAction.execute(CollectionRecreateAction.java:47)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:612)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:483)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:480)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:343)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1390)
	... 81 more
Caused by: org.h2.jdbc.JdbcSQLException: NULL not allowed for column ""BOOKS_ORDER""; SQL statement:
insert into book_author (fk_book, authors_ORDER, fk_author) values (?, ?, ?) [23502-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:374)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:798)
	at org.h2.command.dml.Insert.insertRows(Insert.java:177)
	at org.h2.command.dml.Insert.update(Insert.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:199)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:153)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	... 92 more


Process finished with exit code 255
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-02T09:09:39.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104xp4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/janv./2022 06:55 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;See [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/List.20are.20no.20longer.20bags.20by.20default.3F|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/List.20are.20no.20longer.20bags.20by.20default.3F]

The problem seems to be that we add an order column for both sides of the association, which is not supported (even when using {{@OrderColumn}} explicitly, even in ORM 5.x).

So the non-owning side of a many-to-many association will have to remain a bag, independently from whatever is configured as the default list semantics.

From what I’ve seen this will have to be implemented in {{org.hibernate.cfg.annotations.CollectionBinder#determineCollectionClassification(java.lang.Class<?>, org.hibernate.annotations.common.reflection.XProperty, org.hibernate.boot.spi.MetadataBuildingContext)}}

The only remaining question is whether we keep applying the default list semantics to the _owning_ side of the many-to-many association.",,,,,,,,,,,,,,,,Terminé,,
Fields annotated with @Column(updatable=false) set null value in 2nd level cache,HHH-15056,71893,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Xinyu Gao,61f39651571f760071840d04,Xinyu Gao,61f39651571f760071840d04,28/janv./2022 00:27 AM,28/janv./2022 00:28 AM,14/mars/2022 12:54 PM,,5.6.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-jcache,,,,0,,,,,,"I have two entity with 2nd level cache enable using caffeine:

{code:java}@Entity
@Table(name = ""slide"")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Slide {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = ""id"")
    private Long id;

    @NotNull
    @Size(max = 64)
    @Column(name = ""name"", length = 64, nullable = false)
    private String name;

    @JoinColumn(updatable = false)
    @ManyToOne
    private Display display;

    @CreatedBy
    @Column(name = ""created_by"", updatable = false)
    private Long createdBy;

    @CreatedDate
    @Column(name = ""created_at"", updatable = false)
    private Instant createdAt;
}

@Entity
@Table(name = ""display"")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Display {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = ""id"")
    private Long id;

    @NotNull
    @Size(max = 64)
    @Column(name = ""name"", length = 64, nullable = false)
    private String name;

    @OneToMany(cascade = CascadeType.REMOVE, mappedBy = ""display"")
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    private Set<Slide> slides = new HashSet<>();

    @CreatedBy
    @Column(name = ""created_by"", updatable = false)
    private Long createdBy;

    @CreatedDate
    @Column(name = ""created_at"", updatable = false)
    private Instant createdAt;
}{code}

I saved Display, and then save Slide with the following code:

{code:java}Slide slide = new Slide();
slide.setName(""the name"");
slide.setDisplay(display);
slideRepository.save(slide);{code}

It's ok when I get Slide by slide id from cache:

{code:java}Slide slide = slideRepository.findById(1L).get();
System.out.println(slide.getName());    // the name
System.out.println(slide.getDisplay().getId()); // 44(display id)
System.out.println(slide.getCreatedBy());   // 10624(user id)
System.out.println(slide.getCreatedAt());   // 2022-01-28T07:56:12Z{code}

Then I update the slide without setting the value of Display and so on because I set updatable=false:

{code:java}Slide slide = new Slide();
slide.setId(1L);
slide.setName(""change name"");
slideRepository.save(slide);{code}

Now when I get Slide by slide id again, it casue the problem:

{code:java}Slide slide = slideRepository.findById(1L).get();
System.out.println(slide.getName());    // change name
System.out.println(slide.getDisplay().getId()); // npe(display is null)
System.out.println(slide.getCreatedBy());   // null
System.out.println(slide.getCreatedAt());   // null{code}

It return to peace after I clear 2nd level cache:

{code:java}// clear the cache first
em.getCache().unwrap(org.hibernate.Cache.class).evictAllRegions();

Slide slide = slideRepository.findById(1L).get();
System.out.println(slide.getName());    // change name
System.out.println(slide.getDisplay().getId()); // 44(display id)
System.out.println(slide.getCreatedBy());   // 10624(user id)
System.out.println(slide.getCreatedAt());   // 2022-01-28T07:56:12Z{code}

So the problem is I have to set the value of all columns though some of them have already annotated with updatable=false if I still want to use 2nd level cache:

{code:java}Slide existSlide = slideRepository.findById(1L).get();
Slide slide = new Slide();
slide.setId(1L);
slide.setName(""change name"");
slide.setDisplay(existSlide.getDisplay());
slide.setCreatedBy(existSlide.getCreatedBy());
slide.setCreatedAt(existSlide.getCreatedAt());
slideRepository.save(slide);{code}

I think the cache can be more intellective to deal with this situation by keeping the value of these columns when updating the cache of the entity. I also understand the cache may be not exist when I update an entity directly so It doesn't know the original value. Maybe it shouldn't create the cache in this situation or getting the old value from db before transaction commited first?

The code above is just an example to show the issue and I'm annoyed by dealing with these problem in everywhere of my application.

By the way, the *Repository extends JpaRepository.

See also: [Updating an entity with updatable=false set the field to null|https://stackoverflow.com/questions/42023070/updating-an-entity-with-updatable-false-set-the-field-to-null]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:a68ebeb1-2479-4bd8-92a5-07afc7f61b79(ug:a68ebeb1-2479-4bd8-92a5-07afc7f61b79),,,,,,,,,0|104xow:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade -orm6 artifacts to Hibernate ORM 6.0.0.CR1,HSEARCH-4465,71892,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/janv./2022 00:18 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,30/janv./2022 23:33 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-31T03:02:49.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2866,0|104xni:,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Document SelectionQuery and MutationQuery,HHH-15055,71891,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/janv./2022 09:29 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,HHH-15030,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-05T08:49:54.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104xoo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
NPE on cascade-delete for @OneToMany(mappedBy = ...) association,HHH-15054,71890,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,27/janv./2022 08:34 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,08/févr./2022 07:35 AM,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,hibernate-core,,,,0,,,,,,"See [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/NPE.20on.20cascade-delete.20for.20.40OneToMany.28mappedBy.20.3D.20.2E.2E.2E.29|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/NPE.20on.20cascade-delete.20for.20.40OneToMany.28mappedBy.20.3D.20.2E.2E.2E.29]

See [https://github.com/hibernate/hibernate-orm/pull/4729|https://github.com/hibernate/hibernate-orm/pull/4729|smart-link] 

{noformat}java.lang.NullPointerException
	at org.hibernate.sql.results.graph.collection.internal.ListInitializer.readCollectionRow(ListInitializer.java:71)
	at org.hibernate.sql.results.graph.collection.internal.AbstractImmediateCollectionInitializer.lambda$initializeInstance$1(AbstractImmediateCollectionInitializer.java:297)
	at org.hibernate.sql.results.internal.LoadingCollectionEntryImpl.load(LoadingCollectionEntryImpl.java:69)
	at org.hibernate.sql.results.graph.collection.internal.AbstractImmediateCollectionInitializer.initializeInstance(AbstractImmediateCollectionInitializer.java:296)
	at org.hibernate.sql.results.internal.StandardRowReader.coordinateInitializers(StandardRowReader.java:150)
	at org.hibernate.sql.results.internal.StandardRowReader.readRow(StandardRowReader.java:91)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:116)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:25)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:430)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:167)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:95)
	at org.hibernate.loader.ast.internal.CollectionLoaderSingleKey.load(CollectionLoaderSingleKey.java:121)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:808)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:75)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:1678)
	at org.hibernate.collection.spi.AbstractPersistentCollection.lambda$initialize$3(AbstractPersistentCollection.java:564)
	at org.hibernate.collection.spi.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:246)
	at org.hibernate.collection.spi.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:562)
	at org.hibernate.collection.spi.AbstractPersistentCollection.read(AbstractPersistentCollection.java:136)
	at org.hibernate.collection.spi.PersistentList.iterator(PersistentList.java:168)
	at org.hibernate.type.CollectionType.getElementsIterator(CollectionType.java:238)
	at org.hibernate.type.CollectionType.getElementsIterator(CollectionType.java:228)
	at org.hibernate.engine.spi.CascadingActions.getAllElementsIterator(CascadingActions.java:477)
	at org.hibernate.engine.spi.CascadingActions$1.getCascadableChildrenIterator(CascadingActions.java:66)
	at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:543)
	at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:476)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:436)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:219)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:152)
	at org.hibernate.event.internal.DefaultDeleteEventListener.cascadeBeforeDelete(DefaultDeleteEventListener.java:356)
	at org.hibernate.event.internal.DefaultDeleteEventListener.deleteEntity(DefaultDeleteEventListener.java:277)
	at org.hibernate.event.internal.DefaultDeleteEventListener.onDelete(DefaultDeleteEventListener.java:150)
	at org.hibernate.event.internal.DefaultDeleteEventListener.onDelete(DefaultDeleteEventListener.java:70)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.fireDelete(SessionImpl.java:919)
	at org.hibernate.internal.SessionImpl.delete(SessionImpl.java:851)
	at org.hibernate.internal.SessionImpl.remove(SessionImpl.java:2252)
	at org.hibernate.orm.test.ops.OneToManyMappedByCascadeDeleteTest.lambda$testRemoveCascadeDelete$2(OneToManyMappedByCascadeDeleteTest.java:64){noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-08T07:32:25.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),yrodiere(fenrhil),,,,,,,,0|104xog:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-08 15:35:23.981,,,,"28/janv./2022 07:29 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Copying from Zulip, for the record:

{quote}Yoann Rodiere: So, it turns out this problem ([HHH-15054|https://hibernate.atlassian.net/browse/HHH-15054]) has a similar cause as [HHH-15057|https://hibernate.atlassian.net/browse/HHH-15057] (the problem with the non-owning side of a list many-to-one association)

Yoann Rodiere: We're talking about a OneToMany here

Yoann Rodiere: but it's the non-owning side

Yoann Rodiere: traditionally, such an association can be persisted by populating only the owning side, a many-to-one

Yoann Rodiere: but if you change the semantics to List, then we must know the order when we persist. If the user doesn't correctly populate the non-owning side... we persist {{NULL}} values in the order column

Yoann Rodiere: and when we load the collection again, everthing fails

Yoann Rodiere: (I'm a bit surprised it doesn't fail earlier, but whatever)

Yoann Rodiere: So yeah... it seems changing the semantics of one-to-many lists has unintended consequences on how users should deal with their association updates as well{quote}","08/févr./2022 07:35 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;The problem is when you use a {{@OrderColumn}} for a {{@OneToMany(mappedBy = ""..."")}} and don't make sure the one-to-many side is in sync with the to-one side. This way, Hibernate will not update the list index and hence will read a null value for the list index in the end. The PR for this issue makes sure a proper exception is thrown.",,,,,,,,,,,,,,,Terminé,,
"Hibernate fails to create a table with title ""schema""",HHH-15053,71889,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Imtiaz Shakil Siddique,557058:1cb787b3-d407-43d1-b096-85cc396be18b,Imtiaz Shakil Siddique,557058:1cb787b3-d407-43d1-b096-85cc396be18b,27/janv./2022 05:39 AM,07/févr./2022 05:24 AM,14/mars/2022 12:54 PM,07/févr./2022 05:24 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,core,,,,,"Hibernate fails to generate table for below {{Schema.java}} class

{code:java}@Entity
public class Schema {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private long id;
  
  private String name;
  
  @Version private int version;
}{code}

it generates this query which fails:

{code:sql}create table schema (id bigint not null auto_increment, version integer not null, name varchar(255), primary key (id)) engine=InnoDB{code}



But if I change the table name to something else like “scheme” it works

{code:java}@Table(name = ""scheme"")
@Entity
public class Schema {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private long id;
  
  private String name;
  
  @Version private int version;
}{code}



The generated query is:

{code:sql}create table scheme (id bigint not null auto_increment, version integer not null, name varchar(255), primary key (id)) engine=InnoDB{code}



But I can manually create table with title “schema” so hibernate should also be able to do it. Thanks for the help.","Library:
Hibernate-core: 5.6.1.Final
Hibernate Commons Annotations \{5.1.2.Final}
dialect: org.hibernate.dialect.MySQL8Dialect

Java:
java 11.0.12 2021-07-20 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.12+8-LTS-237)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.12+8-LTS-237, mixed mode)

Database:
mysql  Ver 8.0.27-0ubuntu0.20.04.1 for Linux on x86_64 ((Ubuntu))

OS:
Operating System: Linux Mint 20.3 Una

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:0273cc0a-e277-4bd6-822f-49089f1a9dc7(ug:0273cc0a-e277-4bd6-822f-49089f1a9dc7),,,,,,,,0|104xo8:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,2022-02-07 13:24:05.908,Backport?,,,07/févr./2022 05:24 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;You have to quote the table name because schema is a keyword on databases.,,,,,,,,,,,,,,,,Terminé,,
Document that custom bridges or projection converters are not applied to fields for source()/document() projections,HSEARCH-4464,71888,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,27/janv./2022 04:28 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,04/févr./2022 05:50 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,documentation,,,,0,,,,,,Apparently it’s not obvious: [https://discourse.hibernate.org/t/valuebinderref-not-called-when-retrieving-value-from-elastic-search/6002/3?u=yrodiere|https://discourse.hibernate.org/t/valuebinderref-not-called-when-retrieving-value-from-elastic-search/6002/3?u=yrodiere|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-02-04T00:21:45.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2878,0|104mtz:zem,,,,,,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
ForeignKeyDefinition is ignored in PrimaryKeyJoinColumn annotation (Annotation Binder),HHH-15052,71887,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,maffinre,70121:8b659d89-5943-4b2a-9eec-de9bd640a76a,maffinre,70121:8b659d89-5943-4b2a-9eec-de9bd640a76a,27/janv./2022 02:24 AM,27/janv./2022 02:26 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hello hibernate community\!
I just struggled a bit to get the foreignKeyDefinition working.
It seems that the foreignKeyDefinition is ignored when used in the @PrimaryKeyJoinColumn.
For example:
On many places I use the foreignKeyDefinition with the @joincolumn annotation like:

{code:java}@JoinColumn(foreignKey = @ForeignKey(name = ""fk_members__member_worksphere_roles"",
            foreignKeyDefinition = ""foreign key (member_user_id, member_worksphere_id) references members""
                    + "" ON UPDATE CASCADE ON DELETE CASCADE"")){code}

This will generate a foreignKey with the On Update Cascade and On Delete Cascade statements attached.
Now, I wanted to use the same logic for Inherited tabled with the InheritanceType.JOINED type.
For this, I need to use @PrimaryKeyJoinColumn on the class level of the child class like this:

{code:java}@PrimaryKeyJoinColumn(foreignKey = @ForeignKey(name = ""fk_field_properties_blob__field_properties_common"",
        foreignKeyDefinition = ""foreign key (id) references model_entity_field_properties_common""
                + "" ON UPDATE CASCADE ON DELETE CASCADE"")){code}

In the stated code, the foreignKey definition will just be ignored. I tried to find out why and saw that the definition will just be ignored in the AnnoationBinder class. Just the name of the foreignKey will be set and the definition will be ignored.
The code for this can be found in Hibernate 5.6.1 in the AnnotationBinder.java in line 730:

{code:java}else if ( pkJoinColumn != null && !StringHelper.isEmpty( pkJoinColumn.foreignKey().name() ) ) {
    key.setForeignKeyName( pkJoinColumn.foreignKey().name() );
}{code}

In contrast, for the @joincolumn annotation, the code looks like this in the AnnotationBinder.java class (Line 3504):

{code:java}else if ( joinColumn != null ) {
    value.setForeignKeyName( StringHelper.nullIfEmpty( joinColumn.foreignKey().name() ) );
    value.setForeignKeyDefinition( StringHelper.nullIfEmpty( joinColumn.foreignKey().foreignKeyDefinition() ) );
}{code}

Thank you for your help\!",,,,3600,3600,,0 %,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:13e55745-ce4e-4a1d-b690-0121474882b0(ug:13e55745-ce4e-4a1d-b690-0121474882b0),,,,,,,,,0|104xo0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to H2 2.1.210 in tests,HSEARCH-4463,71885,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/janv./2022 06:08 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,31/janv./2022 01:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-31T01:32:28.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2865,0|104xng:,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.6.5.Final,HSEARCH-4462,71883,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/janv./2022 03:46 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,26/janv./2022 05:51 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-26T05:50:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2864,0|104xnc:,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix typos and grammar in documentation,HSEARCH-4461,71882,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/janv./2022 02:29 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,26/janv./2022 05:51 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-26T05:51:16.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2863,0|104xn4:,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix failing GitHub actions build,HSEARCH-4460,71881,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/janv./2022 01:35 AM,24/févr./2022 05:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,build,,,,0,,,,,,"See [https://github.com/hibernate/hibernate-search/runs/4939787084?check_suite_focus=true|https://github.com/hibernate/hibernate-search/runs/4939787084?check_suite_focus=true|smart-link] 

We’re still seeing the exact same timeout issues, even after moving to a mirror of Maven Central:

{noformat}Tue, 25 Jan 2022 21:42:25 GMT [INFO] Downloaded from : https://maven-central.storage-download.googleapis.com/maven2/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.jar (225 kB at 81 kB/s)
Tue, 25 Jan 2022 21:58:32 GMT [INFO] I/O exception (java.net.SocketException) caught when processing request to {s}->https://maven-central.storage-download.googleapis.com: Connection timed out (Read failed)
Tue, 25 Jan 2022 21:58:32 GMT [INFO] Retrying request to {s}->https://maven-central.storage-download.googleapis.com
Tue, 25 Jan 2022 21:58:33 GMT [INFO] Downloaded from : https://maven-central.storage-download.googleapis.com/maven2/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar (920 kB at 947 B/s)
Tue, 25 Jan 2022 21:58:35 GMT [INFO] I/O exception (java.net.SocketException) caught when processing request to {s}->https://maven-central.storage-download.googleapis.com: Connection timed out (Read failed)
Tue, 25 Jan 2022 21:58:35 GMT [INFO] Retrying request to {s}->https://maven-central.storage-download.googleapis.com
Tue, 25 Jan 2022 21:58:35 GMT [INFO] I/O exception (java.net.SocketException) caught when processing request to {s}->https://maven-central.storage-download.googleapis.com: Connection timed out (Read failed)
Tue, 25 Jan 2022 21:58:35 GMT [INFO] Retrying request to {s}->https://maven-central.storage-download.googleapis.com
Tue, 25 Jan 2022 21:58:35 GMT [INFO] I/O exception (java.net.SocketException) caught when processing request to {s}->https://maven-central.storage-download.googleapis.com: Connection timed out (Read failed)
Tue, 25 Jan 2022 21:58:35 GMT [INFO] Retrying request to {s}->https://maven-central.storage-download.googleapis.com
Tue, 25 Jan 2022 21:58:35 GMT [INFO] Downloaded from : https://maven-central.storage-download.googleapis.com/maven2/org/apache/maven/maven-settings/2.0.7/maven-settings-2.0.7.jar (49 kB at 50 B/s){noformat}",,,,,,,,,,,,,,,,,,,HSEARCH-4453,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzu,,,,,,HSEARCH - 2022-2,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Stop testing Hibernate Search against JDK 12 -> 16,HSEARCH-4459,71880,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/janv./2022 01:14 AM,26/janv./2022 01:24 AM,14/mars/2022 12:54 PM,26/janv./2022 01:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,,,,,,,,build,,,,0,,,,,,"JDK 17 is out and is LTS, so JDK 12 → 16 are EOL’d and are of no interest.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2022-01-26T01:17:03.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzr,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Association with id class misses property mapping for target FK attributes,HHH-15051,71879,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,26/janv./2022 00:50 AM,26/janv./2022 00:51 AM,15/févr./2022 11:55 AM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-26T01:14:09.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104xmo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
 Fix NullPointerException in StatefulPersistenceContext.extractNaturalIdValues() #4706 ,HHH-15050,71878,,Bug,Awaiting Test Case,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gary Gregory,557058:e778dba1-de4c-48d8-9b45-e52cb08ef61d,Gary Gregory,557058:e778dba1-de4c-48d8-9b45-e52cb08ef61d,25/janv./2022 15:52 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-core,,,,0,,,,,,"The set up is a large proprietary app which I cannot post, here is the stack trace. There is no workaround.

{{Caused by: java.lang.NullPointerException}}
{{at org.hibernate.engine.internal.StatefulPersistenceContext$1.extractNaturalIdValues(StatefulPersistenceContext.java:2163)}}
{{at org.hibernate.persister.entity.AbstractEntityPersister.handleNaturalIdReattachment(AbstractEntityPersister.java:4956)}}
{{at org.hibernate.persister.entity.AbstractEntityPersister.afterReassociate(AbstractEntityPersister.java:4930)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performUpdate(DefaultSaveOrUpdateEventListener.java:322)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsDetached(DefaultSaveOrUpdateEventListener.java:230)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:95)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:75)}}
{{at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)}}
{{at org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:670)}}
{{at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:663)}}
{{at org.hibernate.engine.spi.CascadingActions$5.cascade(CascadingActions.java:219)}}
{{at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)}}
{{at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)}}
{{at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)}}
{{at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)}}
{{at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:65)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.cascadeOnUpdate(DefaultSaveOrUpdateEventListener.java:361)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performUpdate(DefaultSaveOrUpdateEventListener.java:334)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsDetached(DefaultSaveOrUpdateEventListener.java:230)}}
{{at org.hibernate.event.internal.DefaultUpdateEventListener.performSaveOrUpdate(DefaultUpdateEventListener.java:38)}}
{{at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:75)}}
{{at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)}}
{{at org.hibernate.internal.SessionImpl.fireUpdate(SessionImpl.java:712)}}
{{at org.hibernate.internal.SessionImpl.update(SessionImpl.java:705)}}
{{at org.hibernate.internal.SessionImpl.update(SessionImpl.java:700)}}","Hibernate 5.6.5

openjdk version ""1.8.0_312""
OpenJDK Runtime Environment (Temurin)(build 1.8.0_312-b07)
OpenJDK 64-Bit Server VM (Temurin)(build 25.312-b07, mixed mode)

Microsoft Windows \[Version 10.0.19042.1415]

PostgreSQL 14",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-25T15:55:28.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,27/janv./2022 18:35 PM,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,,true,0.0,ug:0043b311-5a8b-4eb5-bcac-33703b2a55d7(ug:0043b311-5a8b-4eb5-bcac-33703b2a55d7),,,,,,,,,0|104xmg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Documentation : incorrect default value for property 'hibernate.transaction.flush_before_completion',HHH-15049,71877,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Guillaume Husta,557058:cbec9c12-88b7-4f64-a46e-fb457321c3dc,Guillaume Husta,557058:cbec9c12-88b7-4f64-a46e-fb457321c3dc,25/janv./2022 13:33 PM,25/janv./2022 13:33 PM,14/mars/2022 12:54 PM,,5.2.18,5.3.25,5.4.33,5.5.9,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"Since version 5.2, the default value for the property '*hibernate.transaction.flush_before_completion*' has changed for true.



However in the documentation at [Hibernate ORM 5.5.9.Final User Guide (jboss.org)|https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#configurations-transactions] and previous versions, the default value is still indicated as false.



The corresponding constant in code is {{org.hibernate.cfg.AvailableSettings#FLUSH_BEFORE_COMPLETION}} .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ghusta(ghusta),,,,,,,,,0|104xm8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
allow @Nationalized at the class or package level,HHH-15048,71876,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,24/janv./2022 07:06 AM,24/janv./2022 07:06 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The {{@Nationalized}} annotation currently applies only at the field level. We should allow it at the type level, and even (with the enhancement I recently made to HCANN) at the package level.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,gavin.king(gavin.king),,,,,,,,,0|104xm0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Accept both Java EE and Jakarta EE flavours of all query hints,HSEARCH-4458,71875,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/janv./2022 07:04 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,25/janv./2022 02:16 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Final,,,,,,,,,mapper-orm,,,,0,,,,,,"… regardless of whether a Hibernate Search artifact is targeting Java EE or Jakarta EE.

This is evidently how Hibernate ORM is going to handle this, so we’d better do the same.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-25T02:16:11.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2860,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzi,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Ensure all spatial functions have a valid FunctionReturnTypeResolver,HHH-15047,71873,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,23/janv./2022 06:39 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,24/janv./2022 11:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-24T14:51:11.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104xlk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
DB2z and DB2i NullpointerException on initialization,HHH-15046,71872,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Onno Goczol,61e7ffca98cd61007051b108,Onno Goczol,61e7ffca98cd61007051b108,Onno Goczol,61e7ffca98cd61007051b108,21/janv./2022 04:00 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,24/janv./2022 05:50 AM,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,"During DB2zDialect and DB2iDialect initialization the private property “version” might be 
used resulting in an NullpointerException.

For DB2zDialect this is happening when the ColumnType “TIMESTAMP_WITH_TIMEZONE” is being registered in the overriden Method columnType().

For DB2iDialect this is happing because the createUniqueDelegate() Method is override and uses the private property. 



Expected Behavior is the correct initialization of both Dialects without errors.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-24T05:49:55.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:11e5ae39-dfc7-4b7e-8d81-1c43768e6854(ug:11e5ae39-dfc7-4b7e-8d81-1c43768e6854),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4685,0|104xlc:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
onFlushDirty() invoked on parent entity in a @OneToOne relationship when no table columns are changed,HHH-15045,71870,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Leo Deng,61e9d92698cd610070675bc4,Leo Deng,61e9d92698cd610070675bc4,20/janv./2022 15:31 PM,14/févr./2022 11:55 AM,14/mars/2022 12:54 PM,,5.6.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"There was a behavior change in Hibernate 5.6.x comparing to Hibernate 5.4.x: if a @OneToOne field in a parent entity is changed, it will trigger an unnecessary onFlushDirty() to the parent entity, even though none of the columns for its table record is changed.

For example, assuming we have two entities with a @OneToOne relationship: User and Profile, and User is the parent entity.

||Entity||Table||
|User(id, version, profile)|users(id, version)|
|Profile(id, user)|profile(id, user_id)|

Scenario:
user1 previously had profile=null, and now we create profile1 and link it to user1 and save profile1.

Expected:
onFlushDirty() should not be invoked on user1, because its id and version are not changed.

Actual:
onFlushDirty() was invoked on user1

This behavior change is related to [https://hibernate.atlassian.net/browse/HHH-14216|https://hibernate.atlassian.net/browse/HHH-14216] (please see attachment), and is causing our application to issue many unnecessary update statements to the database. And we'd really hope that change to be reverted or a flag to be added to suppress onFlushDirty() from being invoked.

A simplified demo project is available at [https://github.com/liangbodeng/unnecessary-flush-on-dirty|https://github.com/liangbodeng/unnecessary-flush-on-dirty].",Spring Boot 2.6.3 + Hibernate 5.6.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/janv./2022 14:58 PM;ug:050383ba-0eab-476c-a063-8b380f84fe5d;Screen Shot 2022-01-20 at 5.56.32 PM.png;https://hibernate.atlassian.net/secure/attachment/49967/Screen+Shot+2022-01-20+at+5.56.32+PM.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:050383ba-0eab-476c-a063-8b380f84fe5d(ug:050383ba-0eab-476c-a063-8b380f84fe5d),yrodiere(fenrhil),,,,,,,,0|104xkw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.33,2022-02-14 10:49:58.76,,,,"24/janv./2022 08:07 AM;61e9d92698cd610070675bc4;Hi Yoann Rodière, when I created the ticket, you are the system suggested assignee, and that’s why I assigned it to you, and I just noticed that you unassigned yourself. Sorry if that’s not the supposed process, and could you please advise how I can get this ticket into triage? Thanks\!",14/févr./2022 02:49 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello [~accountid:61e9d92698cd610070675bc4] . I’d say the best way to get someone to work on a patch would be to come discuss this on [the Hibernate team’s Zulip instance|https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user].,,,,,,,,,,,,,,,A faire,,
Revert HHH-14826 fix because the provided test was wrong,HHH-15044,71868,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,19/janv./2022 09:32 AM,26/janv./2022 23:06 PM,14/mars/2022 12:54 PM,20/janv./2022 04:23 AM,5.5.9,5.6.4,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.10,5.6.5,6.0.0.CR1,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14826,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2022-01-25T06:49:21.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,cristatus(cristatus),dreab8(dreab8),,,,,,,,0|104xkg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-27 06:57:36.156,,,,19/janv./2022 09:33 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;see [https://github.com/hibernate/hibernate-orm/pull/4221|https://github.com/hibernate/hibernate-orm/pull/4221|smart-link] comments,"26/janv./2022 22:57 PM;557058:514c99cd-0c5d-4627-a765-18ba5ad68295;My code was like this:

Owning side:

{code:java}public void setConfig(ProductConfig config) {
  this.config = config;
  if (config.getProduct() != this) {
    config.setProduct(this);
  }
}{code}

Non-owning side:

{code:java}public void setProduct(Product product) {
  this.product = product;
}{code}

So, changing the non-owning side as followed solved the issue:

{code:java}public void setProduct(Product product) {
  this.product = product;
  if (this.getConfig() != this) {
    this.setConfig(this);
  }
}{code}

Thanks for the investigation. But I think this behaviour change should be documented in changelog as it was working fine till 5.5.32.

The code in our app was like this since long (almost 5-6 years, we started with some v4 release) till 5.5.33. So we thought, it might be a regression. ","26/janv./2022 23:06 PM;557058:514c99cd-0c5d-4627-a765-18ba5ad68295;Typo in updated code:

{code:java}public void setProduct(Product product) {
  this.product = product;
  if (product.getConfig() != this) {
    product.setConfig(this);
  }
}{code}

Also, null check but got the point. Thanks again\!",,,,,,,,,,,,,,Terminé,,
As user i want to register so that i can create a account,HHH-15043,71867,,Epic,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,ahmed bahri,614ba026a6f69e006d5c2786,ahmed bahri,614ba026a6f69e006d5c2786,19/janv./2022 07:36 AM,19/janv./2022 07:36 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},ghx-label-14,,gfjgfjgff,To Do,,,,,,true,0.0,ug:1872241b-c3d5-4ce9-b607-979896eeb3f1(ug:1872241b-c3d5-4ce9-b607-979896eeb3f1),,,,,,,,,0|104xk8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.6.4.Final,HSEARCH-4457,71866,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/janv./2022 05:52 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,19/janv./2022 08:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T08:12:47.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2855,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uz,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Update CONTRIBUTING.md to list new modules,HSEARCH-4456,71865,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/janv./2022 05:40 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,19/janv./2022 05:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Final,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T05:46:48.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uy,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix flaky tests in jsr352 integration tests,HSEARCH-4455,71864,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/janv./2022 05:04 AM,26/janv./2022 01:34 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,tests,,,,0,,,,,,"It seems the culprit is RestartChunkIT:

* [https://ci.hibernate.org/job/hibernate-search-personal-yoann/job/tracking-orm5.5-6.0/2/|https://ci.hibernate.org/job/hibernate-search-personal-yoann/job/tracking-orm5.5-6.0/2/|smart-link] 
* [https://github.com/hibernate/hibernate-search/actions/runs/1716862380|https://github.com/hibernate/hibernate-search/actions/runs/1716862380|smart-link] 

{noformat}Error Message

expected:<COMPLETED> but was:<FAILED>

Stacktrace

java.lang.AssertionError: expected:<COMPLETED> but was:<FAILED>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:120)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT.doTest(RestartChunkIT.java:162)
	at org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT.failureDuringNonFirstCheckpointBetweenTwoWrites_hql(RestartChunkIT.java:128)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.ReusableOrmSetupHolder$3.evaluate(ReusableOrmSetupHolder.java:267)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.ReusableOrmSetupHolder$2.evaluate(ReusableOrmSetupHolder.java:247)
	at org.hibernate.search.util.impl.integrationtest.common.rule.MappingSetupHelper$1.evaluate(MappingSetupHelper.java:61)
	at org.hibernate.search.util.impl.integrationtest.backend.elasticsearch.rule.TestElasticsearchClient$1.evaluate(TestElasticsearchClient.java:607)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)
	at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:157)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)

Standard Output

11:32:52,666 (main)  INFO ReusableOrmSetupHolder:296 - Test parameters did not change ([] vs []). Clearing data and reusing the same session factory.
11:32:52,694 (Hibernate Search - default backend - Transport thread - 4) DEBUG IndexNames:23 - Normalizing index name from 'SimulatedFailureCompany-000001' to 'simulatedfailurecompany-000001'
11:32:52,774 (main)  INFO JobTestUtil:57 - JSR-352 operator type is jberet (class org.jberet.operations.DelegatingJobOperator)
11:32:52,789 (main)  INFO JobTestUtil:79 - Job execution (id=23) has status STARTED. Thread sleeps 100 ms...
11:32:52,793 (jberet-6)  INFO BeforeChunkBatchlet:71 - HSEARCH500015: Merging index segments for all entities ...
11:32:52,795 (jberet-6)  INFO StepProgressSetupListener:88 - HSEARCH500027: entityName: 'org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany', rowsToIndex: null
11:32:52,796 (jberet-6)  INFO HibernateSearchPartitionMapper:187 - Partitions: [Ljava.util.Properties;@5329f7a6
11:32:52,796 (jberet-6)  INFO HibernateSearchPartitionMapper:199 - HSEARCH500026: 1 partitions, 1 threads.
11:32:52,797 (jberet-1) DEBUG EntityReader:189 - HSEARCH500018: Opening EntityReader of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,797 (jberet-1) DEBUG EntityWriter:77 - HSEARCH500034: Opening EntityWriter of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,849 (jberet-1) DEBUG EntityWriter:127 - HSEARCH500035: Closing EntityWriter of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,849 (jberet-1) DEBUG EntityReader:279 - HSEARCH500017: Checkpoint reached. Sending checkpoint ID to batch runtime... (entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany', checkpointInfo='[lastProcessedEntityId = 796, processedEntityCount = 10]')
11:32:52,850 (jberet-6)  INFO ProgressAggregator:57 - HSEARCH500010: 

	org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany: 10 entities processed.

11:32:52,884 (jberet-1) DEBUG EntityWriter:127 - HSEARCH500035: Closing EntityWriter of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,885 (jberet-1) DEBUG EntityReader:279 - HSEARCH500017: Checkpoint reached. Sending checkpoint ID to batch runtime... (entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany', checkpointInfo='[lastProcessedEntityId = 846, processedEntityCount = 20]')
11:32:52,885 (jberet-6)  INFO ProgressAggregator:57 - HSEARCH500010: 

	org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany: 20 entities processed.

11:32:52,887 (jberet-1) ERROR jberet:366 - ProcessingInfo{count=10, timerExpired=false, itemState=RUNNING, chunkState=RUNNING, checkpointPosition=19, readPosition=29, failurePoint=null}
11:32:52,887 (jberet-1) ERROR jberet:231 - item-count=10, time-limit=0, skip-limit=-1, skipCount=0, retry-limit=-1, retryCount=0
11:32:52,887 (jberet-1) ERROR jberet:234 - JBERET000007: Failed to run job hibernate-search-mass-indexing, produceLuceneDoc, org.jberet.job.model.Chunk@714fce36
org.hibernate.search.util.common.SearchException: HSEARCH900005: Exception while invoking 'public int org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany.getId()' on 'SimulatedFailureCompany [id=871, name=Google-120]'.
	at org.hibernate.search.util.common.reflect.impl.MethodHandleValueReadHandle.get(MethodHandleValueReadHandle.java:48) ~[hibernate-search-util-common-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.mapper.pojo.bridge.runtime.impl.PropertyIdentifierMapping.getIdentifier(PropertyIdentifierMapping.java:60) ~[hibernate-search-mapper-pojo-base-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.mapper.pojo.work.impl.PojoTypeIndexer.add(PojoTypeIndexer.java:37) ~[hibernate-search-mapper-pojo-base-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexerImpl.add(PojoIndexerImpl.java:42) ~[hibernate-search-mapper-pojo-base-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.batch.jsr352.core.massindexing.step.impl.EntityWriter.writeItem(EntityWriter.java:154) ~[hibernate-search-mapper-orm-batch-jsr352-core-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.batch.jsr352.core.massindexing.step.impl.EntityWriter.indexAndWaitForCompletion(EntityWriter.java:137) ~[hibernate-search-mapper-orm-batch-jsr352-core-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.hibernate.search.batch.jsr352.core.massindexing.step.impl.EntityWriter.writeItems(EntityWriter.java:106) ~[hibernate-search-mapper-orm-batch-jsr352-core-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.jberet.runtime.runner.ChunkRunner.doCheckpoint(ChunkRunner.java:564) ~[jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.runtime.runner.ChunkRunner.readProcessWriteItems(ChunkRunner.java:349) ~[jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.runtime.runner.ChunkRunner.run(ChunkRunner.java:206) [jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.spi.JobExecutor$1.run(JobExecutor.java:100) [jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at java.lang.Thread.run(Thread.java:829) [?:?]
Caused by: org.hibernate.search.integrationtest.batch.jsr352.util.SimulatedFailure$SimulatedFailureException
	at org.hibernate.search.integrationtest.batch.jsr352.util.SimulatedFailure.write(SimulatedFailure.java:43) ~[test-classes/:?]
	at org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany.getId(RestartChunkIT.java:203) ~[test-classes/:?]
	at org.hibernate.search.util.common.reflect.impl.MethodHandleValueReadHandle.get(MethodHandleValueReadHandle.java:39) ~[hibernate-search-util-common-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	... 13 more
11:32:52,893 (main)  INFO JobTestUtil:79 - Job execution (id=24) has status STARTING. Thread sleeps 100 ms...
11:32:52,895 (jberet-6)  INFO HibernateSearchPartitionMapper:187 - Partitions: [Ljava.util.Properties;@67ee3d5e
11:32:52,895 (jberet-6)  INFO HibernateSearchPartitionMapper:199 - HSEARCH500026: 1 partitions, 1 threads.
11:32:52,896 (jberet-4) DEBUG EntityReader:189 - HSEARCH500018: Opening EntityReader of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,896 (jberet-4) DEBUG EntityWriter:77 - HSEARCH500034: Opening EntityWriter of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,896 (jberet-1) DEBUG EntityReader:247 - HSEARCH500019: Closing EntityReader of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
11:32:52,939 (jberet-4) ERROR jberet:366 - ProcessingInfo{count=10, timerExpired=false, itemState=RUNNING, chunkState=RUNNING, checkpointPosition=-1, readPosition=9, failurePoint=null}
11:32:52,939 (jberet-4) ERROR jberet:231 - item-count=10, time-limit=0, skip-limit=-1, skipCount=0, retry-limit=-1, retryCount=0
11:32:52,939 (jberet-4) ERROR jberet:234 - JBERET000007: Failed to run job hibernate-search-mass-indexing, produceLuceneDoc, org.jberet.job.model.Chunk@7e776a95
java.lang.NullPointerException: null
	at org.hibernate.search.batch.jsr352.core.massindexing.step.impl.EntityWriter.writeItems(EntityWriter.java:119) ~[hibernate-search-mapper-orm-batch-jsr352-core-6.0.9-SNAPSHOT.jar:6.0.9-SNAPSHOT]
	at org.jberet.runtime.runner.ChunkRunner.doCheckpoint(ChunkRunner.java:564) ~[jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.runtime.runner.ChunkRunner.readProcessWriteItems(ChunkRunner.java:349) ~[jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.runtime.runner.ChunkRunner.run(ChunkRunner.java:206) [jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at org.jberet.spi.JobExecutor$1.run(JobExecutor.java:100) [jberet-core-1.4.0.Final.jar:1.4.0.Final]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]
	at java.lang.Thread.run(Thread.java:829) [?:?]
11:32:52,940 (jberet-4) DEBUG EntityReader:247 - HSEARCH500019: Closing EntityReader of partitionId='0', entity='org.hibernate.search.integrationtest.batch.jsr352.massindexing.RestartChunkIT$SimulatedFailureCompany'.
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu0uzv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add Offset-Feature for DB2zDialect,HHH-15042,71863,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Onno Goczol,61e7ffca98cd61007051b108,Onno Goczol,61e7ffca98cd61007051b108,Onno Goczol,61e7ffca98cd61007051b108,19/janv./2022 04:16 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,19/janv./2022 06:26 AM,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"DB2z in Version 12 and beyond supports the ""offset""-clause.

Current behavior:
Hibernate uses the ""fetch first ...""-clause but does not use ""offset"" for paging requests.

Expected behavior:
For DB2z Databases in Version 12 and beyond the dialect should use the now supported ""offset""-clause

IBM Docs:
https://www.ibm.com/docs/en/db2-for-zos/12?topic=subselect-offset-clause
https://www.ibm.com/docs/en/db2-for-zos/12?topic=subselect-fetch-clause",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T06:25:57.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:11e5ae39-dfc7-4b7e-8d81-1c43768e6854(ug:11e5ae39-dfc7-4b7e-8d81-1c43768e6854),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4666,0|104xk0:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
'hibernate.search.backend.uris' recognized as an invalid property,HSEARCH-4454,71862,,Bug,Awaiting Test Case,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),,,,Ivan Kotev,70121:8bd20b29-e551-467d-a964-39012a9b1f80,Ivan Kotev,70121:8bd20b29-e551-467d-a964-39012a9b1f80,19/janv./2022 03:48 AM,26/janv./2022 01:25 AM,14/mars/2022 12:54 PM,,6.1.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,engine,,,,0,,,,,,"Hello,

Looks like “hibernate.search.backend.uris” property is not recognized as a valid one anymore (since 6.1) though it seems that it still takes effect when used: 

“HSEARCH000568: Invalid configuration passed to Hibernate Search: some properties in the given configuration are not used. There might be misspelled property keys in your configuration. Unused properties: \[hibernate.search.backend.uris]. To disable this warning, set the property 'hibernate.search.configuration_property_checking.strategy' to 'ignore'.”

Also, the documentation still mentions that property. 

Is the usage of “hibernate.search.backend.uris” property discouraged going forward?

Thanks\!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:51f78e2d-20d0-4369-a089-ba000414528d(ug:51f78e2d-20d0-4369-a089-ba000414528d),yrodiere(fenrhil),,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzua,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-19 13:15:56.388,,,,"19/janv./2022 05:15 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello,

{quote}Is the usage of “hibernate.search.backend.uris” discouraged going forward?{quote}

No, it’s still valid and is not even deprecated.

{quote}Looks like “hibernate.search.backend.uris” property is not recognized as a valid property anymore (since 6.1) though it seems that it still takes effect when used: 

“HSEARCH000568: Invalid configuration passed to Hibernate Search: some properties in the given configuration are not used. There might be misspelled property keys in your configuration. Unused properties: \[hibernate.search.backend.uris]. To disable this warning, set the property 'hibernate.search.configuration_property_checking.strategy' to 'ignore'.”{quote}

This is definitely unexpected.

I’m unable to reproduce this behavior on my end; I don’t get the warning whatever I do.

Can you please provide a reproducer or, at least, the complete configuration you’re using?

You’ll find templates to build reproducers [here|https://github.com/hibernate/hibernate-test-case-templates/tree/main/search/hibernate-search-6/orm-elasticsearch].","19/janv./2022 06:55 AM;70121:8bd20b29-e551-467d-a964-39012a9b1f80;Thanks for taking a look, Yoann.

Indeed, I am not able to reproduce it in the hibernate-test-case-templates project.

Wondering if it has something to do with Spring Boot (which my project is based on) and which passes the properties down to Hibernate ORM using the {{spring.jpa.properties}} prefix. I’ll try to make such a test case.",,,,,,,,,,,,,,,A faire,,
H2Dialect does not work properly with h2 2.0.202 due to new DDL type requirements,HHH-15041,71861,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,19/janv./2022 03:39 AM,25/janv./2022 07:37 AM,14/mars/2022 12:54 PM,25/janv./2022 07:36 AM,5.6.3,5.6.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.5,,,,,,,,,hibernate-core,,,,0,,,,,,"For LONGVARCHAR we need a new DDL type because the default is \{\{varchar(Integer.MAX_VALUE)}} which is now illegal on H2 2.0+. We need to use the unbounded variant \{\{character varying}} and also need to use that for the \{\{str}} function template.

For BINARY we need to specify a length now in H2 2.0+ because the default length now is 1.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-25T07:35:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104xjk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate Commons Annotations 6.0.0.CR1,HHH-15040,71860,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/janv./2022 03:35 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,19/janv./2022 05:29 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,build,metamodel,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T05:28:41.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xjc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Fix failing GitHub actions build,HSEARCH-4453,71859,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/janv./2022 01:39 AM,26/janv./2022 01:41 AM,14/mars/2022 12:54 PM,19/janv./2022 05:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-19T02:30:05.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu0ur,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Criteria Update/Delete with vararg parameters throws NullPointerException,HHH-15037,71856,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,William Rosenquist Burns,5a7b38fc7b3477447c5ab1db,William Rosenquist Burns,5a7b38fc7b3477447c5ab1db,William Rosenquist Burns,5a7b38fc7b3477447c5ab1db,18/janv./2022 09:10 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,18/janv./2022 10:42 AM,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,query-criteria,,,,0,,,,,,"While converting to new Hibernate 6 JPA Criteria API I wanted to use a multiple arg delete criteria. However, I found that I was always met with a NullPointerException.



{code:java}JpaCriteriaDelete<Citizen> criteria = cb.createCriteriaDelete(Citizen.class);
Root<Citizen> root = criteria.from(Citizen.class);
criteria.where(cb.equal(root.get(Citizen_.ssn), ""1234""), cb.equal(root.get(Citizen_.state), france));{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-18T10:41:41.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:3d5a7819-8c48-4301-8fc4-d0ab38c7b8f0(ug:3d5a7819-8c48-4301-8fc4-d0ab38c7b8f0),,,,,,,,,0|104xj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix formatting of documentation about regexp predicate's optional operators,HSEARCH-4452,71855,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,18/janv./2022 07:40 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,19/janv./2022 05:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Final,,,,,,,,,documentation,,,,0,,,,,,"See [https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#search-dsl-predicate-regexp-flags|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#search-dsl-predicate-regexp-flags|smart-link]  , it’s all messy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2022-01-25T04:37:08.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2854,0|1009cw:000000xdur3mhxzzzxezsq7uzu0ui,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Disable DefaultCatalogAndSchemaTest when testing against MariaDB < 10.3,HHH-15036,71854,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,18/janv./2022 07:02 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,18/janv./2022 07:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,,,,,,,,,testsuite,,,,0,,,,,,"MariaDB < 10.3 doesn’t support sequences, and adapting this test to only use sequences conditionally would be a hassle, so I’d rather not even try.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-18T07:38:46.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104xiw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Native query type discovery with h2 2.0.202 with float(..) DDL type,HHH-15035,71853,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,17/janv./2022 10:09 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,18/janv./2022 06:18 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Maybe this is just a problem with Hibernate 6.0 because there we use {{float(..)}}as DDL type also for Java {{double}}fields, but the JDBC {{ResultSetMetaData}} reports {{Types.FLOAT}}for such columns which leads to reading data through {{getFloat}}and can cause a precision loss.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-18T06:18:01.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104xio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Allow null tenant IDs in HibernateOrmMapperOutboxPollingSettings#coordinationKey,HSEARCH-4451,71851,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/janv./2022 06:56 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 09:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,mapper-orm,,,,0,,,,,,So that callers can avoid workarounds such as [this|https://github.com/quarkusio/quarkus/blob/23e8f89b086890ff1ab175f7ad9c27d7343c3dbd/extensions/hibernate-search-orm-coordination-outbox-polling/runtime/src/main/java/io/quarkus/hibernate/search/orm/coordination/outboxpolling/runtime/HibernateSearchOutboxPollingConfigUtil.java#L39-L47_].,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T09:24:30.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2851,0|1009cw:000000xdur3mhxzzzxezsq7uzu0u,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Introduce getContainingElement() method on XClass,HCANN-120,71850,,Nouvelle fonctionnalité,Fermée,HCANN,Hibernate Commons Annotations,software,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Utility project for annotation handling,http://hibernate.org,Important,Corrigé,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,17/janv./2022 06:02 AM,19/janv./2022 03:39 AM,23/févr./2022 12:50 PM,17/janv./2022 06:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,as suggested by Gavin on [https://github.com/hibernate/hibernate-commons-annotations/pull/18|https://github.com/hibernate/hibernate-commons-annotations/pull/18|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T05:28:41.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gavin.king(gavin.king),,,,,,,,,0|104xi8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Expose list of outbox-polling classes requiring reflection through an SPI,HSEARCH-4450,71849,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/janv./2022 05:24 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 09:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,mapper-orm,,,,0,,,,,,"Similarly to what we did with GsonClasses, we need to expose two lists of classes for use by external frameworks (e.g. Quarkus);

* Classes involved in Avro serialization (e.g. {{DirtinessDescriptorDto}}). This is everything annotated with {{AvroGenerated}}.
* Classes involved in the Hibernate ORM model (e.g. OutboxEvent, OutboxEvent.Status, Agent, AgentType, etc.). This is everything {{OutboxEvent}} and {{Agent}} depend on, except the Avro classes above.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=1, successfulBuildCount=0, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T09:24:30.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":1,""successfulBuildCount"":0,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2851,0|1009cw:000000xdur3mhxzzzxezsq7uzu0t,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to slf4j 1.7.33,HSEARCH-4449,71848,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/janv./2022 00:23 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 04:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T04:44:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2850,0|1009cw:000000xdur3mhxzzzxezsq7uzu0g,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to JBoss logging 3.4.3.Final,HSEARCH-4448,71847,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/janv./2022 00:22 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 04:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,engine,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T04:44:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2850,0|1009cw:000000xdur3mhxzzzxezsq7uzu0f,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
maven-metadata.xml on Maven Central is outdated and incomplete,HHH-15034,71846,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,16/janv./2022 15:46 PM,16/janv./2022 15:46 PM,22/janv./2022 12:25 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,hibernate-hikaricp,,,0,,,,,,"The {{maven-metadata.xml}} files for {{org.hibernate:hibernate-envers}} and {{org.hibernate:hibernate-hikaricp}} (and maybe others, but I didn’t check) on Maven Central list only the released versions up to {{5.3.0.Beta1}} and also define  {{5.3.0.Beta1}} as the {{latest}} version and {{release}} version.
This confuses tools that allow to check for version updates or use dynamic version declarations.
The {{maven-metadata.xml}} should list all versions that are present in the repository and also have {{latest}} and {{release}} fields properly set.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),crancran(crancran),,,,,,,,0|104xi0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Restrict JNDI lookups to ""java"" scheme",HHH-15033,71845,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/janv./2022 13:06 PM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,16/janv./2022 14:18 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate ORM includes a default implementation of its _JndiService_ , which is used internally to lookup Datasources and references to the platform’s Transactionmanager. This service is also used to register its own components to allow them being looked up by other frameworks, but this aspect is less relevant to this issue.

Binding a Datasource and/or a TransactionManager to JNDI is a common practice in the industry on many runtimes and application servers running Hibernate ORM; this functionality is required by the JPA specification and we believe is a reasonable use case of JNDI. A conversation with the security team came to the same conclusion, after we scrutinized our code.

When performing a datasource lookup, any valid JNDI lookup URLs are currently accepted by the code, including schemas which might not be local. Initially this looked a little alarming, but considering this URL can only be provided by the Hibernate configuration it’s not considered a security vulneratbility; as a hardening improvement though - and an excess of caution - we’ll now improve the code to reject any URL which isn’t using the “java” protocol.

We don’t think this is really necessary nor urgent, but it should make any other (possibly future?) vulnerability related to JNDI much harder to exploit.

As usual, please let us know if it breaks your application; we don’t expect anyone to actually have made use of exotic patterns to bind their datasources or transaction managers, so we don’t expect this to actually matter to anyone - but it’s good to be cautious when JNDI is involved so we’ll proceed with this change.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-16T14:18:32.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xhs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix backwards incompatible SPI change that happened in 5.6.2 due to introducing SqlStringGenerationContext,HHH-15032,71844,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,16/janv./2022 10:45 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,17/janv./2022 09:05 AM,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,,,,,,,,,hibernate-core,,,,0,,,,,,"See the discussion here: [https://github.com/quarkusio/quarkus/pull/22301|https://github.com/quarkusio/quarkus/pull/22301|smart-link] 

There might be other SPIs than just {{MultiTableBulkIdStrategy}}that are affected also, but I’ll have to go through the commits tomorrow and see what needs fixing.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T09:05:23.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104xhk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to ByteBuddy 1.12.7,HHH-15031,71842,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,15/janv./2022 13:52 PM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,15/janv./2022 13:53 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,bytecode-enhancement,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-15T08:41:44.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xh4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Introduce SelectionQuery and MutationQuery,HHH-15030,71841,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/janv./2022 13:21 PM,27/janv./2022 09:30 AM,14/mars/2022 12:54 PM,21/janv./2022 13:23 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Introduce {{SelectionQuery}} and {{MutationQuery}} , as well as supporting types such as {{JpaQuery}}, {{SqmQuery}}, etc;
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2022-01-26T11:43:27.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104xgw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Remove deprecated JndiHelper,HHH-15029,71840,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,14/janv./2022 13:07 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,14/janv./2022 15:48 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,"JndiHelper has been deprecated for some time, it should be safe to remove it now.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-14T15:48:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xgo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.16.3,HSEARCH-4446,71839,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/janv./2022 07:19 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 04:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T04:44:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2850,0|1009cw:000000xdur3mhxzzzxezsq7uzu0d,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test against Elasticsearch 7.16.3,HSEARCH-4445,71838,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/janv./2022 07:19 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,19/janv./2022 01:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Final,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-19T01:13:50.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2852,0|1009cw:000000xdur3mhxzzzxezsq7uzu09,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to JBoss Logging 3.4.3.Final,HHH-15028,71836,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,14/janv./2022 04:36 AM,19/janv./2022 00:07 AM,15/févr./2022 11:57 AM,14/janv./2022 10:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-14T10:10:28.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xgg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Enum properties in outbox-polling entities (agent, outboxevent) have a weird type in database",HSEARCH-4443,71835,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/janv./2022 04:15 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,17/janv./2022 04:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,mapper-orm,,,,0,,,,,,"For example:

{noformat}quarkus_test=# select type from hsearch_agent;
                                                                                                                                                                       type                                                             
                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------
 \xaced00057e7200516f72672e68696265726e6174652e7365617263682e6d61707065722e6f726d2e636f6f7264696e6174696f6e2e6f7574626f78706f6c6c696e672e636c75737465722e696d706c2e4167656e745479706500000000000000001200007872000e6a6176612e6c616e672e4
56e756d000000000000000012000078707400214556454e545f50524f43455353494e475f44594e414d49435f5348415244494e47
{noformat}

I think the enums are being serialized instead of being stored as their ordinal.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-17T04:30:16.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2842,0|1009cw:000000xdur3mhxzzzxezsq7uzu06,,,,,,HSEARCH - 2022-01,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
PersistentBag is loosing items,HHH-15027,71834,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jan Stolze,5be14f0316f04e0f980e875d,Jan Stolze,5be14f0316f04e0f980e875d,13/janv./2022 06:51 AM,13/janv./2022 06:54 AM,14/mars/2022 12:54 PM,,5.4.10,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Adding childs to a parent which are not yet persistent are lost when the entity manager containing them is being flushed. This problem exists in the PersistentBag which is not initialized, adding items while not initialized get stored in the  so it gets stored operationQueue to be added to the bag on a later moment.
But when the entity manager gets flushed by the creation of some other entity, all PersistentBags get notified to clear their operationQueue, while there are pending add action available. Resulting in an empty bag.
See test case for an example. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/janv./2022 06:54 AM;jan.stolze2;HHH-15027.zip;https://hibernate.atlassian.net/secure/attachment/49966/HHH-15027.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,jan.stolze2(jan.stolze2),,,,,,,,,0|104xg8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix errors and clarify documentation of outbox-polling configuration,HSEARCH-4442,71833,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/janv./2022 02:11 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,13/janv./2022 09:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-13T09:14:02.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2840,0|104x53:zy,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Log4J 2.17.1,HHH-15026,71831,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,12/janv./2022 06:35 AM,03/févr./2022 10:02 AM,14/mars/2022 12:54 PM,03/févr./2022 10:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.26,5.4.34,5.5.10,5.6.4,6.0.0.CR1,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=5}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":5,""lastUpdated"":""2022-02-03T10:01:28.000-0800"",""stateCount"":5,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xfs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Approved,,,,,,,,,,,,,,,,,,Terminé,,
Question why a relation OneToOne  is transformed into relation ManyToOne,HHH-15025,71830,,Story,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,jean-pierre jean-pierre,557058:66765211-4ea8-495c-8777-7aec1379e6a3,jean-pierre jean-pierre,557058:66765211-4ea8-495c-8777-7aec1379e6a3,12/janv./2022 05:22 AM,12/janv./2022 05:22 AM,14/mars/2022 12:54 PM,,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hi,

Can you tell under what condition can a OneToOne relationship be transformed by Hibernate into a ManyToOne relationship?","Java 1.8.0_291
Windows 10
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,jlerbsc(jlerbsc),,,,,,,,,0|104xfk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix call to purge() in migration guide so that it compiles,HSEARCH-4441,71828,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/janv./2022 03:54 AM,19/janv./2022 01:14 AM,14/mars/2022 12:54 PM,19/janv./2022 01:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.9.Final,,,,,,,,,documentation,,,,0,,,,,,See [https://discourse.hibernate.org/t/potential-issue-in-hs6-migration-guide/5959/2|https://discourse.hibernate.org/t/potential-issue-in-hs6-migration-guide/5959/2|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-02-23T08:10:39.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2853,0|1009cw:000000xdur3mhxzzzxezsq7uzu0r,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Jandex 2.4.2.Final,HHH-15024,71826,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,12/janv./2022 03:11 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,12/janv./2022 06:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-12T06:28:00.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix OutOfMemoryError thrown by Elasticsearch in tests,HSEARCH-4440,71820,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/janv./2022 02:00 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,12/janv./2022 09:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,,,,,0,,,,,,"See [https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/main/231/pipeline|https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/main/231/pipeline|smart-link] 

{noformat}[WARNING] Tests run: 11, Failures: 0, Errors: 0, Skipped: 2, Time elapsed: 0.801 s - in org.hibernate.search.integrationtest.backend.tck.search.query.SearchQueryScrollIT
[INFO] Running org.hibernate.search.integrationtest.backend.tck.search.query.SearchQueryScrollResultLoadingIT
09:10:22.136 Elasticsearch:[2022-01-12T09:10:22,126][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][233] overhead, spent [602ms] collecting in the last [1s]
09:10:23.136 Elasticsearch:[2022-01-12T09:10:23,133][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][234] overhead, spent [655ms] collecting in the last [1s]
09:10:24.380 Elasticsearch:[2022-01-12T09:10:24,378][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][235] overhead, spent [921ms] collecting in the last [1.2s]
09:10:25.383 Elasticsearch:[2022-01-12T09:10:25,379][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][236] overhead, spent [587ms] collecting in the last [1s]
09:10:26.380 Elasticsearch:[2022-01-12T09:10:26,379][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][237] overhead, spent [553ms] collecting in the last [1s]
09:10:27.484 Elasticsearch:[2022-01-12T09:10:27,473][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][238] overhead, spent [613ms] collecting in the last [1s]
09:10:28.475 Elasticsearch:[2022-01-12T09:10:28,474][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][239] overhead, spent [589ms] collecting in the last [1s]
09:10:29.502 Elasticsearch:[2022-01-12T09:10:29,488][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][240] overhead, spent [601ms] collecting in the last [1s]
09:10:33.509 Elasticsearch:[2022-01-12T09:10:33,509][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][244] overhead, spent [572ms] collecting in the last [1s]
09:10:34.537 Elasticsearch:[2022-01-12T09:10:34,536][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][245] overhead, spent [621ms] collecting in the last [1s]
09:10:35.537 Elasticsearch:[2022-01-12T09:10:35,537][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][246] overhead, spent [570ms] collecting in the last [1s]
09:10:37.575 Elasticsearch:[2022-01-12T09:10:37,568][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][248] overhead, spent [590ms] collecting in the last [1s]
09:10:38.839 Elasticsearch:[2022-01-12T09:10:38,836][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][249] overhead, spent [689ms] collecting in the last [1.2s]
09:10:41.033 Elasticsearch:[2022-01-12T09:10:41,022][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][251] overhead, spent [634ms] collecting in the last [1.1s]
09:10:44.272 Elasticsearch:[2022-01-12T09:10:44,271][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][254] overhead, spent [883ms] collecting in the last [1.2s]
09:10:45.272 Elasticsearch:[2022-01-12T09:10:45,272][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][255] overhead, spent [564ms] collecting in the last [1s]
09:10:46.274 Elasticsearch:[2022-01-12T09:10:46,274][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][256] overhead, spent [788ms] collecting in the last [1s]
09:10:47.282 Elasticsearch:[2022-01-12T09:10:47,275][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][257] overhead, spent [746ms] collecting in the last [1s]
09:10:48.454 Elasticsearch:[2022-01-12T09:10:48,450][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][258] overhead, spent [981ms] collecting in the last [1.1s]
09:10:49.452 Elasticsearch:[2022-01-12T09:10:49,451][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][259] overhead, spent [814ms] collecting in the last [1s]
09:10:50.735 Elasticsearch:[2022-01-12T09:10:50,728][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][260] overhead, spent [1.1s] collecting in the last [1.2s]
09:10:51.846 Elasticsearch:[2022-01-12T09:10:51,846][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][261] overhead, spent [1s] collecting in the last [1.1s]
09:10:52.910 Elasticsearch:[2022-01-12T09:10:52,909][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][262] overhead, spent [1s] collecting in the last [1s]
09:10:54.192 Elasticsearch:[2022-01-12T09:10:54,185][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][263] overhead, spent [1.2s] collecting in the last [1.2s]
09:10:55.863 Elasticsearch:java.lang.OutOfMemoryError: Java heap space
09:10:55.863 Elasticsearch:Dumping heap to java_pid1.hprof ...
09:10:58.197 Elasticsearch:Heap dump file created [1077341987 bytes in 2.333 secs]
09:10:58.549 Elasticsearch:[2022-01-12T09:10:58,548][WARN ][o.e.m.j.JvmGcMonitorService] [LrjhSh1] [gc][264] overhead, spent [2s] collecting in the last [1.6s]
09:10:59.395 Elasticsearch:[2022-01-12T09:10:59,388][ERROR][o.e.i.e.Engine           ] [LrjhSh1] [indexname-000001][3] already closed by tragic event on the index writer
09:10:59.396 Elasticsearch:java.lang.OutOfMemoryError: Java heap space
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.ParallelPostingsArray.<init>(ParallelPostingsArray.java:32) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray.<init>(FreqProxTermsWriterPerField.java:205) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray.newInstance(FreqProxTermsWriterPerField.java:230) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.ParallelPostingsArray.grow(ParallelPostingsArray.java:46) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow(TermsHashPerField.java:250) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.util.BytesRefHash.add(BytesRefHash.java:271) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.TermsHashPerField.add(TermsHashPerField.java:149) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain$PerField.invert(DefaultIndexingChain.java:796) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain.processField(DefaultIndexingChain.java:447) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain.processDocument(DefaultIndexingChain.java:403) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:232) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:478) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1571) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1316) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:662) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.indexIntoLucene(InternalEngine.java:606) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:504) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:557) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:546) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.executeIndexRequestOnPrimary(TransportShardBulkAction.java:493) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.executeBulkItemRequest(TransportShardBulkAction.java:145) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:114) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:69) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:975) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:944) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:113) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:345) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:270) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:924) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:921) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.shard.IndexShardOperationsLock.acquire(IndexShardOperationsLock.java:151) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.acquirePrimaryOperationLock(IndexShard.java:1659) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.396 Elasticsearch:[2022-01-12T09:10:59,390][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [] fatal error in thread [elasticsearch[LrjhSh1][bulk][T#2]], exiting
09:10:59.396 Elasticsearch:java.lang.OutOfMemoryError: Java heap space
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.ParallelPostingsArray.<init>(ParallelPostingsArray.java:32) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray.<init>(FreqProxTermsWriterPerField.java:205) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray.newInstance(FreqProxTermsWriterPerField.java:230) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.ParallelPostingsArray.grow(ParallelPostingsArray.java:46) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow(TermsHashPerField.java:250) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.util.BytesRefHash.add(BytesRefHash.java:271) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.TermsHashPerField.add(TermsHashPerField.java:149) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain$PerField.invert(DefaultIndexingChain.java:796) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain.processField(DefaultIndexingChain.java:447) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DefaultIndexingChain.processDocument(DefaultIndexingChain.java:403) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:232) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.396 Elasticsearch:	at org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:478) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.397 Elasticsearch:	at org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1571) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.397 Elasticsearch:	at org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1316) ~[lucene-core-6.6.1.jar:6.6.1 9aa465a89b64ff2dabe7b4d50c472de32c298683 - varunthacker - 2017-08-29 21:54:39]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:662) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.indexIntoLucene(InternalEngine.java:606) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.engine.InternalEngine.index(InternalEngine.java:504) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:557) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.index(IndexShard.java:546) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.executeIndexRequestOnPrimary(TransportShardBulkAction.java:493) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.executeBulkItemRequest(TransportShardBulkAction.java:145) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:114) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.bulk.TransportShardBulkAction.shardOperationOnPrimary(TransportShardBulkAction.java:69) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:975) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$PrimaryShardReference.perform(TransportReplicationAction.java:944) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.ReplicationOperation.execute(ReplicationOperation.java:113) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:345) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$AsyncPrimaryAction.onResponse(TransportReplicationAction.java:270) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:924) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.action.support.replication.TransportReplicationAction$1.onResponse(TransportReplicationAction.java:921) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.shard.IndexShardOperationsLock.acquire(IndexShardOperationsLock.java:151) ~[elasticsearch-5.6.16.jar:5.6.16]
09:10:59.397 Elasticsearch:	at org.elasticsearch.index.shard.IndexShard.acquirePrimaryOperationLock(IndexShard.java:1659) ~[elasticsearch-5.6.16.jar:5.6.16]{noformat}

It seems the memory settings introduced in [https://hibernate.atlassian.net/browse/HSEARCH-4429|https://hibernate.atlassian.net/browse/HSEARCH-4429|smart-link] were too restrictive: Elasticsearch 5.6, at least, needs more than 1GB of memory to execute some of the tests.



Note that the test that caused the outofmemory error is probably {{SearchQueryTimeoutIT}}, the test just after {{SearchQueryScrollResultLoadingIT}}. It’s a bit confusing, but that’s because Maven surefire only displays the result of one test after it loaded the next one, and we perform ES data initialization when we load the test ({{@BeforeClass}}).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-13T00:50:20.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2839,0|104x53:zx,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Move Query and NativeQuery back to org.hibernate,HHH-15023,71818,,Amélioration,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/janv./2022 18:33 PM,14/janv./2022 12:34 PM,14/mars/2022 12:54 PM,14/janv./2022 12:34 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"{{org.hibernate.query.Query}} → {{org.hibernate.Query}}

{{org.hibernate.query.NativeQuery}} → {{org.hibernate.NativeQuery}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-14T12:49:17.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104xdc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Bug After Upgrade Hibernate from 5.6.1.Final to 5.6.3.Final,HHH-15022,71817,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Giuseppe La Scaleia,557058:667a31e3-c346-448f-b166-55bb9f660f13,Giuseppe La Scaleia,557058:667a31e3-c346-448f-b166-55bb9f660f13,11/janv./2022 07:07 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,18/janv./2022 06:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,,,,,,,,,,,,,0,hibernate,,,,,"I have two Entities with an Abstract Class with this annotation [@Inheritance|https://github.com/Inheritance](strategy = InheritanceType.TABLE_PER_CLASS).
Before Updating in my tests if i call in the DAO removeAll() methods all rocks.
After updating i have this error :



{noformat}Hibernate: create temporary table public.public.HT_gp_layer (id int8 not null)
Hibernate: insert into public.public.HT_gp_layer select gplayer0_.id as id from ( select id, abstract, alias_name, max_x, max_y, min_x, min_y, cached, checked, cql_filter, layer_type, name, position, shared, single_tile_request, srs, time_filter, title, url_server, the_geom, folder_id, project_id, null::varchar as format, null::int4 as height, null::varchar as online_resource, null::int4 as width, null::varchar as keywords, null::boolean as queryable, null::float4 as max_scale, null::float4 as min_scale, null::float4 as opacity, null::varchar as styles, null::varchar as dimension_name, null::varchar as dimension_units, null::varchar as default_extent, null::varchar as extent_name, null::varchar as extent_value, 1 as clazz_ from public.gp_vector_layer union all select id, abstract, alias_name, max_x, max_y, min_x, min_y, cached, checked, cql_filter, layer_type, name, position, shared, single_tile_request, srs, time_filter, title, url_server, null::GEOMETRY as the_geom, folder_id, project_id, format, height, online_resource, width, keywords, queryable, max_scale, min_scale, opacity, styles, dimension_name, dimension_units, default_extent, extent_name, extent_value, 2 as clazz_ from public.gp_raster_layer ) gplayer0_
15:14:26.880 [main] WARN o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 25P02
15:14:26.880 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: current transaction is aborted, commands ignored until end of transaction block
Hibernate: drop table public.public.HT_gp_layer
15:14:26.882 [main] WARN o.hibernate.hql.spi.id.local.Helper - unable to drop temporary id table after use [ERROR: current transaction is aborted, commands ignored until end of transaction block]
javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: could not execute statement
at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154)
at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
at org.hibernate.query.internal.AbstractProducedQuery.executeUpdate(AbstractProducedQuery.java:1705)
at org.geosdi.geoplatform.persistence.dao.jpa.GPAbstractJpaDAO.removeAll(GPAbstractJpaDAO.java:221)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
at jdk.proxy2/jdk.proxy2.$Proxy117.removeAll(Unknown Source)
at org.geosdi.geoplatform.initializer.BaseInitializerTest.removeAllLayers(BaseInitializerTest.java:185)
at org.geosdi.geoplatform.initializer.BaseInitializerTest.removeAll(BaseInitializerTest.java:161)
at org.geosdi.geoplatform.initializer.BootstrapInitializerTest.a_testBootstrap(BootstrapInitializerTest.java:75)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)
at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84)
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:275)
at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)
at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:149)
at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: org.hibernate.exception.GenericJDBCException: could not execute statement
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)
at org.hibernate.hql.spi.id.TableBasedDeleteHandlerImpl.execute(TableBasedDeleteHandlerImpl.java:121)
at org.hibernate.hql.internal.ast.exec.MultiTableDeleteExecutor.execute(MultiTableDeleteExecutor.java:50)
at org.hibernate.hql.internal.ast.QueryTranslatorImpl.executeUpdate(QueryTranslatorImpl.java:458)
at org.hibernate.engine.query.spi.HQLQueryPlan.performExecuteUpdate(HQLQueryPlan.java:377)
at org.hibernate.internal.SessionImpl.executeUpdate(SessionImpl.java:1478)
at org.hibernate.query.internal.AbstractProducedQuery.doExecuteUpdate(AbstractProducedQuery.java:1714)
at org.hibernate.query.internal.AbstractProducedQuery.executeUpdate(AbstractProducedQuery.java:1696)
... 52 more
Caused by: org.postgresql.util.PSQLException: ERROR: current transaction is aborted, commands ignored until end of transaction block
at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2364)
at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:354)
at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:484)
at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:404)
at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:162)
at org.postgresql.jdbc.PgPreparedStatement.executeUpdate(PgPreparedStatement.java:130)
at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:1502)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
... 59 more
Caused by: org.postgresql.util.PSQLException: ERROR: cross-database references are not implemented: ""public.public.ht_gp_layer""
Posizione: 25
at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2364)
at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:354)
at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:484)
at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:404)
at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:325)
at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:311)
at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:287)
at org.postgresql.jdbc.PgStatement.executeUpdate(PgStatement.java:261)
at com.mchange.v2.c3p0.impl.NewProxyStatement.executeUpdate(NewProxyStatement.java:410)
at org.hibernate.hql.spi.id.local.Helper$TemporaryTableCreationWork.execute(Helper.java:78)
at org.hibernate.hql.spi.id.local.Helper.createTempTable(Helper.java:53)
at org.hibernate.hql.spi.id.local.LocalTemporaryTableBulkIdStrategy$3.prepareForUse(LocalTemporaryTableBulkIdStrategy.java:185)
at org.hibernate.hql.spi.id.TableBasedDeleteHandlerImpl.execute(TableBasedDeleteHandlerImpl.java:109)
... 58 more
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.905 sec <<< FAILURE! - in org.geosdi.geoplatform.initializer.BootstrapInitializerTest
a_testBootstrap(org.geosdi.geoplatform.initializer.BootstrapInitializerTest) Time elapsed: 0.165 sec <<< ERROR!
org.geosdi.geoplatform.persistence.dao.exception.GPDAOException: javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: could not execute statement
at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2674)
at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2364)
at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:354)
at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:484)
at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:404)
at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:325)
at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:311)
at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:287)
at org.postgresql.jdbc.PgStatement.executeUpdate(PgStatement.java:261)
at com.mchange.v2.c3p0.impl.NewProxyStatement.executeUpdate(NewProxyStatement.java:410)
at org.hibernate.hql.spi.id.local.Helper$TemporaryTableCreationWork.execute(Helper.java:78)
at org.hibernate.hql.spi.id.local.Helper.createTempTable(Helper.java:53)
at org.hibernate.hql.spi.id.local.LocalTemporaryTableBulkIdStrategy$3.prepareForUse(LocalTemporaryTableBulkIdStrategy.java:185)
at org.hibernate.hql.spi.id.TableBasedDeleteHandlerImpl.execute(TableBasedDeleteHandlerImpl.java:109)
at org.hibernate.hql.internal.ast.exec.MultiTableDeleteExecutor.execute(MultiTableDeleteExecutor.java:50)
at org.hibernate.hql.internal.ast.QueryTranslatorImpl.executeUpdate(QueryTranslatorImpl.java:458)
at org.hibernate.engine.query.spi.HQLQueryPlan.performExecuteUpdate(HQLQueryPlan.java:377)
at org.hibernate.internal.SessionImpl.executeUpdate(SessionImpl.java:1478)
at org.hibernate.query.internal.AbstractProducedQuery.doExecuteUpdate(AbstractProducedQuery.java:1714)
at org.hibernate.query.internal.AbstractProducedQuery.executeUpdate(AbstractProducedQuery.java:1696)
at org.geosdi.geoplatform.persistence.dao.jpa.GPAbstractJpaDAO.removeAll(GPAbstractJpaDAO.java:221)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
at jdk.proxy2/jdk.proxy2.$Proxy117.removeAll(Unknown Source)
at org.geosdi.geoplatform.initializer.BaseInitializerTest.removeAllLayers(BaseInitializerTest.java:185)
at org.geosdi.geoplatform.initializer.BaseInitializerTest.removeAll(BaseInitializerTest.java:161)
at org.geosdi.geoplatform.initializer.BootstrapInitializerTest.a_testBootstrap(BootstrapInitializerTest.java:75){noformat}",Mac,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-19T05:31:09.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,glascaleia(glascaleia),raginggoblin(raginggoblin),yrodiere(fenrhil),,,,,,https://github.com/hibernate/hibernate-orm/pull/4659,0|104xd4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,2022-01-13 09:13:59.625,,,,"13/janv./2022 01:13 AM;557058:c652dcd4-b667-4b1d-a7b9-7562f49c936b;We experience this as well. Previously the query was on schema.table. Now it is on catalog.schema.table.

In spring we set spring.jpa.properties.hibernate.default_schema to a fixed value. Even if we set spring.jpa.properties.hibernate.default_catalog the problem remains. 

This is on linux","13/janv./2022 02:35 AM;557058:667a31e3-c346-448f-b166-55bb9f660f13;Ok thanks a lot. I have remove the property hibernate_{{defaultSchema}} and now all my tests passed.

Thanks a lot",,,,,,,,,,,,,,,Terminé,,
Support for UserCollectionType,HHH-15021,71816,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/janv./2022 05:44 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,11/janv./2022 05:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104xcw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix tests involving overrides of outbox-polling entity mapping on MySQL,HSEARCH-4439,71814,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/janv./2022 05:31 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,11/janv./2022 08:31 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,tests,,,,0,,,,,,"See [https://ci.hibernate.org/job/hibernate-search/job/main/227/|https://ci.hibernate.org/job/hibernate-search/job/main/227/|smart-link] : 

{noformat}java.lang.AssertionError: 

Expecting actual:
  0
to be greater than:
  0

	at org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingCustomEntityMappingIT.validAgentMapping(OutboxPollingCustomEntityMappingIT.java:159){noformat}

Maybe the assertions should be made case-insensitive?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T08:31:07.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2837,0|104x53:zv,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
More detailed error message for syntax errors in custom mapping/settings file,HSEARCH-4438,71813,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/janv./2022 04:42 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,11/janv./2022 06:37 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"Currently we show something like this:

{noformat}    Hibernate ORM mapping: 
        type 'io.quarkus.hibernate.search.elasticsearch.test.configuration.IndexedEntity': 
            index 'IndexedEntity': 
                failures: 
                  - HSEARCH400653: There are some JSON syntax errors on the given custom index mapping file: 'custom-mapping.json'.
{noformat}

We really should display the message of the cause exception, otherwise the error is hardly actionable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2022-01-12T00:00:50.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2836,0|104x53:zr,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix very long Maven download timeouts when building with GitHub Actions,HSEARCH-4437,71812,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/janv./2022 02:05 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,12/janv./2022 01:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,build,,,,0,,,,,,"We get that kind of things:

{noformat}Mon, 10 Jan 2022 23:00:14 GMT [INFO] Downloaded from : https://repo.maven.apache.org/maven2/org/junit/jupiter/junit-jupiter-params/5.7.1/junit-jupiter-params-5.7.1.jar (567 kB at 745 kB/s)
Mon, 10 Jan 2022 23:15:56 GMT [INFO] I/O exception (java.net.SocketException) caught when processing request to {s}->https://repo.maven.apache.org: Connection timed out (Read failed){noformat}

The timeout is 15 _minutes_ long\! And it happens multiple times, leading to builds that hit the general 6-hour timeout on GitHub actions, when we don’t expect the full build to take more than ~45 minutes.

See [https://github.com/hibernate/hibernate-search/runs/4766647808?check_suite_focus=true|https://github.com/hibernate/hibernate-search/runs/4766647808?check_suite_focus=true|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-12T01:45:51.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2838,0|104x53:zi,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Table creation issue when updating H2 from 1.4.200 to 2.0.206,HHH-15020,71811,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Dietzsch Alexander (CI/PIB1),61dd37b349f195006994617a,Dietzsch Alexander (CI/PIB1),61dd37b349f195006994617a,11/janv./2022 00:19 AM,11/janv./2022 02:19 AM,14/mars/2022 12:54 PM,,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

we have a table definition with a column with Java type string, where we use the [@type|https://github.com/type] annotation for mapping to the SQL type like in the example below:

{noformat}@Column(name = ""response_content_exception"")
@Type(type = ""org.hibernate.type.TextType"")
private String responseContentException;{noformat}

We do so, as we use for unit tests H2 and in production we support MySQL and Postgresql. We use Spring Boot 2.6.2 with the corresponding Hibernate 5.6.3 to create the tables for unit testing. Till H2 1.4.200 this has worked fine. When we tried to update the H2 driver to 2.0.206 our tests were failing during table creation with the following error:

{{precision (""2147483647"") must be between ""1"" and ""1048576""}}

We noticed that Hibernate is mapping the LONGVARCHAR type to VARCHAR for H2 in H2Dialect, even when H2 is supporting LONGVARCHAR, which seems to cause the error.

best regards,
Alex","JVM: Open JDK 11
Spring Boot 2.6.2
Hibernate: 5.6.3
Database: H2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:567b26cf-908a-48ca-8b89-10306405ee07(ug:567b26cf-908a-48ca-8b89-10306405ee07),,,,,,,,,0|104xcg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.6.3.Final,HSEARCH-4436,71810,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 23:52 PM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,11/janv./2022 01:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T01:48:43.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2834,0|104x53:z,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
HQL/Criteria bytecode lazy fetch,HHH-15019,71808,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,10/janv./2022 10:46 AM,10/janv./2022 10:46 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.Next,,,,,,,,,,,,,0,,,,,,"Allow triggering of bytecode lazy attributes by new non-join fetch clause.  

{noformat}select p fetch p.name fetch p.age
from Person p{noformat}



Or perhaps 

{noformat}select p fetch name, age
from Person p{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104xc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Custom Elasticsearch settings/mapping require the backend to be started,HSEARCH-4435,71806,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 09:03 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,11/janv./2022 05:00 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"In ElasticsearchBackendImpl, we parse custom settings this way:

{noformat}		try ( InputStream inputStream = buildContext.resourceResolver().locateResourceStream( filePath ) ) {
			if ( inputStream == null ) {
				throw log.customIndexSettingsFileNotFound( filePath, indexEventContext );
			}
			try ( Reader reader = new InputStreamReader( inputStream, StandardCharsets.UTF_8 ) ) {
				return link.getGsonProvider().getGson().fromJson( reader, IndexSettings.class );
			}
		}
{noformat}



This will only work if the link with Elasticsearch was established at this point; otherwise {{link.getGsonProvider().getGson()}} will throw an exception because most of its methods are only usable after starting the Elasticsearch client.

This is problematic in Quarkus in particular, where we parse custom settings during static init, which in the case of native compilation happens at build time, before we can start an Elasticsearch client.

The custom mapping is affected by the same flaw.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T04:59:47.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2835,0|104x53:y,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
OracleTypesHelper shouldn't log stacktraces when the Oracle JDBC driver isn't loadable,HHH-15018,71805,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,10/janv./2022 08:15 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,10/janv./2022 09:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,"This relates to [https://github.com/quarkusio/quarkus/issues/21269|https://github.com/quarkusio/quarkus/issues/21269|smart-link] 

When compiling to GraalVM native images  , in some projects the static initializer of {{OracleTypesHelper}} is being triggered even when the Oracle Database isn’t being used; I’m fairly confident that this is caused by not-entirely-clean code in other integration libraries, still we can easily make this a little less confusing and intimidating by simplifying the warning message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-10T09:08:29.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104xbk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid unnecessary synchronization in ExpectedLog4jLog,HSEARCH-4434,71804,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 03:32 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,10/janv./2022 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,6.1.0.CR1,,,,,,,tests,,,,0,,,,,,"This testing tool leads to a synchronization every single time a log event is processed, which could change the behavior of Hibernate Search in some edge cases; ;let’s avoid that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2022-01-11T01:47:29.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2830,0|104x53:x,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Log4j 2 in Hibernate Search 5.x tests,HSEARCH-4433,71801,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 02:07 AM,11/janv./2022 01:47 AM,14/mars/2022 12:54 PM,11/janv./2022 01:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,,,,,,,,tests,,,,0,,,,,,"This is necessary in order to upgrade to Hibernate ORM 5.3.25 and 5.4.33, because those versions now assume we’re using log4j2, and hibernate-testing forcefully overrides the logger provider with {{TestableLoggerProvider}} which will not log anything unless we’re actually using log4j 2.

Note this only affects our own tests; no published Hibernate Search artifacts has any dependency on log4j, neither 1 nor 2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-11T01:47:29.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2831,0|104x53:v,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.4.33.Final,HSEARCH-4432,71800,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 02:03 AM,11/janv./2022 01:48 AM,14/mars/2022 12:54 PM,11/janv./2022 01:48 AM,5.11.11.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.11.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T01:47:29.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2831,0|104x53:r,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.3.25.Final,HSEARCH-4431,71799,,Amélioration,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/janv./2022 02:03 AM,11/janv./2022 01:48 AM,14/mars/2022 12:54 PM,11/janv./2022 01:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T01:47:22.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2832,0|104x53:i,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to latest version of build dependencies,HSEARCH-4430,71793,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/janv./2022 23:55 PM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,10/janv./2022 08:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-17T04:44:53.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2829,0|104x53:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Clean-up Query#setParameter overloads,HHH-15017,71791,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/janv./2022 08:01 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,10/janv./2022 10:31 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"{{Query}} has way to many overloaded forms of {{#setParameter}}.  For background, see [https://github.com/hibernate/hibernate-orm/discussions/4597|https://github.com/hibernate/hibernate-orm/discussions/4597|smart-link] 



Overloads for named/positional parameters (using named as representative):

{noformat}Query<R> setParameter(String name, Object value);
<P> Query<R> setParameter(String name, P value, Class<P> type);
<P> Query<R> setParameter(String name, P value, BindableType<P> type);
Query<R> setParameter(String name, Instant value, TemporalType temporalType);
Query<R> setParameter(String name, Calendar value, TemporalType temporalType);
Query<R> setParameter(String name, Date value, TemporalType temporalType);{noformat}



Overloads for Hibernate’s {{QueryParameter}}:

{noformat}<T> Query<R> setParameter(QueryParameter<T> parameter, T value);
<P> Query<R> setParameter(QueryParameter<P> parameter, P value, Class<P> type);
<P> Query<R> setParameter(QueryParameter<P> parameter, P val, BindableType<P> type);{noformat}



Overloads for JPA’s {{Parameter}}:

{noformat}<P> Query<R> setParameter(Parameter<P> param, P value);
Query<R> setParameter(Parameter<Calendar> param, Calendar value, TemporalType temporalType);
Query<R> setParameter(Parameter<Date> param, Date value, TemporalType temporalType);{noformat}",,,,,,,,,,,,,,,,,,,,,,,,HHH-15023,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-10T10:26:40.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104x9k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
NullPointerException when closing hikari connection provider,HHH-15016,71789,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,07/janv./2022 06:52 AM,07/janv./2022 06:54 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-hikaricp,,,,0,,,,,,"Just got this NullPointerException:

{noformat}2022-01-07 14:47:20,134 <INFO > <main                               > <[]> <{}> <rnate.service.internal.AbstractServiceRegistryImpl> HHH000369: Error stopping service [class org.hibernate.hikaricp.internal.HikariCPConnectionProvider]
java.lang.NullPointerException: Cannot invoke ""com.zaxxer.hikari.HikariDataSource.close()"" because ""this.hds"" is null
	at org.hibernate.hikaricp.internal.HikariCPConnectionProvider.stop(HikariCPConnectionProvider.java:122) ~[hibernate-hikaricp-5.6.1.Final.jar:5.6.1.Final]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.stopService(AbstractServiceRegistryImpl.java:390) ~[hibernate-core-5.6.1.Final.jar:5.6.1.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.cleanup(EntityManagerFactoryBuilderImpl.java:1449) ~[hibernate-core-5.6.1.Final.jar:5.6.1.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.cancel(EntityManagerFactoryBuilderImpl.java:1437) ~[hibernate-core-5.6.1.Final.jar:5.6.1.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.generateSchema(EntityManagerFactoryBuilderImpl.java:1486) ~[hibernate-core-5.6.1.Final.jar:5.6.1.Final]
	at org.hibernate.jpa.HibernatePersistenceProvider.generateSchema(HibernatePersistenceProvider.java:161) ~[hibernate-core-5.6.1.Final.jar:5.6.1.Final]
	at javax.persistence.Persistence.generateSchema(Persistence.java:114) ~[javax.persistence-api-2.2.jar:2.2]
	[...]{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),,,,,,,,,0|104x94:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Change the limit of the RAM usage by ES containers,HSEARCH-4429,71785,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,07/janv./2022 04:00 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,09/janv./2022 23:59 PM,6.1.0.Beta2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,"With the current limit:

{{<ES_JAVA_OPTS>-Xms2g -Xmx2g</ES_JAVA_OPTS>}}

we have some issue running the tests on some environments (e.g.: MacOS, GitHub actions) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-09T23:59:26.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2825,0|104x88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add missing classes to org.hibernate.search.backend.elasticsearch.gson.spi.GsonClasses,HSEARCH-4428,71780,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/janv./2022 00:20 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,09/janv./2022 23:58 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"org.hibernate.search.backend.elasticsearch.lowlevel.index.settings.impl.IndexSettingsJsonAdapterFactory is missing, in particular.

We should probably add a test that scans the whole classpath, something similar to [https://github.com/quarkusio/quarkus/blob/8e2870c052ecf44dc0360cee9a545eb79b3adac8/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/HibernateOrmAnnotationsTest.java#L52|https://github.com/quarkusio/quarkus/blob/8e2870c052ecf44dc0360cee9a545eb79b3adac8/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/HibernateOrmAnnotationsTest.java#L52|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-09T23:58:31.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2824,0|104x52:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
H2Dialect does not work properly with h2 2.0.202 with indexes,HHH-15015,71779,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,06/janv./2022 10:00 AM,06/janv./2022 10:23 AM,14/mars/2022 12:54 PM,,5.6.1,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,H2,,,,,"This is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates,|https://github.com/hibernate/hibernate-test-case-templates,|smart-link] commit 2bf45ab3d7ff82436286262e34f042749a4f2893

{noformat}diff --git a/orm/hibernate-orm-5/pom.xml b/orm/hibernate-orm-5/pom.xml
index 276ed7e..6887660 100644
--- a/orm/hibernate-orm-5/pom.xml
+++ b/orm/hibernate-orm-5/pom.xml
@@ -8,7 +8,7 @@
 	<name>Hibernate ORM 5 Test Case Template</name>
 
 	<properties>
-		<version.com.h2database>1.3.176</version.com.h2database>
+		<version.com.h2database>2.0.202</version.com.h2database>
 		<version.junit>4.13.2</version.junit>
 		<version.org.hibernate>5.6.1.Final</version.org.hibernate>
 		<version.org.slf4j>1.7.25</version.org.slf4j>
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
new file mode 100644
index 0000000..5883699
--- /dev/null
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
@@ -0,0 +1,44 @@
+package org.hibernate.bugs;
+
+import java.util.Date;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Index;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+@Entity
+@Table(indexes = {@Index(name = ""index1"", columnList = ""createdOn"")})
+public class Event {
+
+    @Id
+    @GeneratedValue
+    private Long id;
+
+    @Temporal(TemporalType.TIMESTAMP )
+    private Date createdOn;
+
+    private Boolean active;
+
+    public Event() {
+    }
+
+    public Event(Date createdOn, Boolean active) {
+        this.createdOn = createdOn;
+        this.active = active;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public Date getCreatedOn() {
+        return createdOn;
+    }
+
+    public Boolean getActive() {
+        return active;
+    }
+}
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
index 66757be..48a2a3a 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
@@ -15,11 +15,20 @@
  */
 package org.hibernate.bugs;
 
+import java.util.EnumSet;
+
 import org.hibernate.Session;
 import org.hibernate.Transaction;
+import org.hibernate.boot.MetadataSources;
+import org.hibernate.boot.registry.StandardServiceRegistry;
+import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
+import org.hibernate.boot.spi.MetadataImplementor;
 import org.hibernate.cfg.AvailableSettings;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
+import org.hibernate.tool.hbm2ddl.SchemaUpdate;
+import org.hibernate.tool.schema.JdbcMetadaAccessStrategy;
+import org.hibernate.tool.schema.TargetType;
 import org.junit.Test;
 
 /**
@@ -73,6 +82,23 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		Session s = openSession();
 		Transaction tx = s.beginTransaction();
 		// Do stuff...
+
+		final StandardServiceRegistry ssr = new StandardServiceRegistryBuilder()
+				.applySetting(AvailableSettings.KEYWORD_AUTO_QUOTING_ENABLED, ""true"")
+				.applySetting(AvailableSettings.HBM2DDL_JDBC_METADATA_EXTRACTOR_STRATEGY, JdbcMetadaAccessStrategy.INDIVIDUALLY.toString())
+				.build();
+		final MetadataSources metadataSources = new MetadataSources( ssr );
+		metadataSources.addAnnotatedClass( Event.class );
+
+		MetadataImplementor metadata = (MetadataImplementor) metadataSources.buildMetadata();
+		metadata.validate();
+
+		new SchemaUpdate().setHaltOnError(true)
+				.execute(EnumSet.of(TargetType.DATABASE), metadata);
+
+		new SchemaUpdate().setHaltOnError(true)
+				.execute(EnumSet.of(TargetType.DATABASE), metadata);
+
 		tx.commit();
 		s.close();
 	}
{noformat}

The error is {{Index ""INDEX1"" already exists}}:

{noformat}
org.hibernate.tool.schema.spi.SchemaManagementException: Halting on error : Error executing DDL ""create index index1 on Event (createdOn)"" via JDBC Statement

	at org.hibernate.tool.schema.internal.ExceptionHandlerHaltImpl.handleException(ExceptionHandlerHaltImpl.java:27)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:567)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:508)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyIndexes(AbstractSchemaMigrator.java:332)
	at org.hibernate.tool.schema.internal.IndividuallySchemaMigratorImpl.performTablesMigration(IndividuallySchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:208)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:115)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:94)
	at org.hibernate.tool.hbm2ddl.SchemaUpdate.execute(SchemaUpdate.java:63)
	at org.hibernate.bugs.ORMUnitTestCase.hhh123Test(ORMUnitTestCase.java:100)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""create index index1 on Event (createdOn)"" via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:563)
	... 23 more
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Index ""INDEX1"" already exists; SQL statement:
create index index1 on Event (createdOn) [42111-202]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.ddl.CreateIndex.update(CreateIndex.java:74)
	at org.h2.command.CommandContainer.update(CommandContainer.java:173)
	at org.h2.command.Command.executeUpdate(Command.java:247)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 24 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),froque(froque),,,,,,,,0|104x74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-06 18:23:30.823,,,,06/janv./2022 10:23 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Thanks for the report. I analyzed the issue already and reported the regression: [https://github.com/h2database/h2database/issues/3340|https://github.com/h2database/h2database/issues/3340|smart-link] ,,,,,,,,,,,,,,,,A faire,,
H2Dialect does not work properly with h2 2.0.202 on sub selects with tuples,HHH-15014,71778,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,06/janv./2022 08:53 AM,25/janv./2022 07:37 AM,14/mars/2022 12:54 PM,18/janv./2022 06:18 AM,6.0.0.CR1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.5,6.0.0.CR1,,,,,,,,hibernate-core,,,,0,H2,,,,,"Attached is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates,|https://github.com/hibernate/hibernate-test-case-templates,|smart-link]  commit 2bf45ab3d7ff82436286262e34f042749a4f2893

The error is {{Column count does not match}} and the stack trace is:

{code:java}org.hibernate.exception.SQLGrammarException: JDBC exception executing SQL [select e2_0.EmployeeGroup_dept_name,e2_0.EmployeeGroup_group_name,e2_1.id,e2_1.name from EmployeeGroup_Employee e2_0 join Employee e2_1 on e2_1.id=e2_0.employees_id where (e2_0.EmployeeGroup_dept_name,e2_0.EmployeeGroup_group_name) in(select (e1_0.dept_name,e1_0.group_name) from EmployeeGroup e1_0 where (e1_0.dept_name,e1_0.group_name) in((?,?),(?,?),(?,?)))]

	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:63)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:36)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:107)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:93)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:253)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:146)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.lambda$processNext$0(JdbcValuesResultSetImpl.java:89)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.advance(JdbcValuesResultSetImpl.java:274)
	at org.hibernate.sql.results.jdbc.internal.JdbcValuesResultSetImpl.processNext(JdbcValuesResultSetImpl.java:85)
	at org.hibernate.sql.results.jdbc.internal.AbstractJdbcValues.next(AbstractJdbcValues.java:29)
	at org.hibernate.sql.results.internal.RowProcessingStateStandardImpl.next(RowProcessingStateStandardImpl.java:89)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:113)
	at org.hibernate.sql.results.spi.ListResultsConsumer.consume(ListResultsConsumer.java:25)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:428)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:167)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.list(JdbcSelectExecutorStandardImpl.java:95)
	at org.hibernate.loader.ast.internal.CollectionLoaderSubSelectFetch.load(CollectionLoaderSubSelectFetch.java:127)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:816)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:75)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:1664)
	at org.hibernate.collection.spi.AbstractPersistentCollection.lambda$initialize$3(AbstractPersistentCollection.java:572)
	at org.hibernate.collection.spi.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:254)
	at org.hibernate.collection.spi.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:570)
	at org.hibernate.collection.spi.AbstractPersistentCollection.read(AbstractPersistentCollection.java:145)
	at org.hibernate.collection.spi.AbstractPersistentCollection.lambda$readSize$0(AbstractPersistentCollection.java:171)
	at org.hibernate.collection.spi.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:254)
	at org.hibernate.collection.spi.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:157)
	at org.hibernate.collection.spi.PersistentBag.size(PersistentBag.java:377)
	at org.hibernate.bugs.ORMUnitTestCase.hhh123Test(ORMUnitTestCase.java:115)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
select e2_0.EmployeeGroup_dept_name,e2_0.EmployeeGroup_group_name,e2_1.id,e2_1.name from EmployeeGroup_Employee e2_0 join Employee e2_1 on e2_1.id=e2_0.employees_id where (e2_0.EmployeeGroup_dept_name,e2_0.EmployeeGroup_group_name) in(select (e1_0.dept_name,e1_0.group_name) from EmployeeGroup e1_0 where (e1_0.dept_name,e1_0.group_name) in((?,?),(?,?),(?,?))) [21002-202]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.value.ValueRow.compareTypeSafe(ValueRow.java:119)
	at org.h2.value.Value.compareToNotNullable(Value.java:2632)
	at org.h2.value.Value.compareTo(Value.java:2605)
	at org.h2.value.ValueRow.compareTypeSafe(ValueRow.java:124)
	at org.h2.value.Value.compareToNotNullable(Value.java:2632)
	at org.h2.value.Value.compareTo(Value.java:2605)
	at org.h2.value.CompareMode.compare(CompareMode.java:280)
	at org.h2.value.CompareMode.compare(CompareMode.java:20)
	at java.base/java.util.TreeMap.getEntryUsingComparator(TreeMap.java:374)
	at java.base/java.util.TreeMap.getEntry(TreeMap.java:344)
	at java.base/java.util.TreeMap.get(TreeMap.java:279)
	at org.h2.result.LocalResult.containsDistinct(LocalResult.java:241)
	at org.h2.expression.condition.ConditionInQuery.getValue(ConditionInQuery.java:95)
	at org.h2.expression.condition.ConditionInQuery.getValue(ConditionInQuery.java:55)
	at org.h2.expression.Expression.getBooleanValue(Expression.java:331)
	at org.h2.table.TableFilter.isOk(TableFilter.java:505)
	at org.h2.table.TableFilter.next(TableFilter.java:451)
	at org.h2.command.query.Select$LazyResultQueryFlat.fetchNextRow(Select.java:1825)
	at org.h2.result.LazyResult.hasNext(LazyResult.java:78)
	at org.h2.result.FetchedResult.next(FetchedResult.java:34)
	at org.h2.command.query.Select.queryFlat(Select.java:728)
	at org.h2.command.query.Select.queryWithoutCache(Select.java:833)
	at org.h2.command.query.Query.queryWithoutCacheLazyCheck(Query.java:196)
	at org.h2.command.query.Query.query(Query.java:493)
	at org.h2.command.query.Query.query(Query.java:456)
	at org.h2.command.CommandContainer.query(CommandContainer.java:255)
	at org.h2.command.Command.executeQuery(Command.java:187)
	at org.h2.jdbc.JdbcPreparedStatement.executeQuery(JdbcPreparedStatement.java:128)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:217)
	... 40 more{code}",,,,,,,,,,,,,,,,,,,,,,,,HHH-15035,,,,,06/janv./2022 08:53 AM;froque;h2_2.0.202.subselect_tuples_hibernate6_snapshot.diff;https://hibernate.atlassian.net/secure/attachment/49958/h2_2.0.202.subselect_tuples_hibernate6_snapshot.diff,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-25T07:35:49.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,christian.beikov(christian.beikov),froque(froque),,,,,,,,0|104x6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-06 16:56:15.375,,,,"06/janv./2022 08:56 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I have a fix for this already, so please don’t bother with this one.",,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 6.8.22,HSEARCH-4427,71777,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/janv./2022 04:30 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,06/janv./2022 05:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-06T05:38:41.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2822,0|104x50:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Update compatible versions of OpenSearch in the reference documentation,HSEARCH-4426,71776,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/janv./2022 03:54 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,06/janv./2022 05:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,documentation,,,0,,,,,,See [https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#getting-started-compatibility|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#getting-started-compatibility|smart-link]  ; we only mention 1.0 but should mention 1.2 as well.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-06T05:21:53.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104x4k:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
H2Dialect does not work properly with h2 2.0.202 and sequences,HHH-15013,71774,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,04/janv./2022 14:46 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,06/janv./2022 01:56 AM,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-core,,,,0,Dialect,H2,,,,"This is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates|https://github.com/hibernate/hibernate-test-case-templates|smart-link]  , commit {{2bf45ab3d7ff82436286262e34f042749a4f2893}}

{noformat}diff --git a/orm/hibernate-orm-5/pom.xml b/orm/hibernate-orm-5/pom.xml
index 276ed7e..9e5e2b2 100644
--- a/orm/hibernate-orm-5/pom.xml
+++ b/orm/hibernate-orm-5/pom.xml
@@ -8,20 +8,20 @@
 	<name>Hibernate ORM 5 Test Case Template</name>
 
 	<properties>
-		<version.com.h2database>1.3.176</version.com.h2database>
+		<version.com.h2database>2.0.202</version.com.h2database>
 		<version.junit>4.13.2</version.junit>
-		<version.org.hibernate>5.6.1.Final</version.org.hibernate>
+		<version.org.hibernate>6.0.0.Beta3</version.org.hibernate>
 		<version.org.slf4j>1.7.25</version.org.slf4j>
 	</properties>
 
 	<dependencies>
 		<dependency>
-			<groupId>org.hibernate</groupId>
+			<groupId>org.hibernate.orm</groupId>
 			<artifactId>hibernate-core</artifactId>
 			<version>${version.org.hibernate}</version>
 		</dependency>
 		<dependency>
-			<groupId>org.hibernate</groupId>
+			<groupId>org.hibernate.orm</groupId>
 			<artifactId>hibernate-testing</artifactId>
 			<version>${version.org.hibernate}</version>
 		</dependency>
@@ -41,18 +41,6 @@
 			<artifactId>slf4j-log4j12</artifactId>
 			<version>${version.org.slf4j}</version>
 		</dependency>
-
-		<!-- Not necessary for ORM 5.2 and above -->
-		<dependency>
-			<groupId>org.hibernate</groupId>
-			<artifactId>hibernate-entitymanager</artifactId>
-			<version>${version.org.hibernate}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.hibernate</groupId>
-			<artifactId>hibernate-java8</artifactId>
-			<version>${version.org.hibernate}</version>
-		</dependency>
 	</dependencies>
 
 	<build>
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
new file mode 100644
index 0000000..150e487
--- /dev/null
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
@@ -0,0 +1,46 @@
+package org.hibernate.bugs;
+
+import java.util.Date;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import jakarta.persistence.Temporal;
+import jakarta.persistence.TemporalType;
+
+@Entity
+public class Event {
+
+    @Id
+    @GeneratedValue
+    private Long id;
+
+    @Temporal(TemporalType.TIMESTAMP )
+    private Date createdOn;
+
+    private Boolean active;
+
+    public Event() {
+    }
+
+    public Event(Date createdOn) {
+        this.createdOn = createdOn;
+    }
+
+    public Event(Date createdOn, Boolean active) {
+        this.createdOn = createdOn;
+        this.active = active;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public Date getCreatedOn() {
+        return createdOn;
+    }
+
+    public Boolean getActive() {
+        return active;
+    }
+}
\ No newline at end of file
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java
index f36c69e..d8acf95 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java
@@ -1,9 +1,8 @@
 package org.hibernate.bugs;
 
-import javax.persistence.EntityManager;
-import javax.persistence.EntityManagerFactory;
-import javax.persistence.Persistence;
-
+import jakarta.persistence.EntityManager;
+import jakarta.persistence.EntityManagerFactory;
+import jakarta.persistence.Persistence;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
index 66757be..a8e7c9f 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
@@ -15,11 +15,14 @@
  */
 package org.hibernate.bugs;
 
+import java.util.Date;
+
 import org.hibernate.Session;
 import org.hibernate.Transaction;
 import org.hibernate.cfg.AvailableSettings;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
+import org.junit.Assert;
 import org.junit.Test;
 
 /**
@@ -39,6 +42,7 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		return new Class[] {
 //				Foo.class,
 //				Bar.class
+				Event.class
 		};
 	}
 
@@ -66,12 +70,24 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		//configuration.setProperty( AvailableSettings.GENERATE_STATISTICS, ""true"" );
 	}
 
+
 	// Add your tests, using standard JUnit.
 	@Test
 	public void hhh123Test() throws Exception {
 		// BaseCoreFunctionalTestCase automatically creates the SessionFactory and provides the Session.
+
 		Session s = openSession();
 		Transaction tx = s.beginTransaction();
+
+		Event event1 = new Event(new Date(), true);
+		s.persist(event1);
+
+		final Event event2 = s.find(Event.class, event1.getId());
+
+		Assert.assertEquals(event1.getId(), event2.getId());
+		Assert.assertEquals(event1.getCreatedOn(), event2.getCreatedOn());
+		Assert.assertEquals(event1.getActive(), event2.getActive());
+
 		// Do stuff...
 		tx.commit();
 		s.close();{noformat}

From [https://github.com/h2database/h2database/issues/3268|https://github.com/h2database/h2database/issues/3268|smart-link]  

{quote}sequence_name.NEXTVAL is an Oracle compatibility syntax, it is mentioned only in documentation of Oracle compatibility mode. It was never documented or supported outside of this compatibility mode, if some tool uses this syntax with H2 you need to report it as a bug in its bugtracker.{quote}

Also related: 

* [https://github.com/h2database/h2database/issues/2434|https://github.com/h2database/h2database/issues/2434|smart-link]  
* [https://github.com/hibernate/hibernate-orm/commit/60a3c08563aaad2e679a724dccac555eec978fa8#diff-40de7016746927be90af00bd847f1cff7b09a8773038e216cc147c1880ab668e|https://github.com/hibernate/hibernate-orm/commit/60a3c08563aaad2e679a724dccac555eec978fa8#diff-40de7016746927be90af00bd847f1cff7b09a8773038e216cc147c1880ab668e|smart-link]  ",,,,,,,,,,,,,,,,,,,,,,,,HHH-15014,HHH-15035,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-06T01:56:01.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,froque(froque),,,,,,,,,0|104x6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Mark non-nullable properties as such in OutboxPollingOutboxEventAdditionalJaxbMappingProducer,HSEARCH-4425,71772,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/janv./2022 01:03 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,05/janv./2022 23:20 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,mapper-orm,,,,0,,,,,,"See OutboxPollingAgentAdditionalJaxbMappingProducer for an example: all non-nullable properties have {{nullable=""false""}} in their definition.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-05T23:19:58.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2821,0|104usn:7,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
FK reference on same table (without inheritance) no longer working,HHH-15012,71771,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Bart Vansegbroeck,5be4380781246969728ea782,Bart Vansegbroeck,5be4380781246969728ea782,04/janv./2022 00:01 AM,04/janv./2022 00:59 AM,14/mars/2022 12:54 PM,,5.6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"For legacy reasons, we have two (different, not an is-a relation) mapped onto the same table, sharing ids.

We're aware of [https://vladmihalcea.com/map-multiple-jpa-entities-one-table-hibernate/|http://https://vladmihalcea.com/map-multiple-jpa-entities-one-table-hibernate/], but these entities don't abide by an is-a relation.

This worked just fine until the fix for [HHH-13295|https://hibernate.atlassian.net/browse/HHH-13295], since the update Spring Boot fails to start with...

{noformat}org.hibernate.AnnotationException: Foreign key circularity dependency involving the following tables: users, users

	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.buildRecursiveOrderedFkSecondPasses(InFlightMetadataCollectorImpl.java:1728)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processFkSecondPassesInOrder(InFlightMetadataCollectorImpl.java:1686)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1623)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:295)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1460)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1494)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:56)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:79)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:54){noformat}

Below is the setup, I left out all none relevant fields, obviously both User and Terminal each have a set of columns that contain useful information, they are straightforward column mappings.

The first entity is User, User has a link to Terminal, which is *an entity on the same table\!*

{code:java}@Entity
@Table(name = ""users"")
public class User implements Serializable {

    @EmbeddedId
    private UserId id;

    @Column(name = ""roll_number"")
    private int rollNumber;

    @OneToOne
    @JoinColumn(name = ""id"")
    @MapsId
    private Terminal terminal;

    public User() {
    }

    public Terminal getTerminal() {
        return terminal;
    }
}{code}

The Second entity: Terminal

{code:java}@Entity
@Table(name = ""users"")
public class Terminal implements Serializable {
    @EmbeddedId
    private TerminalId id;

    public Terminal() {
        id = new TerminalId();
    }

    public TerminalId getId() {
        return id;
    }
}{code}

Both have the same structural Embedded primary key, as example: UserId

{code:java}@Embeddable
public class UserId implements Serializable {
    private final UUID id = UUID.randomUUID();

    public UUID getId() {
        return id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserId userId = (UserId) o;
        return Objects.equals(getId(), userId.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}{code}

We have some workarounds ready, but we thought this might be a backwards compatibility issue, as although it is today explicitly flagged as an error, it did work in the past.

Test case: [https://github.com/BartVansegbroeck/hhh15012|https://github.com/BartVansegbroeck/hhh15012|smart-link] 

PR: [https://github.com/hibernate/hibernate-test-case-templates/pull/54|https://github.com/hibernate/hibernate-test-case-templates/pull/54|smart-link] ","Macos, JDK 17.0.1. Hibernate 5.6.3, Spring Boot 2.6.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:05d77be6-ebef-46ed-919d-c722e682a9ab(ug:05d77be6-ebef-46ed-919d-c722e682a9ab),,,,,,,,,0|104x60:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,,,,,,,,,,,,,A faire,,
Could not write XML test results - File name too long,HHH-15011,71770,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,03/janv./2022 14:55 PM,03/janv./2022 14:57 PM,14/mars/2022 12:54 PM,,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"{code:java}$ git log -1 --pretty=%h     
b9a040effb
$ JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64 ./gradlew --stacktrace clean build 
(...)
> Task :hibernate-envers:test FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':hibernate-envers:test'.
> A build operation failed.
      Could not write XML test results for org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest to file /home/froque/workspace/testes/hibernate-orm/hibernate-envers/target/test-results/test/TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml.
   > Could not write XML test results for org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest to file /home/froque/workspace/testes/hibernate-orm/hibernate-envers/target/test-results/test/TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml.

* Try:
Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':hibernate-envers:test'.
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.lambda$executeIfValid$1(ExecuteActionsTaskExecuter.java:188)
        at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:282)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:186)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:174)
        at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:109)
        at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:79)
        at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:79)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
        at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:74)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:402)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:389)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:382)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:368)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:61)
Caused by: org.gradle.internal.operations.MultipleBuildOperationFailures: A build operation failed.
    Could not write XML test results for org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest to file /home/froque/workspace/testes/hibernate-orm/hibernate-envers/target/test-results/test/TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml.
        at org.gradle.internal.operations.DefaultBuildOperationQueue.waitForCompletion(DefaultBuildOperationQueue.java:136)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.executeInParallel(DefaultBuildOperationExecutor.java:149)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$runAll$4(DefaultBuildOperationExecutor.java:108)
        at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.runWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:45)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.runAll(DefaultBuildOperationExecutor.java:108)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.runAll(DefaultBuildOperationExecutor.java:103)
        at org.gradle.api.internal.tasks.testing.junit.result.Binary2JUnitXmlReportGenerator.generate(Binary2JUnitXmlReportGenerator.java:81)
        at org.gradle.api.tasks.testing.AbstractTestTask.createReporting(AbstractTestTask.java:562)
        at org.gradle.api.tasks.testing.AbstractTestTask.executeTests(AbstractTestTask.java:506)
        at org.gradle.api.tasks.testing.Test.executeTests(Test.java:674)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:104)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:58)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:51)
        at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:29)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$2.run(ExecuteActionsTaskExecuter.java:502)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:56)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$run$1(DefaultBuildOperationExecutor.java:74)
        at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.runWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:45)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:74)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:487)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:470)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:106)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActionsTaskExecuter.java:271)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:249)
        at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:89)
        at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:40)
        at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:53)
        at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:50)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:79)
        at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:79)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:50)
        at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:40)
        at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:68)
        at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:38)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:50)
        at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:36)
        at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)
        at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)
        at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)
        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:51)
        at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:29)
        at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:58)
        at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:39)
        at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:60)
        at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:27)
        at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:180)
        at org.gradle.internal.execution.steps.BuildCacheStep.executeAndStoreInCache(BuildCacheStep.java:156)
        at org.gradle.internal.execution.steps.BuildCacheStep.lambda$executeWithCache$2(BuildCacheStep.java:130)
        at org.gradle.internal.execution.steps.BuildCacheStep.lambda$executeWithCache$3(BuildCacheStep.java:130)
        at org.gradle.internal.Try$Success.map(Try.java:164)
        at org.gradle.internal.execution.steps.BuildCacheStep.executeWithCache(BuildCacheStep.java:84)
        at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:74)
        at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:46)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:40)
        at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:29)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)
        at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:105)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:98)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:53)
        at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:37)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:85)
        at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:42)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:92)
        at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:50)
        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:114)
        at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:57)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:73)
        at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:47)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:92)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:92)
        at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:33)
        at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:43)
        at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:31)
        at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:40)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution$2.withWorkspace(ExecuteActionsTaskExecuter.java:284)
        at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:40)
        at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)
        at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)
        at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)
        at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:44)
        at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:33)
        at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:76)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:185)
        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:174)
        at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:109)
        at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
        at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)
        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)
        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:79)
        at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:79)
        at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
        at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:74)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:402)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:389)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:382)
        at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:368)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)
        at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:61)
Caused by: org.gradle.api.GradleException: Could not write XML test results for org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest to file /home/froque/workspace/testes/hibernate-orm/hibernate-envers/target/test-results/test/TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml.
        at org.gradle.api.internal.tasks.testing.junit.result.Binary2JUnitXmlReportGenerator$JUnitXmlReportFileGenerator.run(Binary2JUnitXmlReportGenerator.java:125)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)
        at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)
        at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$QueueWorker.execute(DefaultBuildOperationExecutor.java:220)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.runOperation(DefaultBuildOperationQueue.java:243)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.doRunBatch(DefaultBuildOperationQueue.java:224)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.lambda$runBatch$0(DefaultBuildOperationQueue.java:214)
        at org.gradle.internal.resources.AbstractResourceLockRegistry.whileDisallowingLockChanges(AbstractResourceLockRegistry.java:70)
        at org.gradle.internal.work.DefaultWorkerLeaseService.whileDisallowingProjectLockChanges(DefaultWorkerLeaseService.java:183)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.lambda$runBatch$1(DefaultBuildOperationQueue.java:214)
        at org.gradle.internal.work.DefaultWorkerLeaseService.withLocks(DefaultWorkerLeaseService.java:211)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.runBatch(DefaultBuildOperationQueue.java:200)
        at org.gradle.internal.operations.DefaultBuildOperationQueue$WorkerRunnable.run(DefaultBuildOperationQueue.java:172)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:61)
Caused by: java.io.FileNotFoundException: /home/froque/workspace/testes/hibernate-orm/hibernate-envers/target/test-results/test/TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml (File name too long)
        at org.gradle.api.internal.tasks.testing.junit.result.Binary2JUnitXmlReportGenerator$JUnitXmlReportFileGenerator.run(Binary2JUnitXmlReportGenerator.java:121)
        ... 17 more


* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.2/userguide/command_line_interface.html#sec:command_line_warnings

Execution optimizations have been disabled for 28 invalid unit(s) of work during this build to ensure correctness.
Please consult deprecation warnings for more details.

BUILD FAILED in 4m 15s
183 actionable tasks: 167 executed, 1 from cache, 15 up-to-date

A build scan was not published as you have not authenticated with server 'ge.hibernate.org'.{code}

This happens on Ubuntu 20.04 with ecryptfs

{code:java}$ touch TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml
touch: cannot touch 'TEST-org.hibernate.orm.test.envers.integration.superclass.auditAtMethodSuperclassLevel.auditMethodSubclass.MappedSubclassingMethodAuditedTest.xml': File name too long{code}

See  [https://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs|https://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs|smart-link]  ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,froque(froque),,,,,,,,,0|104x5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
@CreationTimestamp and @UpdateTimestamp documentation have an incomplete list of supported field types,HHH-15010,71769,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,03/janv./2022 14:41 PM,03/janv./2022 14:41 PM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"The documentation at https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html regarding {{@CreationTimestamp}} and {{@UpdateTimestamp}} only mentions the supported field types {{java.util.Date}}, {{java.util.Calendar}}, {{java.sql.Date}}, {{java.sql.Time}}, and {{java.sql.Timestamp}}. But according to the code there are also several {{java.time}} classes supported.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),,,,,,,,,0|104x5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
H2Dialect does not work properly with h2 2.0.202 and updating schema ,HHH-15009,71768,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,03/janv./2022 10:03 AM,25/janv./2022 07:37 AM,14/mars/2022 12:54 PM,18/janv./2022 06:19 AM,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.5,6.0.0.CR1,,,,,,,,,,,,0,H2,,,,,"This is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates,|https://github.com/hibernate/hibernate-test-case-templates,] commit 2bf45ab3d7ff82436286262e34f042749a4f2893

{code:java}diff --git a/orm/hibernate-orm-5/pom.xml b/orm/hibernate-orm-5/pom.xml
index 276ed7e..6887660 100644
--- a/orm/hibernate-orm-5/pom.xml
+++ b/orm/hibernate-orm-5/pom.xml
@@ -8,7 +8,7 @@
 	<name>Hibernate ORM 5 Test Case Template</name>
 
 	<properties>
-		<version.com.h2database>1.3.176</version.com.h2database>
+		<version.com.h2database>2.0.202</version.com.h2database>
 		<version.junit>4.13.2</version.junit>
 		<version.org.hibernate>5.6.1.Final</version.org.hibernate>
 		<version.org.slf4j>1.7.25</version.org.slf4j>
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
new file mode 100644
index 0000000..142848e
--- /dev/null
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
@@ -0,0 +1,45 @@
+package org.hibernate.bugs;
+
+import java.util.Date;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+@Entity
+public class Event {
+
+    @Id
+    @GeneratedValue
+    private Long id;
+
+    @Temporal(TemporalType.TIMESTAMP )
+    private Date createdOn;
+
+    private Boolean active;
+
+    public Event() {
+    }
+
+    public Event(Date createdOn) {
+        this.createdOn = createdOn;
+    }
+
+    public Event(Date createdOn, Boolean active) {
+        this.createdOn = createdOn;
+        this.active = active;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public Date getCreatedOn() {
+        return createdOn;
+    }
+
+    public Boolean getActive() {
+        return active;
+    }
+}
\ No newline at end of file
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
index 66757be..aea0771 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
@@ -15,11 +15,20 @@
  */
 package org.hibernate.bugs;
 
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Date;
+import java.util.function.Consumer;
+
 import org.hibernate.Session;
 import org.hibernate.Transaction;
 import org.hibernate.cfg.AvailableSettings;
 import org.hibernate.cfg.Configuration;
+import org.hibernate.cfg.Environment;
 import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;
+import org.junit.Assert;
 import org.junit.Test;
 
 /**
@@ -39,6 +48,7 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		return new Class[] {
 //				Foo.class,
 //				Bar.class
+				Event.class
 		};
 	}
 
@@ -64,14 +74,54 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		configuration.setProperty( AvailableSettings.SHOW_SQL, Boolean.TRUE.toString() );
 		configuration.setProperty( AvailableSettings.FORMAT_SQL, Boolean.TRUE.toString() );
 		//configuration.setProperty( AvailableSettings.GENERATE_STATISTICS, ""true"" );
+		configuration.setProperty( AvailableSettings.HBM2DDL_AUTO, ""update"" );
+	}
+
+
+	@Override
+	protected void buildSessionFactory(Consumer<Configuration> configurationAdapter) {
+
+		final String url = Environment.getProperties().getProperty(""hibernate.connection.url"");
+		final String username = Environment.getProperties().getProperty(""hibernate.connection.username"");
+		final String password = Environment.getProperties().getProperty(""hibernate.connection.password"");
+		String s1 = ""create table Event (\n"" +
+				""       id bigint not null,\n"" +
+				""        createdOn timestamp,\n"" +
+				""        primary key (id)\n"" +
+				""    )"";
+		try(final Connection connection = DriverManager.getConnection(url, username, password)){
+			try (final Statement statement = connection.createStatement()){
+				statement.execute(s1);
+			}
+		} catch (SQLException e) {
+			throw new RuntimeException(e);
+		}
+
+		super.buildSessionFactory(configurationAdapter);
+	}
+
+	@Override
+	protected boolean createSchema() {
+		return false;
 	}
 
 	// Add your tests, using standard JUnit.
 	@Test
 	public void hhh123Test() throws Exception {
 		// BaseCoreFunctionalTestCase automatically creates the SessionFactory and provides the Session.
+
 		Session s = openSession();
 		Transaction tx = s.beginTransaction();
+
+		Event event1 = new Event(new Date(), true);
+		s.persist(event1);
+
+		final Event event2 = s.find(Event.class, event1.getId());
+
+		Assert.assertEquals(event1.getId(), event2.getId());
+		Assert.assertEquals(event1.getCreatedOn(), event2.getCreatedOn());
+		Assert.assertEquals(event1.getActive(), event2.getActive());
+
 		// Do stuff...
 		tx.commit();
 		s.close();{code}

The test fails with:

{noformat}Hibernate: create sequence hibernate_sequence start with 1 increment by 1
Hibernate: 
    call next value for hibernate_sequence
Hibernate: 
    insert 
    into
        Event
        (active, createdOn, id) 
    values
        (?, ?, ?)
18:02:17.493 [Time-limited test] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Column ""ACTIVE"" not found; SQL statement:
insert into Event (active, createdOn, id) values (?, ?, ?) [42122-202]
Error performing callback invocation : org.hibernate.testing.junit4.BaseCoreFunctionalTestCase#onFailure
org.hibernate.testing.junit4.CallbackException: org.hibernate.testing.junit4.BaseCoreFunctionalTestCase#onFailure
	at org.hibernate.testing.junit4.TestClassMetadata.performCallbackInvocation(TestClassMetadata.java:208)
	at org.hibernate.testing.junit4.TestClassMetadata.invokeCallback(TestClassMetadata.java:192)
	at org.hibernate.testing.junit4.TestClassMetadata.performCallbacks(TestClassMetadata.java:184)
	at org.hibernate.testing.junit4.TestClassMetadata.performOnFailureCallback(TestClassMetadata.java:224)
	at org.hibernate.testing.junit4.FailureExpectedHandler.evaluate(FailureExpectedHandler.java:66)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.hibernate.testing.junit4.BeforeClassCallbackHandler.evaluate(BeforeClassCallbackHandler.java:26)
	at org.hibernate.testing.junit4.AfterClassCallbackHandler.evaluate(AfterClassCallbackHandler.java:25)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: java.lang.RuntimeException: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table ""EVENT"" already exists; SQL statement:
create table Event (
       id bigint not null,
        createdOn timestamp,
        primary key (id)
    ) [42101-202]
	at org.hibernate.bugs.ORMUnitTestCase.buildSessionFactory(ORMUnitTestCase.java:97)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.rebuildSessionFactory(BaseCoreFunctionalTestCase.java:163)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.rebuildSessionFactory(BaseCoreFunctionalTestCase.java:146)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.onFailure(BaseCoreFunctionalTestCase.java:368)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.hibernate.testing.junit4.TestClassMetadata.performCallbackInvocation(TestClassMetadata.java:205)
	... 24 more
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table ""EVENT"" already exists; SQL statement:
create table Event (
       id bigint not null,
        createdOn timestamp,
        primary key (id)
    ) [42101-202]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:88)
	at org.h2.command.CommandContainer.update(CommandContainer.java:173)
	at org.h2.command.Command.executeUpdate(Command.java:247)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at org.hibernate.bugs.ORMUnitTestCase.buildSessionFactory(ORMUnitTestCase.java:94)
	... 32 more

org.hibernate.testing.junit4.CallbackException: org.hibernate.testing.junit4.BaseCoreFunctionalTestCase#onFailure

	at org.hibernate.testing.junit4.TestClassMetadata.performCallbackInvocation(TestClassMetadata.java:208)
	at org.hibernate.testing.junit4.TestClassMetadata.invokeCallback(TestClassMetadata.java:192)
	at org.hibernate.testing.junit4.TestClassMetadata.performCallbacks(TestClassMetadata.java:184)
	at org.hibernate.testing.junit4.TestClassMetadata.performOnFailureCallback(TestClassMetadata.java:224)
	at org.hibernate.testing.junit4.FailureExpectedHandler.evaluate(FailureExpectedHandler.java:66)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.hibernate.testing.junit4.BeforeClassCallbackHandler.evaluate(BeforeClassCallbackHandler.java:26)
	at org.hibernate.testing.junit4.AfterClassCallbackHandler.evaluate(AfterClassCallbackHandler.java:25)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: java.lang.RuntimeException: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table ""EVENT"" already exists; SQL statement:
create table Event (
       id bigint not null,
        createdOn timestamp,
        primary key (id)
    ) [42101-202]
	at org.hibernate.bugs.ORMUnitTestCase.buildSessionFactory(ORMUnitTestCase.java:97)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.rebuildSessionFactory(BaseCoreFunctionalTestCase.java:163)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.rebuildSessionFactory(BaseCoreFunctionalTestCase.java:146)
	at org.hibernate.testing.junit4.BaseCoreFunctionalTestCase.onFailure(BaseCoreFunctionalTestCase.java:368)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.hibernate.testing.junit4.TestClassMetadata.performCallbackInvocation(TestClassMetadata.java:205)
	... 24 more
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table ""EVENT"" already exists; SQL statement:
create table Event (
       id bigint not null,
        createdOn timestamp,
        primary key (id)
    ) [42101-202]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:88)
	at org.h2.command.CommandContainer.update(CommandContainer.java:173)
	at org.h2.command.Command.executeUpdate(Command.java:247)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at org.hibernate.bugs.ORMUnitTestCase.buildSessionFactory(ORMUnitTestCase.java:94)
	... 32 more


Process finished with exit code 255
{noformat}



This seems related to [https://github.com/h2database/h2database/pull/2679|https://github.com/h2database/h2database/pull/2679|smart-link]. 

See also [https://groups.google.com/g/h2-database/c/c2vfOCE_zPw/m/F1yAV33YBQAJ|https://groups.google.com/g/h2-database/c/c2vfOCE_zPw/m/F1yAV33YBQAJ|smart-link] , [https://github.com/h2database/h2database/issues/3213|https://github.com/h2database/h2database/issues/3213|smart-link] 

There is a related Hibernate issue [https://hibernate.atlassian.net/browse/HHH-10298|https://hibernate.atlassian.net/browse/HHH-10298|smart-link]  ",,,,,,,,,,,,,,,,,,,,,,,,HHH-15013,HHH-15014,HHH-15035,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-25T07:35:49.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),froque(froque),,,,,,,,0|104x5c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Links between audited and immutable non-audited entity without join table not possible,HHH-15008,71767,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,03/janv./2022 08:09 AM,03/janv./2022 08:09 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"With the following code:
{code}
@Immutable
@Entity
@Table(name = ""HUNT_EVENTS"")
@DiscriminatorColumn(name = ""TYPE"")
public class HuntEvent {
    @Id
    @Column(name = ""HUNT_EVENT_ID"")
    @GeneratedValue(strategy = SEQUENCE, generator = ""hunter-event-id-generator"")
    @SequenceGenerator(name = ""hunter-event-id-generator"", sequenceName = ""HUNT_EVENT_ID_SEQ"", allocationSize = 1)
    protected Long id;

    @ManyToOne(fetch = LAZY, optional = false)
    @JoinColumn(name = ""HUNTER_ID"", foreignKey = @ForeignKey(name = ""FK_HUNT_EVENTS_HUNTERS""))
    protected Hunter hunter;
{code}
and
{code}
@Audited
@Entity
@Table(name = ""HUNTERS"")
public class Hunter {
    @Id
    @Column(name = ""HUNTER_ID"")
    @GeneratedValue(strategy = SEQUENCE, generator = ""hunter-id-generator"")
    @SequenceGenerator(name = ""hunter-id-generator"", sequenceName = ""HUNTER_ID_SEQ"", allocationSize = 1)
    protected Integer id;

    @NaturalId
    @Column(name = ""USER_ID"", unique = true)
    protected long userId;

    @Audited(targetAuditMode = NOT_AUDITED)
    @OneToMany(fetch = LAZY, mappedBy = ""hunter"")
    protected List<HuntEvent> huntEvents;
{code}
Hibernate is not happy.
It complains that only one of the entities is audited, though I told him to not care about the other entity being not audited.
The reason according to the code is, that the `NOT_AUDITED` settings is completly ignored for relations with a join table.

To make this work you either need to add a join table that can be audited though it is logically totally unnecessary in my opinion, please correct me if I'm wrong here, or make the child entity audited with is also a huge waste as the entities are immutable so where is the point in duplicating the entries in the auditing table.

I would even expect the `NOT_AUDITED` to be unnecssary boilerplate, as the relation-owning child entity is marked `@Immutable`, so actually I'd have expected the code to work even without the explicit `NOT_AUDITED` configuration.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),,,,,,,,,0|104x54:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to latest version of build dependencies,HSEARCH-4424,71766,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/janv./2022 02:08 AM,09/janv./2022 23:55 PM,14/mars/2022 12:54 PM,04/janv./2022 00:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-04T02:39:37.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2802,0|104x3k:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
False positive in detection of cycles in indexing dependency graph,HSEARCH-4423,71765,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/janv./2022 01:02 AM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,04/janv./2022 02:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Reported here: https://discourse.hibernate.org/t/cyclic-dependency-wrong-error-report/5936

See https://github.com/hibernate/hibernate-search/blob/70546f51f50f151d00ca969811bee82fe7f8ca2e/mapper/pojo-base/src/main/java/org/hibernate/search/mapper/pojo/automaticindexing/building/impl/PojoIndexingDependencyCollectorMonomorphicDirectValueNode.java#L103-L104 : we only consider the property name and container extractor when checking whether we're back to the same property, when in fact we should also be considering the type holding the property (if it's not exactly the same, then it's not a cycle).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-04T02:36:28.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2809,0|104x3s:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Jackson 2.13.1,HSEARCH-4422,71764,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/janv./2022 00:11 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,04/janv./2022 00:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-04T00:05:32.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2802,0|104x3c:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Log4j 2.17.1,HSEARCH-4421,71763,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/janv./2022 23:53 PM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,04/janv./2022 00:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-04T00:06:02.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2802,0|104x34:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Lucene 8.11.1,HSEARCH-4420,71762,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/janv./2022 23:51 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,04/janv./2022 00:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-04T00:05:32.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2802,0|104x2w:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Books' covers are missing,HHH-15007,71761,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Oleksandr Gavenko,60780ab340ccd401170416da,Oleksandr Gavenko,60780ab340ccd401170416da,02/janv./2022 11:03 AM,02/janv./2022 11:04 AM,24/févr./2022 14:32 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,There are no book covers in https://hibernate.org/orm/books/ ,,,,,,,,,,,,,,,,,,,,,,,,HHH-15003,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3cf74e9c-4d72-4464-bebb-3b6453b00596(ug:3cf74e9c-4d72-4464-bebb-3b6453b00596),,,,,,,,,0|104x2o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Envers does not detect inherited bidirectional associations,HHH-15006,71759,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Alex Nistico,557058:ab7f1cb1-b1b7-43ed-9ecd-ef69223ef99c,Alex Nistico,557058:ab7f1cb1-b1b7-43ed-9ecd-ef69223ef99c,31/déc./2021 02:31 AM,31/déc./2021 02:31 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"In certain mix of @MappedSuperclass hierachies, some bidirectional associations are not detected. For example, give the following classes:
{code:java}
@MappedSuperclass
abstract class Data {
  @ManyToOne
  @JoinColumn(name = ""unit_id"", updatable = false, nullable = false)
  private final Unit unit;

  public Unit getUnit() {
    return unit;
  }
}

@MappedSuperclass
abstract class Unit {
}

@Entity
@Audited
@AuditOverrides({
  @AuditOverride(forClass = Data.class)
})
class MainData {
}

@Entity
@Audited
@AuditOverrides({
  @AuditOverride(forClass = Unit.class)
})
class MainUnit {
  @OneToMany( mappedBy = ""unit"")
  private final Set<MainData> data;

  public Set<MainData> getData() {
    return data;
  }
}
{code}

In such configuration, the many-to-one/one-to-many association is not considered bidirectional by Envers, but Hibernate treats it normally.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0c0dfeb1-d77d-4a2f-92fd-b8c1dbe430e9(ug:0c0dfeb1-d77d-4a2f-92fd-b8c1dbe430e9),crancran(crancran),,,,,,,,0|104x28:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Second level cache is not working with Ehcache or Hazelcast,HHH-15005,71757,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Mark D,5e5d7f4cfd328a0c9cedb929,Mark D,5e5d7f4cfd328a0c9cedb929,29/déc./2021 08:22 AM,29/déc./2021 09:20 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"For some reason hibernate skips second level cache. 
I turned on hibernate logging to trace by ""spring.jpa.properties.hibernate.show_sql=true"". Also my entity has cache usage as READ_WRITE.

I have a simple Runner2 class that keeps calling repository.findById(...) a few thousand time. In the console I see hibernate sql statement only once. However I see thousands of hits in MSSQL Profiler. Nothing else is accessing database except application. I am attaching a sample of application. 

I also tried with ehcache, same results.

I also changed to latest Spring Boot, Hazelcast-hibernate53, Hazelcast versions. Same results.

I investigated further, the actual data comes from second cache. However Hibernate still hits database. In MSSQL Profiler I don’t see select statements, I only see the following Sp:CachHIt.

# SELECT 1
# set implicit_transactions on
# IF @@TRANCOUNT > 0 COMMIT TRAN
# set implicit_transactions off IF @@TRANCOUNT > 0 COMMIT TRAN

Please correct me if I am wrong,  it seems to me Hibernate gets database connection first then checks if data is in the second cache.","Spring Boot 2.5.4, Hazelcast-hibernate53 2.2.0, hazelcast 4.2.1, MsSql 2019
",,,,,,,,,,,,,,,,,,,,,,,,,,,,29/déc./2021 08:19 AM;ug:2074b7b1-fadb-42dc-883a-8528a48d16cd;springboot-hibernate.zip;https://hibernate.atlassian.net/secure/attachment/49956/springboot-hibernate.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:2074b7b1-fadb-42dc-883a-8528a48d16cd(ug:2074b7b1-fadb-42dc-883a-8528a48d16cd),,,,,,,,,0|104x1s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Hibernate core 5.6.2.Final, 5.6.3.Final, 5.6.4.Final & 5.6.5.Final makes my app cannot start",HHH-15004,71752,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Out of Date,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,H. Lo,557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029,H. Lo,557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029,25/déc./2021 02:50 AM,31/janv./2022 05:12 AM,14/mars/2022 12:54 PM,31/janv./2022 05:12 AM,5.6.2,5.6.3,5.6.4,5.6.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"When hibernate-core switched to version 5.6.2, 5.6.3, 5.6.4 or 5.6.5 exception is thrown and app cannot start.
App starts fine with hibernate-core 5.6.1.
Start log and pom.xml are provided as attachments.

[^app-start.log.txt]
[^pom.xml]

","* Windows 10 Pro 21H2 build 19044.1415 Windows Feature Experience Pack 120.2212.3920.0
* Java ""11.0.12"" 2021-07-20 LTS
* Spring Tool Suite 4 Version: 4.13.0.RELEASE Build Id: 202112031748
",,,,,,,,,,,,,,,,,,,,,,,,,,,,25/déc./2021 02:50 AM;ug:167d04c8-caad-4106-9896-16947c6539f8;app-start.log.txt;https://hibernate.atlassian.net/secure/attachment/49954/app-start.log.txt,25/déc./2021 02:50 AM;ug:167d04c8-caad-4106-9896-16947c6539f8;pom.xml;https://hibernate.atlassian.net/secure/attachment/49953/pom.xml,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-20T04:22:02.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,christian.beikov(christian.beikov),ug:167d04c8-caad-4106-9896-16947c6539f8(ug:167d04c8-caad-4106-9896-16947c6539f8),steve(steve),,,,,,,0|104x0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,2022-01-31 13:02:54.622,,,,"25/déc./2021 03:29 AM;557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029;There might be a solution by adjusting other dependencies, but I guess that kind of changes are not supposed to happen in minor releases.","26/déc./2021 04:39 AM;557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029;*5.6.1.Final* MultiTableBulkIdStrategy.java

{code:java}void prepare(
	JdbcServices jdbcServices,
	JdbcConnectionAccess connectionAccess,
	MetadataImplementor metadata,
	SessionFactoryOptions sessionFactoryOptions);{code}

*5.6.2.Final, 5.6.3.Final, 5.6.4.Final & 5.6.5.Final*  MultiTableBulkIdStrategy.java

{code:java}void prepare(
	JdbcServices jdbcServices,
	JdbcConnectionAccess connectionAccess,
	MetadataImplementor metadata,
	SessionFactoryOptions sessionFactoryOptions,
	SqlStringGenerationContext sqlStringGenerationContext); // added to the signature{code}",19/janv./2022 04:21 AM;557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029;Anyone?,31/janv./2022 04:59 AM;557058:4b504b7e-0d5e-45cb-9cef-fe539d4ff029;Anyone?,31/janv./2022 05:02 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;[~accountid:557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a]  [~accountid:557058:99e61e65-956b-4a21-b29c-06057642e9ea] - thoughts?,"31/janv./2022 05:11 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Hey, the problem you are facing is fixed with the latest version of Blaze-Persistence when you switch to the new integration module for Hibernate 5.6. Here are some more details for why the new integration is necessary: [https://persistence.blazebit.com/news/2022/blaze-persistence-1.6.5-release.html|https://persistence.blazebit.com/news/2022/blaze-persistence-1.6.5-release.html|smart-link] 

Unfortunately, this SPI change was necessary to accomodate some needs for Quarkus and it looks like any implementation of MultiTableBulkIdStrategy that tries to simply delegate, will unfortunately run into this.",,,,,,,,,,,Terminé,,
Documentations links are broken,HHH-15003,71751,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,,,V.D.,6024485e7db80e006a22b249,V.D.,6024485e7db80e006a22b249,24/déc./2021 15:24 PM,05/janv./2022 01:59 AM,24/févr./2022 14:32 PM,05/janv./2022 01:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"All jboss documentations links are broken and there is no way to see a documentation, the docs.jboss.org website is redirecting to spaces.redhat.com which is giving error 404",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:4646cea8-c173-430e-a795-673494c899de(ug:4646cea8-c173-430e-a795-673494c899de),ug:3cf74e9c-4d72-4464-bebb-3b6453b00596(ug:3cf74e9c-4d72-4464-bebb-3b6453b00596),ug:09b10c0b-5037-46f5-a47e-4ac2b1e20a01(ug:09b10c0b-5037-46f5-a47e-4ac2b1e20a01),,,,,,0|104x0g:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,2021-12-29 17:46:05.086,,,,"29/déc./2021 09:46 AM;70121:b0c0e259-af5e-4d87-a870-7aaca5918245;For anyone (like myself) who needs to study Hibernate and can’t due to this, I recommend cloning the {{hibernate-orm}} github repo and running the gradle task for rendering the user guide: {{gradle documentation:renderUserGuide}}. I did this on the {{main}} branch and now I can locally read the docs until they come back online. ",29/déc./2021 09:47 AM;70121:b0c0e259-af5e-4d87-a870-7aaca5918245;The final build html file will be in {{documentation/target/}}.,"02/janv./2022 11:01 AM;60780ab340ccd401170416da;Discord discussion: [https://discourse.hibernate.org/t/javadoc-link-is-broken/5920|https://discourse.hibernate.org/t/javadoc-link-is-broken/5920|smart-link] 

It is possible to read Asciidoc: [https://github.com/hibernate/hibernate-orm/tree/main/documentation/src/main/asciidoc/userguide/chapters|https://github.com/hibernate/hibernate-orm/tree/main/documentation/src/main/asciidoc/userguide/chapters|smart-link]  ",05/janv./2022 01:59 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;It seems this is fixed now. Thanks for the report and sorry for the inconvenience.,,,,,,,,,,,,,Terminé,,
H2Dialect does not work properly with h2 2.0.202 and booleans types,HHH-15002,71749,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,23/déc./2021 15:35 PM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,05/janv./2022 03:39 AM,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,,,,,,,,,hibernate-core,,,,0,Dialect,H2,,,,"This is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates,|https://github.com/hibernate/hibernate-test-case-templates,] commit 2bf45ab3d7ff82436286262e34f042749a4f2893

{code:java}diff --git a/orm/hibernate-orm-5/pom.xml b/orm/hibernate-orm-5/pom.xml
index 276ed7e..6887660 100644
--- a/orm/hibernate-orm-5/pom.xml
+++ b/orm/hibernate-orm-5/pom.xml
@@ -8,7 +8,7 @@
 	<name>Hibernate ORM 5 Test Case Template</name>
 
 	<properties>
-		<version.com.h2database>1.3.176</version.com.h2database>
+		<version.com.h2database>2.0.202</version.com.h2database>
 		<version.junit>4.13.2</version.junit>
 		<version.org.hibernate>5.6.1.Final</version.org.hibernate>
 		<version.org.slf4j>1.7.25</version.org.slf4j>
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
new file mode 100644
index 0000000..142848e
--- /dev/null
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
@@ -0,0 +1,45 @@
+package org.hibernate.bugs;
+
+import java.util.Date;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+@Entity
+public class Event {
+
+    @Id
+    @GeneratedValue
+    private Long id;
+
+    @Temporal(TemporalType.TIMESTAMP )
+    private Date createdOn;
+
+    private Boolean active;
+
+    public Event() {
+    }
+
+    public Event(Date createdOn) {
+        this.createdOn = createdOn;
+    }
+
+    public Event(Date createdOn, Boolean active) {
+        this.createdOn = createdOn;
+        this.active = active;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public Date getCreatedOn() {
+        return createdOn;
+    }
+
+    public Boolean getActive() {
+        return active;
+    }
+}
\ No newline at end of file
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
index 66757be..1605acd 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
@@ -15,6 +15,9 @@
  */
 package org.hibernate.bugs;
 
+import java.util.Date;
+import java.util.List;
+
 import org.hibernate.Session;
 import org.hibernate.Transaction;
 import org.hibernate.cfg.AvailableSettings;
@@ -39,6 +42,7 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		return new Class[] {
 //				Foo.class,
 //				Bar.class
+				Event.class
 		};
 	}
 
@@ -72,6 +76,16 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		// BaseCoreFunctionalTestCase automatically creates the SessionFactory and provides the Session.
 		Session s = openSession();
 		Transaction tx = s.beginTransaction();
+
+		Event event = new Event(new Date(), true);
+		s.persist(event);
+
+		System.out.println(event.getId());
+
+		final List<Event> events = s.createQuery(""SELECT e FROM Event e WHERE e.active = true"", Event.class).getResultList();
+
+		System.out.println(events);
+
 		// Do stuff...
 		tx.commit();
 		s.close();{code}

The error is

{code:java}Hibernate: 
    select
        event0_.id as id1_0_,
        event0_.active as active2_0_,
        event0_.createdOn as createdo3_0_ 
    from
        Event event0_ 
    where
        event0_.active=1
23:20:24.749 [Time-limited test] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Values of types ""BOOLEAN"" and ""INTEGER"" are not comparable; SQL statement:
select event0_.id as id1_0_, event0_.active as active2_0_, event0_.createdOn as createdo3_0_ from Event event0_ where event0_.active=1 [90110-202]{code}

The fix is to change H2Dialect 

{code:java}@Override
    public String toBooleanValueString(boolean bool) {
        return bool? ""true"": ""false"";
    }{code}

See [https://groups.google.com/g/h2-database/c/AKjKqvGr9j8|https://groups.google.com/g/h2-database/c/AKjKqvGr9j8]



This has been fixed in version 6.0.0.Alpha5, in commit [https://github.com/hibernate/hibernate-orm/commit/1706141ffc154c1b61e304445a603ebf9a3e0a2e|https://github.com/hibernate/hibernate-orm/commit/1706141ffc154c1b61e304445a603ebf9a3e0a2e|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,HHH-14985,HHH-15009,HHH-15013,HHH-15014,HHH-15035,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-16T12:33:21.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,froque(froque),,,,,,,,,0|104x00:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
StatelessSession.fetch(),HHH-15001,71748,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,23/déc./2021 11:05 AM,23/déc./2021 11:06 AM,14/mars/2022 12:54 PM,,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,Add the method {{StatelessSession.fetch()}} for fetching a {{LAZY}} association from within a stateless session.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,gavin.king(gavin.king),,,,,,,,,0|104wzs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate Commons Annotations 6.0.0.Beta1,HHH-15000,71747,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 09:29 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,12/janv./2022 03:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-12T03:15:26.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wzk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Introduce a real module-info.java file,HCANN-118,71746,,Tâche,Fermée,HCANN,Hibernate Commons Annotations,software,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Utility project for annotation handling,http://hibernate.org,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 08:14 AM,22/déc./2021 09:23 AM,07/févr./2022 12:33 PM,22/déc./2021 08:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-22T05:14:40.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wzc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Require JDK 11,HCANN-117,71745,,Tâche,Fermée,HCANN,Hibernate Commons Annotations,software,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Utility project for annotation handling,http://hibernate.org,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 08:13 AM,22/déc./2021 09:23 AM,14/mars/2022 12:54 PM,22/déc./2021 08:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,We're no longer supporting Java 8 - probably best to make this requirement explicit for version 6 onwards.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-22T04:07:20.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wz4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Remove dependency to the Logger,HCANN-116,71744,,Tâche,Fermée,HCANN,Hibernate Commons Annotations,software,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Utility project for annotation handling,http://hibernate.org,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 08:11 AM,22/déc./2021 09:23 AM,14/mars/2022 12:54 PM,22/déc./2021 08:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"The Logger dependency and its related annotations, and annotation processor, are only used in this project to log the current Version. We've also wondered if the noise of printing the version is really warranted, so we might as well remove them both.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-21T09:32:40.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wyw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Gradle v. 7.3.2,HCANN-115,71743,,Tâche,Fermée,HCANN,Hibernate Commons Annotations,software,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Utility project for annotation handling,http://hibernate.org,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 08:08 AM,22/déc./2021 09:23 AM,14/mars/2022 12:54 PM,22/déc./2021 08:37 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-12-22T09:04:21.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wyo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate Validator 6.2.1.Final (EE) and 7.0.2.Final (Jakarta),HHH-14999,71742,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 03:33 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,22/déc./2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-22T03:23:48.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wyg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to GraalVM 21.3.0,HHH-14998,71741,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 03:33 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,22/déc./2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.CR1,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-10T07:18:05.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wy8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Agroal 1.14,HHH-14997,71740,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 03:33 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,22/déc./2021 08:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-22T03:21:07.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wy0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to JBoss Logging Processor (and matching Annotations) 2.2.1.Final,HHH-14996,71739,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 03:33 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,22/déc./2021 08:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-22T03:19:50.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wxs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Jandex 2.4.1.Final,HHH-14995,71738,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/déc./2021 03:32 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,22/déc./2021 08:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-22T03:18:58.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wxk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Envers fails to generate key in @ManyToMany using entity reference,HHH-14994,71737,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Nigel Sim,557058:4ca1e711-2dae-4f8f-a773-63b8163c1610,Nigel Sim,557058:4ca1e711-2dae-4f8f-a773-63b8163c1610,20/déc./2021 17:01 PM,20/déc./2021 17:09 PM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"I am trying to link 2 entities via a {{@ManyToMany}} relationship that uses a composite key when I try to provide the reference using {{getReference}}. Fetching the full entity works, but when {{getReference}} is used the key values are returned as null.

Using a primitive as a key works as expected.

{noformat}
@Entity
@Audited
public class Publisher {
  @EmbeddedId
  private PublisherId id;
  ...
  @Embeddable
  public static class PublisherId implements Serializable {
    private String medium;
    private String name;
  }
}

@Entity
@Audited
public class Book {
  ...
  @ManyToManyprivate List<Publisher> publisher = new ArrayList<>();
}{noformat}

{noformat}try (Session s = openSession()) {
  publisherId = new Publisher.PublisherId(""EBOOK"", ""REPRINTBOOKS"");
  Book book = new Book();
  book.getPublisher().add(s.getReference(Publisher.class, publisherId));

  Transaction tx = s.beginTransaction();
  s.persist( book );
  tx.commit();
}{noformat}



{noformat}Caused by: org.h2.jdbc.JdbcSQLException: NULL not allowed for column ""PUBLISHER_MEDIUM""; SQL statement:
insert into Book_Publisher_AUD (REVTYPE, REV, Book_id, publisher_medium, publisher_name) values (?, ?, ?, ?, ?) [23502-193]{noformat}



Test cases in [https://github.com/nigelsim/hibernate-HHH-14994/tree/master|https://github.com/nigelsim/hibernate-HHH-14994/tree/master|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,crancran(crancran),nsim(nsim),,,,,,,,0|104wxc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
EAGER non-inverse collection throws StackOverflowError if `max_fetch_depth` not set,HHH-14993,71736,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,ningpp,557058:d1749ac8-f410-43a5-9d28-22a9b69fc748,ningpp,557058:d1749ac8-f410-43a5-9d28-22a9b69fc748,19/déc./2021 01:08 AM,14/mars/2022 12:54 PM,14/mars/2022 12:54 PM,,6.0.0.Beta2,6.0.0.Beta3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"demo https://github.com/ningpp/hibernate-self-reference

1. FetchType = EAGER, max_fetch_depth not set  throw StackOverflowError when build SessionFactory
2. FetchType = EAGER,  set max_fetch_depth value . no error.
3. FetchType = LAZY .    no error

 [^error.log] 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,19/déc./2021 01:04 AM;ningpp;error.log;https://hibernate.atlassian.net/secure/attachment/49952/error.log,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ningpp(ningpp),smarlow@redhat.com(smarlow@redhat.com),steve(steve),,,,,,,0|104wx4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-03-09 19:47:56.322,,,,"09/mars/2022 11:47 AM;557058:db1a3420-e3e5-4207-9989-5d434a8152e9;I’m seeing a similar stackoverflow deployment failure with WildFly unit test [WebJPATestCase.org.jboss.as.test.integration.jpa.webtxem.WebJPATestCase|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jpa/webtxem/WebJPATestCase.java#L64] + entity classes:

[Flight|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jpa/hibernate/entity/Flight.java]
[Company|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jpa/hibernate/entity/Company.java]
[Customer|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jpa/hibernate/entity/Customer.java]
[Ticket|https://github.com/wildfly/wildfly/blob/main/testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jpa/hibernate/entity/Ticket.java]

See [https://gist.github.com/scottmarlow/87ba1c2a773183304de1a26bf3fdc9e6|https://gist.github.com/scottmarlow/87ba1c2a773183304de1a26bf3fdc9e6|smart-link]  for the server.log output + steps to reproduce.","11/mars/2022 14:59 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;As far as I can tell this has nothing to do with whether the association is self-referential.  I pulled your repo and changed the model to this:



{noformat}@Entity
@Table(name = ""sys_module"")
public class SysModule2 {
    @Id
    private Integer id;

    @Column(name = ""name"")
    private String name;
}


@Entity
@Table(name = ""sys_module_grp"")
public class SysModuleGroup {
	@Id
	private Integer id;

	@Column(name = ""name"")
	private String name;

	@ManyToMany(targetEntity = SysModule2.class, cascade = { CascadeType.PERSIST }, fetch = FetchType.EAGER)
	@JoinTable(name = ""sys_module2_relationship"",
			joinColumns =
			@JoinColumn(name = ""grp_fk"", referencedColumnName = ""id""),

			inverseJoinColumns =
			@JoinColumn(name = ""sys_mod_fk"", referencedColumnName = ""id"")
	)
	private Set<SysModule2> targetModules = new HashSet<>();{noformat}



It still gets the same exception.  

[~accountid:557058:d1749ac8-f410-43a5-9d28-22a9b69fc748] I updated your repo to CR2, same problem.  I tried to use SNAPSHOT, but, well, Maven.  So clearly there is a bug somewhere.  I’d like to verify it is there since CR2 - and since I am unable to get your Maven build to pick up a SNAPSHOT for some reason, I copied your model and persistence-unit.xml into the testsuite but am strangely unable to reproduce it there.  Could you try with the latest SNAPSHOT please?

In the meantime, I will look at the reproducer from [~accountid:557058:db1a3420-e3e5-4207-9989-5d434a8152e9] and see if that helps me get any further","11/mars/2022 16:02 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Hmmm, oddly it seems to be somehow related to {{exclude-unlisted-classes}} as well.  If scanning is enabled (exclude-unlisted-classes=false), we see this error; if disabled, we don’t.  At least this happens locally for me.","12/mars/2022 05:47 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Also, [~accountid:557058:d1749ac8-f410-43a5-9d28-22a9b69fc748] & [~accountid:557058:db1a3420-e3e5-4207-9989-5d434a8152e9] are either of you able to reproduce this with Hibernate bootstrapping (aka, directly building a SessionFactory) rather than using JPA bootstrapping?  

I created another variation of [~accountid:557058:d1749ac8-f410-43a5-9d28-22a9b69fc748] 's tests that use straight Hibernate bootstrapping which also passes.

Because of the {{exclude-unlisted-classes}} “glitch”, and the fact that it works with the same config using  Hibernate bootstrapping, I am wondering if this is somehow limited to JPA bootstrapping (as opposed to me just making a goofy mistake somewhere)","13/mars/2022 17:08 PM;557058:d1749ac8-f410-43a5-9d28-22a9b69fc748;ok, i will try SNAPSHOT, and Hibernate bootstrapping","13/mars/2022 20:09 PM;557058:d1749ac8-f410-43a5-9d28-22a9b69fc748;i update repo. 

using 6.0.0-SNAPSHOT with gradle ( i build hibernate in local)



to see error log, just run 

{noformat}gradlew test --info{noformat}","14/mars/2022 12:54 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Yeah, I moved to Gradle also and had tweaked your test a bit.  And ultimately was able to extract a test case.  I’ll be pushing a proposed fix soonish if you wanted to give it a try",,,,,,,,,,A faire,,
Stop building ZIP and TGZ dists to upload to SF,HHH-14992,71735,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/déc./2021 06:28 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"Building these dists and uploading them to SourceForge can take over an hour.  It just kills the release process.  And it is of dubious value.

We should just stop doing them",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104www:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Cache StoreMode property not renamed to Jakarta Persistence API,HHH-14991,71734,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Thorben Janssen,5a9d06b37b6a362a6237a0de,Thorben Janssen,5a9d06b37b6a362a6237a0de,18/déc./2021 06:11 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:56 AM,6.0.0.Beta2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate 6.0.0.Beta2 only supports the property javax.persistence.cache.storeMode but not jakarta.persistence.cache.storeMode, e.g. in:

em = emf.createEntityManager();
em.getTransaction().begin();

em.setProperty(""jakarta.persistence.cache.storeMode"", CacheStoreMode.REFRESH);
		
Author a = em.find(Author.class, 1000L);

em.getTransaction().commit();
em.close();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,steve(steve),thorbenjanssen(thorbenjanssen),,,,,,,,0|104wwo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for HANA,HHH-14990,71733,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,18/déc./2021 05:39 AM,18/déc./2021 05:39 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.Next,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104wwg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Improve support for IdentifierGenerator as a managed bean,HHH-14989,71732,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/déc./2021 04:43 AM,18/déc./2021 04:45 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Mainly this boils down to 2 things:

# Split notion of `IdentifierGenerator` and `ExportableProducer`
# Use `ManagedBean<IdentifierGenerator>` in the model objects that currently hold a `IdentifierGenerator`",,,,,,,,,,,,,,,,,,,,,,,,HHH-14958,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104ww8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to ByteBuddy 1.12.5,HHH-14988,71731,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,18/déc./2021 02:20 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,18/déc./2021 03:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.4,6.0.0.Beta3,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-16T14:01:04.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ww0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Log4j 2.17.0,HHH-14987,71730,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,18/déc./2021 02:19 AM,19/janv./2022 00:07 AM,14/mars/2022 12:54 PM,20/déc./2021 01:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.26,5.4.34,5.5.10,5.6.4,6.0.0.Beta3,,,,,,,,,0,,,,,,"Further hardening of vulnerabilities found in the logging library; upgrading to set the example, but as explained on our blog Hibernate ORM doesn't depend on it at runtime:
 - https://in.relation.to/2021/12/16/log4j-cve/

https://logging.apache.org/log4j/2.x/changes-report.html#a2.17.0

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-12-18T02:21:54.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wvs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Move LGTM to use JDK11,HHH-14986,71729,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,17/déc./2021 13:38 PM,17/déc./2021 13:38 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-18T02:36:25.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),,,,,,,,,0|104wvk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
H2Dialect does not work properly with h2 2.0.202 on inserts,HHH-14985,71728,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,17/déc./2021 08:23 AM,25/janv./2022 07:37 AM,14/mars/2022 12:54 PM,05/janv./2022 01:05 AM,5.6.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.5,6.0.0.CR1,,,,,,,,hibernate-core,,,,0,Dialect,H2,,,,"This is a diff to reproduce the bug based on [https://github.com/hibernate/hibernate-test-case-templates,|https://github.com/hibernate/hibernate-test-case-templates,] commit 2bf45ab3d7ff82436286262e34f042749a4f2893

{noformat}diff --git a/orm/hibernate-orm-5/pom.xml b/orm/hibernate-orm-5/pom.xml
index 276ed7e..6887660 100644
--- a/orm/hibernate-orm-5/pom.xml
+++ b/orm/hibernate-orm-5/pom.xml
@@ -8,7 +8,7 @@
 	<name>Hibernate ORM 5 Test Case Template</name>
 
 	<properties>
-		<version.com.h2database>1.3.176</version.com.h2database>
+		<version.com.h2database>2.0.202</version.com.h2database>
 		<version.junit>4.13.2</version.junit>
 		<version.org.hibernate>5.6.1.Final</version.org.hibernate>
 		<version.org.slf4j>1.7.25</version.org.slf4j>
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
new file mode 100644
index 0000000..2da85ae
--- /dev/null
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/Event.java
@@ -0,0 +1,35 @@
+package org.hibernate.bugs;
+
+import java.util.Date;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+@Entity
+public class Event {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Temporal(TemporalType.TIMESTAMP )
+    private Date createdOn;
+
+    public Event() {
+    }
+
+    public Event(Date createdOn) {
+        this.createdOn = createdOn;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public Date getCreatedOn() {
+        return createdOn;
+    }
+}
\ No newline at end of file
diff --git a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
index 66757be..320e2bd 100644
--- a/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
+++ b/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ORMUnitTestCase.java
@@ -15,6 +15,8 @@
  */
 package org.hibernate.bugs;
 
+import java.util.Date;
+
 import org.hibernate.Session;
 import org.hibernate.Transaction;
 import org.hibernate.cfg.AvailableSettings;
@@ -39,6 +41,7 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		return new Class[] {
 //				Foo.class,
 //				Bar.class
+				Event.class
 		};
 	}
 
@@ -72,6 +75,12 @@ public class ORMUnitTestCase extends BaseCoreFunctionalTestCase {
 		// BaseCoreFunctionalTestCase automatically creates the SessionFactory and provides the Session.
 		Session s = openSession();
 		Transaction tx = s.beginTransaction();
+
+		Event event = new Event(new Date());
+		s.persist(event);
+
+		System.out.println(event.getId());
+
 		// Do stuff...
 		tx.commit();
 		s.close();{noformat}

The error is

{code:java}Hibernate: 
    insert 
    into
        Event
        (id, createdOn) 
    values
        (null, ?)
16:21:08.782 [Time-limited test] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - NULL not allowed for column ""ID""; SQL statement:{code}

The fix is to change H2IdentityColumnSupport to return ""default"" instead of ""null"".
See [https://groups.google.com/g/h2-database/c/mwXcnwb2CQc|https://groups.google.com/g/h2-database/c/mwXcnwb2CQc]",,,,,,,,,,,,,,,,,,,,,,,,HHH-15009,HHH-15013,HHH-15014,HHH-15035,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-25T07:35:49.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,froque(froque),,,,,,,,,0|104wvc:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,26/déc./2021 18:02 PM;5a974c54228ed33491d07367;[https://groups.google.com/g/h2-database/c/vq3Q7X3muJQ/m/WXy24q5KBgAJ|https://groups.google.com/g/h2-database/c/vq3Q7X3muJQ/m/WXy24q5KBgAJ],,,,,,,,,,,,,,,,Terminé,,
"Better define/document expectations for Where, Filter and discriminator application",HHH-14984,71727,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Incomplet,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/déc./2021 08:22 AM,19/déc./2021 19:03 PM,14/mars/2022 12:54 PM,19/déc./2021 19:03 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Better define/document expectations for `@Where`, `@Filter` and discriminator application.

At the moment, the outcome is very straightforward - these are never applied for to-one associations.  I do think this is a bit unexpected for `@Where` which is generally used to implement soft-deletes.  There is a lot of trickiness to handling returning null for the to-one ref here in terms of handling that during flush",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wv4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
A stale entity is loaded using Hibernate native API (Session) upon executing an HQL update,HHH-14983,71726,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Nikola Bekcic,61bcaaf589e89900710a3e9c,Nikola Bekcic,61bcaaf589e89900710a3e9c,Nikola Bekcic,61bcaaf589e89900710a3e9c,17/déc./2021 08:10 AM,17/déc./2021 09:02 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,regression,,,,,"h3. Background
I am migrating large enterprise applications from Hibernate ORM 4.3 to version 5.4. Initially, regression was reproduced using Hibernate *5.4.32* and build-in integration with *Ehcache 2* but I have managed to reproduce the same issue using *JCache* support (EhCache 3 was used as the caching provider).

h3. Prerequisite
Second-level cache is enabled and configured using either build-in integration with Ehcache 2 or using JCache support. (strict) read and write *access strategy* ('*read-write*') is used when accessing cache region(s).

h3. Description
When the second-level cache is enabled and configured (in pretty much the standard way):

{code:java}
	@Override
	protected void configure(Configuration configuration) {
		configuration.setProperty( AvailableSettings.USE_SECOND_LEVEL_CACHE, Boolean.TRUE.toString() );
		configuration.setProperty( AvailableSettings.CACHE_REGION_FACTORY, ""ehcache"" );
		configuration.setProperty( ConfigSettings.EHCACHE_CONFIGURATION_RESOURCE_NAME, ""ehcache-configuration.xml"" );
	}
{code}

and entity saved in the DB (and second-level cache as well) before running the test:

{code:java}
	@Before
	public void setUp() {
		User user = new User( TEST_USER_ID, ""initial_user_name"" );

		TransactionUtil.doInHibernate( this::sessionFactory, session -> {
			log.infof( ""Saving '%s' in the DB before running tests"", user );
			session.save( user );
		} );

		assertTrue( sessionFactory().getCache().containsEntity( User.class, TEST_USER_ID ) );
	}

	@Entity(name = ""User"")
	@Cacheable
	@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = ""Users"")
	private static class User {
		@Id
		private Long id;

		private String name;

		// Getters and setters omitted for brevity
}
{code}

loading entity using Hibernate native API (Session) upon executing an HQL update will result in returning stale entity state so running the following test will fail:

{code:java}
	@Test
	public void testEntityLoadUponHQLUpdate() {

		TransactionUtil.doInHibernate( this::sessionFactory, session -> {
			log.info( ""Updating user using HQL..."" );

			String newUserName = ""new_user_name"";

			boolean isUserUpdated = session.createQuery( ""update User set name = :name where id = :id"" )
					.setParameter( ""name"", newUserName )
					.setParameter( ""id"", TEST_USER_ID )
					.executeUpdate() == 1;
			assertTrue( isUserUpdated );

			User user = session.load( User.class, TEST_USER_ID );

			assertEquals( newUserName, user.getName() );
		} );
	}
{code}




","Hibernate 5.4.32
OpenJDK version 11.0.11
Ubuntu 18.04.6 LTS",,,,,,,,,,,,,,,,,,,,,,,,,,,,17/déc./2021 08:15 AM;ug:0bca61f2-b03b-4ea9-b365-f20d5d285cee;ReadWriteCacheConsistencyTest.zip;https://hibernate.atlassian.net/secure/attachment/49951/ReadWriteCacheConsistencyTest.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-17T08:59:40.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,ug:0bca61f2-b03b-4ea9-b365-f20d5d285cee(ug:0bca61f2-b03b-4ea9-b365-f20d5d285cee),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4488,0|104wuw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.3.9,,Backport?,,,"17/déc./2021 08:18 AM;61bcaaf589e89900710a3e9c;After diving deep into the source code changes, I have found a cause of the issue: an entity state is not loaded from the DB but re-assembled from the (stale) entity cache.

I am working on a PR that should change that and provide strong data consistency. The plan is to make the smallest possible changes and then if needed, we can discuss how we can improve on it.

Please let me know your thoughts on this.

Regards,
Nikola",,,,,,,,,,,,,,,,A faire,,
Implement JPA Criteria extension mechanism for Spatial,HHH-14982,71725,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,16/déc./2021 05:07 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-core,hibernate-spatial,,,0,,,,,,As per https://github.com/hibernate/hibernate-orm/discussions/3819 implement the extension mechanism,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104wuo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Investigate failing tests for automatic indexing with one-to-one owned by containing and lazy on either side,HSEARCH-4417,71724,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/déc./2021 05:03 AM,25/janv./2022 04:03 AM,26/déc./2021 15:56 PM,20/janv./2022 07:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,tests,,,,0,,,,,,"See the tests introduced (and {{@Ignore}}'d) in commit ""HSEARCH-3277 Test fetch types for one-to-one associations in automatic indexing"" on the 6.0 testing branch: [https://github.com/yrodiere/hibernate-search/commits/tracking-orm6.0-main|https://github.com/yrodiere/hibernate-search/commits/tracking-orm6.0-main]

Look for the code {{@Ignore(""HSEARCH-4417 likely ORM bugs"")}}

I suspect it's an ORM bug, but we will need to investigate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-20T07:32:12.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2857,0|1009cw:000000xdur3mhxzzzxezsq7uzu0i,,,,,,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support null precedence with Envers Query API,HHH-14981,71723,,Nouvelle fonctionnalité,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,16/déc./2021 01:40 AM,16/déc./2021 22:11 PM,14/mars/2022 12:54 PM,16/déc./2021 22:11 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,hibernate-envers,,,,0,,,,,,"Different databases handle null precendence differently where some automatically put NULL values first while others put them last.  For both the user experience and consistency sake in tests, we need to support specfying the precedence for deterministic behavior across dialects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-16T16:53:22.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4481,0|104wug:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to log4j 2.16.0,HSEARCH-4416,71720,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/déc./2021 00:04 AM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,15/déc./2021 04:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-15T04:03:55.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2789,0|104vmf:w,,,,,,HSEARCH - 2021-24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
jpamodelgen should not require @Basic annotations for fields that have converters,HHH-14980,71719,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Wim Deblauwe,557058:6a4e1632-cd38-461c-ad9d-1f34b0b4dda3,Wim Deblauwe,557058:6a4e1632-cd38-461c-ad9d-1f34b0b4dda3,14/déc./2021 23:56 PM,14/déc./2021 23:59 PM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,metamodel,,,,0,,,,,,"I am using hibernate-jpamodelgen and I see that for one of my entities, there is a missing {{SingularAttribute}} in the generated class for a field that uses a custom converter. It does not seem to matter if the converter is explicitly defined on the field itself via {{@Convert(converter = MyValueObjectConverter.class)}}, or it is generally applied using {{@Converter(autoApply = true)}} on the converter itself.

Example:

{code:java}@Entity
public class MyEntity {

  private MyValueObject myValueObject;

}{code}

with:

{code:java}@Converter(autoApply = true)
public class MyValueObjectConverter implements AttributeConverter<MyValueObject, String> {
  @Override
  public String convertToDatabaseColumn(MyValueObject attribute) {
    return attribute.getValue();
  }
  
  @Override
  public MyValueObject convertToEntityAttribute(String dbData) {
    return MyValueObject.of(dbData);
  }
}{code}

I have found a workaround is to explictly add {{@Basic}} on the field in the entity, but I think it should work just the same without that, right?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,festerwim(festerwim),,,,,,,,,0|104wts:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Log4J 2 2.16.0,HHH-14979,71718,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,14/déc./2021 13:44 PM,15/déc./2021 04:57 AM,14/mars/2022 12:54 PM,15/déc./2021 04:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.25,5.4.33,5.5.9,5.6.3,6.0.0.Beta3,,,,,,,,,0,,,,,,"The infamous CVE was supposedly fixed already by the previous release, but this version goes a step further in prevention by fully removing JNDI support and messages lookup.

[https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0|https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-15T04:25:53.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wtk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,Approved,,,,,,,,,,,,,,,,,,Terminé,,
Allow use of HQL fragments with @Where ,HHH-14978,71717,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Won't Do,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/déc./2021 10:36 AM,19/déc./2021 19:04 PM,14/mars/2022 12:54 PM,19/déc./2021 19:04 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,Allow use of HQL fragments with `@Where`.  `@Where` at the moment only accepts SQL,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wtc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@Where is broken in 6.0,HHH-14977,71716,,Amélioration,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/déc./2021 08:43 AM,17/déc./2021 17:18 PM,14/mars/2022 12:54 PM,17/déc./2021 17:18 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,,,,,0,,,,,,"Related to HHH-9432, [~accountid:557058:d2f0f4f7-8995-4287-aefa-840026b14acb] reports that as of 6.0 there is now a bug in `@Where` in ORM itself ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-12-18T05:43:32.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),steve(steve),,,,,,,,0|104wt4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-14 18:27:50.837,,,,"14/déc./2021 10:14 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;So the specific failure based on the test you gave me is because we are not render the predicate properly - 

{noformat}... from b_tab a1_0 where a1_0.allC=? and (a1_0.TYPE = 'C') a1_0.type='C'{noformat}

Notice the missing “and” between {{(a1_0.TYPE = 'C')}} and {{a1_0.type='C'}}","14/déc./2021 10:27 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;Well, at least we have a game plan at least.   Any idea on the effort in rendering the joins?","14/déc./2021 13:37 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;A simple fix ended up being pretty easy.  Just pushed upstream.

Working on a better solution using the AST","14/déc./2021 13:43 PM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;Awesome, thanks for the quick turn around [~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] \!",,,,,,,,,,,,,Terminé,,
Sign published artifacts,HSEARCH-4415,71715,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/déc./2021 08:29 AM,26/janv./2022 05:52 AM,14/mars/2022 12:54 PM,24/janv./2022 06:30 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,6.0.9.Final,6.1.0.Final,,,,,,build,,,,0,,,,,,"This is necessary in order to move to s01.sonatype.org

Once it's done, we should do the same for Validator and all Maven-based projects.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, build={count=2, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2022-01-26T03:38:30.000-0800"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}},""build"":{""overall"":{""count"":2,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":2,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2856,0|1009cw:000000xdur3mhxzzzxezsq7uzu04,,,,,,HSEARCH - 2022-01,HSEARCH - 2022-2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Raise timeout when publishing to oss.sonatype.org,HSEARCH-4414,71714,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/déc./2021 08:04 AM,04/janv./2022 09:16 AM,26/déc./2021 16:14 PM,16/déc./2021 07:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,build,,,,0,,,,,,See https://github.com/hibernate/hibernate-validator/commit/6c2a85aeabef0a9b2cd128defebd1341fdd78373,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-16T07:18:22.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usm:i,,,,,,HSEARCH - 2021-24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 7.16.2,HSEARCH-4413,71713,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/déc./2021 05:25 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,05/janv./2022 02:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"There seems to be problems related to timeouts, though I didn't investigate.

See my branch: [https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4413|https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4413|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-05T02:38:34.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2819,0|104x4g:,,,,,,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Compatibility with OpenSearch 1.2.1,HSEARCH-4412,71711,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/déc./2021 23:58 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,03/janv./2022 02:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=1, successfulBuildCount=0, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-03T02:23:44.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":1,""successfulBuildCount"":0,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2793,0|104usn:zzzzzi,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 7.16 by default instead of 7.10,HSEARCH-4411,71710,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/déc./2021 23:46 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,05/janv./2022 02:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,"We'll still run tests against Elasticsearch 7.10 too, but with a specific profile only, and also on CI.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-05T02:38:34.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2819,0|104x48:,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.16.2,HSEARCH-4410,71709,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/déc./2021 23:45 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,05/janv./2022 02:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-05T02:38:34.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2819,0|104x40:,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade build dependencies to the latest version,HSEARCH-4409,71708,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/déc./2021 23:41 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,15/déc./2021 04:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-15T04:03:55.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2789,0|104usn:zzzzx,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Queries using IN clause fail when filtering on instances of a @OneToOne association,HHH-14976,71704,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex Nistico,557058:ab7f1cb1-b1b7-43ed-9ecd-ef69223ef99c,Alex Nistico,557058:ab7f1cb1-b1b7-43ed-9ecd-ef69223ef99c,12/déc./2021 20:49 PM,13/déc./2021 21:24 PM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Given an enity

{code:java}class A {
  ...
  @OneToOne
  private B associated
  ...
}

class B {
  @Id
  private String id;
  ...
}{code}

If I try to find objects as:

{code:java}em.createQuery(""from A where associated in :associateds"")
.setParameter(""associateds"", List.of(a1, a2))
.getResultList();{code}

You will get an exception (depending on the JDBC driver) which will complain about parameter 2 not being bound to a value. That happens because the OneToOneType.getColumnSpan() method always returns 0, therefore the position pointer in the loop in QueryLoader.bindParameterValues() does not progress to the next parameter of the IN clause.

Note that if I instead express the query as:

{code:java}em.createQuery(""from A where associated.id in :associatedIds"")
.setParameter(""associatedIds"", List.of(a1.getId(), a2.getId()))
.getResultList();{code}

Then it all works as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0c0dfeb1-d77d-4a2f-92fd-b8c1dbe430e9(ug:0c0dfeb1-d77d-4a2f-92fd-b8c1dbe430e9),,,,,,,,,0|104ws0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Allow use of auto-applied AttributeConverter as native-query result or parameter,HHH-14975,71703,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,12/déc./2021 13:33 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"At the moment, we do not keep auto-applied converters around beyond creation of mapping models.  So this would require to change that, and add some level of performance impact.

One option would be to adjust or prime calls to `org.hibernate.type.spi.TypeConfiguration#standardBasicTypeForJavaType(java.lang.Class<J>)` to account for auto-applied generators which should not affect performance",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-12T13:47:57.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wrs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Allow AttributeConverter as parameter type,HHH-14974,71702,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,12/déc./2021 13:23 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Allow the use of AttributeConverter as parameter type.  E.g.

{noformat}session.createNativeQuery( ""select ... from persons p where p.gender = :gender"" )
        .setParameter( ""gender"", Gender.FEMALE, GenderConverter.class )
        ...{noformat}

This would also require adding a form of `#setParameter` accepting a Class, which itself could be useful",,,,,,,,,,,,,,,,,,,,,,,,HHH-13082,HHH-14975,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wrk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
StaleStateException instead StaleObjectStateException when optimistic locking entity,HHH-14973,71698,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Jakob Oswald,557058:7ea9ae13-fcdc-4172-ad2b-0412556f3830,Jakob Oswald,557058:7ea9ae13-fcdc-4172-ad2b-0412556f3830,10/déc./2021 08:54 AM,13/déc./2021 03:58 AM,14/mars/2022 12:54 PM,,5.6.1,5.6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"ObjectOptimisticLockingFailureException is missing object information (e.g. persistence class name, identifier) in Spring, this is due to the underlying Exception being a {{StaleStateException}} instead of a {{StaleObjectStateException}}.

After upgrading from {{5.6.0}} to {{5.6.1}} the object information is missing. After digging a bit into the stack trace it seems as if the save is handled differently.

The error message is:
{{Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1; statement executed: update my_table set my_col=?, version=? where id=? and version=?}}

I suspect the changed batch handling in the new {{BatchBuilderImpl}} as the error is generated in a {{NonBatchingBatch}}.

Test case: [https://github.com/jakob-o/hibernate-optimistic-locking-test|https://github.com/jakob-o/hibernate-optimistic-locking-test|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:01143dbb-320d-496d-b45f-eb51da66a5f5(ug:01143dbb-320d-496d-b45f-eb51da66a5f5),,,,,,,,,0|104wqo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix syntax highlighting for code example not working anymore in 6.0/6.1 documentation,HSEARCH-4408,71697,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/déc./2021 05:03 AM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,03/janv./2022 02:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-03T02:22:58.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2791,0|104vmf:,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
log4j2 <= 2.14.1 has an RCE (CVE-2021-44228),HHH-14972,71696,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,10/déc./2021 04:51 AM,13/déc./2021 04:52 AM,14/mars/2022 12:54 PM,13/déc./2021 04:51 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.25,5.4.33,5.5.9,5.6.3,6.0.0.Beta3,,,,,,,,,0,,,,,,[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228|https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228|smart-link] ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-11T15:12:41.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),sebastian(sebastian),,,,,,,,0|104wqg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-10 21:34:46.68,,,,"10/déc./2021 13:34 PM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Luckily, this isn’t critically urgent as Hibernate ORM does not declare a runtime dependency on Log4J: we use it only during text execution. But let’s upgrade all maintained branches nevertheless.","13/déc./2021 04:52 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Many thanks, applied and backported to all maintained branches.",,,,,,,,,,,,,,,Terminé,,
Fix flaky tests involving rebalancing,HSEARCH-4407,71695,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/déc./2021 01:47 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 06:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,tests,,,,0,,,,,,"https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/PR-2780/2/tests

agentJoined – org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingDynamicShardingRebalancingIT

{noformat}
java.lang.AssertionError: 
[Count of indexing operations for session factory 3 for tenant ID <null> (count for each factory: [809, 817, 1067, 307])] 
Expecting actual:
  307
to be greater than:
  375
	at org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingDynamicShardingRebalancingIT.agentJoined(OutboxPollingAutomaticIndexingDynamicShardingRebalancingIT.java:225)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock$1.evaluate(BackendMock.java:53)
	at org.hibernate.search.util.impl.test.rule.StaticCounters$1.evaluate(StaticCounters.java:63)
	at org.hibernate.search.util.impl.integrationtest.common.rule.MappingSetupHelper$1.evaluate(MappingSetupHelper.java:69)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)
	at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:157)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T05:45:28.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usn:zzzzr,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to jruby-complete 9.3.2.0,HSEARCH-4406,71693,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/déc./2021 23:25 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 02:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T02:47:38.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2779,0|104usn:zzzzi,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to log4j 2.15,HSEARCH-4405,71692,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/déc./2021 23:25 PM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,10/déc./2021 02:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-14T03:01:31.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2779,0|104usn:zzzz,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Mapping Embeddable to Secondary Table is failing on newer versions of Hibernate,HHH-14971,71691,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Will Dazey,6183fd9425f313007050fa32,Will Dazey,6183fd9425f313007050fa32,09/déc./2021 20:36 PM,10/déc./2021 10:42 AM,14/mars/2022 12:54 PM,,5.5.9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I was testing Hibernate's behavior with Secondary Tables and MappedSuperclass and noticed that behavior has changed from Hibernate 5.2.19 -> Hibernate 5.5.9. First, I will document the usecase and Hibernates behavior.

---------- Usecase ----------

{code:java}
@Entity
@SecondaryTable(name = ""SEC_TABLE2AMSC"", pkJoinColumns = @PrimaryKeyJoinColumn(name = ""id""))
@AttributeOverrides({ @AttributeOverride(name = ""street"", column = @Column(table = ""SEC_TABLE2AMSC"")),
                      @AttributeOverride(name = ""city"", column = @Column(table = ""SEC_TABLE2AMSC"")),
                      @AttributeOverride(name = ""state"", column = @Column(table = ""SEC_TABLE2AMSC"")),
                      @AttributeOverride(name = ""zip"", column = @Column(table = ""SEC_TABLE2AMSC"")) })
public class AnnMSCMultiTableEnt extends AnnMSCMultiTable {
    @Id private int id;
    private String name;

    @Override public int getId() { return id; }
    @Override public void setId(int id) { this.id = id; }
    @Override public String getName() { return name; }
    @Override public void setName(String name) { this.name = name; }
}
{code}

{code:java}
@MappedSuperclass
public abstract class AnnMSCMultiTable implements IMultiTableEntity {
    private String street;
    private String city;
    private String state;
    private String zip;

    @Override public String getCity() { return city; }
    @Override public void setCity(String city) { this.city = city; }
    @Override public String getState() { return state; }
    @Override public void setState(String state) { this.state = state; }
    @Override public String getStreet() { return street; }
    @Override public void setStreet(String street) { this.street = street; }
    @Override public String getZip() { return zip; }
    @Override public void setZip(String zip) { this.zip = zip; }
}
{code}

--------------------

Hibernate 5.2.19 generated schema:

{code:sql}
create table AnnMSCMultiTableEnt (
        id integer not null,
        name varchar(255),
        primary key (id))

create table SEC_TABLE2AMSC (
        city varchar(255),
        state varchar(255),
        street varchar(255),
        zip varchar(255),
        id integer not null,
        primary key (id))
{code}

Hibernate 5.5.9 generated schema:

{code:sql}
create table AnnMSCMultiTableEnt (
        id integer not null,
        city varchar(255),
        state varchar(255),
        street varchar(255),
        zip varchar(255),
        name varchar(255),
        primary key (id))

create table SEC_TABLE2AMSC (
        id integer not null,
        primary key (id))
{code}

The change in DDL generation ends up creating an exception on Hibernate 5.5.9 as this newer version of Hibernate expects AnnMSCMultiTableEnt to possess fields that it did not have on Hibernate 5.2.19. Is there something that changed over these versions? Is there something wrong with my configuration? It seems correct to me and was correct on Hibernate 5.2.19",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139(ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139),,,,,,,,,0|104wq0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.2.19,,,,,"10/déc./2021 10:00 AM;6183fd9425f313007050fa32;Interesting. Running with Hibernate 5.6.1 and now it works as expected. It seems like whatever this issue was, it was fine in 5.2.19, then broken in 5.5.9, then fixed in 5.6.1. ","10/déc./2021 10:42 AM;6183fd9425f313007050fa32;I created a test case here: [https://github.com/hibernate/hibernate-test-case-templates/pull/53|https://github.com/hibernate/hibernate-test-case-templates/pull/53|smart-link] 

But since the test framework is running with 5.6.1, the test doesn’t fail. Switching to 5.5.9 causes it to fail, but since that is an older version, it doesn’t appear this is an issue at the moment.

I think this can be closed as fixed.",,,,,,,,,,,,,,,A faire,,
make use of new Java language features since v8,HHH-14970,71690,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,09/déc./2021 13:29 PM,09/déc./2021 13:49 PM,14/mars/2022 12:54 PM,,6.0.0.Beta2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We have switched JDK version from 8 to 11 in main branch (previously the wip/6.0 branch). There are some minor language features to improve our code, including:
* new String's methods (e.g. String#isBlank());
* new Collection constant methods (e.g. List.of(), Map.of(), Set.of());

Note that we have finished making use of JDK 11 in building; this ticket is focused on Java language new features exclusively.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-09T18:26:04.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4438,0|104wps:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Gradle plugin fails on record classes with type parameters,HHH-14969,71689,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Markus Heiden,557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6,Markus Heiden,557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6,09/déc./2021 11:55 AM,11/déc./2021 03:39 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-gradle-plugin,,,,0,,,,,,"When enhancing the byte code the plugin fails with `Unable to enhance class : MyRecord.class`. The record is no JPA entity:

{noformat}public record MyRecord<E>(E dummy) {}{noformat}

The problem occurs because of the type parameter “E” being used as type for the {{dummy}} attribute.

I wonder why the plugin is failing on classes it does not need to transform?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,markus_heiden(markus_heiden),,,,,,,,,0|104wpk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"11/déc./2021 02:06 AM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;The cause

{noformat}Caused by: org.gradle.api.GradleException: Unable to enhance class : .../MyRecord.class
	at org.hibernate.orm.tooling.gradle.EnhancementHelper.doEnhancement(EnhancementHelper.java:134)
	at org.hibernate.orm.tooling.gradle.EnhancementHelper.enhance(EnhancementHelper.java:92)
	at org.hibernate.orm.tooling.gradle.HibernatePlugin$EnhancerAction.execute(HibernatePlugin.java:73)
	at org.hibernate.orm.tooling.gradle.HibernatePlugin$EnhancerAction.execute(HibernatePlugin.java:57)
    ...
Caused by: org.hibernate.bytecode.enhance.spi.EnhancementException: Failed to enhance class ...MyRecord
	at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:138)
	at org.hibernate.orm.tooling.gradle.EnhancementHelper.doEnhancement(EnhancementHelper.java:131)
	...
Caused by: java.lang.NullPointerException: Cannot invoke ""net.bytebuddy.description.TypeVariableSource.findVariable(String)"" because ""typeVariableSource"" is null
	at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$GenericTypeToken$ForTypeVariable.toGenericType(TypePool.java:4350)
	at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$TokenizedGenericType.resolve(TypePool.java:6800)
	at net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection.accept(TypeDescription.java:6129)
	at net.bytebuddy.description.type.RecordComponentDescription$AbstractBase.asToken(RecordComponentDescription.java:128)
	at net.bytebuddy.description.type.RecordComponentList$AbstractBase.asTokenList(RecordComponentList.java:70)
	at net.bytebuddy.dynamic.scaffold.InstrumentedType$Factory$Default$1.represent(InstrumentedType.java:422)
	at net.bytebuddy.ByteBuddy.redefine(ByteBuddy.java:782)
	at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.lambda$enhance$0(EnhancerImpl.java:133)
	at org.hibernate.bytecode.internal.bytebuddy.ByteBuddyState.rewrite(ByteBuddyState.java:144)
	at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:132)
	...
{noformat}","11/déc./2021 03:33 AM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;I do not understand the posted stack trace. In the repository, there is a “tooling/hibernate-gradle-plugin/src/main/java/org/hibernate/orm/tooling/gradle/HibernateOrmPlugin.java” whereas in the stack trace is a {{org.hibernate.orm.tooling.gradle.HibernatePlugin}} and the lines in the {{EnhancementHelper}} don't match the source code in the repository either. Maybe you can give me a pointer on what I am overlooking so I might be able to fix that myself.",,,,,,,,,,,,,,,A faire,,
Support for auto-enabled filters,HHH-14968,71688,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,09/déc./2021 08:48 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"There are cases when users define filters that should always be enabled for any Session.  E.g. multi-tenancy, authorization, soft-deletes, ...

Would be nice to allow an them to specify that these filters should always be enabled.

A related concern is the ability to define ""resolvable"" parameter values.  This may be generally useful, but for sure would be with such auto-enabled",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wpc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Methods in Lucene analysis configurers to define analyzers/normalizers without referring to Lucene classes,HSEARCH-4404,71687,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/déc./2021 06:40 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 09:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"The goal really is to avoid classpath dependencies to Lucene, so that Hibernate Search can be used without the application relying on Lucene directly *at all*. That would be useful for various integrators that need to provide guarantees of stable APIs, and cannot provide such guarantees for Lucene.

We would *not* need a common (backend-agnostic) list of available tokenizers, tokenfilters, charfilters, and parameters; it's perfectly fine if those are still backend-specific (so we wouldn't address [https://discourse.hibernate.org/t/backend-agnostic-analyzer-in-hs6/5846|https://discourse.hibernate.org/t/backend-agnostic-analyzer-in-hs6/5846|smart-link]  , at least not yet).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T09:05:13.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2781,0|104usn:zzzy,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Change of behavior in optimistic lock increment with persisted & changed entity within same transaction,HHH-14967,71686,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Koen Serneels,557058:956c77bd-dde9-4e6d-aafd-30082b747b74,Koen Serneels,557058:956c77bd-dde9-4e6d-aafd-30082b747b74,09/déc./2021 06:09 AM,09/déc./2021 06:09 AM,14/mars/2022 12:54 PM,,5.6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Optimistically locked entity 'Parent' has a one-to-many with 'Child'. When a Parent is saved and a child is added within the same transaction, Hibernate versions prior 5.5.0 saved the version with value 0. Versions after 5.5.0 seem to increment the version and save it with 1. In the attached test case, switch the hibernate version to see difference in behavior:

{noformat}
		<!-- test also fails with latest :-->
		<hibernate.version>5.6.1.Final</hibernate.version>

		<!-- test fails starting with this version :-->
		<!--<hibernate.version>5.5.0.Final</hibernate.version>-->

		<!-- test works with this version -->
		<!--<hibernate.version>5.4.32.Final</hibernate.version>-->
{noformat}

The test case:

{code:java}
public void testCaseNewEntity() {
		MutableObject<ParentTo> transferObject = new MutableObject<>();

		transactionalCodeRunner.run(() -> {
			Parent parent = new Parent();
			sessionFactory.getCurrentSession().save(parent);
			parent.getRelationTrace().add(new Relation(""1"", ""2""));
			ParentTo parentTo = new ParentTo();
			sessionFactory.getCurrentSession().flush();
			parentTo.setVersion(parent.getVersion());
			transferObject.setValue(parentTo);
		});

		assertEquals(transferObject.getValue().getVersion().longValue(), 0L, ""version alert"");
	}
{code}

Over the course of time we made an assumption on the version being '0' for newly saved entities, and now our miles vary depending what happens after entity creation (is the entity changed after being created within the same tx or not), so this actually breaks some parts of our code. 

Is there a reason why this behavior changed and if not would it be possible to revert back to the old behavior?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/déc./2021 06:09 AM;koen.serneels;hibernate-version-test.zip;https://hibernate.atlassian.net/secure/attachment/49950/hibernate-version-test.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,koen.serneels(koen.serneels),,,,,,,,,0|104wp4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,,,,,,,,,A faire,,
Foo bar for testing,HHH-14966,71685,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,MukulA,557058:92a0c791-5a3c-4c7c-a0f6-14452c7c6d69,MukulA,557058:92a0c791-5a3c-4c7c-a0f6-14452c7c6d69,MukulA,557058:92a0c791-5a3c-4c7c-a0f6-14452c7c6d69,09/déc./2021 04:02 AM,09/déc./2021 04:02 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,mukulagrawal(mukulagrawal),,,,,,,,,0|104wow:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Support ORM's discriminator-based multi-tenancy in the outbox-polling module,HSEARCH-4403,71684,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/déc./2021 02:45 AM,31/janv./2022 01:55 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7.0,,,,,,,,,mapper-orm,,,,0,,,,,,"See https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/discriminator-based.20multitenancy/near/264282502

{quote}
I guess at some point we'll need to identify the tenancy strategy if we mean to support discriminator-based multi-tenancy. We'll need to add a tenantId property to our custom entities (outboxevent, agent) and map them when using discriminator-based multi-tenancy. But that can wait
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vxo:r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate auto-casting of numeric strings,HHH-14965,71683,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Daniel Manner,557058:c6621bb5-61a8-4e2a-82dd-b25e140c15f9,Daniel Manner,557058:c6621bb5-61a8-4e2a-82dd-b25e140c15f9,09/déc./2021 01:48 AM,09/déc./2021 02:02 AM,14/mars/2022 12:54 PM,,4.3.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"We are using an older Version of Hibernate (4.3.5.Final) for compatibility reasons with another 3rd party library.

That 3rd party library stores all IDs (plain numeric, generated by a global ID generator, therefore basically UUIDs across all tables) as a varchar(60) in the database. 

Tables are well indexed. 

Now, we noted the following issue: When using a hibernate prepared statement, and passing that numeric id (but type string) as parameter, _somewhere down the chain_ it is converted to an int/long.

Prepared Statement:

{noformat}@NamedQuery(name = MyEntity.GET_BY_PID, query = ""SELECT p FROM MyEntity p WHERE p.someForeignID = :pid”){noformat}

Usage:

{noformat}myEntity = this.em.createNamedQuery(MyEntity.GET_BY_PID, MyEntity.class).setParameter(""pid"", otherEntity.getInstanceId()).getSingleResult();{noformat}

{{otherEntity.getInstanceId()}} returns String.

This leads to the result, that the following query is issued by hibernate:

{{SELECT * FROM MyEntity WHERE someForeignID = 1234}}

rather than 

{{SELECT * FROM MyEntity WHERE someForeignID = '1234'}}

The database engine (tested with MySQL and MariaDB) is now refusing to use the index, because the column is varchar and the argument is long. (See attached Screenshots)

I assume, at some point the parameter-check is false-positive identifying the argument as long and omits the quotation marks in the query. The auto-cast type should be derived from the type of the target-column, from the class type of the argument - but not from the CONTENT of the provided parameter. 

Best would be to maintain the Class-Type of the input parameter, which is String -> So, quotation marks even if it contains just numbers.

Collation of the database / table / column is utf8_bin_ci if that matters for this issue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/déc./2021 01:46 AM;ug:01b4a660-5ddd-4d77-899e-407a89f86ae4;index.jpg;https://hibernate.atlassian.net/secure/attachment/49949/index.jpg,09/déc./2021 01:46 AM;ug:01b4a660-5ddd-4d77-899e-407a89f86ae4;no_index.jpg;https://hibernate.atlassian.net/secure/attachment/49948/no_index.jpg,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,2.0,ug:01b4a660-5ddd-4d77-899e-407a89f86ae4(ug:01b4a660-5ddd-4d77-899e-407a89f86ae4),,,,,,,,,0|104woo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to ECJ 3.28.0,HSEARCH-4402,71682,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 23:46 PM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,08/déc./2021 23:47 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-08T18:23:59.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usn:zzzx,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
EmbeddableInitializer are called multiple times,HHH-14964,71681,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/déc./2021 20:18 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"In some circumstances, an EmebddableInitializer seems to be called multiple times.  

At least, it (`#initializeInstance`) is called when we already have a composite instance.  Previously this would have ""just"" resulted in calling the setters twice.  But with my work on constructor-based embeddable creation/injection it fails.  Specifically it fails for embeddables that expect to use constructor injection.  It specifically fails because the ""set"" is done twice - the first time we do the constructor creation/injection.  The second time, we need to call the setters which will fail if there are none",,,,,,,,,,,,HHH-14950,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-10T12:39:51.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wog:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/déc./2021 21:05 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;So the answer is that EmebddableInitializer is almost(?) always called twice.

# First, it is called as part of the {{StandardRowReader#coordinateInitializers}} processing.
# Then, it is called from {{EmbeddableAssembler#assemble}}

This can be seen by running {{org.hibernate.orm.test.mapping.embeddable.strategy.instantiator.intf.InstantiationTests#basicTest}} or {{org.hibernate.orm.test.mapping.embeddable.strategy.instantiator.intf2.InstantiationTests#basicTest}} ",,,,,,,,,,,,,,,,A faire,,
Interceptor doesn't get invoked on audit entities when using manual flush mode,HHH-14963,71680,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,08/déc./2021 12:58 PM,17/déc./2021 23:14 PM,14/mars/2022 12:54 PM,,5.6.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"Setting the flush mode to manual results in bypassing of interceptor for audit entities. When using any other flush mode, interceptor is invoked as expected.

Test case is attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,08/déc./2021 12:56 PM;rsmirnov;AuditedInterceptorTest.java;https://hibernate.atlassian.net/secure/attachment/49947/AuditedInterceptorTest.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,crancran(crancran),rsmirnov(rsmirnov),,,,,,,,0|104wo8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Lucene backend ignores limit when offset + limit is higher than Integer.MAX_VALUE instead of reporting that it cannot handle it,HSEARCH-4401,71679,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,08/déc./2021 11:19 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,09/déc./2021 06:16 AM,6.1.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-lucene,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-09T06:16:14.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2774,0|104wo0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Delay actual creation of IdentifierGenerator instances as late as possible,HHH-14962,71678,70855,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/déc./2021 10:38 AM,08/déc./2021 10:41 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"This will be a 2-step process.  

First will be to keep most of the processing as-is but to just drop the multiple calls to {{KeyValue#createIdentifierGenerator}} until we are all done processing the boot model.

The next step is to delay creation of {{IdentifierGenerator}} instances until after the SessionFactory is completely built - ideally until after CDI BeanManager (if used) is ready to allow using CDI beans as {{IdentifierGenerator}} instances.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-08T12:33:30.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wns:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,70855,IdentifierGenerator changes
Deprecate IdentifierGeneratorStrategyProvider,HHH-14961,71677,70855,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/déc./2021 10:25 AM,08/déc./2021 10:26 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"This contract was added for OGM.  It is a mess and gets in the way of id-gen improvements.

Can also drop it if it really gets in the way - OGM is no longer a thing",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-08T12:33:30.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wnk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,70855,IdentifierGenerator changes
Upgrade to Hibernate ORM 5.6.2.Final,HSEARCH-4400,71675,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 08:51 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,09/déc./2021 04:33 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,mapper-orm,,,,0,,,,,,https://in.relation.to/2021/12/08/hibernate-orm-562/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-09T04:32:51.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2776,0|104usn:zzzv,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Gson rounds extreme Long values,HSEARCH-4399,71674,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 05:32 AM,08/déc./2021 05:45 AM,14/mars/2022 12:54 PM,08/déc./2021 05:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"It seems JSON serialization through GSON ends up rounding Long values. Most of the times it goes unoticed, unfortunately, but in some cases we can end up with errors (especially with ES 7.16) as the rounding will take the value out of the allowed range, e.g. for longs:

{noformat}
HSEARCH400007: Elasticsearch request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request: POST /empty-read/_search with parameters {size=10000, routing=range_Long_IN_FLATTENED_SINGLE_VALUED, track_total_hits=true}
Response: 400 'Bad Request' from 'http://localhost:9200' with body 
{
  ""error"": {
    ""root_cause"": [
      {
        ""type"": ""illegal_argument_exception"",
        ""reason"": ""Value [-9.223372036854776E18] is out of range for a long""
      }
    ],
    ""type"": ""search_phase_execution_exception"",
    ""reason"": ""all shards failed"",
    ""phase"": ""query"",
    ""grouped"": true,
    ""failed_shards"": [
      {
        ""shard"": 0,
        ""index"": ""empty-000001"",
        ""node"": ""tkvF_kkyQm-IvwHbrnHbAg"",
        ""reason"": {
          ""type"": ""illegal_argument_exception"",
          ""reason"": ""Value [-9.223372036854776E18] is out of range for a long""
        }
      }
    ],
    ""caused_by"": {
      ""type"": ""illegal_argument_exception"",
      ""reason"": ""Value [-9.223372036854776E18] is out of range for a long"",
      ""caused_by"": {
        ""type"": ""illegal_argument_exception"",
        ""reason"": ""Value [-9.223372036854776E18] is out of range for a long""
      }
    }
  },
  ""status"": 400
}
{noformat}

{{-9.223372036854776E18}} is less than {{Long.MIN_VALUE}}, which is {{-9223372036854775808}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usn:zzzr,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/déc./2021 05:45 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Apparently GSON is not at fault here. The serialized JSON is just fine, but Elasticsearch 7.16 converts longs to doubles internally for some reason; I need to investigate that.

Closing this ticket.",,,,,,,,,,,,,,,,Terminé,,
Remove the unnecessary transitive dependency to lucene-sandbox,HSEARCH-4398,71673,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 05:00 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,08/déc./2021 08:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-lucene,,,,0,,,,,,"This artifact contains unstable, experimental code that we cannot reasonably rely on.

We don't currently use any code from it, so let's make sure it stays that way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-08T08:46:59.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2773,0|104usn:zzzi,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Switch to elastic/elasticsearch:* rather than the root elasticsearch:* for container images used in testing,HSEARCH-4397,71672,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 04:56 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 09:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,"Elasticsearch publishes container images, but to their own docker repo, which is then sync'ed with dockerhub.

The thing is, [the sync to dockerhub doesn't work|https://github.com/elastic/elasticsearch/issues/78435]. Considering it's been down for almost 3 months, there's little hope this will change anytime soon.

Fortunately, there's another (official) repository on dockerhub, apparently hosting the exact same images: https://hub.docker.com/r/elastic/elasticsearch/ . This one seems to be updated just fine.

Let's switch to that repo.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T09:26:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2780,0|104usn:zzz,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.16.0,HSEARCH-4396,71671,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/déc./2021 00:00 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 09:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T09:26:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2780,0|104usn:zzy,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add @IdGeneratorType for better custom generator config,HHH-14960,71670,70855,Sous-tâche,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,07/déc./2021 14:56 PM,18/déc./2021 04:44 AM,14/mars/2022 12:54 PM,18/déc./2021 04:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14989,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-12-08T12:33:30.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wn4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
Drop IdentifierGeneratorFactory as a Service,HHH-14959,71669,70855,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,07/déc./2021 14:49 PM,08/déc./2021 10:21 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Drop {{IdentifierGeneratorFactory}} as a Service.  It is only needed at boot-time.

Move to {{BootstrapContext}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-12-08T12:33:30.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wmw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,70855,IdentifierGenerator changes
Switch to ORM 6 as the default ORM version and drop support for ORM 5,HSEARCH-4395,71668,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/déc./2021 07:53 AM,07/déc./2021 07:57 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7.0,,,,,,,,,mapper-orm,,,,0,,,,,,"Requires [https://hibernate.atlassian.net/browse/HSEARCH-4394|https://hibernate.atlassian.net/browse/HSEARCH-4394|smart-link], [https://hibernate.atlassian.net/browse/HSEARCH-3277|https://hibernate.atlassian.net/browse/HSEARCH-3277|smart-link] 

We will need ORM 6 to provide Java EE artifacts first; at the moment it doesn’t.

Before this change:

* The main artifacts (no particular suffix, e.g. {{hibernate-search-mapper-orm}}) target Hibernate ORM 5.x
* There are additional artifacts with a '-javaee' suffix (e.g. {{hibernate-search-mapper-javaee}}) to support Hibernate ORM 5.x + Java EE
* There are additional artifacts with a '-orm6' suffix (e.g. {{hibernate-search-mapper-orm6}}) to support Hibernate ORM 6.x + Jakarta EE

After this change:

* The main artifacts (no particular suffix, e.g. {{hibernate-search-mapper-orm}}) target Hibernate ORM 6.x
* There are additional artifacts with a '-javaee' suffix (e.g. {{hibernate-search-mapper-javaee}}) to support Hibernate ORM 6.x + Java EE
* There are *no* additional artifacts to support ORM 5.x",,,,,,,,,,,,,,,,,,,,,,HSEARCH-4394,HSEARCH-3277,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104wmo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Switch to Jakarta EE as the default standard instead of Java EE,HSEARCH-4394,71667,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/déc./2021 07:51 AM,07/déc./2021 07:57 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7.0,,,,,,,,,mapper-orm,,,,0,,,,,,"Before this change:

* The main artifacts (no particular suffix, e.g. {{hibernate-search-mapper-orm}}) target Hibernate ORM 5.x + Java EE
* There are additional artifacts with a '-jakarta' suffix (e.g. {{hibernate-search-mapper-orm-jakarta}}) to support Hibernate ORM 5.x + Jakarta EE

After this change:

* The main artifacts (no particular suffix, e.g. {{hibernate-search-mapper-orm}}) target Hibernate ORM 5.x + Jakarta EE
* There are additional artifacts with a '-javaee' suffix (e.g. {{hibernate-search-mapper-orm-javaee}}) to support ORM 5.x + Java EE",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104wmg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,07/déc./2021 07:56 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Note I have some preliminary work for this on my branch: [https://github.com/yrodiere/hibernate-search/tree/tracking-orm6.0-main|https://github.com/yrodiere/hibernate-search/tree/tracking-orm6.0-main|smart-link] ,,,,,,,,,,,,,,,,A faire,,
Upgrade to Lucene 9.0,HSEARCH-4393,71666,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/déc./2021 07:45 AM,02/févr./2022 09:20 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,7.0,,,,,,,,,backend-lucene,,,,0,,,,,,"https://lucene.apache.org/core/9_0_0/changes/Changes.html

Critically, Lucene 9 requires JDK 11+. So we will need to drop JDK 8 support.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104wm8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Use of CDI to create built-in generators upon metadata creation, leading to errors if CDI is not yet initialized",HHH-14958,71665,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/déc./2021 08:16 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,19/déc./2021 05:29 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,"See https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/CDI.20for.20identifier.20generators.20in.20WildFly

I was surprised to see that this very simple mapping causes an error with ORM 5.6.1 in WildFly (probably 5.5 as well, though I didn't check):

{code}
@Entity
@Indexed
public class Book {

    @Id
    @GeneratedValue
    Long id;

    @Field
    String title;

}
{code}

Apparently we added support for ID Generators defined as CDI beans at some point, but in WildFly, CDI is not yet available when we boot Hibernate ORM and create ID generators. I guess that's an acceptable limitation for custom ID generators, but the problem is we try to use CDI even for ""standard"" generators such as the mapping above.

The problematic code:

https://github.com/hibernate/hibernate-orm/blob/83975eaddf7f04680f12a1059eb737730da5ce6b/hibernate-core/src/main/java/org/hibernate/id/factory/internal/DefaultIdentifierGeneratorFactory.java#L121-L142

When we end up there, {{strategy}} is {{""org.hibernate.id.enhanced.SequenceStyleGenerator""}} and isn't contained in {{generatorStrategyToClassNameMap}}, so we try to create a bean. Which I guess we shouldn't?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,steve(steve),yrodiere(fenrhil),,,,,,,,0|100imm:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-18 12:44:33.125,,,,"18/déc./2021 04:44 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Currently we just ignore CDI if either {{delayed}} or {{extended}} is used.

Ultimately we will allow use of managed generators in those cases as well, but that requires a lot of internal (as well as some SPI) changes.  See [https://hibernate.atlassian.net/browse/HHH-14989|https://hibernate.atlassian.net/browse/HHH-14989|smart-link] ","19/déc./2021 05:29 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Technically, this was already fixed by Yoann for 5.x and myself for 6.x before the last releases of each.  Did not make it into the release notes for either it would seem.

Anyway, as far as I know this is done on both","03/janv./2022 00:05 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] I may be misremembering, but I don’t think I fixed this in 5.x. I just used a workaround (overriding the identifier generator factory) in my experimental branch of WildFly, same as what is currently done in Quarkus. And from what I can see, the problematic code didn’t change in 5.6, so nobody else woked on this, either.

I’ll remove 5.6 from the “fix versions”.","03/janv./2022 06:23 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;That’s fine.  There is _a_ “solution” for 5.6, so that’s the important part.  I had assigned this for 5.6 because I worked on that PR that we decided to not apply.  Just forgot to remove it here I guess",,,,,,,,,,,,,Terminé,,
Alot of memory waste for empty new ArrayList()  and new Hashmap(),HHH-14957,71664,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Cristian Sfercoci,557058:94721190-b6e0-4031-a4bd-84966c7cd0ba,Cristian Sfercoci,557058:94721190-b6e0-4031-a4bd-84966c7cd0ba,Cristian Sfercoci,557058:94721190-b6e0-4031-a4bd-84966c7cd0ba,06/déc./2021 07:37 AM,06/déc./2021 07:37 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"If we talk about only Hibernate ORM/ core module there is alot default instantiations of arrays and hasmap without any specified size. This lead to memory waste and decrease the performance. 
Setting appropiate size for array will decrease rehassing as well decreasing memory to be wasted 
As benefits you will gain memory and performance. Less CPU and less memory



",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:2e1cd3a6-0bb2-4f2f-8224-f8af402dfd64(ug:2e1cd3a6-0bb2-4f2f-8224-f8af402dfd64),,,,,,,,,0|104wm0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Invalid link to MetadataBuilderContributor javadocs in Configurations docs,HHH-14956,71663,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,nngo,70121:6b5aad1b-da0a-4e89-a3a2-0cc84c3a72da,nngo,70121:6b5aad1b-da0a-4e89-a3a2-0cc84c3a72da,nngo,70121:6b5aad1b-da0a-4e89-a3a2-0cc84c3a72da,06/déc./2021 07:14 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,06/déc./2021 08:32 AM,5.4.32,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,documentation,,,,0,,,,,,"The link to the MetadataBuilderContributor javadocs is broken under Appendix > Configurations > Bootstrap properties > hibernate.metadata_builder_contributor

It is currently: https://docs.jboss.org/hibernate/orm/5.4/javadocs/org/hibernate/jpa/boot/spi/MetadataBuilderContributor.html
It should be: https://docs.jboss.org/hibernate/orm/5.4/javadocs/org/hibernate/boot/spi/MetadataBuilderContributor.html
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-06T08:33:10.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:07687558-b85a-4a2d-9167-b088f30dc09b(ug:07687558-b85a-4a2d-9167-b088f30dc09b),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4417,0|104wls:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Simpler representation of paths in annotation mapping,HSEARCH-4392,71662,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/déc./2021 05:04 AM,01/févr./2022 01:53 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,,,,,0,,,,,,"See [HSEARCH-4386] : the current syntax using {{@ObjectPath}}/{{@PropertyValue}} is far from clear and can lead to mistakes that yield confusing error messages.

To prevent that kind of mistake in the first place, we could provide (and recommend) a more straightforward way to provide paths.

h4. Solution 1: simply allow string representations

Minimal changes; just allow passing paths as strings:

{code:java}@IndexingDependency(derivedFrom = {
    @ObjectPath(asString = ""firstName""),
    @ObjectPath(asString = ""familyName"")
}){code}

Such a syntax would need to handle references to value extractors too, however; maybe we'll pick the current syntax ""foo<collection>.bar"", or maybe we'll switch to something better.

h4. Solution 2: string representations + new annotations with better names/structure

Do the above, but *also* rethink the name and structure of the {{@IndexingDependency}}/{{@AssociationInverseSide}}/{{@ObjectPath}}/{{@PropertyValue}} annotations  so that it's impossible to think ""ah, {{@ObjectPath(value = ...)}} probably allows me to provide multiple paths"".

This is easier said than done, though...

When thinking about this, we should probably take into account the changes suggested in [HSEARCH-4271]
too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|100imk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
OneToOne mapping find Tuple is not populated,HHH-14955,71661,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Johannes Ebster,5f5f440af4571b006a52bc46,Johannes Ebster,5f5f440af4571b006a52bc46,06/déc./2021 02:36 AM,04/janv./2022 01:43 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,5,bug,criteria,OneToOne,one-to-one,tuple,"Querying for an entity with a OneToOne mapped attributed populates that attribute correctly, but querying for a Tuple containing that entity does not populate that attribute.

The entities are structured as follows:

{code:java}@Entity
public class Customer {

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Long id;
	private String firstName;
	private String lastName;

	@OneToOne(mappedBy = ""customer"", cascade = CascadeType.ALL)
	@PrimaryKeyJoinColumn
	private Address address;

//...
}{code}

{code:java}@Entity
public class Address {

	@Id
	@Column(name = ""customer_id"")
	private Long id;

	@OneToOne
	@MapsId
	@JoinColumn(name = ""customer_id"")
	private Customer customer;

	private String street;
//...
}{code}

The following tests shows that the Address attribute is indeed populated when querying for the Customer entity `testCustomerQuery()`, but not when querying for a tuple containing the Customer entity `testTupleQuery()`

{code:java}//...
@Test
    void testCustomerQuery() {
        final CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        final CriteriaQuery<Customer> query = cb.createQuery(Customer.class);
        query.from(Customer.class);
        final Customer customer = entityManager.createQuery(query).getSingleResult();

        assertThat(customer).isNotNull();
        assertThat(customer.getAddress()).isNotNull();
    }

    @Test
    void testTupleQuery() {
        final CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        final CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
        final Root<Customer> root = query.from(Customer.class);
        query.multiselect(root.get(""id""), root.get(""address""));
        final Tuple tuple = entityManager.createQuery(query).getSingleResult();

        assertThat(tuple).isNotNull();
        assertThat(tuple.get(0)).isEqualTo(customer.getId());
        assertThat(tuple.get(1)).describedAs(""address should be pressent"").isNotNull().isInstanceOf(Address.class);
    }
//...{code}

The example code can be found here: [https://github.com/joheb-mohemian/gs-accessing-data-jpa/tree/primary-key-join-column-projection-bug/complete|https://github.com/joheb-mohemian/gs-accessing-data-jpa/tree/primary-key-join-column-projection-bug/complete]
The Customer entity is defined here: [https://github.com/joheb-mohemian/gs-accessing-data-jpa/blob/primary-key-join-column-projection-bug/complete/src/main/java/com/example/accessingdatajpa/Customer.java|https://github.com/joheb-mohemian/gs-accessing-data-jpa/blob/primary-key-join-column-projection-bug/complete/src/main/java/com/example/accessingdatajpa/Customer.java] 
and the mentioned test cases are here: [https://github.com/joheb-mohemian/gs-accessing-data-jpa/blob/primary-key-join-column-projection-bug/complete/src/test/java/com/example/accessingdatajpa/CustomerRepositoryTests.java|https://github.com/joheb-mohemian/gs-accessing-data-jpa/blob/primary-key-join-column-projection-bug/complete/src/test/java/com/example/accessingdatajpa/CustomerRepositoryTests.java]

h2. Additional Information

The bug was originally reported here [https://github.com/spring-projects/spring-data-jpa/issues/2369|https://github.com/spring-projects/spring-data-jpa/issues/2369] to find out why a Spring projection would not populate the Address attribute. The problem was then narrowed down to the tuple query that we report here as defect.",Spring Boot 2.6.1 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:09efcb5e-8992-4a7d-aad4-d3806157e235(ug:09efcb5e-8992-4a7d-aad4-d3806157e235),,,,,,,,,0|104wlk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"06/déc./2021 02:40 AM;5f5f440af4571b006a52bc46;Just stumbled over the test case templates after creating the issue. If it helps, I will create the same test case in one of these templates, just let me know.",,,,,,,,,,,,,,,,A faire,,
Add @EmbeddableMapper,HHH-14954,71660,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,04/déc./2021 05:32 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"Add an `@EmbeddableMapper` to allow mapping ""odd"" objects as embeddables.  

In  terms of design, the proposed solution is patterned somewhat after JPA's `@IdClass`.

As an example, consider a class named `ProvidedClass` provided by a third-party - meaning the user cannot change it to add annotations, etc.  For the example, we want to exclude certain methods that meet the POJO pattern.

{code:java}class ProvidedClass {
    String getSomePersistableState() { ... }
    Integer getSomeMorePersistableState() { ... }
    boolean getSomeNonPersistableState() { ... }

    // setters omitted
}{code}

The idea being that we want to persist the first 2 attributes.  At the moment, without being able to annotate the 3rd as `@Transient`, all 3 will be recognized as persistent attributes.

Enter `@EmbeddableMapper`:

{code:java}class ProvidedClassMapper {
    String getSomePersistableState() { ... }
    Integer getSomeMorePersistableState() { ... }

    // setters omitted
}

@Entity
class MyEntity {
    ...

    @Embedded
    @EmbeddableMapper( ProvidedClassMapper.class )
    private ProvidedClass theThing;
}{code}

We should allow the mapper to be an interface as well, since it is not ever really used for persistence operations - it is simply a mapping construct

This is not super critical as much of this can be handled by `orm.xml`",,,,,,,,,,,,,,,,,,HHH-14885,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wlc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix images not being displayed in the documentation,HSEARCH-4391,71659,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/déc./2021 07:14 AM,04/janv./2022 09:16 AM,14/mars/2022 12:54 PM,03/janv./2022 02:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta2,,,,,,,,documentation,,,,0,,,,,,See https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#architecture-examples-outbox-polling-elasticsearch-description: the architecture diagram is missing.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-03T02:22:58.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2791,0|104vme:i,,,,,,HSEARCH - 2021-23,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix flaky tests involving Spring and JTA timeout,HSEARCH-4390,71658,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/déc./2021 06:57 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 06:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,tests,,,,0,,,,,,"See https://pipelines.actions.githubusercontent.com/YTz04ilUijFkkbv2WsuuVQXkjRUDcvc2fyczM2AnO1OKaa7eCN/_apis/pipelines/1/runs/1297/signedlogcontent/2?urlExpires=2021-12-03T14%3A56%3A35.4776139Z&urlSigningMethod=HMACV1&urlSignature=YI0WeJUtKUoie1S6qyF%2FC9M7kUD3AXA4RpriURdS0T4%3D

{noformat}
2021-12-03T14:36:53.8882733Z [ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 10.785 s <<< FAILURE! - in org.hibernate.search.integrationtest.spring.jta.timeout.RaisedTimeoutJtaAndSpringOutboxIT
2021-12-03T14:36:53.8888686Z [ERROR] org.hibernate.search.integrationtest.spring.jta.timeout.RaisedTimeoutJtaAndSpringOutboxIT.test  Time elapsed: 7.095 s  <<< ERROR!
2021-12-03T14:36:53.8894358Z org.springframework.transaction.UnexpectedRollbackException: JTA transaction unexpectedly rolled back (maybe due to a timeout); nested exception is javax.transaction.RollbackException: One or more resources refused to commit (possibly because of a timeout in the resource - see the log for details). This transaction has been rolled back instead.
2021-12-03T14:36:53.8921974Z 	at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1038)
2021-12-03T14:36:53.8928445Z 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
2021-12-03T14:36:53.8978013Z 	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
2021-12-03T14:36:53.8982533Z 	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654)
2021-12-03T14:36:53.8987906Z 	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407)
2021-12-03T14:36:53.9001427Z 	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
2021-12-03T14:36:53.9005482Z 	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
2021-12-03T14:36:53.9008492Z 	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
2021-12-03T14:36:53.9011167Z 	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
2021-12-03T14:36:53.9014158Z 	at org.hibernate.search.integrationtest.spring.jta.dao.SnertDAO$$EnhancerBySpringCGLIB$$fb78bace.persist(<generated>)
2021-12-03T14:36:53.9018665Z 	at org.hibernate.search.integrationtest.spring.jta.timeout.RaisedTimeoutJtaAndSpringOutboxIT.test(RaisedTimeoutJtaAndSpringOutboxIT.java:75)
2021-12-03T14:36:53.9056598Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2021-12-03T14:36:53.9059126Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2021-12-03T14:36:53.9061979Z 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2021-12-03T14:36:53.9064095Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2021-12-03T14:36:53.9065599Z 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
2021-12-03T14:36:53.9067745Z 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
2021-12-03T14:36:53.9070212Z 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
2021-12-03T14:36:53.9072810Z 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
2021-12-03T14:36:53.9076529Z 	at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)
2021-12-03T14:36:53.9082140Z 	at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84)
2021-12-03T14:36:53.9123921Z 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
2021-12-03T14:36:53.9127689Z 	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
2021-12-03T14:36:53.9132916Z 	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
2021-12-03T14:36:53.9137072Z 	at org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock$1.evaluate(BackendMock.java:53)
2021-12-03T14:36:53.9140437Z 	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
2021-12-03T14:36:53.9142718Z 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
2021-12-03T14:36:53.9145125Z 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
2021-12-03T14:36:53.9148577Z 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
2021-12-03T14:36:53.9150887Z 	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
2021-12-03T14:36:53.9152059Z 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
2021-12-03T14:36:53.9153648Z 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
2021-12-03T14:36:53.9155100Z 	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
2021-12-03T14:36:53.9156386Z 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
2021-12-03T14:36:53.9159673Z 	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
2021-12-03T14:36:53.9164617Z 	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
2021-12-03T14:36:53.9167722Z 	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
2021-12-03T14:36:53.9169047Z 	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
2021-12-03T14:36:53.9171410Z 	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
2021-12-03T14:36:53.9173790Z 	at org.junit.runners.Suite.runChild(Suite.java:128)
2021-12-03T14:36:53.9174883Z 	at org.junit.runners.Suite.runChild(Suite.java:27)
2021-12-03T14:36:53.9176111Z 	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
2021-12-03T14:36:53.9177273Z 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
2021-12-03T14:36:53.9178657Z 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
2021-12-03T14:36:53.9180109Z 	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
2021-12-03T14:36:53.9181397Z 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
2021-12-03T14:36:53.9182702Z 	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
2021-12-03T14:36:53.9183935Z 	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
2021-12-03T14:36:53.9185426Z 	at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)
2021-12-03T14:36:53.9187946Z 	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)
2021-12-03T14:36:53.9296040Z 	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)
2021-12-03T14:36:53.9298806Z 	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)
2021-12-03T14:36:53.9301323Z 	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)
2021-12-03T14:36:53.9303817Z 	at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:157)
2021-12-03T14:36:53.9344758Z 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
2021-12-03T14:36:53.9347158Z 	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
2021-12-03T14:36:53.9349368Z 	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
2021-12-03T14:36:53.9351360Z 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
2021-12-03T14:36:53.9354365Z Caused by: javax.transaction.RollbackException: One or more resources refused to commit (possibly because of a timeout in the resource - see the log for details). This transaction has been rolled back instead.
2021-12-03T14:36:53.9357147Z 	at com.atomikos.icatch.jta.TransactionImp.rethrowAsJtaRollbackException(TransactionImp.java:48)
2021-12-03T14:36:53.9359643Z 	at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:188)
2021-12-03T14:36:53.9361739Z 	at com.atomikos.icatch.jta.TransactionManagerImp.commit(TransactionManagerImp.java:414)
2021-12-03T14:36:53.9364144Z 	at com.atomikos.icatch.jta.UserTransactionManager.commit(UserTransactionManager.java:159)
2021-12-03T14:36:53.9367010Z 	at org.springframework.transaction.jta.JtaTransactionManager.doCommit(JtaTransactionManager.java:1035)
2021-12-03T14:36:53.9368844Z 	... 57 more
2021-12-03T14:36:53.9370600Z Caused by: com.atomikos.icatch.RollbackException: One or more resources refused to commit (possibly because of a timeout in the resource - see the log for details). This transaction has been rolled back instead.
2021-12-03T14:36:53.9373067Z 	at com.atomikos.icatch.imp.ActiveStateHandler.prepare(ActiveStateHandler.java:202)
2021-12-03T14:36:53.9375405Z 	at com.atomikos.icatch.imp.CoordinatorImp.prepare(CoordinatorImp.java:523)
2021-12-03T14:36:53.9377305Z 	at com.atomikos.icatch.imp.CoordinatorImp.terminate(CoordinatorImp.java:687)
2021-12-03T14:36:53.9379544Z 	at com.atomikos.icatch.imp.CompositeTransactionImp.commit(CompositeTransactionImp.java:282)
2021-12-03T14:36:53.9381699Z 	at com.atomikos.icatch.jta.TransactionImp.commit(TransactionImp.java:172)
2021-12-03T14:36:53.9382790Z 	... 60 more
2021-12-03T14:36:53.9383056Z 
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T05:56:10.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usn:zzr,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Remove mentions of hibernate.search.coordination.event_processor.shards.static from the documentation,HSEARCH-4389,71657,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/déc./2021 05:18 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,03/janv./2022 02:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,documentation,,,,0,,,,,,This property no longer exists and is no longer useful.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2022-01-03T02:22:58.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2791,0|104vme:,,,,,,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Initialisation of the HibernatePersistenceProvider fails when using Open Liberty and Hibernate >=5.5,HHH-14953,71656,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Michael Blank,61a9d00efe9f300068c99e8b,Michael Blank,61a9d00efe9f300068c99e8b,03/déc./2021 01:35 AM,03/déc./2021 01:35 AM,14/mars/2022 12:54 PM,,5.5.0,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When adding the annotation @GeneratedValue to an entity using the generationType sequence, Hibernate initialisation fails with an exception. This problem occurs with all versions of hibernate >= 5.5.

javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory
Caused by: org.hibernate.MappingException: Could not instantiate id generator [entity-name=com.example.demo.HelloEntity]
Caused by: java.lang.IllegalStateException: org.hibernate.resource.beans.container.internal.NotYetReadyException: CDI BeanManager not (yet) ready to use
Caused by: java.lang.IllegalStateException: java.lang.UnsupportedOperationException: No current bean manager found in CDI service

To reproduce, proceed as follows
Download Open Liberty
Add hibernate as persistence provider as described in https://openliberty.io/docs/21.0.0.12/reference/feature/jpaContainer-2.1.html
Add an application using the hibernate library
Add an entity with a @GeneratedValue and generationType sequence
Deploy the application

 [^liberty_ffdc_1.log]  [^liberty_ffdc_2.log]  [^demo-1.0-SNAPSHOT.war]  [^server.xml]  [^source.zip] ","Hibernate 5.6.0, Open Liberty 21.0.0.12 full javaee-8, Java 11, Postgresql Driver 42.2.14",,,,,,,,,,,,,,,,,,,,,,,,,,,,03/déc./2021 01:31 AM;ug:482ea423-ca8e-4d25-b243-500c46af76ec;demo-1.0-SNAPSHOT.war;https://hibernate.atlassian.net/secure/attachment/49943/demo-1.0-SNAPSHOT.war,03/déc./2021 01:31 AM;ug:482ea423-ca8e-4d25-b243-500c46af76ec;liberty_ffdc_1.log;https://hibernate.atlassian.net/secure/attachment/49945/liberty_ffdc_1.log,03/déc./2021 01:31 AM;ug:482ea423-ca8e-4d25-b243-500c46af76ec;liberty_ffdc_2.log;https://hibernate.atlassian.net/secure/attachment/49944/liberty_ffdc_2.log,03/déc./2021 01:32 AM;ug:482ea423-ca8e-4d25-b243-500c46af76ec;server.xml;https://hibernate.atlassian.net/secure/attachment/49942/server.xml,03/déc./2021 01:33 AM;ug:482ea423-ca8e-4d25-b243-500c46af76ec;source.zip;https://hibernate.atlassian.net/secure/attachment/49941/source.zip,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,5.0,ug:482ea423-ca8e-4d25-b243-500c46af76ec(ug:482ea423-ca8e-4d25-b243-500c46af76ec),,,,,,,,,0|104wl4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,,,,,,,,,A faire,,
Stop all containers before starting builds,HSEARCH-4388,71654,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/déc./2021 00:36 AM,03/déc./2021 05:10 AM,14/mars/2022 12:54 PM,03/déc./2021 00:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta1,,,,,,,,,,,,0,,,,,,"To avoid failures such as [this one|https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/main/188/pipeline]:

{noformat}
[INFO] DOCKER> [elasticsearch:7.10.1] ""elasticsearch"": Start container b3d8d022e7a2
[ERROR] DOCKER> Error occurred during container startup, shutting down...
[ERROR] DOCKER> I/O Error [Unable to start container id [b3d8d022e7a2] : {""message"":""driver failed programming external connectivity on endpoint elasticsearch-2 (61c0a69bb8cc5d036c4f2258ccd4ebdcb3a7ac1aafec48f31a7c617224da3e69): Bind for 0.0.0.0:9200 failed: port is already allocated""} (Internal Server Error: 500)]
{noformat}

I suspect it's caused by failing (or cancelled) builds that don't stop containers correctly. So, let's stop all containers before each build, and in a finally clause after each build.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-03T00:44:38.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usn:zzi,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add @EmbeddableRepresentationStrategy,HHH-14951,71652,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,02/déc./2021 11:18 AM,27/janv./2022 06:57 AM,14/mars/2022 12:54 PM,27/janv./2022 06:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"One of the solutions to custom composite types would be the ability to integrate a custom `EmbeddableRepresentationStrategy` impl.  We already define this contract to encapsulate the distinction between mapping a POJO versus mapping a dynamic-map.  We could just allow the integration of the EmbeddableRepresentationStrategy impl to use.



EmbeddableRepresentationStrategy specifically controls the following aspects:

# {{EmbeddableInstantior}} to use
# {{ReflectionOptimizer}}, if one, to use
# {{PropertyAccess}} determination for each of the attributes",,,,,,,,,,,,,,,,,,HHH-14885,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-02T12:04:12.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wko:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support mapping of embeddables with no setters (assuming a custom instantiator or repo-strategy is used),HHH-14950,71651,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,02/déc./2021 10:46 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,Support mapping of embeddables with no setters (assuming a custom instantiator or repo-strategy is used),,,,,,,,,,,,,,,,,,HHH-14885,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-18T03:16:12.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wkg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support @Access on @ElementCollection (for embeddable elements),HHH-14949,71650,,Amélioration,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,02/déc./2021 08:29 AM,04/déc./2021 05:39 AM,14/mars/2022 12:54 PM,03/déc./2021 19:47 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,,,,,0,,,,,,Support @Access on @ElementCollection (for embeddable elements),,,,,,,,,,,,,,,,,,HHH-14885,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-03T13:31:49.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wk8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Address compilation warnings, in particular unchecked type conversions",HSEARCH-4387,71648,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/déc./2021 02:57 AM,03/déc./2021 05:10 AM,14/mars/2022 12:54 PM,03/déc./2021 00:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,build,,,,0,,,,,,Extracting this from HSEARCH-4378 because it's starting to be a lot of work.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=7, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":7,""lastUpdated"":""2021-12-03T03:01:43.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":7,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2769,0|104usn:zz,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Metamodel imports cache increases indefinitely for dynamically generated HQL aliases eventually leading to an OOM,HHH-14948,71647,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Ivaylo Mitrev,557058:927bb080-5c30-4c06-a121-c4cb61747b5e,Ivaylo Mitrev,557058:927bb080-5c30-4c06-a121-c4cb61747b5e,Ivaylo Mitrev,557058:927bb080-5c30-4c06-a121-c4cb61747b5e,02/déc./2021 02:23 AM,01/mars/2022 10:04 AM,14/mars/2022 12:54 PM,13/déc./2021 13:32 PM,5.2.17,5.2.18,5.3.0.Final,5.3.1,5.3.10,5.3.11,5.3.12,5.3.13,5.3.14,5.3.15,5.3.16,5.3.17,5.3.18,5.3.19,5.3.2,5.3.20,5.3.21,5.3.22,5.3.23,5.3.24,5.3.3,5.3.4,5.3.5,5.3.6,5.3.7,5.3.8,5.3.9,5.4.0,5.4.1,5.4.10,5.4.11,5.4.12,5.4.13,5.4.14,5.4.15,5.4.16,5.4.17,5.4.18,5.4.19,5.4.2,5.4.20,5.4.21,5.4.22,5.4.23,5.4.24,5.4.25,5.4.26,5.4.27,5.4.27.SP1,5.4.28,5.4.29,5.4.3,5.4.30,5.4.31,5.4.32,5.4.4,5.4.5,5.4.6,5.4.7,5.4.8,5.4.9,5.5.0,5.5.2,5.5.3,5.5.4,5.5.5,5.5.6,5.5.7,5.5.8,5.6.0,5.6.1,5.6.3,6.0.0.Beta3,,,,,,,,hibernate-core,,,,1,,,,,,"[HHH-12485] caches failed imports (with an empty string instance) in {{MetamodelImpl}} with the intention of avoiding exceptions every time an unknown class name reaches {{MetamodelImpl#getImportedClassName}}.

My experience with Hibernate, however, shows that the target entity being joined with is also sent to said method. 

For example, in the following HQL query:

{noformat}from Entity as e join e.relatedEntity as related{noformat}

{{e.relatedEntity}} will be passed to {{getImportedClass}} as {{process}} will evaluate to true (e is a valid Java identifier and the surrounding tokens also pass the validation). That’s probably not an issue for hard-coded queries for which the join target will always remain {{e.relatedEntity}} and which would lead to adding just this one additional {{e.relatedEntity --> ””}} node to the map.

The problem for us, however, is that our application dynamically generates random aliases in HQL queries (due to these queries being dynamically built). Such dynamically generated entity aliases end up being added to the imports map with an empty string value. As a result, the {{imports}} map in {{MetamodelImpl}} constantly grows, eventually leading to an OOM for our applications as this isn't session-specific cache and as I have not been able to find any way of clearing the failed imports.

I could not find any information in the documentation stating that our approach with dynamic aliases is incorrect and decided to raise a ticket considering the severity of the issue for us. I would assume that either failed imports need not be cached after all (for memory reasons) or this method need not be invoked for them.

PR: [https://github.com/hibernate/hibernate-orm/pull/4411|https://github.com/hibernate/hibernate-orm/pull/4411|smart-link] ","Tested on Hibernate: 5.4.25.Final, 5.6.1.Final
Java:
```
OpenJDK Runtime Environment (build 1.8.0_292-8u292-b10-0ubuntu1~18.04-b10)
OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)
```",,,,,,,,,,,,HHH-15100,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-13T13:30:47.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:279a92ab-0da2-41cd-b8f8-9c783d05cc2f(ug:279a92ab-0da2-41cd-b8f8-9c783d05cc2f),sanne(sanne),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4411,0|104wjs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.2.16,2021-12-08 22:50:15.258,Backport?,,,"02/déc./2021 02:28 AM;557058:927bb080-5c30-4c06-a121-c4cb61747b5e;I have not provided a test case since this is a memory-related issue. The only thing a test case might showcase is the ever-growing nature of MetamodelImpl#imports, but I am not sure if that would be useful. Regardless, please let me know if I should provide one.","02/déc./2021 08:38 AM;557058:927bb080-5c30-4c06-a121-c4cb61747b5e;I’ve added a test case and a suggested fix as part of this PR: [https://github.com/hibernate/hibernate-orm/pull/4411|https://github.com/hibernate/hibernate-orm/pull/4411|smart-link] .

The test case fails without the fix and illustrates the problem (the map can grow indefinitely).","08/déc./2021 14:50 PM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Thanks for reporting this, I agree it’s important to fix. I’ll have a look at your PR.",09/déc./2021 01:03 AM;557058:927bb080-5c30-4c06-a121-c4cb61747b5e;Thank you\! I’ve now also submitted the requested changes in the PR.,,,,,,,,,,,,,Terminé,,
"""No readable property named"" if it uses a dynamic property in a embedded entity. ",HSEARCH-4386,71645,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Waldemar Klaczyński,608c01da5797db0069b9f5f7,Waldemar Klaczyński,608c01da5797db0069b9f5f7,02/déc./2021 00:43 AM,06/déc./2021 05:05 AM,14/mars/2022 12:54 PM,06/déc./2021 05:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"""No readable property named"" if it uses a dynamic property in a embedded entity. 


{code:java}
@Embeddable
@SuppressWarnings(""ConsistentAccessType"")
public class LegalDepositRequstAuthorEntity implements Serializable {

    @Column(name = ""first_name"")
    @FullTextField
    @KeywordField(
            name = ""firstName_sort"",
            normalizer = PublisherAnalyzers.NORMALIZER_SORT,
            sortable = Sortable.YES
    )
    private String firstName;

    @Column(name = ""familly_name"")
    @FullTextField
    @KeywordField(
            name = ""familyName_sort"",
            normalizer = PublisherAnalyzers.NORMALIZER_SORT,
            sortable = Sortable.YES
    )
    private String familyName;

    @Enumerated(EnumType.STRING)
    @Column(name = ""role_type"")
    private LegalDepositAuthorRole role;

    @Transient
    @FullTextField(name = ""fullName"")
    @KeywordField(
            name = ""fullName_sort"",
            normalizer = PublisherAnalyzers.NORMALIZER_SORT,
            sortable = Sortable.YES
    )
    @IndexingDependency(derivedFrom = @ObjectPath( value = {
            @PropertyValue(propertyName = ""firstName""),
            @PropertyValue(propertyName = ""familyName"")
    }))
    public String getFullName() {
        return firstName + "" "" + familyName;
    }
    
}


public class LegalDepositRequstEntity extends AuditingEntity<LegalDepositRequstEntity> {

    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(
            name = ""legal_deposit_request_author"",
            joinColumns = @JoinColumn(name = ""legal_deposit_request_id"")
    )
    private List<LegalDepositRequstAuthorEntity> authors;

    @Transient
    @IndexedEmbedded(name = ""author"")
    @IndexingDependency(derivedFrom = @ObjectPath(
            @PropertyValue(propertyName = ""authors"")
    ))
    public LegalDepositRequstAuthorEntity getAuthor() {
        if (Objects.isNull(authors) || authors.isEmpty()) {
            return null;
        }
        LegalDepositRequstAuthorEntity result = authors.stream()
                .filter(author -> author.getRole() == LegalDepositAuthorRole.AUTHOR)
                .findAny().orElse(null);
        return result;
    }
}
{code}

Then there is an exception: 


{noformat}
    Hibernate ORM mapping: 
        type 'pl.org.bn.rcbn.pdw.publisher.repository.deposit.cmp.LegalDepositRequstEntity': 
            path '.author<no value extractors>.fullName<no value extractors>': 
                failures: 
                  - HSEARCH700078: No readable property named 'familyName' on type 'java.lang.String'.
....
    Hibernate ORM mapping: 
        type 'pl.org.bn.rcbn.pdw.publisher.repository.deposit.cmp.LegalDepositRequstEntity': 
            path '.author<no value extractors>.fullName<no value extractors>': 
                failures: 
                  - HSEARCH700078: No readable property named 'familyName' on type 'java.lang.String'.
.....

{noformat}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3a8486e3-ef03-4f5f-a26e-2259fcf593d9(ug:3a8486e3-ef03-4f5f-a26e-2259fcf593d9),yrodiere(fenrhil),,,,,,,,0|104wjc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-02 08:51:33.035,,,,"02/déc./2021 00:46 AM;608c01da5797db0069b9f5f7;It looks as if it is not looking for dependencies in the nested entity, but in the parent entity.",02/déc./2021 00:51 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:608c01da5797db0069b9f5f7] Thanks for the report. Which version are you using? The latest from the {{main}} branch? {{6.1.0.Alpha1}}? {{6.0.something}}?,"02/déc./2021 00:56 AM;608c01da5797db0069b9f5f7;{{I am using version ""6.1.0.Alpha1""}}","06/déc./2021 05:05 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I tried to fix this today, but I noticed the problem is actually caused by a mistake in the mapping.

This:

{code}
    @IndexingDependency(derivedFrom = @ObjectPath( value = {
            @PropertyValue(propertyName = ""firstName""),
            @PropertyValue(propertyName = ""familyName"")
    }))
{code}

Means ""derived from path 'firstName.familyName'"".

What you meant was probably ""derived from paths 'firstName' and 'familyName'"", which should be expressed like this:

{code}
    @IndexingDependency(derivedFrom = {
            @ObjectPath(@PropertyValue(propertyName = ""firstName"")),
            @ObjectPath(@PropertyValue(propertyName = ""familyName""))
    })
{code}

I'll grant you the difference is subtle and the syntax confusing, though. I've created HSEARCH-4392 to try to come up with better annotations in some future version.",,,,,,,,,,,,,Terminé,,
Test that annotations on interfaces are correctly detected even when no implementation is known by HSearch,HSEARCH-4385,71644,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/déc./2021 00:28 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:09 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"E.g.

{code}
    public interface AbstractInterface {
        @GenericField
        String getText();
    }

    @Indexed
    public static class IndexedEntity {
        @DocumentId
        public Integer id;
        @IndexedEmbedded
        public AbstractInterface embedded;

        public IndexedEntity(Integer id, AbstractInterface embedded) {
            this.id = id;
            this.embedded = embedded;
        }
    }
{code}

See also https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/6.20-.20HCANN",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-02T03:09:31.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2768,0|104usn:zy,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Certain configuration options should treat null and empty string as equivalent but do not,HHH-14947,71643,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,01/déc./2021 13:24 PM,01/déc./2021 13:36 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"The following configuration items should allow {{null}} and empty-string values to be treated as not-provided equivalents.  Currently with the way the code in Envers is written, this isn’t the case and they’re treated differently and shouldn’t be.

# {{org.hibernate.envers.revision_listener}}
# {{org.hibernate.envers.modified_column_naming_strategy}}
# {{org.hibernate.envers.audit_strategy}}
# {{org.hibernate.envers.original_id_prop_name}}
# {{org.hibernate.envers.revision_field_name}}
# {{org.hibernate.envers.revision_type_field_name}}
# {{org.hibernate.envers.audit_strategy_validity_end_rev_field_name}}
# {{org.hibernate.envers.audit_strategy_validity_revend_timestamp_field_name}}
# {{org.hibernate.envers.embeddable_set_ordinal_field_name}}

Other configurations listed below should not be treated as equals as {{null}} should be treated as use the default and an empty-string is meant to indicate that Envers should use the empty-string value; in such as cases as where a user doesn’t want an audit-table suffix in the event that they are storing the audit tables in a separate catalog/schema from that of the original tables.

# {{org.hibernate.envers.default_schema}}
# {{org.hibernate.envers.default_catalog}}
# {{org.hibernate.envers.modified_flag_suffix}}
# {{org.hibernate.envers.audit_table_prefix}}
# {{org.hibernate.envers.audit_table_suffix}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,crancran(crancran),,,,,,,,,0|104wj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Require JDK 11,HHH-14946,71642,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,01/déc./2021 06:53 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,01/déc./2021 09:34 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"As decided on:
 - https://github.com/hibernate/hibernate-orm/discussions/4286",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-12-01T07:10:06.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104wiw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.15.2,HSEARCH-4384,71641,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 05:19 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-11-30T18:26:46.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:zx,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to GSON 2.8.9,HSEARCH-4383,71640,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 05:06 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-01T06:42:39.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:zv,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Regression 5.4->5.5: Subquery with exists and composite primary key generates invalid SQL,HHH-14945,71639,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Stefan Seidel,607015002b469c007064233b,Stefan Seidel,607015002b469c007064233b,01/déc./2021 05:06 AM,01/déc./2021 05:06 AM,14/mars/2022 12:54 PM,,5.5.0,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,,,"When updating Spring Boot from 2.5.6 to 2.6.1, I noticed this regression, which was introduced between Hibernate 5.4.32 and 5.5.0:
I have created a sample project here: [https://github.com/s-seidel/hibernate-test-case-templates/commit/5cfab04a63fe0f80a48836fe989cbf1f57495712|https://github.com/s-seidel/hibernate-test-case-templates/commit/5cfab04a63fe0f80a48836fe989cbf1f57495712]

In 5.4.32, the query is as follows:

{code:sql}select
        demoparent0_.id as id1_1_ 
    from
        DemoParent demoparent0_ 
    where
        exists (
            select
                demochild1_.date,
                demochild1_.parent 
            from
                DemoChild demochild1_ 
            where
                demochild1_.date is null
        ){code}

Starting with 5.5.0, the query is

{code:sql}select
        demoparent0_.id as id1_1_ 
    from
        DemoParent demoparent0_ 
    where
        exists (
            select
                (demochild1_.date,
                demochild1_.parent) 
            from
                DemoChild demochild1_ 
            where
                demochild1_.date is null
        ){code}

Note the additional parentheses around the fields of the subquery: {{(demochild1_.date,demochild1_.parent)}}. While H2 doesn't complain, MS SQL Server does. I also think it's not valid in standard SQL","Spring Boot, MS SQL Server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3f8f3e26-1ceb-433d-9cd9-9075ad8ca37b(ug:3f8f3e26-1ceb-433d-9cd9-9075ad8ca37b),,,,,,,,,0|104wio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to AWS SDK 2.17.94 ,HSEARCH-4382,71638,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 05:04 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-01T23:33:16.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:zr,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Avro 1.11,HSEARCH-4381,71637,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 05:03 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T09:08:55.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:zi,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to maven-assembly-plugin 3.3+,HSEARCH-4380,71636,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 04:46 AM,01/déc./2021 04:52 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,build,,,,0,,,,,,"I tried to upgrade as part of [https://hibernate.atlassian.net/browse/HSEARCH-4378|https://hibernate.atlassian.net/browse/HSEARCH-4378|smart-link], but this is hard.

3.3+ doesn’t behave like 3.1 at all for moduleSets, as far as I can tell, and dependencySets somehow include completely unrelated dependencies (e.g. the dependencySet for backend-elasticsearch includes the AWS SDK and dependencies).

You can find my attempt at upgrading here: [https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4380|https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4380|smart-link]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.6.1.Final,HSEARCH-4379,71635,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/déc./2021 01:56 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-01T05:17:55.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:z,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Detaching entity removes NaturalIdCrossReference in 2nd-level cache too,HHH-14944,71634,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Guenther Demetz,557058:33f24af4-56d5-43a8-aaa0-cbad6a2aaecd,Guenther Demetz,557058:33f24af4-56d5-43a8-aaa0-cbad6a2aaecd,01/déc./2021 01:24 AM,02/déc./2021 00:37 AM,14/mars/2022 12:54 PM,,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,@NaturalIdCache,cache,natural-id,,,"According JPA Specification the method detach
removes the given entity from the persistence context, causing a managed entity to become detached.
While it might be questionable if detach should also remove the according NaturalIdCrossReference in the persistent context (session.clear does not for instance), for sure it should NOT remove the according NaturalIdCrossReference in the second level cache too.

Pull-Request containing testcase will follow soon...","Hiberante ORM 5.6.0, Java11, Windows, SqlServer",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-01T01:56:59.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,pb00067(pb00067),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4406,0|104wi8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.13,,,,,,,,,,,,,,,,,,,,,A faire,,
Regression: byNaturalId API creates unparseable query (AND keyword instead of WHERE),HHH-14943,71631,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Guenther Demetz,557058:33f24af4-56d5-43a8-aaa0-cbad6a2aaecd,Guenther Demetz,557058:33f24af4-56d5-43a8-aaa0-cbad6a2aaecd,30/nov./2021 06:54 AM,02/déc./2021 00:35 AM,14/mars/2022 12:54 PM,,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,natural-id,null,,,,"When calling NaturalId API using null value(s)

i.e. session.byNaturalId(MyClass.class).using(""myField"", null).load();

and the call is forwarded to the database, then an unparseable query get build:
org.hibernate.exception.SQLGrammarException: could not prepare statement

select
        naturalido0_.id as id1_1_0_,
        naturalido0_.citizen_id as citizen_2_1_0_ 
    from
        NaturalIdOnManyToOne naturalido0_ 
        and naturalido0_.citizen_id is null

In essence there's an 'and' where a 'where' should stay,","Hibernate 5.6.0, Java11, Windows, SqlServer",,,28800,28800,,0 %,28800,28800,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T07:10:16.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,pb00067(pb00067),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4403,0|104whk:,,,Affirmative,,,,,,,,,,,,,,,,,,,,,,,,,5.4.13,,,,,30/nov./2021 07:02 AM;557058:33f24af4-56d5-43a8-aaa0-cbad6a2aaecd;Added pull-request containing test-case [#4403|https://github.com/hibernate/hibernate-orm/pull/4403],,,,,,,,,,,,,,,,A faire,,
Upgrade build dependencies to the latest version,HSEARCH-4378,71630,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/nov./2021 06:17 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/déc./2021 03:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-02T07:50:13.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2766,0|104usn:y,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Enable GitHub's Dependabot,HSEARCH-4377,71629,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/nov./2021 05:59 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,01/déc./2021 05:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-12-01T23:40:37.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2720,0|104usn:x,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Document Elasticsearch normalizing regexps as a bug,HSEARCH-4376,71628,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/nov./2021 04:28 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,30/nov./2021 08:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,documentation,,,0,,,,,,"See HSEARCH-4171
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T08:15:28.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2719,0|104usn:v,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Mark the outbox-polling coordination strategy as incubating in the documentation,HSEARCH-4375,71625,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/nov./2021 06:24 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,30/nov./2021 07:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T07:22:57.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2714,0|104usl:4,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Make outbox-polling ITs shorter, in particular automatic indexing ITs",HSEARCH-4374,71624,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/nov./2021 00:48 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,29/nov./2021 06:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-29T06:09:32.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2712,0|104us4:,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Make audit_strategy_validity_revend_timestamp_legacy_placement false by default,HHH-14941,71620,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,27/nov./2021 01:32 AM,27/nov./2021 01:33 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"In Envers 6.0, a new option was introduced in HHH-9062 to support applying the {{REVEND_TSTMP}} value at both the root entity audit table as well as the joined subclass audited tables.  This new option wasn't enabled by default and requires that users opt-in.

Once the option {{audit_strategy_validity_revend_timestamp_legacy_placement}} has matured, it would be useful to use the new placement model rather than defaulting to the legacy placement mapping model.",,,,,,,,,,,,,,,,,,,HHH-9062,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,crancran(crancran),,,,,,,,,0|104wg8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Verify that all the test instances run from OutboxPollingAutomaticIndexingBaseIT always use the outbox polling as automatic indexing strategy.,HSEARCH-4373,71619,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,27/nov./2021 00:54 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,29/nov./2021 02:50 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,tests,,,,0,,,,,,"Doing some changes which break the schema, I noticed that only few tests run from OutboxPollingAutomaticIndexingBaseIT actually use the outbox polling automatic indexing strategy.
While the purpose of these tests I think it is run all instances with this strategy. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-29T02:40:30.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2711,0|104us3:,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Unidirectional one-to-many associations annotated with @OnDelete must define @JoinColumn not working with CompositeKey (JoinColumns),HHH-14940,71618,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Daniel Germain,5adcc130fad8eb2e0df67350,Daniel Germain,5adcc130fad8eb2e0df67350,26/nov./2021 09:19 AM,26/nov./2021 09:38 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I have been looking at generating a FK constraint with cascade on delete but 
I think I found a bug with Hibernate @OnDelete(action = OnDeleteAction.CASCADE)
[https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java#L545-L552|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java#L545-L552]

Let say I have this

{code:java}@EmbeddedId
private CompositeKey pk;

@OneToMany(cascade = CascadeType.ALL, orphanRemoval=true)
private List<Child> childs;{code}

If I add the following to get FK constraint with cascade delete

{code:java}@OnDelete(action = OnDeleteAction.CASCADE){code}

I get the following error:

{noformat}org.hibernate.AnnotationException: Unidirectional one-to-many associations annotated with @OnDelete must define @JoinColumn{noformat}

If I try to add the following, I also get an error because using composite key with 2 columns

{code:java}@JoinColumn(name = ""id"", referencedColumnName=""id""){code}

I get the following error

{noformat}org.hibernate.AnnotationException: Unable to map collection xxx
Caused by: org.hibernate.AnnotationException: referencedColumnNames(xxx) of xxx referencing xxx not mapped to a single property{noformat}

If I try to add two @JoinColumn (because repeatable since JDK8) or if I try to add @JoinColumns

{noformat}@JoinColumns({
  @JoinColumn(name = ""xx"", referencedColumnName=""xx""),
  @JoinColumn(name = ""xx"", referencedColumnName=""xx"")
}){noformat}

I will get back the following error

{noformat}org.hibernate.AnnotationException: Unidirectional one-to-many associations annotated with @OnDelete must define @JoinColumn{noformat}

I believe the issue with with the following code which is not checking for JoinColumns which is needed for composite key (two JoinColumn get converted to JoinColumns)

[https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java#L545-L552|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java#L545-L552|smart-link] 

{noformat}if (!isMappedBy
    && oneToMany&& property.isAnnotationPresent( OnDelete.class )
    && !property.isAnnotationPresent( JoinColumn.class )) {
      String message = ""Unidirectional one-to-many associations annotated with @OnDelete must define @JoinColumn: "";
      message += StringHelper.qualify( propertyHolder.getPath(), propertyName );
      throw new AnnotationException( message );
      }{noformat}

Let me know if you agree",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:01da767a-8cf0-4826-a250-c3eb3eaa6cd3(ug:01da767a-8cf0-4826-a250-c3eb3eaa6cd3),,,,,,,,,0|104wfs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Simplify sharding configuration and move it to hibernate.search.coordination.event_processor.* properties,HSEARCH-4372,71615,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/nov./2021 01:03 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,30/nov./2021 09:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"After HSEARCH-4358, sharding only impacts the event processor. It doesn't affect event generation, and it doesn't affect other agents such as the mass indexer agent.

With that in mind, this seems untidy:

{noformat}
hibernate.search.coordination.strategy = outbox-polling
hibernate.search.coordination.shards.static = true
hibernate.search.coordination.shards.total_count = 3
hibernate.search.coordination.shards.assigned = 0
hibernate.search.coordination.event_processor.batch_size = 50
{noformat}

This would be more in line with how sharding actually works:

{noformat}
hibernate.search.coordination.strategy = outbox-polling
hibernate.search.coordination.event_processor.shards.static = true
hibernate.search.coordination.event_processor.shards.total_count = 3
hibernate.search.coordination.event_processor.shards.assigned = 0
hibernate.search.coordination.event_processor.batch_size = 50
{noformat}

And thinking about it, this would actually be even better:

{noformat}
hibernate.search.coordination.strategy = outbox-polling
hibernate.search.coordination.event_processor.shards.total_count = 3
hibernate.search.coordination.event_processor.shards.assigned = 0
hibernate.search.coordination.event_processor.batch_size = 50
{noformat}

We could infer that we are using static sharding from the presence of either ""shards.total_count"" or ""shards.assigned"", so that when one property is present, we mandate that the other is present as well. Then the configuration would be a little bit simpler.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T09:05:07.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2718,0|104usl:9,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Byteman 4.0.18,HSEARCH-4371,71614,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/nov./2021 23:50 PM,30/nov./2021 02:08 AM,14/mars/2022 12:54 PM,30/nov./2021 02:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.13.Final,5.11.11.Final,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-30T02:08:43.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2715,0|104usl:i,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@OneToOne Associations Fail on JoinColumns with Different Composite Key Classes,HHH-14939,71612,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Johnathan Radojevich,70121:54a56d18-5219-4600-9d56-9924d6037a95,Johnathan Radojevich,70121:54a56d18-5219-4600-9d56-9924d6037a95,25/nov./2021 14:18 PM,25/nov./2021 14:23 PM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,hibernate,,,,,"I'm currently working on a legacy codebase consisting of the following table structure and entities. Utilizing Hibernate 5.6.1. When attempting to retrieve a row from RETURN_DETAILS, I receive the following error. 

org.springframework.dao.InvalidDataAccessApiUsageException: Provided id of the wrong type for class com.example.demo.entites.RETURN_DETAILS2. Expected: class com.example.demo.entites.RETURN_DETAILS2_KEY, got class com.example.demo.entites.RETURN_DETAILS_KEY;

Even though the underlying data types of the join columns are the same, it appears that Hibernate is comparing the types of their container composite key classes, and using that as grounds for not joining. 

By changing this association to be one-to-many/many-to-one, the type mismatch issue no longer occurs. 

{code:sql}CREATE TABLE RETURN_DETAILS(
RETURN_NUMBER INT,
RETURN_SEQUENCE_NUMBER INT,
PRIMARY KEY (RETURN_NUMBER, RETURN_SEQUENCE_NUMBER));

CREATE TABLE RETURN_DETAILS2(
RETURN_NUM INT,
RETURN_SEQ_NUM INT,
PRIMARY KEY (RETURN_NUM, RETURN_SEQ_NUM));{code}

The entity for RETURN_DETAILS table is defined as:

{code:java}package com.example.demo.entites;

import javax.persistence.*;

@Entity
public class RETURN_DETAILS {

    @EmbeddedId
    RETURN_DETAILS_KEY id;

    @OneToOne
    @JoinColumns({
            @JoinColumn(name = ""RETURN_NUMBER"", referencedColumnName = ""RETURN_NUM""),
            @JoinColumn(name = ""RETURN_SEQUENCE_NUMBER"", referencedColumnName = ""RETURN_SEQ_NUM"")
    })
    RETURN_DETAILS2 return_details2;

    public RETURN_DETAILS_KEY getId() {
        return id;
    }

    public void setId(RETURN_DETAILS_KEY id) {
        this.id = id;
    }

    public RETURN_DETAILS2 getReturn_details2() {
        return return_details2;
    }

    public void setReturn_details2(RETURN_DETAILS2 return_details2) {
        this.return_details2 = return_details2;
    }
}

package com.example.demo.entites;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.io.Serializable;
import java.util.Objects;

@Embeddable
@SuppressWarnings(""JpaDataSourceORMInspection"")
public class RETURN_DETAILS_KEY implements Serializable {

    @Column(name = ""RETURN_NUMBER"")
    Integer returnNumber;

    @Column(name = ""RETURN_SEQUENCE_NUMBER"")
    Integer returnSequenceNumber;

    public RETURN_DETAILS_KEY() { }

    public RETURN_DETAILS_KEY(final Integer returnNumber, final Integer returnSequenceNumber) {
        this.returnNumber = returnNumber;
        this.returnSequenceNumber = returnSequenceNumber;
    }

    public Integer getReturnNumber() {
        return returnNumber;
    }

    public void setReturnNumber(Integer returnNumber) {
        this.returnNumber = returnNumber;
    }

    public Integer getReturnSequenceNumber() {
        return returnSequenceNumber;
    }

    public void setReturnSequenceNumber(Integer returnSequenceNumber) {
        this.returnSequenceNumber = returnSequenceNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        RETURN_DETAILS_KEY that = (RETURN_DETAILS_KEY) o;
        return returnNumber.equals(that.returnNumber) && returnSequenceNumber.equals(that.returnSequenceNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(returnNumber, returnSequenceNumber);
    }
}{code}

The entity for RETURN_DETAILS2 is defined as:

{code:java}package com.example.demo.entites;

import com.fasterxml.jackson.annotation.JsonManagedReference;

import javax.persistence.*;
import java.util.Set;

@Entity
public class RETURN_DETAILS2 {

    @EmbeddedId RETURN_DETAILS2_KEY id;

    @OneToOne(mappedBy = ""return_details2"")
    private RETURN_DETAILS return_details;

    public RETURN_DETAILS2_KEY getId() {
        return id;
    }

    public void setId(RETURN_DETAILS2_KEY id) {
        this.id = id;
    }

    public RETURN_DETAILS getReturn_details() {
        return return_details;
    }

    public void setReturn_details(RETURN_DETAILS return_details) {
        this.return_details = return_details;
    }
}

package com.example.demo.entites;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import java.io.Serializable;
import java.util.Objects;

@Embeddable
@SuppressWarnings(""JpaDataSourceORMInspection"")
public class RETURN_DETAILS2_KEY implements Serializable {

    @Column(name = ""RETURN_NUM"")
    Integer returnNumber;

    @Column(name = ""RETURN_SEQ_NUM"")
    Integer returnSequenceNumber;

    public RETURN_DETAILS2_KEY() { }

    public RETURN_DETAILS2_KEY(final Integer returnNumber, final Integer returnSequenceNumber) {
        this.returnNumber = returnNumber;
        this.returnSequenceNumber = returnSequenceNumber;
    }

    public Integer getReturnNumber() {
        return returnNumber;
    }

    public void setReturnNumber(Integer returnNumber) {
        this.returnNumber = returnNumber;
    }

    public Integer getReturnSequenceNumber() {
        return returnSequenceNumber;
    }

    public void setReturnSequenceNumber(Integer returnSequenceNumber) {
        this.returnSequenceNumber = returnSequenceNumber;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        RETURN_DETAILS2_KEY that = (RETURN_DETAILS2_KEY) o;
        return returnNumber.equals(that.returnNumber) && returnSequenceNumber.equals(that.returnSequenceNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(returnNumber, returnSequenceNumber);
    }
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:4bf3ca86-855e-427f-a01e-e70a1ada94eb(ug:4bf3ca86-855e-427f-a01e-e70a1ada94eb),,,,,,,,,0|104wew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Event processing triggers deadlock with Oracle database,HSEARCH-4370,71611,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/nov./2021 05:02 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,25/nov./2021 09:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"See https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/PR-2708/1/pipeline/85

{noformat}
[INFO] Running org.hibernate.search.integrationtest.mapper.orm.coordination.outboxpolling.automaticindexing.OutboxPollingAutomaticIndexingDynamicShardingRebalancingIT
11:09:26.943 Oracle Database:Thu Nov 25 11:09:26 2021
11:09:26.943 Oracle Database:Thread 1 advanced to log sequence 46 (LGWR switch)
11:09:26.943 Oracle Database:  Current log# 2 seq# 46 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:09:34.943 Oracle Database:Thread 1 advanced to log sequence 47 (LGWR switch)
11:09:34.944 Oracle Database:  Current log# 1 seq# 47 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:09:41.945 Oracle Database:Thu Nov 25 11:09:41 2021
11:09:41.945 Oracle Database:Thread 1 cannot allocate new log, sequence 48
11:09:41.945 Oracle Database:Checkpoint not complete
11:09:41.945 Oracle Database:  Current log# 1 seq# 47 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:09:41.945 Oracle Database:Thread 1 advanced to log sequence 48 (LGWR switch)
11:09:41.945 Oracle Database:  Current log# 2 seq# 48 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:09:48.946 Oracle Database:Thread 1 advanced to log sequence 49 (LGWR switch)
11:09:48.946 Oracle Database:  Current log# 1 seq# 49 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:10:27.950 Oracle Database:Thu Nov 25 11:10:27 2021
11:10:27.950 Oracle Database:Thread 1 advanced to log sequence 50 (LGWR switch)
11:10:27.950 Oracle Database:  Current log# 2 seq# 50 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:11:08.953 Oracle Database:Thu Nov 25 11:11:08 2021
11:11:08.954 Oracle Database:Thread 1 advanced to log sequence 51 (LGWR switch)
11:11:08.954 Oracle Database:  Current log# 1 seq# 51 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:11:53.958 Oracle Database:Thu Nov 25 11:11:53 2021
11:11:53.958 Oracle Database:Thread 1 advanced to log sequence 52 (LGWR switch)
11:11:53.958 Oracle Database:  Current log# 2 seq# 52 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:12:37.962 Oracle Database:Thu Nov 25 11:12:37 2021
11:12:37.963 Oracle Database:Thread 1 advanced to log sequence 53 (LGWR switch)
11:12:37.963 Oracle Database:  Current log# 1 seq# 53 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:13:22.967 Oracle Database:Thu Nov 25 11:13:22 2021
11:13:22.967 Oracle Database:Thread 1 advanced to log sequence 54 (LGWR switch)
11:13:22.967 Oracle Database:  Current log# 2 seq# 54 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:14:03.971 Oracle Database:Thu Nov 25 11:14:03 2021
11:14:03.971 Oracle Database:Thread 1 advanced to log sequence 55 (LGWR switch)
11:14:03.971 Oracle Database:  Current log# 1 seq# 55 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:14:48.975 Oracle Database:Thu Nov 25 11:14:48 2021
11:14:48.975 Oracle Database:Thread 1 advanced to log sequence 56 (LGWR switch)
11:14:48.975 Oracle Database:  Current log# 2 seq# 56 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:15:32.979 Oracle Database:Thu Nov 25 11:15:32 2021
11:15:32.979 Oracle Database:Thread 1 advanced to log sequence 57 (LGWR switch)
11:15:32.979 Oracle Database:  Current log# 1 seq# 57 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:16:17.983 Oracle Database:Thu Nov 25 11:16:17 2021
11:16:17.983 Oracle Database:Thread 1 advanced to log sequence 58 (LGWR switch)
11:16:17.983 Oracle Database:  Current log# 2 seq# 58 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:17:01.987 Oracle Database:Thu Nov 25 11:17:01 2021
11:17:01.987 Oracle Database:Thread 1 advanced to log sequence 59 (LGWR switch)
11:17:01.987 Oracle Database:  Current log# 1 seq# 59 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:17:46.992 Oracle Database:Thu Nov 25 11:17:46 2021
11:17:46.992 Oracle Database:Thread 1 advanced to log sequence 60 (LGWR switch)
11:17:46.992 Oracle Database:  Current log# 2 seq# 60 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:18:32.996 Oracle Database:Thu Nov 25 11:18:32 2021
11:18:32.996 Oracle Database:Thread 1 advanced to log sequence 61 (LGWR switch)
11:18:32.996 Oracle Database:  Current log# 1 seq# 61 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:19:18.000 Oracle Database:Thu Nov 25 11:19:17 2021
11:19:18.001 Oracle Database:Thread 1 advanced to log sequence 62 (LGWR switch)
11:19:18.001 Oracle Database:  Current log# 2 seq# 62 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:20:03.005 Oracle Database:Thu Nov 25 11:20:02 2021
11:20:03.005 Oracle Database:Thread 1 advanced to log sequence 63 (LGWR switch)
11:20:03.005 Oracle Database:  Current log# 1 seq# 63 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:20:48.009 Oracle Database:Thu Nov 25 11:20:47 2021
11:20:48.009 Oracle Database:Thread 1 advanced to log sequence 64 (LGWR switch)
11:20:48.009 Oracle Database:  Current log# 2 seq# 64 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:21:34.013 Oracle Database:Thu Nov 25 11:21:33 2021
11:21:34.013 Oracle Database:Thread 1 advanced to log sequence 65 (LGWR switch)
11:21:34.013 Oracle Database:  Current log# 1 seq# 65 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:22:19.017 Oracle Database:Thu Nov 25 11:22:18 2021
11:22:19.018 Oracle Database:Thread 1 advanced to log sequence 66 (LGWR switch)
11:22:19.018 Oracle Database:  Current log# 2 seq# 66 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:23:03.021 Oracle Database:Thu Nov 25 11:23:02 2021
11:23:03.022 Oracle Database:Thread 1 advanced to log sequence 67 (LGWR switch)
11:23:03.022 Oracle Database:  Current log# 1 seq# 67 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:23:21.023 Oracle Database:Thu Nov 25 11:23:21 2021
11:23:21.023 Oracle Database:Stopping background process CJQ0
11:23:48.026 Oracle Database:Thu Nov 25 11:23:47 2021
11:23:48.026 Oracle Database:Thread 1 advanced to log sequence 68 (LGWR switch)
11:23:48.026 Oracle Database:  Current log# 2 seq# 68 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:24:31.030 Oracle Database:Thu Nov 25 11:24:30 2021
11:24:31.030 Oracle Database:Thread 1 advanced to log sequence 69 (LGWR switch)
11:24:31.030 Oracle Database:  Current log# 1 seq# 69 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:25:12.034 Oracle Database:Thu Nov 25 11:25:11 2021
11:25:12.034 Oracle Database:Thread 1 advanced to log sequence 70 (LGWR switch)
11:25:12.034 Oracle Database:  Current log# 2 seq# 70 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:25:57.038 Oracle Database:Thu Nov 25 11:25:56 2021
11:25:57.039 Oracle Database:Thread 1 advanced to log sequence 71 (LGWR switch)
11:25:57.039 Oracle Database:  Current log# 1 seq# 71 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:26:42.043 Oracle Database:Thu Nov 25 11:26:41 2021
11:26:42.043 Oracle Database:Thread 1 advanced to log sequence 72 (LGWR switch)
11:26:42.043 Oracle Database:  Current log# 2 seq# 72 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:27:26.047 Oracle Database:Thu Nov 25 11:27:25 2021
11:27:26.047 Oracle Database:Thread 1 advanced to log sequence 73 (LGWR switch)
11:27:26.047 Oracle Database:  Current log# 1 seq# 73 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:28:12.051 Oracle Database:Thu Nov 25 11:28:11 2021
11:28:12.051 Oracle Database:Thread 1 advanced to log sequence 74 (LGWR switch)
11:28:12.051 Oracle Database:  Current log# 2 seq# 74 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:28:56.055 Oracle Database:Thu Nov 25 11:28:55 2021
11:28:56.055 Oracle Database:Thread 1 advanced to log sequence 75 (LGWR switch)
11:28:56.055 Oracle Database:  Current log# 1 seq# 75 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:29:41.059 Oracle Database:Thu Nov 25 11:29:40 2021
11:29:41.060 Oracle Database:Thread 1 advanced to log sequence 76 (LGWR switch)
11:29:41.060 Oracle Database:  Current log# 2 seq# 76 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:30:26.064 Oracle Database:Thu Nov 25 11:30:25 2021
11:30:26.064 Oracle Database:Thread 1 advanced to log sequence 77 (LGWR switch)
11:30:26.064 Oracle Database:  Current log# 1 seq# 77 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:31:07.068 Oracle Database:Thu Nov 25 11:31:06 2021
11:31:07.068 Oracle Database:Thread 1 advanced to log sequence 78 (LGWR switch)
11:31:07.068 Oracle Database:  Current log# 2 seq# 78 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:31:48.072 Oracle Database:Thu Nov 25 11:31:47 2021
11:31:48.072 Oracle Database:Thread 1 advanced to log sequence 79 (LGWR switch)
11:31:48.072 Oracle Database:  Current log# 1 seq# 79 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:32:29.076 Oracle Database:Thu Nov 25 11:32:28 2021
11:32:29.076 Oracle Database:Thread 1 advanced to log sequence 80 (LGWR switch)
11:32:29.076 Oracle Database:  Current log# 2 seq# 80 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:33:05.079 Oracle Database:Thu Nov 25 11:33:04 2021
11:33:05.080 Oracle Database:Thread 1 advanced to log sequence 81 (LGWR switch)
11:33:05.080 Oracle Database:  Current log# 1 seq# 81 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:33:46.083 Oracle Database:Thu Nov 25 11:33:45 2021
11:33:46.084 Oracle Database:Thread 1 advanced to log sequence 82 (LGWR switch)
11:33:46.084 Oracle Database:  Current log# 2 seq# 82 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:34:27.087 Oracle Database:Thu Nov 25 11:34:26 2021
11:34:27.087 Oracle Database:Thread 1 advanced to log sequence 83 (LGWR switch)
11:34:27.087 Oracle Database:  Current log# 1 seq# 83 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:35:07.091 Oracle Database:Thu Nov 25 11:35:06 2021
11:35:07.091 Oracle Database:Thread 1 advanced to log sequence 84 (LGWR switch)
11:35:07.091 Oracle Database:  Current log# 2 seq# 84 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:35:47.095 Oracle Database:Thu Nov 25 11:35:47 2021
11:35:47.095 Oracle Database:Thread 1 advanced to log sequence 85 (LGWR switch)
11:35:47.095 Oracle Database:  Current log# 1 seq# 85 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:36:28.098 Oracle Database:Thu Nov 25 11:36:27 2021
11:36:28.099 Oracle Database:Thread 1 advanced to log sequence 86 (LGWR switch)
11:36:28.099 Oracle Database:  Current log# 2 seq# 86 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:37:08.102 Oracle Database:Thu Nov 25 11:37:07 2021
11:37:08.103 Oracle Database:Thread 1 advanced to log sequence 87 (LGWR switch)
11:37:08.103 Oracle Database:  Current log# 1 seq# 87 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:37:48.106 Oracle Database:Thu Nov 25 11:37:47 2021
11:37:48.106 Oracle Database:Thread 1 advanced to log sequence 88 (LGWR switch)
11:37:48.106 Oracle Database:  Current log# 2 seq# 88 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:37:58.107 Oracle Database:Thread 1 cannot allocate new log, sequence 89
11:37:58.107 Oracle Database:Checkpoint not complete
11:37:58.107 Oracle Database:  Current log# 2 seq# 88 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:38:01.107 Oracle Database:Thu Nov 25 11:38:00 2021
11:38:01.107 Oracle Database:Thread 1 advanced to log sequence 89 (LGWR switch)
11:38:01.107 Oracle Database:  Current log# 1 seq# 89 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:38:01.107 Oracle Database:Thread 1 cannot allocate new log, sequence 90
11:38:01.107 Oracle Database:Checkpoint not complete
11:38:01.107 Oracle Database:  Current log# 1 seq# 89 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:38:04.107 Oracle Database:Thu Nov 25 11:38:03 2021
11:38:04.108 Oracle Database:ORA-00060: Deadlock detected. More info in file /u01/app/oracle/diag/rdbms/xe/XE/trace/XE_ora_331.trc.
11:38:04.108 Oracle Database:Thread 1 advanced to log sequence 90 (LGWR switch)
11:38:04.108 Oracle Database:  Current log# 2 seq# 90 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:38:04.108 Oracle Database:Thread 1 cannot allocate new log, sequence 91
11:38:04.108 Oracle Database:Checkpoint not complete
11:38:04.108 Oracle Database:  Current log# 2 seq# 90 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:38:07.108 Oracle Database:Thread 1 advanced to log sequence 91 (LGWR switch)
11:38:07.108 Oracle Database:  Current log# 1 seq# 91 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:38:28.110 Oracle Database:Thu Nov 25 11:38:27 2021
11:38:28.110 Oracle Database:Thread 1 advanced to log sequence 92 (LGWR switch)
11:38:28.110 Oracle Database:  Current log# 2 seq# 92 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:39:08.114 Oracle Database:Thu Nov 25 11:39:07 2021
11:39:08.114 Oracle Database:Thread 1 advanced to log sequence 93 (LGWR switch)
11:39:08.114 Oracle Database:  Current log# 1 seq# 93 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:39:48.118 Oracle Database:Thu Nov 25 11:39:47 2021
11:39:48.118 Oracle Database:Thread 1 advanced to log sequence 94 (LGWR switch)
11:39:48.118 Oracle Database:  Current log# 2 seq# 94 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:40:29.122 Oracle Database:Thu Nov 25 11:40:28 2021
11:40:29.122 Oracle Database:Thread 1 advanced to log sequence 95 (LGWR switch)
11:40:29.122 Oracle Database:  Current log# 1 seq# 95 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:41:09.125 Oracle Database:Thu Nov 25 11:41:08 2021
11:41:09.126 Oracle Database:Thread 1 advanced to log sequence 96 (LGWR switch)
11:41:09.126 Oracle Database:  Current log# 2 seq# 96 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:41:49.129 Oracle Database:Thu Nov 25 11:41:48 2021
11:41:49.130 Oracle Database:Thread 1 advanced to log sequence 97 (LGWR switch)
11:41:49.130 Oracle Database:  Current log# 1 seq# 97 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:42:30.133 Oracle Database:Thu Nov 25 11:42:29 2021
11:42:30.134 Oracle Database:Thread 1 advanced to log sequence 98 (LGWR switch)
11:42:30.134 Oracle Database:  Current log# 2 seq# 98 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:43:09.137 Oracle Database:Thu Nov 25 11:43:08 2021
11:43:09.138 Oracle Database:Thread 1 advanced to log sequence 99 (LGWR switch)
11:43:09.138 Oracle Database:  Current log# 1 seq# 99 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:43:50.141 Oracle Database:Thu Nov 25 11:43:49 2021
11:43:50.142 Oracle Database:Thread 1 advanced to log sequence 100 (LGWR switch)
11:43:50.142 Oracle Database:  Current log# 2 seq# 100 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:44:30.145 Oracle Database:Thu Nov 25 11:44:29 2021
11:44:30.145 Oracle Database:Thread 1 advanced to log sequence 101 (LGWR switch)
11:44:30.146 Oracle Database:  Current log# 1 seq# 101 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:45:10.149 Oracle Database:Thu Nov 25 11:45:09 2021
11:45:10.149 Oracle Database:Thread 1 advanced to log sequence 102 (LGWR switch)
11:45:10.149 Oracle Database:  Current log# 2 seq# 102 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:45:50.153 Oracle Database:Thu Nov 25 11:45:49 2021
11:45:50.153 Oracle Database:Thread 1 advanced to log sequence 103 (LGWR switch)
11:45:50.154 Oracle Database:  Current log# 1 seq# 103 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:46:31.157 Oracle Database:Thu Nov 25 11:46:30 2021
11:46:31.158 Oracle Database:Thread 1 advanced to log sequence 104 (LGWR switch)
11:46:31.158 Oracle Database:  Current log# 2 seq# 104 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:47:11.161 Oracle Database:Thu Nov 25 11:47:10 2021
11:47:11.162 Oracle Database:Thread 1 advanced to log sequence 105 (LGWR switch)
11:47:11.162 Oracle Database:  Current log# 1 seq# 105 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:47:50.165 Oracle Database:Thu Nov 25 11:47:49 2021
11:47:50.166 Oracle Database:Thread 1 advanced to log sequence 106 (LGWR switch)
11:47:50.166 Oracle Database:  Current log# 2 seq# 106 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:48:29.169 Oracle Database:Thu Nov 25 11:48:28 2021
11:48:29.169 Oracle Database:Thread 1 advanced to log sequence 107 (LGWR switch)
11:48:29.169 Oracle Database:  Current log# 1 seq# 107 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:49:10.173 Oracle Database:Thu Nov 25 11:49:09 2021
11:49:10.173 Oracle Database:Thread 1 advanced to log sequence 108 (LGWR switch)
11:49:10.173 Oracle Database:  Current log# 2 seq# 108 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:49:50.177 Oracle Database:Thu Nov 25 11:49:49 2021
11:49:50.177 Oracle Database:Thread 1 advanced to log sequence 109 (LGWR switch)
11:49:50.177 Oracle Database:  Current log# 1 seq# 109 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:50:30.180 Oracle Database:Thu Nov 25 11:50:29 2021
11:50:30.181 Oracle Database:Thread 1 advanced to log sequence 110 (LGWR switch)
11:50:30.181 Oracle Database:  Current log# 2 seq# 110 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:51:11.184 Oracle Database:Thu Nov 25 11:51:10 2021
11:51:11.185 Oracle Database:Thread 1 advanced to log sequence 111 (LGWR switch)
11:51:11.185 Oracle Database:  Current log# 1 seq# 111 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:51:51.189 Oracle Database:Thu Nov 25 11:51:50 2021
11:51:51.189 Oracle Database:Thread 1 advanced to log sequence 112 (LGWR switch)
11:51:51.189 Oracle Database:  Current log# 2 seq# 112 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:52:31.192 Oracle Database:Thu Nov 25 11:52:30 2021
11:52:31.193 Oracle Database:Thread 1 advanced to log sequence 113 (LGWR switch)
11:52:31.193 Oracle Database:  Current log# 1 seq# 113 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:53:11.196 Oracle Database:Thu Nov 25 11:53:11 2021
11:53:11.197 Oracle Database:Thread 1 advanced to log sequence 114 (LGWR switch)
11:53:11.197 Oracle Database:  Current log# 2 seq# 114 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:53:52.200 Oracle Database:Thu Nov 25 11:53:51 2021
11:53:52.200 Oracle Database:Thread 1 advanced to log sequence 115 (LGWR switch)
11:53:52.200 Oracle Database:  Current log# 1 seq# 115 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:54:32.204 Oracle Database:Thu Nov 25 11:54:31 2021
11:54:32.204 Oracle Database:Thread 1 advanced to log sequence 116 (LGWR switch)
11:54:32.204 Oracle Database:  Current log# 2 seq# 116 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:55:12.207 Oracle Database:Thu Nov 25 11:55:12 2021
11:55:12.208 Oracle Database:Thread 1 advanced to log sequence 117 (LGWR switch)
11:55:12.208 Oracle Database:  Current log# 1 seq# 117 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:55:53.211 Oracle Database:Thu Nov 25 11:55:52 2021
11:55:53.212 Oracle Database:Thread 1 advanced to log sequence 118 (LGWR switch)
11:55:53.212 Oracle Database:  Current log# 2 seq# 118 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:56:33.216 Oracle Database:Thu Nov 25 11:56:32 2021
11:56:33.216 Oracle Database:Thread 1 advanced to log sequence 119 (LGWR switch)
11:56:33.216 Oracle Database:  Current log# 1 seq# 119 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:57:13.219 Oracle Database:Thu Nov 25 11:57:12 2021
11:57:13.220 Oracle Database:Thread 1 advanced to log sequence 120 (LGWR switch)
11:57:13.220 Oracle Database:  Current log# 2 seq# 120 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:57:53.223 Oracle Database:Thu Nov 25 11:57:52 2021
11:57:53.223 Oracle Database:Thread 1 advanced to log sequence 121 (LGWR switch)
11:57:53.224 Oracle Database:  Current log# 1 seq# 121 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:58:34.227 Oracle Database:Thu Nov 25 11:58:33 2021
11:58:34.227 Oracle Database:Thread 1 advanced to log sequence 122 (LGWR switch)
11:58:34.227 Oracle Database:  Current log# 2 seq# 122 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
11:59:14.231 Oracle Database:Thu Nov 25 11:59:13 2021
11:59:14.231 Oracle Database:Thread 1 advanced to log sequence 123 (LGWR switch)
11:59:14.231 Oracle Database:  Current log# 1 seq# 123 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
11:59:54.235 Oracle Database:Thu Nov 25 11:59:54 2021
11:59:54.235 Oracle Database:Thread 1 advanced to log sequence 124 (LGWR switch)
11:59:54.235 Oracle Database:  Current log# 2 seq# 124 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
12:00:34.238 Oracle Database:Thu Nov 25 12:00:33 2021
12:00:34.239 Oracle Database:Thread 1 advanced to log sequence 125 (LGWR switch)
12:00:34.239 Oracle Database:  Current log# 1 seq# 125 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
12:01:14.242 Oracle Database:Thu Nov 25 12:01:14 2021
12:01:14.243 Oracle Database:Thread 1 advanced to log sequence 126 (LGWR switch)
12:01:14.243 Oracle Database:  Current log# 2 seq# 126 mem# 0: /u01/app/oracle/oradata/XE/redo02.log
12:01:55.246 Oracle Database:Thu Nov 25 12:01:54 2021
12:01:55.247 Oracle Database:Thread 1 advanced to log sequence 127 (LGWR switch)
12:01:55.247 Oracle Database:  Current log# 1 seq# 127 mem# 0: /u01/app/oracle/oradata/XE/redo01.log
Sending interrupt signal to process
[INFO] 
[INFO] Results:
[INFO] 
[WARNING] Tests run: 599, Failures: 0, Errors: 0, Skipped: 57
[INFO] 
[INFO] 
[INFO] --- docker-maven-plugin:0.34.1:stop (docker-stop) @ hibernate-search-integrationtest-mapper-orm-coordination-outbox-polling ---
script returned exit code 143
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-25T09:11:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2710,0|104ush:,,,,,,HSEARCH - 2021-22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to MySQL Connector/J 8.0.27,HHH-14938,71609,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,24/nov./2021 04:54 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,06/déc./2021 08:31 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,testsuite,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-06T11:17:11.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104weg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
The outbox event processors apply the polling interval even when there are still events to process,HSEARCH-4369,71608,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/nov./2021 02:07 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,24/nov./2021 05:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"It seems the current implementation waits for the duration of the polling interval (100ms by default) between every single batch of events.

Proof: when enabling the TRACE level of logs, I see things like this right in the middle of processing, when the outbox is definitely not empty:

{noformat}
11:03:15,083 (Hibernate Search - Outbox event processor - 0) TRACE SingletonTask:75 - Scheduling task 'Outbox event processor'.
11:03:15,183 (Hibernate Search - Outbox event processor - 0) TRACE SingletonTask:198 - Running task 'Outbox event processor'
{noformat}

It's a mistake, and this can dramatically slow down event processing.

When there are more events to process, the next batch should be processed immediately, not after having waited. This was the original intent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-24T05:47:18.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2707,0|104usk:r,,,,,,HSEARCH - 2021-22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
SybaseDialect does not support schema anymore,HHH-14937,71607,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Marius K,70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349,Marius K,70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349,Marius K,70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349,23/nov./2021 01:22 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,23/nov./2021 02:28 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,hibernate-core,,,,0,,,,,,"Hi,

the commit [https://github.com/hibernate/hibernate-orm/commit/8cecdd3f43796c134688d99b6387d59600e75738|https://github.com/hibernate/hibernate-orm/commit/8cecdd3f43796c134688d99b6387d59600e75738] of Hibernate 5.6.0.CR1 sets the NameQualifierSupport of the SybaseDialect to CATALOG while before it has been null (and determined by the Driver?\!). 

This breaks our code, because we set the schema with ""hibernate.default_schema"". 

We use Adaptive Server Enterprise/16.0 SP02 with the driver com.sybase.jconn4. Maybe the method has to be overwritten in SybaseASE15Dialect?

{code:java}@Override
public NameQualifierSupport getNameQualifierSupport() {
	return NameQualifierSupport.BOTH/null;
}{code}

Best,
Marius", Adaptive Server Enterprise/16.0 SP02,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-23T02:28:02.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:03933ddc-e23e-4d19-b74c-d154b2f81c3e(ug:03933ddc-e23e-4d19-b74c-d154b2f81c3e),,,,,,,,0|104we8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-23 09:46:31.829,,,,"23/nov./2021 01:46 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Thanks for the report. Do you think you could provide a PR with the fix for it? Ideally, you would also post some kind of link to the documentation stating that this is supported. Alternatively, you can create a PR against the wip/6.0 branch which soon will become the main branch. There we have setup a CI for Sybase",23/nov./2021 02:23 AM;70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349;I provided [https://github.com/hibernate/hibernate-orm/pull/4378|https://github.com/hibernate/hibernate-orm/pull/4378|smart-link] ,"23/nov./2021 02:26 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Awesome, thanks a lot\!",,,,,,,,,,,,,,Terminé,,
Rename the database-polling coordination strategy to outbox-polling,HSEARCH-4368,71606,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/nov./2021 01:48 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,22/nov./2021 23:55 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"I think I made a mistake when picking the name ""database-polling"", because it can be wrongly interepreted as ""we will poll the database for changes to entities"" instead of ""we will poll the database for events"". I think that confusion was made [here|https://hibernate.atlassian.net/browse/HSEARCH-4365?focusedCommentId=108661], but even if it wasn't, I can see now that it's a confusion that can be very easily made.

We need a name that makes it clear we're using an event queue, and that will not be ambiguous when we introduce another coordination strategy based on debezium.

Maybe ""outbox-polling"" would be a better name? ""outbox"" hints at the event queue, and ""polling"" clearly differentiates it from anything related to debezium.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-25T05:04:01.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2706,0|104us7:,,,,,,HSEARCH - 2021-22,,,,,,,,,,,,,,,,,,,,,,,,,,,22/nov./2021 02:16 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:097eae70-1c75-4c16-ab75-ab9600f8e584] suggested “outbox-events-polling”. Maybe “outbox-event-polling”?,,,,,,,,,,,,,,,,Terminé,,
JdbcConnectionContext in hibernate-testing throws NPE when user/password are not provided in configuration,HHH-14936,71605,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/nov./2021 23:54 PM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,22/nov./2021 03:22 AM,5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,hibernate-testing,,,,0,,,,,,See https://github.com/hibernate/hibernate-test-case-templates/issues/51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-22T03:22:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104we0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Type annotation is deprecated without an available replacement,HHH-14935,71604,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Stefan Mueller,5a96733ace13453391e730de,Stefan Mueller,5a96733ace13453391e730de,19/nov./2021 12:03 PM,15/déc./2021 12:34 PM,14/mars/2022 12:54 PM,15/déc./2021 12:34 PM,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.3,,,,,,,,,hibernate-core,,,,2,core,hibernate,,,,"The annotation org.hibernate.annotations.Type was marked deprecated in Hibernate 5.6.0 _without_ providing a possible none-deprecated alternativ (users have to wait for 6.0 for an alternative annotation to be available).

We have zero-tolerance warnings policy in our company and cannot fix this deprecation with 5.6.*. Please remove the deprecation from Type in 5.6.* or provide a none-deprecated alternativ.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-15T12:31:57.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),jmh205(jmh205),jschatte(jschatte),john.casebolt(john.casebolt),sanne(sanne),stefan.mueller(stefan.mueller),steve(steve),,,0|104wds:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.8,2021-11-22 12:22:46.114,,,,"22/nov./2021 04:22 AM;5a098673c66aa77b654a183c;As a general principal, Java APIs should not be marked {{@Deprecated}} until a replacement is available (or an explanation of why there will never be one).

This will have the opposite of the desired effect, as everyone will be forced to ignore the warnings, and then forget about them by the time they upgrade to 6.0.","23/nov./2021 04:13 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Good points - we’ll explore what we can do.

Some of our users have a strong requirement of having any API which is removed in the next version to be clearly marked as deprecated, yet having both APIs coexist is not possible at this point. We’ll need to be creative to accomodate both - FWIW my personal opinions is that this ticket has more merit, if I had to choose one.","23/nov./2021 04:16 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;For those interest in more details, we also discussed it on the team chat: [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/.40Type.20in.205.2E6|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/.40Type.20in.205.2E6] ","23/nov./2021 04:30 AM;5a098673c66aa77b654a183c;Another headache - you can put {{@TypeDef}} annotations on packages, but you can’t put {{@SuppressWarnings}} with it. So if you’ve got lots of that the only way to suppress is to disable deprecation warnings globally.","23/nov./2021 08:32 AM;5c48877b69dc034ed80b5969;Adding another voice to the “please provide us with alternatives if you deprecate something” chorus.  Our company policy is that we are not to branch for a release until all warnings/code quality findings are below a certain threshold.  We’ve just documented an exception for these HIbernate warnings, but would appreciate a way to actually prepare for the 6.x series in advance.

Thanks for all you do - Hibernate is a great project\!","01/déc./2021 09:58 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}As a general principal, Java APIs should not be marked {{@Deprecated}} until a replacement is available (or an explanation of why there will never be one).{quote}

As I noted on the Stack Overflow post, nothing says that this is the way deprecation should work.  I won’t get into the background specifics as it has to do with our day jobs, but we will revert much of this work","01/déc./2021 10:45 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;So as a “general principle”, just so we are all on the same page, the alternative is that these are simply dropped in 6.0 with no “warning”.  Which  I am also ok with","01/déc./2021 11:16 AM;5c48877b69dc034ed80b5969;I have only been trying to understand what I can do to get ready for 6.0 from the standpoint of the deprecated Type annotation, and maybe the answer is nothing until 6.0 comes out? 

If that’s the case, that’s fine.

I was just operating under the (apparently false) assumption that since Type was deprecated, there would be some action that I could take in 5.6 - even if it was just education on the upcoming replacement.  

If Hibernate, as a project, decides to annotate things as deprecated without providing an immediate alternative, that’s OK with me.  My only point with my post below was to let you know that, like others, we treat deprecations in third-party libraries as a branch-blocking finding that must be either fixed or documented as an exception.",06/déc./2021 08:03 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;We reverted the deprecations: [https://github.com/hibernate/hibernate-orm/pull/4412|https://github.com/hibernate/hibernate-orm/pull/4412|smart-link] ,"08/déc./2021 07:53 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;I need to reopen this; the PR undid most deprecations but it wasn’t complete: in particular it seems we forgot to revert the one annotation being asked for in this JIRA: org.hibernate.annotations.Type.

Too bad as I have already tagged the 5.6.2 release.",,,,,,,Terminé,,
java.lang.IllegalStateException: SqmJpaCriteriaParameterWrapper references for JpaCriteriaParameter already exhausted,HHH-14934,71603,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,King Netfix,557058:9b2971b2-b0b3-4459-90c8-04a809ffb2aa,King Netfix,557058:9b2971b2-b0b3-4459-90c8-04a809ffb2aa,19/nov./2021 01:51 AM,07/déc./2021 06:55 AM,14/mars/2022 12:54 PM,07/déc./2021 06:55 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,hibernate-core,,,,0,hibernate-core,,,,,"The sample code is as follows:

{code:java}@Entity
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	protected Integer id;
	protected String username;
	protected String password;
	protected String name;
	protected Integer status;
	protected Instant addTime;
       
    // Getters and setters are omitted for brevity

}{code}

{code:java}public void doInSession(Session session) {
		CriteriaBuilder cb = session.getCriteriaBuilder();

		CriteriaQuery<Integer> cq = cb.createQuery(Integer.class);
		Root<User> user = cq.from(User.class);

		// SELECT SUM ( CASE WHEN status > 1 THEN status ELSE 1 END )
		Path<Integer> status = user.get(""status"");

		Expression<Integer> selection = cb.sum(
				cb.<Integer>selectCase()
						.when(cb.gt(status, 1), status)
						.otherwise(1)
		);
		cq.select(selection);

		// WHERE username = 'Jim'
		cq.where(cb.equal(user.get(""username""), ""Jim""));

		Query<Integer> q = session.createQuery(cq);

		System.out.println(q.uniqueResult());

	}{code}

When the above method is executed, the following exception is thrown:

{noformat}Caused by: java.lang.IllegalStateException: SqmJpaCriteriaParameterWrapper references for JpaCriteriaParameter [org.hibernate.query.sqm.tree.expression.JpaCriteriaParameter@4d9e5d2a] already exhausted
	at org.hibernate.query.sqm.internal.SqmUtil$ParameterResolutionsImpl.lambda$new$0(SqmUtil.java:536)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.getSqmParameter(BaseSqmToSqlAstConverter.java:3309)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitJpaCriteriaParameter(BaseSqmToSqlAstConverter.java:3287)
	at org.hibernate.query.sqm.tree.expression.JpaCriteriaParameter.accept(JpaCriteriaParameter.java:144)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitComparisonPredicate(BaseSqmToSqlAstConverter.java:4897)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitComparisonPredicate(BaseSqmToSqlAstConverter.java:336)
	at org.hibernate.query.sqm.tree.predicate.SqmComparisonPredicate.accept(SqmComparisonPredicate.java:67)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSearchedCaseExpression(BaseSqmToSqlAstConverter.java:4374)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSearchedCaseExpression(BaseSqmToSqlAstConverter.java:336)
	at org.hibernate.query.sqm.tree.expression.SqmCaseSearched.accept(SqmCaseSearched.java:95)
	at org.hibernate.query.sqm.function.SelfRenderingSqmFunction.resolveSqlAstArguments(SelfRenderingSqmFunction.java:65)
	at org.hibernate.query.sqm.function.SelfRenderingSqmFunction.getMappingModelExpressable(SelfRenderingSqmFunction.java:132)
	at org.hibernate.query.sqm.function.SelfRenderingSqmAggregateFunction.convertToSqlAst(SelfRenderingSqmAggregateFunction.java:56)
	at org.hibernate.query.sqm.function.SelfRenderingSqmAggregateFunction.convertToSqlAst(SelfRenderingSqmAggregateFunction.java:26)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitFunction(BaseSqmToSqlAstConverter.java:3376)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitFunction(BaseSqmToSqlAstConverter.java:336)
	at org.hibernate.query.sqm.tree.expression.SqmFunction.accept(SqmFunction.java:69)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelection(BaseSqmToSqlAstConverter.java:1600)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelection(BaseSqmToSqlAstConverter.java:336)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at java.base/java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1085)
	at org.hibernate.query.sqm.spi.BaseSemanticQueryWalker.visitSelectClause(BaseSemanticQueryWalker.java:352)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelectClause(BaseSqmToSqlAstConverter.java:1558)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitQuerySpec(BaseSqmToSqlAstConverter.java:1423)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitQuerySpec(BaseSqmToSqlAstConverter.java:336)
	at org.hibernate.query.sqm.tree.select.SqmQuerySpec.accept(SqmQuerySpec.java:62)
	at org.hibernate.query.sqm.spi.BaseSemanticQueryWalker.visitQueryPart(BaseSemanticQueryWalker.java:205)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitQueryPart(BaseSqmToSqlAstConverter.java:1306)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelectStatement(BaseSqmToSqlAstConverter.java:1109)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelectStatement(BaseSqmToSqlAstConverter.java:336)
	at org.hibernate.query.sqm.tree.select.SqmSelectStatement.accept(SqmSelectStatement.java:151)
	at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.translate(BaseSqmToSqlAstConverter.java:582)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.buildCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:304)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.withCacheableSqmInterpretation(ConcreteSqmSelectQueryPlan.java:233)
	at org.hibernate.query.sqm.internal.ConcreteSqmSelectQueryPlan.performList(ConcreteSqmSelectQueryPlan.java:209)
	at org.hibernate.query.sqm.internal.QuerySqmImpl.doList(QuerySqmImpl.java:626)
	at org.hibernate.query.spi.AbstractQuery.list(AbstractQuery.java:1441)
	at org.hibernate.query.spi.AbstractQuery.uniqueResult(AbstractQuery.java:1463){noformat}

*NOTE:*

The key method is: 

{{CriteriaBuilder.Case#when(Expression<Boolean> condition, Expression<? extends R> result)}}

If argument {{result}} is a literal value, such as {{100}}, then everything is OK.
However, when {{result}} refers to the variable  {{status}}, the above exception is thrown.

I tested it and everything is OK in version 5.6 .","Hibernate: 6.0.0.Beta1
JVM: OpenJDK 11.0.12 64bit
OS: Windows 10 Professional 64bit
DB: any",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),CodePlayer(codeplayer),,,,,,,,0|104wdk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,Terminé,,
Unable to set the original Selection back in CriteriaQuery,HHH-14933,71602,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,King Netfix,557058:9b2971b2-b0b3-4459-90c8-04a809ffb2aa,King Netfix,557058:9b2971b2-b0b3-4459-90c8-04a809ffb2aa,18/nov./2021 07:59 AM,07/déc./2021 06:55 AM,14/mars/2022 12:54 PM,07/déc./2021 06:55 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,hibernate-core,,,,0,,,,,,"Please see the following code example:

{code:java}public void doInSession(org.hibernate.Session session) {

	CriteriaBuilder cb = session.getCriteriaBuilder();
	CriteriaQuery<Emp> cq = cb.createQuery(Emp.class);
	Root<Emp> root = cq.from(Emp.class);
	cq.where(cb.equal(root.get(""name""), ""Jim""));

	Selection<Emp> selection = cq.getSelection();

	// throw java.lang.ClassCastException: class org.hibernate.query.sqm.tree.select.SqmSelectClause cannot be cast to class org.hibernate.query.sqm.tree.select.SqmSelectableNode (org.hibernate.query.sqm.tree.select.SqmSelectClause and org.hibernate.query.sqm.tree.select.SqmSelectableNode are in unnamed module of loader 'app')
	cq.select(selection);

	Query<Emp> q = session.createQuery(cq);

	System.out.println(q.list());
}{code}

As shown in the above code example, I get the {{Selection}} instance by invoking {{CriteriaQuery#getSelection()}} method.
However, I can *NOT* set it back by invoking the {{CriteriaQuery#select()}} method. 
When executed, it threw the following *exception*:

{quote}
Caused by: java.lang.ClassCastException: class org.hibernate.query.sqm.tree.select.SqmSelectClause cannot be cast to class org.hibernate.query.sqm.tree.select.SqmSelectableNode (org.hibernate.query.sqm.tree.select.SqmSelectClause and org.hibernate.query.sqm.tree.select.SqmSelectableNode are in unnamed module of loader 'app')
at org.hibernate.query.sqm.tree.select.SqmQuerySpec.setSelection(SqmQuerySpec.java:198)
at org.hibernate.query.sqm.tree.select.SqmSelectStatement.select(SqmSelectStatement.java:190)
at org.hibernate.query.sqm.tree.select.SqmSelectStatement.select(SqmSelectStatement.java:37){quote}","Hibernate: 6.0.0.Beta1
JVM: OpenJDK 11.0.12 64bit
OS: Windows 10 Professional 64bit
DB: any",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),CodePlayer(codeplayer),,,,,,,,0|104wdc:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Lucene 8.11,HSEARCH-4367,71599,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/nov./2021 06:44 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,30/nov./2021 06:00 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-lucene,,,,0,,,,,,https://lucene.apache.org/core/8_11_0/changes/Changes.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T06:00:19.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2717,0|104usm:,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Spatial support for PostgreSQL 10+ uses invalid WKB dialect,HHH-14932,71598,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Jurriaan Pruis,557058:6c986da4-0f20-42ce-b96b-337cfb70b6c6,Jurriaan Pruis,557058:6c986da4-0f20-42ce-b96b-337cfb70b6c6,17/nov./2021 06:11 AM,15/févr./2022 12:01 PM,15/févr./2022 11:55 AM,02/févr./2022 12:40 PM,5.4.32,5.5.8,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.34,5.5.10,5.6.6,6.0.0.CR2,,,,,,hibernate-spatial,,,,0,,,,,,"As described in [https://trac.osgeo.org/postgis/wiki/UsersWikiPostgreSQLPostGIS|https://trac.osgeo.org/postgis/wiki/UsersWikiPostgreSQLPostGIS] the combination PostgreSQL 10+ requires PostGIS >= 2.3. This means that for PostgisPG10Dialect Wkb.Dialect.POSTGIS_EWKB_2 should be used instead of Wkb.Dialect.POSTGIS_EWKB_1 since EWKB_1 is the dialect for Postgis version < 2.2.1.

However it looks like Wkb.Dialect.POSTGIS_EWKB_1 is used in multiple places when using PostgisPG10Dialect:

* it is hardcoded in the ValueBinder instead of using `this.wkbDialect` ([https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java#L127-L135)|https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PGGeometryTypeDescriptor.java#L127-L135)]
* registerColumnType in PostgisPG10Dialect ([https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java#L22-L25)|https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisPG10Dialect.java#L22-L25)]
* contributeTypes in PostgisPG10Dialect via PostgisSupport ([https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisSupport.java#L40-L41)|https://github.com/hibernate/hibernate-orm/blob/c3631970a5d1d445adafc07b0632181c18c1ae8d/hibernate-spatial/src/main/java/org/hibernate/spatial/dialect/postgis/PostgisSupport.java#L40-L41)]

I noticed this when I tried to store an empty point in a column of type `GEOMETRY(POINT, 4326)`.

This caused the following SQL error:

{code:java}Geometry type (GeometryCollection) does not match column type (Point){code}

Which is exactly as decribed what happens when using the POSTGIS_EWKB1 dialect:

{code:java}// the PostGIS EWKB dialect (version < 2.2.1). This encodes an empty Point as an empty GeometryCollection{code}","PostgreSQL 13.4
PostGIS 3.1.4",Ahmed Bahri,61b8f3d18a146b0068ee7daa,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2022-02-07T11:39:35.000-0800"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:24f8059e-034b-4da2-a493-3d106f0ecc67(ug:24f8059e-034b-4da2-a493-3d106f0ecc67),ug:19e58fb0-6ff8-4a17-a233-3f954a97bce8(ug:19e58fb0-6ff8-4a17-a233-3f954a97bce8),maeseka(maeseka),,,,,,,0|104wco:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-02-15 20:01:43.909,,,,15/févr./2022 12:01 PM;61b8f3d18a146b0068ee7daa;*hi*,,,,,,,,,,,,,,,,Terminé,,
Unique Index not being created if it has the same columns as the primary key but different order,HHH-14931,71597,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Aucune correction envisagée,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Matthias Welz,5d1db99c0d88370d20de3d26,Matthias Welz,5d1db99c0d88370d20de3d26,17/nov./2021 01:06 AM,17/nov./2021 07:34 AM,14/mars/2022 12:54 PM,17/nov./2021 07:34 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Given a very simple Entity:

{noformat}@Entity
@Table(indexes=@Index(name=""MY_INDEX"", columnList = ""bar,foo"", unique = true))
public class MyEntity {
    private int bar;
    private int foo;
    private String data;

    @Id
    @Column(name=""bar"", nullable = false)
    public int getBar() {
        return bar;
    }

    @Id
    @Column(name=""foo"", nullable = false)
    public int getFoo() {
        return foo;
    }


    public String getData() {
        return data;
    }

    public void setBar(int bar) {
        this.bar = bar;
    }

    public void setData(String data) {
        this.data = data;
    }

    public void setFoo(int foo) {
        this.foo = foo;
    }
}{noformat}

Results in the following DDL being generated:

{noformat}create table MyEntity (
   foo number(10,0) not null,
    bar number(10,0) not null,
    data varchar2(255 char),
    primary key (foo, bar)
);{noformat}

Note that the index MY_INDEX is missing.  
If changing the unique parameter to false, the index will be generated:

{{create index MY_INDEX on MyEntity (bar, foo);}}

I think this is due to Hibernate eliminating unique indices which have the same columns as the primary key (see {{Table.cleanseUniqueKeyMap}})

However, when delaing with indices *the column order does matter*: If the table is frequently queried by bar, a unique index on foo, bar will perform much worse than one on bar, foo.

*In this case, Hibernate should not eliminate the index. Even better would be changing the primary key order.*",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:0c3904b7-5a6a-4aff-9e68-410ea8f33553(ug:0c3904b7-5a6a-4aff-9e68-410ea8f33553),,,,,,,,0|104wcg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-17 10:01:06.844,,,,"17/nov./2021 02:01 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Although this might look odd to you, I think this is totally ok to do. If you just care about the column ordering and the uniqueness is already ensured through the primary key constraint, why do you need this index be unique as well?","17/nov./2021 03:43 AM;5d1db99c0d88370d20de3d26;@Christian Beikov: I agree, making the index non-unique would definitely be a valid workaround.

However, if I make the Index non-unique, then there will be two indices which need to be maintained (the unique one implicitly generated by the primary key and the non-unique one). Both sharing the same columns - so we could get rid of one actually (if the column order was right). Also, some DBMS systems can process unique indices more efficiently - so a common recommendation is to use unique indexes if the data is actually unique (see [https://stackoverflow.com/a/20536140/232175|https://stackoverflow.com/a/20536140/232175|smart-link]  for example).","17/nov./2021 03:50 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;It seems you are thinking that Hibernate is not only an ORM but also a general purpose schema generation tool, but that is not the case. We certainly add features to achieve certain semantics, but we probably won’t be able to handle everything you can do in a database. Having said that, if you want to be in full control of the schema, you should be using a schema management tool like Liquibase or Flyway.","17/nov./2021 04:21 AM;5d1db99c0d88370d20de3d26;Thank you for the reply\!

While it would of course be nice if Hibernate supported that feature, I can understand your reasoning. So it’s probably best to close this issue as “Won’t fix”?

How about supporting reordering the primary key columns? Is there already an issue for that (or should I create one?)? Or would you also consider that out-of-scope for Hibernate?","17/nov./2021 07:34 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Yes, let’s close this for now. There is an open discussion about this topic here: [https://github.com/hibernate/hibernate-orm/discussions/3989|https://github.com/hibernate/hibernate-orm/discussions/3989|smart-link] 

It would be great if you leave a +1 there or join the discussion in case you have an idea.",,,,,,,,,,,,Terminé,,
hibernate-micrometer cannot be used with Jakarta EE 9,HHH-14930,71596,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Andy Wilkinson,557058:3ad816cf-6f17-45f8-8b7c-ccae621b7dc9,Andy Wilkinson,557058:3ad816cf-6f17-45f8-8b7c-ccae621b7dc9,16/nov./2021 05:23 AM,16/nov./2021 05:23 AM,14/mars/2022 12:54 PM,,5.5.8,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"I doesn't appear to be possible to use {{hibernate-micrometer}} with Jakarta EE 9. {{HibernateMetrics}} depends on {{javax.persistence.EntityManagerFactory}} and 
{{javax.persistence.PersistenceException}} and there is no {{-jakarta}} variant of the module that switches to their {{jakarta.*}} equivalents.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:295b12e0-5ffd-48ab-9339-f17446689b72(ug:295b12e0-5ffd-48ab-9339-f17446689b72),,,,,,,,,0|104wc8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Handle reserved keywords as column names,HHH-14929,71595,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Impossible à reproduire,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Ahmed Ashour,557058:f6199a56-bd26-413c-ba94-45fbccd854bd,Ahmed Ashour,557058:f6199a56-bd26-413c-ba94-45fbccd854bd,16/nov./2021 01:38 AM,16/nov./2021 01:40 AM,14/mars/2022 12:54 PM,16/nov./2021 01:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"On having a column named ""end"" for example, it is a reversed work in PostgreSQL.

I believe the keywords for each database should be escaped, and I guess this is frequently encountered by users.

Is it ok to start contributing on this area, or this is something outside the current focus?
 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:11b20a6d-36ba-4149-9155-3089ba5b821c(ug:11b20a6d-36ba-4149-9155-3089ba5b821c),christian.beikov(christian.beikov),,,,,,,,0|104wc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-16 09:40:02.127,,,,16/nov./2021 01:40 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;See the documentation for the various quoting options we already provide: https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#_quoting_options,,,,,,,,,,,,,,,,Terminé,,
Document CDI integration,HHH-14928,71594,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,15/nov./2021 06:38 AM,03/janv./2022 07:56 AM,14/mars/2022 12:54 PM,01/déc./2021 20:12 PM,5.6.1,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,documentation,,,,0,CDI,documentation,,,,"The documentation of CDI integration is extremely sparse.
Basically only the configuration chapter in the description of {{hibernate.resource.beans.container}} describes that for CDI you just set {{{jakarta,javax}.persistence.bean.manager}} to the CDI {{BeanManager}} instance.
It would be nice to have a chapter about what the CDI integration looks like / what is going to resolved through CDI, ...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=1, successfulBuildCount=0, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-01T20:11:56.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":1,""successfulBuildCount"":0,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),steve(steve),,,,,,,,0|104wbs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-02 18:59:18.145,,,,02/déc./2021 10:59 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;It is very basic at the moment. Let me know what you think [~accountid:557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d] ,"03/janv./2022 07:56 AM;557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d;Much better, thanks.",,,,,,,,,,,,,,,Terminé,,
Add context to exceptions thrown during processing of POJOs (for indexing or reindexing resolution),HSEARCH-4366,71593,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/nov./2021 02:34 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,20/nov./2021 10:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,See https://hibernate.atlassian.net/browse/HSEARCH-4365 ; the stacktrace mentions only the entity being processed. Ideally we'd mention the exact path we were at when the exception occurred.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-20T10:39:09.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2704,0|104us0:i,,,,,,HSEARCH - 2021-22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"""Current"" documentation is 5.5 instead of 5.6",HHH-14927,71592,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,Björn Kautler,557058:e9cccfe2-608f-42d7-a049-26e6a1796f0d,13/nov./2021 08:40 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,17/nov./2021 01:53 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,documentation,,,,0,,,,,,The link https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html points to the 5.5 documentation instead of the 5.6 documentation.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-17T01:52:57.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:1f26e4f3-8d47-427b-9d07-b027a534486a(ug:1f26e4f3-8d47-427b-9d07-b027a534486a),nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,0|104wbk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
fix asciidoc error in 'test-case-guide.adoc',HHH-14926,71591,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,12/nov./2021 18:02 PM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,15/nov./2021 04:19 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,documentation,,,,0,,,,,," !Screen Shot 2021-11-12 at 21.00.39.png|thumbnail! 

As shown in the screenshot, ""(C)complete"" was rendered as copyright symbol. The root cause is ascii doc treats `(C)` as special symbol and we should escape it to make it rendered as expected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,12/nov./2021 18:00 PM;nathan.qingyang.xu;Screen Shot 2021-11-12 at 21.00.39.png;https://hibernate.atlassian.net/secure/attachment/49940/Screen+Shot+2021-11-12+at+21.00.39.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-15T04:19:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,,0|104wbc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
remove of entity with IndexedEmbedded collections cause LazyInitializationException during indexing,HSEARCH-4365,71590,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,11/nov./2021 19:01 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,23/nov./2021 01:58 AM,6.0.7.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"See test case [BITTestCase14|https://github.com/busitech/hibernate-test-case-templates/blob/f833dabf1671e2c3ffd32869621a5429e3169c90/search/hibernate-search-6/orm-lucene/src/test/java/biz/bitech/hibernate/search6/lucene/bugs/BITTestCase14.java] to recreate.  During remove() the ORM framework sets the session to null for all collections assigned to properties of the entity removed, even though the current session is still open.  During flush(), Hibernate Search is trying to read these collections.



{code:java}Caused by: org.hibernate.search.util.common.SearchException: HSEARCH700083: Exception while building document for entity 'SalesOrder#1': failed to lazily initialize a collection, could not initialize proxy - no Session
	at org.hibernate.search.mapper.pojo.work.impl.PojoDocumentContributor.contribute(PojoDocumentContributor.java:51)
	at org.hibernate.search.backend.lucene.document.impl.LuceneIndexEntryFactory.create(LuceneIndexEntryFactory.java:28)
	at org.hibernate.search.backend.lucene.work.execution.impl.LuceneIndexIndexingPlan.addOrUpdate(LuceneIndexIndexingPlan.java:76)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexedTypeIndexingPlan$IndexedEntityState.delegateAddOrUpdate(PojoIndexedTypeIndexingPlan.java:220)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexedTypeIndexingPlan$IndexedEntityState.sendCommandsToDelegate(PojoIndexedTypeIndexingPlan.java:165)
	at java.base/java.util.LinkedHashMap$LinkedValues.forEach(LinkedHashMap.java:608)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexedTypeIndexingPlan.process(PojoIndexedTypeIndexingPlan.java:71)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanImpl.process(PojoIndexingPlanImpl.java:105)
	at org.hibernate.search.mapper.orm.event.impl.HibernateSearchEventListener.onFlush(HibernateSearchEventListener.java:156)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1416)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:507)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3299)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2434)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	
Caused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection, could not initialize proxy - no Session
	at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:612)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:218)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentSet.iterator(PersistentSet.java:188)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.CollectionElementExtractor.iterator(CollectionElementExtractor.java:22)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.CollectionElementExtractor.iterator(CollectionElementExtractor.java:14)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.AbstractIteratorBasedElementExtractor.extract(AbstractIteratorBasedElementExtractor.java:24)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.CollectionElementExtractor.extract(CollectionElementExtractor.java:14)
	at org.hibernate.search.mapper.pojo.extractor.impl.ContainerExtractingProcessor.process(ContainerExtractingProcessor.java:33)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorContainerElementNode.process(PojoIndexingProcessorContainerElementNode.java:54)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorPropertyNode.process(PojoIndexingProcessorPropertyNode.java:50)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorOriginalTypeNode.process(PojoIndexingProcessorOriginalTypeNode.java:55)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorContainerElementNode.lambda$new$0(PojoIndexingProcessorContainerElementNode.java:34)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.AbstractIteratorBasedElementExtractor.extract(AbstractIteratorBasedElementExtractor.java:41)
	at org.hibernate.search.mapper.pojo.extractor.builtin.impl.CollectionElementExtractor.extract(CollectionElementExtractor.java:14)
	at org.hibernate.search.mapper.pojo.extractor.impl.ContainerExtractingProcessor.process(ContainerExtractingProcessor.java:33)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorContainerElementNode.process(PojoIndexingProcessorContainerElementNode.java:54)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorPropertyNode.process(PojoIndexingProcessorPropertyNode.java:50)
	at org.hibernate.search.mapper.pojo.processing.impl.PojoIndexingProcessorOriginalTypeNode.process(PojoIndexingProcessorOriginalTypeNode.java:55)
	at org.hibernate.search.mapper.pojo.work.impl.PojoDocumentContributor.contribute(PojoDocumentContributor.java:46)
	... 51 more{code}",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4366,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-23T01:58:04.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,matt(matt),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2705,0|104us1:,,,,,,HSEARCH - 2021-22,,,,,,,,,,,,,,,,,,,,,,,2021-11-12 13:42:15.357,,,,"12/nov./2021 05:42 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;So the problematic code is this:

{noformat}            startTransaction();

            SalesOrder salesOrder = em.find(SalesOrder.class, 1L);

            for(SalesOrderDetail salesOrderDetail : salesOrder.getSalesOrderDetails()) {
                em.remove(salesOrderDetail);
            }

            endTransaction();{noformat}

The entity is being deleted, but {{SalesOrder#salesOrderDetails}} is keeping a reference to that deleted entity.

With that kind of code, anything trying to go through all entities returned by {{salesOrder.getSalesOrderDetails()}} afterwards (be it Hibernate Search or your own application) and accessing lazy properties will get a {{LazyInitializationException}}. That’s not a good practice; the code should also remove the entity from the collection.

That being said, it seems it was supported to some extent in Hibernate Search 5… though this ugly hack: [https://github.com/hibernate/hibernate-search/blob/bfdf5a587f7c697afd8bfbd19440d597d8fc41f7/engine/src/main/java/org/hibernate/search/engine/spi/AbstractDocumentBuilder.java#L204-L214|https://github.com/hibernate/hibernate-search/blob/bfdf5a587f7c697afd8bfbd19440d597d8fc41f7/engine/src/main/java/org/hibernate/search/engine/spi/AbstractDocumentBuilder.java#L204-L214|smart-link] . FWIW that hack is not perfect either, as it would still have added the deleted entity to the document, only it would have omitted lazy collection properties. Not that it matters in the given reproducer, but in other cases it would still result in an out-of-sync index.

I guess we’ll need a similar hack in Hibernate Search 6. Though I’d favor something that just ignores deleted entities altogether.","15/nov./2021 02:19 AM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;I agree that there exists a way within the business application to prevent Hibernate Search from crashing, but I am a firm believer in the design principle of separation of concerns.  What _can_ be done in the framework _must_ be done there, and should not be considered relevant to the business application, even if said method exists.  The business application developer does not necessarily know _how_ Search accomplishes what it does, but trusts it to keep the index in sync with the database, somehow.  (As I will get to in a moment, the exception didn’t help much in solving the issue.)

I agree that eliminating the access to properties of a removed object within Search is the way to go, and this behavior was assumed prior to encountering the issue.  I think the problematic code is that which accesses properties of a deleted object without checking if it was deleted. Rather than being problematic, I assert that the reproducer is bug free.  Since the business logic in the reproducer does not access {{SalesOrder.salesOrderDetail}} again, it has no concern for the state of an object about to fall out of scope.  As far as the business logic developer is concerned, garbage collection is the next step.  The work he set out to do has been done with the fewest lines of code necessary to accomplish the job, and that is paramount to the efficiency of his application, and to the maintainability of his logic.  Reviewing code appearing superfluous always seems rife with waste and ripe for elimination.

This test case is a good illustration of how fragile the integration between ORM and Search is.  At a minimum, working on this issue will make that integration more robust and reliable, with fewer unexpected crashes that are hard to debug.

The exception was missing any helpful information about what collection was accessed, or why.  The only indication was the object being indexed at the time, but the exception could have been a collection at any level above or below that object in the hierarchy.  The developer had no way of knowing what direction to go in to resolve the issue, based on the exeption alone.  I had to trace object instantiation within ORM down to the jvm object id, while printing the {{role}} related to each, in order to figure out how to create the reproducer.

Hibernate ORM is so ruthlessly destructive to the properties of PersistenCollection objects that one can not even discern the {{role}} a collection used to have, once the session dereferences it, not even to assist in debugging or formatting of a readable {{LazyInitializationException}}.  I don't know why this is necessary, and frankly might need to be discussed with that team. This is the second way working on this issue might help both the framework and the application developer, if this exception could be improved by providing a corresponding {{role}} for a collection that errors out during indexing.

This discussion does make me wonder if {{flush}} is actually _too late_ for seamless integration to ORM by Search to accomplish all of the tasks necessary for good indexing.  It seems like some properties are safe (and necessary) to access before flush, and unsafe (but necessary) to access after {{flush}}, especially in the case of IndexedEmbedded collections on parent objects that are lazy and not initialized yet.

In this test case, the uninitialized collection properties of the removed object were the ones crashing, but this was not known at first, due to the above.  My first workaround for this issue was to initialize the objects before removal.  Later, after I had time to dig deeper, I found the root cause of the crash and was able to remove that workaround once I understood the subsequent events.","19/nov./2021 09:16 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;{quote}What _can_ be done in the framework _must_ be done there,{quote}

That’s the simple way to put it. In practice, though, just because we can do something, doesn’t mean we should. Features have consequences; sometimes on performance, sometimes on usability.

Here, we could catch LazyInitializationExceptions and swallow them like we used to in Hibernate Search 5. It would _seem_ to work fine, and in some cases it would. But in other cases, we would index an invalid document, because:

# The LazyInitializationException indicated a real problem in the entity graph (not just an association that wasn’t updated), and we swallowed it anway.
# OR the LazyInitializationException occurred after we already processed other properties of the deleted entities, properties that don’t involve any lazy-loading such as a {{String name}}. Those were added to the document, even though the corresponding entity was deleted.

In either case, this very nice feature that allows you to update just one side of an association just led to an out-of-sync index, without even a warning.

I looked into detecting whether an entity is deleted, but it turns out a deleted entity cannot be distinguished from a detached entity. And if I remember correctly, one of of your own use cases involved leaving detached entities in your entity graph, and having Hibernate Search behave as if they were attached, “because we can”, and because Hibernate ORM does.

We “could” keep track of all entities deleted in the current session, and use that to filter them out from association upon access. But I’m guessing this will have a non-negligible performance cost, and it will affect all users, not just those who wish to update only one side of their associations.

Finally, about this:

{quote}This discussion does make me wonder if {{flush}} is actually _too late_ for seamless integration to ORM by Search to accomplish all of the tasks necessary for good indexing{quote}

Well, you’re starting to understand my conundrum. Your other problems were related to {{flush}} being too _early_, because indexing used to happen later, on commit, in Hibernate Search 5.

Obviously, moving processing to when each event occurs would kill performance; one of the main reasons for the concept of {{flush}} is to avoid duplicate operations.

Moving processing to some kind of pre-flush event could work, but unfortunately Hibernate ORM doesn’t have pre-flush listeners at the moment, so this would require a new SPI, and would carry its own set of dangers: who knows if the state of entities pre-flush is reliable enough? For example ID generation may happen on flush, in some configurations.

Besides, while processing on pre-flush may prevent associations from deleted entities from throwing a LazyInitializationException, we would still need to somehow filter out deleted entities, otherwise we would be indexing them as part of other (non-deleted) entities, resulting in out-of-sync indexes (as explained above).

To sum up:

# Fixing the code in your application would not involve any additional database access, because the association is already loaded, so it wouldn’t impact performance like it would in other use cases you reported.
# Swallowing LazyInitializationException would be fine in some cases, but would lead to out-of-sync indexes in others, without any way for us to tell the difference.
# Detecting deleted entities before processing them would either break another of your use cases, or involve a performance overhead for all users, even those who don’t need this change.
# Moving indexing earlier than the flush is likely to just make Hibernate Search fragile in different ways.

I’m sorry, but in this case, I don’t think I’m going to be able to fix this problem.

The workarounds:

* Update both sides of the association in application code.
* OR (maybe) try to use bytecode enhancement and enable bidirectional association management. It would make sense for entity deletion to automatically remove the entity from loaded associations, *when association management is enabled*. If it doesn’t, that might be a nice improvement for Hibernate ORM.
* OR try out Hibernate Search 6.1 (currently in Alpha1, I’ll try to release Beta1 next week) and its [database-polling coordination strategy|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#coordination-database-polling], which indexes entities from a background thread and thus always reloads entities from the database before indexing them. On top of solving [some rarer problems that may affect you|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#architecture-examples-no-coordination-elasticsearch-pros-and-cons], this would solve most, if not all of your problems related to the object graph not being in sync with the current state of the database. And more importantly, it would solve them _reliably_. The question is whether it would perform adequately for your application, and the only way to know for sure is to try.","19/nov./2021 11:30 AM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;The crux of the matter seems to be that _ORM was not designed to be indexed by an external framework_, and it has not yet been _redesigned_ to make doing a perfect job of indexing easier, and in some rare cases, even possible.  The integration methods currently available make the attempt to do so brittle and fragile.  Case in point, you are having trouble distinguishing a deleted object from any other, and this is a great example of the type of serious limitations of ORM design that thwart perfect indexing in Search.

Flush is too early to allow our previous workaround for the lazy loading feature that is not fully implemented to be effective on persist and merge, and now too late for remove.  This conundrum is due to the above.

The fact that assigning a foreign key value is all that is required to establish a database relationship between two entities, and the fact that a left join query can retrieve a collection based on these foreign keys, _is not a nice feature invented by ORM_.  

Au contraire, this is fundamental architecture found in the layer below ORM, which should be respected by any persistence and indexing framework.  These are features which existed before ORM was conceived, and they reflect the design of the underlying database and it’s language.  Programming this way is what all application developers who have ever interfaced with a relational database have done, from the beginning.

Never before has there ever been a database application developer who was expected to maintain via hardcoding an in-memory list which contains the same results as would be retrieved by a left join query, once the update statement has assigned foreign key values to a row, just to get the data persisted in the first place.  That concept is orthogonal to relational database programming.  To expect collections to be materialized automatically by a framework on demand is natural.  To maintain them manually and back into what foreign keys should be is somewhat unnatural, but is supported.  Since ORM is not an XML database framework, I think I can legitimately expect ORM to behave like what it is, a relational database framework.

What we really need are ORM changes to help us with many of these difficulties.  As revealed by this issue, and my test case, ORM frustrates the task of indexing by way of an external framework.

IMHO, these two teams need to come together to fully integrate ORM and Search.  To be fully successful, Hibernate Search can not remain a separate framework from ORM that tries to integrate with it from outside via SPI routines not designed specifically for indexing.  In 6.1 with database polling, you’re saying forget about ORM, I am going directly to the source.  Yes, this is an attractive option.","19/nov./2021 23:21 PM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;We have already prevented this issue from happening in our application, and do not need this fixed.  We understand that if present ORM design does not provide a way to avoid indexing removed entity objects, you may need to stop progress on this issue.

We are happy that more information is being added to the exceptions thrown, so we will know quickly where a removed object was referenced elsewhere in the graph should this cause an issue again.  Thank you for that.

{quote}And if I remember correctly, one of of your own use cases involved leaving detached entities in your entity graph, and having Hibernate Search behave as if they were attached, “because we can”, and because Hibernate ORM does.{quote}

With Hibernate Search 5, NOTHING detached was left in the object graph by indexing time.  Everything flushed was being fully refreshed before commit, leaving no removed nor detached entity in the graph.

Hibernate 6 is now directly inheriting the half-attached state of objects that ORM prefers to keep, because indexing time was changed from commit to flush.  The behavior of Hibernate ORM when an object is persisted or merged is not our use case, nor our design, but our fork of Hibernate ORM resolves this issue during persist and merge, by fully reattaching merged or persisted objects during flush, before Hibernate Search 6 sees the objects.  😀 

We have no use case for _retaining_ removed objects in the object graph, and we also have no use case for _removing_ removed objects from the object graph.  As seen in the test case, after our calls to the entity manager are complete, allowing variables to pass out of scope and be garbage collected seemed harmless.  We didn’t realize that ORM was providing Search with references to objects we deleted and destroyed, nor that Search would blindly process them as if they should be indexed verbatim, if they were to be obtained.

Doing what amounted to housekeeping on variables about to pass out of scope, to prepare them to be used by a third-party framework didn’t seem like a concern our business application would need to consider.  As we expose more of the idiosyncrasies of ORM and Search, we are discovering more ways in which Hibernate Search is highly dependent on everything that happens upstream from it, within the business application, and within ORM, for the correctness of its output.","22/nov./2021 02:31 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Good news: we may have a solution after all. See [https://github.com/hibernate/hibernate-search/pull/2705|https://github.com/hibernate/hibernate-search/pull/2705|smart-link] 

This goes to show there’s benefit in letting a problem lie and thinking about it again later. In this case, I realized that we actually _already collect_ the information “this (contained) entity was deleted”, and we can use that when indexing, to ignore deleted entities.

I believe the performance cost should be minimal, considering we mainly rely on existing data structures.

{quote}In 6.1 with database polling, you’re saying forget about ORM, I am going directly to the source. Yes, this is an attractive option{quote}

More exactly we’re still using the ORM, but we’re no longer relying on the first-level cache (the session’s persistence context) to extract information from entities; we’re reloading entities from the database, because other characteristics of this solution force us to. As a result, all the problems related to the persistence context not being in sync with the database become irrelevant, and I think that could be of great help to you.","22/nov./2021 21:32 PM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;Awesome, that’s beautiful\!",,,,,,,,,,Terminé,,
Switch from BasicType to JavaType/JdbcType for Geometry types,HHH-14925,71589,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,11/nov./2021 03:26 AM,22/nov./2021 10:42 AM,14/mars/2022 12:54 PM,22/nov./2021 10:42 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-11-12T05:32:09.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104wb4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Pagination with Sorting doesn't work in ORACLE database,HHH-14924,71588,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,,,,Giuseppe Corsaro,5be945c6d4a33127403032a7,Giuseppe Corsaro,5be945c6d4a33127403032a7,11/nov./2021 03:17 AM,07/déc./2021 02:35 AM,14/mars/2022 12:54 PM,,5.4.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,hibernate,,,,,"I'm using spring jpa with hibernate. When I use the pagination with sorting (typically in tables) the *Oracle10gDialect* generates the following SQL

{code:sql}select row_.*, rownum rownum_ from ( 
select table_.tablefield1, table_.tablefield2, table_.tablefield3... 
from table table_ where <condition>
order by table_tablefield1 desc 
) row_ where rownum <= 5{code}

According to [this|https://stackoverflow.com/questions/36741685/order-by-subquery-and-rownum-goes-against-relational-philosophy] explanation, the *order by* is in, that case, not considered as the _rownum_ changes the order of the subquery.
And in fact I'm experiencing the issue. Everything works well if I don't put any sorting field.

Due to the needs of oracle database I can't create an example but it's quite easy to reproduce.","Spring boot 2.2.0, Java 8, Linux, Oracle 19.0.0.0.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:02cd1e72-29e3-4f23-b306-f84fbbab9f1a(ug:02cd1e72-29e3-4f23-b306-f84fbbab9f1a),,,,,,,,,0|104waw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,07/déc./2021 02:35 AM;5be945c6d4a33127403032a7;Any news on this issue? It’s quite important\!,,,,,,,,,,,,,,,,A faire,,
"Allow CriteriaQuery to determine its ""return type"" as part of setting the selection",HHH-14923,71587,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,09/nov./2021 16:47 PM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,16/nov./2021 07:02 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"Currently, a CriteriaQuery such as follows causes exceptions -

```
final CriteriaQuery criteria = nodeBuilder.createQuery();
criteria.select( builder.array( ... ) );
```

`SqmCriteriaNodeBuilder#createQuery()` passes `Object.class` as the return which prevents the later `#select` call from influencing the return type",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-10T07:14:02.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104wao:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Inconsistent precedence of orm.xml implicit catalog/schema over ""default_catalog""/""default_schema""",HHH-14922,71586,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/nov./2021 08:44 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,07/déc./2021 02:47 AM,5.6-backlog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,6.0.0.Beta3,,,,,,,,,,,,0,,,,,,"If you use this {{orm.xml}}:

{noformat}
<entity-mappings xmlns=""http://xmlns.jcp.org/xml/ns/persistence/orm""
				 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
				 xsi:schemaLocation=""http://xmlns.jcp.org/xml/ns/persistence/orm
                 http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd""
				 version=""2.1"">
	<persistence-unit-metadata>
		<persistence-unit-defaults>
			<schema>someImplicitSchema</schema>
			<catalog>someImplicitCatalog</catalog>
		</persistence-unit-defaults>
	</persistence-unit-metadata>
</entity-mappings>
{noformat}

And also set the default catalog/schema in configuration properties:

{noformat}
hibernate.default_catalog = someDefaultCatalog
hibernate.default_schema = someDefaultSchema
{noformat}

Then:

* Tables mapped to entities will use the implicit catalog and schema ({{someImplicitCatalog}}/{{someImplicitSchema}})
* Tables/sequences mapped to identifier generators will use the default catalog and schema ({{someDefaultCatalog}}/{{someDefaultSchema}})

I'm honestly not sure which is the correct behavior, but that's definitely inconsistent.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-06T23:25:51.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:03933ddc-e23e-4d19-b74c-d154b2f81c3e(ug:03933ddc-e23e-4d19-b74c-d154b2f81c3e),steve(steve),yrodiere(fenrhil),,,,,,https://github.com/hibernate/hibernate-orm/pull/4351,0|104wag:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-09 17:14:27.975,,,,"09/nov./2021 09:14 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Yep, definitely inconsistent.

The values set in settings should have highest precedence.

This is supposed to be what {{org.hibernate.boot.model.relational.Database#implicitNamespace}} represents.  

When building entity and collection mappings, {{Database#implicitNamespace}} is used but {{SequenceStyleGenerator}} and {{TableGenerator}} only look at the config setting.  The generators are wrong.

The fix is simple though.","09/nov./2021 12:27 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Hmm, does that imply {{hibernate.default_catalog}} and {{hibernate.default_schema}} should also override explicit catalog/schema mappings?  E.g.

{noformat}@Table(..., catalog=""explicitCatalog"", schema=""explicitSchema""){noformat}","09/nov./2021 23:16 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;{quote}The values set in settings should have highest precedence.{quote}

Alright, thank you [~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] . I’ll try to make the behavior more consistent as part of [https://hibernate.atlassian.net/browse/HHH-14921|https://hibernate.atlassian.net/browse/HHH-14921|smart-link].

{quote}When building entity and collection mappings, {{Database#implicitNamespace}} is used but {{SequenceStyleGenerator}} and {{TableGenerator}} only look at the config setting. The generators are wrong.{quote}

It’s the _ID generators_ which end up with the correct behavior, though…

Everything (entity tables as well as ID generator tables/sequences) takes the {{orm.xml}} implicit catalog/schema into account (somehow) when the default catalog/schema is not set.

The problem only arises when you set both implicit catalog/schema in {{orm.xml}} and default catalog/schema in settings. In that case the implicit takes precedence for entities, but the default takes precedence for ID generators.

{quote}Hmm, does that imply {{hibernate.default_catalog}} and {{hibernate.default_schema}} should also override explicit catalog/schema mappings? E.g.

{{@Table(..., catalog=""explicitCatalog"", schema=""explicitSchema"")}}{quote}

I don’t think so, since the setting is a _default_?","10/nov./2021 01:19 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c]   Thinking about this a bit more, and working on a fix... I'm not sure it's a good idea to have {{hibernate.default_schema}} override the implicit schema defined in orm.xml / hbm

It would make sense for orm.xml, since in that file it's a per-persistence-unit default.

But in hbm the implicit schema/catalog are per _file_. If we overrode that with a global setting, we would potentially override _multiple_, distinct implicit schemas. And potentially create naming conflicts.

One thing that compounds the problem is that in HHH-14921, I'm trying to make the default schema interpreted on session factory creation (for Quarkus reasons), so on metadata creation we simply wouldn't know what the default schema is. We'd have to register the per-file implicit schemas somewhere, and only apply them (later) if we discover that there is no default schema. It's... nasty.

So… some alternatives:

h3. Different behavior for orm.xml and hbm

We could decide that the default schema from settings override the implicit schema from orm.xml, but not hbm. The reason would be that the implicit schema in orm.xml defines an actual default that affects the whole mapping, while the implicit schema in hbm is merely syntactic sugar designed to avoid repetition when writing an XML file.

h3. Implicit schema from orm.xml/hbm takes precedence over {{hibernate.default_schema}}

Considering that the current behavior for entity tables seems to be that the implicit schema  from orm.xml/hbm takes precedence over the default schema from settings... we could just use that behavior, and decide that the behavior of ID generators was wrong.","10/nov./2021 01:33 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;About that:

{quote}Considering that the current behavior for entity tables seems to be that the implicit schema from orm.xml/hbm takes precedence over the default schema from settings{quote}

It seems caused by the code that translates XML mapping into annotations. That code takes the default schema and and directly applies it to the generated annotation. So the rest of the codebase only seens an annotation where the schema was set explicitly.

See [https://github.com/hibernate/hibernate-orm/blob/86ad83f0b5b582bcf705d934d51921818cdc6b44/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/internal/JPAXMLOverriddenAnnotationReader.java#L2853-L2860|https://github.com/hibernate/hibernate-orm/blob/86ad83f0b5b582bcf705d934d51921818cdc6b44/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/internal/JPAXMLOverriddenAnnotationReader.java#L2853-L2860|smart-link] ","10/nov./2021 01:56 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;And apparently there is a concept of per-file implicit catalog/schema for orm.xml too.

So, to sum up, we have the following sources of “defaults”:

* Settings, global
* orm.xml, global
* orm.xml, per-file
* hbm, per-file



It seems only logical that the per-file default in orm.xml should take precedence over the global default in orm.xml. And that actually what the documentation in the XSD suggests:

{noformat}These defaults are applied to the persistence unit as a whole
unless they are overridden by local annotation or XML
element settings.{noformat}

Source: [https://github.com/hibernate/hibernate-orm/blob/9ad030aee66f9ece98df2c968c76778b21a39024/hibernate-core/src/main/resources/org/hibernate/jpa/orm_2_2.xsd#L169-L171|https://github.com/hibernate/hibernate-orm/blob/9ad030aee66f9ece98df2c968c76778b21a39024/hibernate-core/src/main/resources/org/hibernate/jpa/orm_2_2.xsd#L169-L171|smart-link] 



But then, if per-file defaults in orm.xml take precedence over the global defaults in orm.xml… they should probably take precedence over the global defaults in settings as well.



That leaves us only with global defaults in settings vs. global defaults in orm.xml. Do we still want settings to take precedence?","10/nov./2021 04:48 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}It seems only logical that the per-file default in orm.xml should take precedence{quote}

JPA already has a precedence that settings take precedence over mapping details.  And it makes sense imo if you step back and think about it.  

Imagine the app server case - you deploy an app that specifies “mapping_schema” e.g. in your mapping like my test does.  Further imagine the app server or “deployer” only want a certain schema used.  

It is fundamentally the same as overriding things from the command line.  If you specify something inside your deployment but want to override it, its pretty typical that libraries allow you to override that from the command line (or sys props in general).  

Like I said, I am certain the settings should have precedence.","10/nov./2021 04:50 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;To clarify, the precedence should be:

# {{hibernate.default_catalog}} / {{hibernate.default_schema}}
# {{orm.xml / hbm.xml}}
# {{persistence.xml}}","10/nov./2021 05:20 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Although I do think the naming of these probably does imply your interpretation.

FWIW not a single test fails with my interpretation however, so clearly not a well defined semantic","10/nov./2021 05:30 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;For the record:

See [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Default.20and.20implicit.20schema/near/260987526|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Default.20and.20implicit.20schema/near/260987526]

The precedence will be:

# Explicit values in the mapping (e.g. {{@Table(schema = ""foo"")}})
# File-level {{<catalog>}}/{{<schema>}} in orm.xml / hbm.xml
# {{hibernate.default_catalog}} / {{hibernate.default_schema}}
# {{<persistence-unit-defaults><schema>...</schema></persistence-unit-defaults>}}  from {{orm.xml}}","23/nov./2021 00:14 AM;70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349;Hi,

I am facing an issue with Hibernate 5.6 which might be related to this ticket. Hence, I want to share my feedback so you can have a look whether this is already covered within this ticket.

I have the following code working fine until 5.6.0.Beta2 but breaks with 5.6.0.CR1. Seems to be related to [https://github.com/hibernate/hibernate-orm/commit/8cecdd3f43796c134688d99b6387d59600e75738|https://github.com/hibernate/hibernate-orm/commit/8cecdd3f43796c134688d99b6387d59600e75738|smart-link] which overwrites “getNameQualifierSupport”. 



{noformat}static LocalContainerEntityManagerFactoryBean entityManagerFactory(
        CommonConfigurationProperties configurationProperties, DataSource dataSource, Stream<CommonEntityPackages> epStream)
{
    Map<String, String> props = getHibernate().getProperties();
    props.put(""hibernate.dialect"", ""org.hibernate.dialect.SybaseDialect"");
    props.put(""hibernate.default_schema"", ""dbo"");

    LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();

    em.setDataSource(dataSource);
    em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
    em.setJpaProperties(props);
    ...

    return em;
}{noformat}

This results in “com.sybase.jdbc4.jdbc.SybSQLException: database.table not found.”, because the schema is not taken into account (should be database.schema.table)

When I extend from org.hibernate.dialect.SybaseDialect and overwrite the method like it has been before, everything is fine again.

Best,

Marius","23/nov./2021 00:58 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:70121:bc31eb2d-573a-4d2a-89ef-bf7eaad06349] This looks unrelated. Your problem seems specific to a change in the Sybase dialect, while this ticket is about the generic handling of default schemas/catalogs.

The commit you pointed to changes the Sybase dialect to consider that Sybase supports catalogs, but not schemas. Hence why Hibernate ORM ignores schemas with Sybase.

If that’s incorrect, *please open a new ticket* and let’s not discuss this here. I imagine there must have been a reason to consider that sybase doesn’t supports schemas in [https://hibernate.atlassian.net/browse/HHH-14835|https://hibernate.atlassian.net/browse/HHH-14835|smart-link], so please take that into account. Most likely some versions of Sybase support schemas, while other don’t, so we’ll need to find out which is the first version to support it.",,,,,Terminé,,
Definition of the default catalog/schema on session factory creation,HHH-14921,71585,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/nov./2021 07:15 AM,10/mars/2022 03:21 AM,14/mars/2022 12:54 PM,07/déc./2021 02:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,6.0.0.Beta3,,,,,,,,,,,,0,,,,,,"Instead of on metadata creation as we currently do.

Necessary in order to set the default catalog/schema at runtime (as opposed to build-time) in Quarkus: https://github.com/quarkusio/quarkus/issues/19660",,,,,,,,,,,,,HHH-15115,,,,,,,,,,,HHH-14922,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-12-06T23:25:51.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4351,0|104wa8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Entity graph not honoured when quering entity with component,HHH-14920,71584,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Laurens Blankers,557058:75e397cd-0f4f-4eff-a1dd-b0cb29844a8e,Laurens Blankers,557058:75e397cd-0f4f-4eff-a1dd-b0cb29844a8e,09/nov./2021 03:59 AM,09/nov./2021 06:18 AM,14/mars/2022 12:54 PM,,5.4.32,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When using EntityManager::createQuery with a entity graph hint (e.g. javax.persistence.fetchgraph) the entity graph is ignored when encountering an entity with a component (called Embeddable in JPA). See test case at:

https://github.com/laurensb/hibernate-component-entitygraph

Interestingly using EntityManager::find with entity graph does work as expected (also see test case).

I also tried running the test case with a certain other JPA implementation and that one did honour the entity graph in both cases (find & query).

I am not familiar with the Hibernate code base, however through some debugging I think I found the location in the code with the problem in EntityGraphQueryHint:

https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/engine/query/spi/EntityGraphQueryHint.java#L125-L164

comparing this to the code used by EntityManager::find in LoadQueryJoinAndFetchProcessor:

https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/loader/plan/exec/internal/LoadQueryJoinAndFetchProcessor.java#L133-L154

shows the first not handling component types while the second does.

From browsing the code it seems that this issue has been around for a while, confirmed in 5.4 and 5.6, I assume it is also present in 5.5.

It would be really great if this issue could be solved. Would be even greater if the fix could be backported to 5.4 so that I can use it in a Spring Boot application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3c62ce78-2e01-4c72-aa56-41b0f064c4ae(ug:3c62ce78-2e01-4c72-aa56-41b0f064c4ae),,,,,,,,,0|104wa0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Improve handling for java.sql.Date, Time and Timestamp",HHH-14919,71583,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/nov./2021 13:11 PM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,09/nov./2021 05:19 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"The `JavaType` descriptors for `java.sql.Date`, `Time` and `Timestamp` are somewhat unique in that they can be represented in the domain model by more than one concrete type.  

In some cases they do not properly deal with this ""duality"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-09T05:19:17.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104w9s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Key-to-one to id-class entity with key-to-one doesn't work anymore,HHH-14918,71582,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,08/nov./2021 03:54 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,08/nov./2021 07:52 AM,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,hibernate-core,,,,0,,,,,,"The following commit ([https://github.com/hibernate/hibernate-orm/commit/7906a27b6ae1218ceadd8d55deb2c911d14a80f9#comments)|https://github.com/hibernate/hibernate-orm/commit/7906a27b6ae1218ceadd8d55deb2c911d14a80f9#comments)] broke support for key-to-one associations to id-class entities that in turn have a key-to-one again like here:

{code:java}    @Entity(name = ""BasicEntity"")
    public static class BasicEntity {
        @Id
        Long key1;
    }

    @Entity(name = ""IdClassEntity"")
    @IdClass(IdClassEntity.IdClassEntityId.class)
    public static class IdClassEntity {
        @Id
        @ManyToOne
        BasicEntity basicEntity;
        @Id
        Long key2;

        public static class IdClassEntityId implements Serializable {
            Long basicEntity;
            Long key2;
        }
    }

    @Entity(name = ""NestedIdClassEntity"")
    @IdClass(NestedIdClassEntity.NestedIdClassEntityId.class)
    public static class NestedIdClassEntity {
        @Id
        @ManyToOne
        IdClassEntity idClassEntity;
        @Id
        Long key3;

        public static class NestedIdClassEntityId implements Serializable {
            IdClassEntity.IdClassEntityId idClassEntity;
            Long key3;
        }
    }{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-08T07:52:09.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4343,0|104w9k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.CR1,,,,,,,,,,,,,,,,,,,,,Terminé,,
Stored Procedures do not work on @MappedSuperclass,HHH-14917,71581,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex B.,6188ce0651e8750072e1ba51,Alex B.,6188ce0651e8750072e1ba51,07/nov./2021 23:30 PM,08/nov./2021 01:28 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,hibernate,,,,"The following worked in version 5.4.28 of hibernate:

@MappedSuperclass
@SqlResultSetMapping(name = ""StudentMapper"", classes = {
        @ConstructorResult(targetClass = Student.class, columns = { @ColumnResult(name = ""Name""),
                @ColumnResult(name = ""Age"") }) })
public class Student {

    private int age;

    private String name;

    public Student(int age, String name) {
        this.age = age;
        this.name = name;
    }
//Getters
}

public List<Student> executeProcedure() {
    StoredProcedureQuery storedProcedureQuery = entityManager.createStoredProcedureQuery(
            ""sp_Student"", ""StudentMapper"");

    return storedProcedureQuery.getResultList();
}

But since version 5.4.29 it does not work anymore. In the newest version 5.6.1 it does not work, too.

(The underlying database is MSSQL.)","Spring Boot 2.5.6, Microsoft SQL Server",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2c4b9349-c1bb-41d4-b088-9a658ee85895(ug:2c4b9349-c1bb-41d4-b088-9a658ee85895),,,,,,,,,0|104w9c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,,,,,"07/nov./2021 23:37 PM;6188ce0651e8750072e1ba51;I am sorry: It works in version 5.4.29, but does not work anymore since version 5.4.30.","08/nov./2021 01:28 AM;6188ce0651e8750072e1ba51;org.springframework.dao.InvalidDataAccessApiUsageException: The given SqlResultSetMapping name [Unknown SqlResultSetMapping [StudentMapper]] is unknown; nested exception is java.lang.IllegalArgumentException: The given SqlResultSetMapping name [Unknown SqlResultSetMapping [StudentMapper]] is unknown

	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:374)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:235)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:551)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.mycompany.myapp.dataaccess.repository.StoredProcedureRepository$$EnhancerBySpringCGLIB$$6a244883.executeProcedure(<generated>)
	at com.mycompany.myapp.dataaccess.repository.StoredProcedureRepositoryTest.testexecuteProcedure(StoredProcedureRepositoryTest.java:28)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: java.lang.IllegalArgumentException: The given SqlResultSetMapping name [Unknown SqlResultSetMapping [StudentMapper]] is unknown
	at org.hibernate.internal.SessionImpl.createStoredProcedureQuery(SessionImpl.java:3623)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at jdk.proxy2/jdk.proxy2.$Proxy108.createStoredProcedureQuery(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at jdk.proxy2/jdk.proxy2.$Proxy108.createStoredProcedureQuery(Unknown Source)
	at com.mycompany.myapp.dataaccess.repository.StoredProcedureRepository.executeProcedure(StoredProcedureRepository.java:39)
	at com.mycompany.myapp.dataaccess.repository.StoredProcedureRepository$$FastClassBySpringCGLIB$$5526a59f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	... 70 more
Caused by: org.hibernate.procedure.UnknownSqlResultSetMappingException: The given SqlResultSetMapping name [Unknown SqlResultSetMapping [StudentMapper]] is unknown
	at org.hibernate.procedure.internal.Util.resolveResultSetMappings(Util.java:120)
	at org.hibernate.procedure.internal.ProcedureCallImpl.<init>(ProcedureCallImpl.java:166)
	at org.hibernate.internal.AbstractSharedSessionContract.createStoredProcedureCall(AbstractSharedSessionContract.java:1163)
	at org.hibernate.internal.SessionImpl.createStoredProcedureCall(SessionImpl.java:2091)
	at org.hibernate.internal.SessionImpl.createStoredProcedureQuery(SessionImpl.java:3620)
	... 89 more",,,,,,,,,,,,,,,A faire,,
JPA Critera query Join on Fetch not working,HHH-14916,71580,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Ratul Sharker,557058:adc7ff7a-597d-4d9f-a089-982e7404e9ea,Ratul Sharker,557058:adc7ff7a-597d-4d9f-a089-982e7404e9ea,Ratul Sharker,557058:adc7ff7a-597d-4d9f-a089-982e7404e9ea,07/nov./2021 21:30 PM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,15/nov./2021 04:43 AM,5.4.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,hibernate-core,hibernate-orm-modules,,,0,criteria,jpa21,,,,"I am using hibernate-orm with spring-data-jpa. I have three entities {{Author}}, {{Book}}, {{Chapter}} declared as follows:


*Author.java*

{code:java}@Entity
public class Author {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long authorId;

	@Column
	public String name;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = ""author"", orphanRemoval = true, cascade = CascadeType.ALL)
	public List<Book> books = new ArrayList<>();
}{code}



*Book.java*

{noformat}@Entity
public class Book {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long bookId;

	@Column
	public String name;

	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = ""author_id"", nullable = false)
	public Author author;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = ""book"", orphanRemoval = true, cascade = CascadeType.ALL)
	public List<Chapter> chapters = new ArrayList<>();
}
{noformat}



*Chapter.java*

{code:java}@Entity
public class Chapter {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public Long chapterId;

	public String name;

	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = ""book_id"", nullable = false)
	public Book book;
}
{code}

My objective is to get `Author` and fetch `books` as well, with some condition on entity `Chapter` without fetching it. The following JPQL is working fine.

{noformat}SELECT author FROM Author author
LEFT JOIN FETCH author.books book
LEFT JOIN book.chapters chapter
WHERE chapter.name = :someBookName{noformat}



When I tried using JPA Specification my Specification it looks like the following:

{code:java}(root, query, builder) -> {
     Fetch fetch = root.fetch(""books"", JoinType.LEFT);
     ListJoin listJoin = ((ListJoin)fetch).join(""chapters"");
     return builder.equal(listJoin.get(""name""), someBookName);
}{code}

I am reusing the implicit join done by the fetch operation. This join is not working in specification. It's outputting the following JPQL.

{noformat}SELECT author FROM Author author
LEFT JOIN FETCH author.books book
WHERE chapter.name = :someBookName{noformat}



throwing {{IllegalArgumentException}} with {{Invalid path: 'generatedAlias2.name'}}

I have looked into Hibernate GitHub source code. I found out that, there is a class named [QueryStructure.java|https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java#L438] responsible for generating JPQL query from the criteria object. 

I found the function [renderFetches|https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java#L471] which render the fetches.



{code:java}@SuppressWarnings({ ""unchecked"" })
	private void renderFetches(
			StringBuilder jpaqlQuery,
			RenderingContext renderingContext,
			Collection<? extends Fetch> fetches) {
		if ( fetches == null ) {
			return;
		}

		for ( Fetch fetch : fetches ) {
			( (FromImplementor) fetch ).prepareAlias( renderingContext );
			jpaqlQuery.append( renderJoinType( fetch.getJoinType() ) )
					.append( ""fetch "" )
					.append( ( (FromImplementor) fetch ).renderTableExpression( renderingContext ) );

			renderFetches( jpaqlQuery, renderingContext, fetch.getFetches() );
		}
	}{code}

Similarly there is a function [renderJoins|https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/query/criteria/internal/QueryStructure.java#L438] responsible for all the joins. 

These two are recursive functions rendering the criteria object tree. 

It's clear that all the joins inside the fetches are ignored. There is no call to function {{renderJoins}} inside from {{renderFetches}} which causes the generated query to be incomplete.

Is there any in depth reason why we are not joining inside from a fetch? If yes then how could I reuse the existing implicit joins done by fetch?



*Test Cases*

This issue is re-generated using hibernate test case template.

* [Regenerated Hibernate test case template|https://github.com/ratulSharker/hibernate-test-case-templates/tree/join-on-fetch-not-working]
* [Specific test case file|https://github.com/ratulSharker/hibernate-test-case-templates/blob/join-on-fetch-not-working/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-15T04:43:37.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:78a3baf9-371d-4046-8971-7c78c3575fce(ug:78a3baf9-371d-4046-8971-7c78c3575fce),,,,,,,,,0|104w94:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,14/nov./2021 04:19 AM;557058:adc7ff7a-597d-4d9f-a089-982e7404e9ea;I have created a [pull request|https://github.com/hibernate/hibernate-orm/pull/4365] resolving this issue. Please review my pull request.,,,,,,,,,,,,,,,,Terminé,,
Upgrade to the latest version of Eclipse ECJ,HSEARCH-4364,71579,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/nov./2021 07:11 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,05/nov./2021 10:37 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,build,tests,,,0,,,,,,"Hopefully we'll avoid errors like this one: https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/main/156/pipeline

{noformat}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile (default-testCompile) on project hibernate-search-integrationtest-mapper-orm-coordination-database-polling-jakarta: Compilation failure: Compilation failure: 
[ERROR] /mnt/jenkins-workdir/workspace/hibernate-search_main/jakarta/integrationtest/mapper/orm-coordination-database-polling/target/copied-sources/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/coordination/databasepolling/PerSessionFactoryIndexingCountHelper.java: Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.LambdaExpression$LocalTypeSubstitutor.substitute(LambdaExpression.java:1468)
[ERROR] /mnt/jenkins-workdir/workspace/hibernate-search_main/jakarta/integrationtest/mapper/orm-coordination-database-polling/target/copied-sources/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/coordination/databasepolling/PerSessionFactoryIndexingCountHelper.java:[56,5] The type org.hibernate.search.util.impl.integrationtest.mapper.orm.SimpleSessionFactoryBuilder from the descriptor computed for the target context is not visible here.  
[ERROR] /mnt/jenkins-workdir/workspace/hibernate-search_main/jakarta/integrationtest/mapper/orm-coordination-database-polling/target/copied-sources/test/java/org/hibernate/search/integrationtest/mapper/orm/automaticindexing/coordination/databasepolling/PerSessionFactoryIndexingCountHelper.java:[56,16] The type org.hibernate.search.util.impl.integrationtest.mapper.orm.SimpleSessionFactoryBuilder is not visible
[ERROR] Unknown source: java.lang.NullPointerException
{noformat}

I'm not sure we will, though: I can't reproduce this error locally...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-05T10:37:09.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2700,0|1009cw:000000xdur3mhxzzzxezsq7uxwi,,,,,,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Bidirectional ordered list mapping with not null constraints results in ConstraintViolationException,HHH-14915,71578,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,04/nov./2021 23:10 PM,04/nov./2021 23:10 PM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"It is impossible to use not null constraints with bidirectional @OneToMany and @OrderColumn, because it produces an exception:
{noformat}
javax.persistence.RollbackException: Error while committing the transaction
	at org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:81)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)
	at BidirectionalOrderedListTest.test(BidirectionalOrderedListTest.java:45)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:65)
	... 30 more
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute statement
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:109)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:37)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)
	at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3375)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3908)
	at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1416)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:507)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3299)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2434)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:449)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	... 29 more
Caused by: org.h2.jdbc.JdbcSQLException: NULL not allowed for column ""LIST_ORDER""; SQL statement:
insert into BidirectionalOrderedListTest$B (a_id, id) values (?, ?) [23502-176]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:344)
	at org.h2.message.DbException.get(DbException.java:178)
	at org.h2.message.DbException.get(DbException.java:154)
	at org.h2.table.Column.validateConvertUpdateSequence(Column.java:308)
	at org.h2.table.Table.validateConvertUpdateSequence(Table.java:726)
	at org.h2.command.dml.Insert.insertRows(Insert.java:152)
	at org.h2.command.dml.Insert.update(Insert.java:115)
	at org.h2.command.CommandContainer.update(CommandContainer.java:79)
	at org.h2.command.Command.executeUpdate(Command.java:254)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:158)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:144)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
	... 49 more
{noformat}
Test case is attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/nov./2021 22:50 PM;rsmirnov;BidirectionalOrderedListTest.java;https://hibernate.atlassian.net/secure/attachment/49939/BidirectionalOrderedListTest.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,rsmirnov(rsmirnov),,,,,,,,,0|104w8w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Passing an ExtendedBeanManager which is never notified leads to runtime errors,HHH-14914,71577,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,04/nov./2021 13:13 PM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,04/nov./2021 13:50 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"Can happen when Hibernate is passed an `ExtendedBeanManager` which is never notified through its LifecycleListener. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-04T13:49:11.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104w8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
sub-query modifiers are ignored,HHH-14913,71576,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,04/nov./2021 12:49 PM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,04/nov./2021 12:53 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"Sub-query modifiers in queries are ignored.  E.g.,

```
select e.id from BasicEntity e where e.id > all (select s.id from BasicEntity s where s.id > 1)
```

`all` is not rendered in the SQL query",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-04T12:53:14.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104w8g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Non-entity superclasses with XML mappings creates incorrect schema,HHH-14912,71575,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Will Dazey,6183fd9425f313007050fa32,Will Dazey,6183fd9425f313007050fa32,04/nov./2021 12:29 PM,10/déc./2021 01:50 AM,14/mars/2022 12:54 PM,10/déc./2021 01:50 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I was testing Hibernate's behavior with non-entity superclasses as described in section 2.11.3 of the JPA specification.

{code:java}
2.11.3 Non-Entity Classes in the Entity Inheritance Hierarchy

An entity can have a non-entity superclass, which may be either a concrete or abstract class.[22]
The non-entity superclass serves for inheritance of behavior only. The state of a non-entity superclass is
not persistent. Any state inherited from non-entity superclasses is non-persistent in an inheriting entity
class. This non-persistent state is not managed by the entity manager[23]. Any annotations on such
superclasses are ignored.
{code}

However, I am seeing a difference in behavior between the annotation version and the equivalent XML mapping version. Hibernate generates incorrect schemas for XML mapped classes; including the non-entity superclass fields in the XML mapped entity table. First, I will document the annotation usecase and Hibernates behavior.

 — Annotation Usecase —

{code:java}
@Entity
public class PKEntityLong extends AbstractPKEntity {
    @Id
    private long pkey;
    private int intVal;

    public long getPkey() {
        return this.pkey;
    }
    public void setPkey(long pkey) {
        this.pkey = pkey;
    }

    @Override
    public int getIntVal() {
        return this.intVal;
    }
    @Override
    public void setIntVal(int intVal) {
        this.intVal = intVal;
    }

    @Override
    public long getLongPK() {
        return getPkey();
    }
    @Override
    public void setLongPK(long pkey) {
        setPkey(pkey);
    }
}

public abstract class AbstractPKEntity implements IPKEntity {

    @Override
    public boolean getBooleanPK() {
        return false;
    }
    @Override
    public Boolean getBooleanWrapperPK() {
        return new Boolean(false);
    }
... // There are other methods for similar Object types, but are ultimately inconsequential in this usecase

    @Override
    public long getLongPK() {
        return 0;
    }
    @Override
    public void setLongPK(long pkey) { }
}

public interface IPKEntity {
    public boolean getBooleanPK();
    public Boolean getBooleanWrapperPK();
...
    public int getIntVal();
    public void setIntVal(int intVal);

    public long getLongPK();
    public void setLongPK(long pkey);
{code}

Hibernate generated schema:

{code:sql}
create table PKEntityLong (pkey bigint not null, intVal integer not null, primary key (pkey))
{code}

Notice how the non-entity superclass `AbstractPKEntity` declares no fields and only contains ""getter/setter"" methods. These should ultimately be ignored as business logic and not be reflected in any entity subclasses. I am seeing in the annotation example that the entity PKEntityLong table is only generating with the columns listed in the entity class.  I believe this is a correct schema generation.

— XML Mapping Usecase —


{code:java}
public class XMLPKEntityLong extends AbstractPKEntity {
    private long pkey;
    private int intVal;

    public long getPkey() {
        return pkey;
    }
    public void setPkey(long pkey) {
        this.pkey = pkey;
    }

    @Override
    public int getIntVal() {
        return intVal;
    }
    @Override
    public void setIntVal(int intVal) {
        this.intVal = intVal;
    }

    @Override
    public long getLongPK() {
        return getPkey();
    }
    @Override
    public void setLongPK(long pkey) {
        setPkey(pkey);
    }
}

// See AbstractPKEntity, IPKEntity in annotation example above
{code}

orm.xml:

{code:xml}
...
    <entity class=""jpa.entity.entities.pk.xml.XMLPKEntityLong"">
        <attributes>
            <id name=""pkey""></id>
            <basic name=""intVal""></basic>
        </attributes>
    </entity>
...
{code}

Hibernate generated schema:

{code:sql}
create table XMLPKEntityLong (pkey bigint not null, intVal integer not null, longPK bigint not null, primary key (pkey))
{code}

Notice that with XML mapping, the schema is generating with an additional column `longPK` even though the XML configuration lists no such field. Is Hibernate processing the `XMLPKEntityLong` class using property access and assuming getLongPK()/setLongPK() refer to unlisted fields? That is unwarranted, incorrect according to the specification, and inconsistent with the annotation usecase.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139(ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139),,,,,,,,0|104w88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-11 08:48:17.128,,,,"11/nov./2021 00:48 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Have you tried adding the following to your persistence.xml?

{code:xml}    <persistence-unit-metadata>
        <xml-mapping-metadata-complete/>
    </persistence-unit-metadata>{code}

I think that the default behavior of XML is that it overrides inferred information. If you don’t want that, specifying that the mapping is complete is the way to go.

Section from the spec 12.1

{quote}If the xml-mapping-metadata-complete subelement is specified, the complete set of mapping metadata for the persistence unit is contained in the XML mapping files for the persistence unit, and any persistence annotations on the classes are ignored. 

If xml-mapping-metadata-complete is specified and XML elements are omitted, the default values apply. These default values are the same as the corresponding defaults when annotations are used, except in the cases specified in Section 12.2 below. When the xml-mapping-metadata-complete element is specified, any metadata-complete attributes specified within the entity, mapped-superclass, and embeddable elements are ignored. 

If the xml-mapping-metadata-complete subelement is not specified, the XML descriptor overrides the values set or defaulted by the use of annotations, as described below.{quote}","11/nov./2021 17:22 PM;6183fd9425f313007050fa32;{quote}If the xml-mapping-metadata-complete subelement is specified, the complete set of mapping metadata for the persistence unit is contained in the XML mapping files for the persistence unit, and any persistence annotations on the classes are ignored.

If the xml-mapping-metadata-complete subelement is not specified, the XML descriptor
overrides the values set or defaulted by the use of annotations, as described below.{quote}

As I describe in the description, I ran under two usecases: 

# annotations only
# XML mappings only

For the XML mappings test, I am not using any annotations that would be overridden by the XML configuration. I don’t think setting {{xml-mapping-metadata-complete}} should be required for an already XML-only configuration.



Nevertheless, I did test using {{xml-mapping-metadata-complete}}. Unfortunately, it did not resolve the issue.","11/nov./2021 17:31 PM;6183fd9425f313007050fa32;I’m very surprised that the strategy here is to make a suggestion, assume that will fix the issue, and then close the bug\! Now you need to remember to come back and reopen a closed issue or this will just be lost to the void. Bad strategy imo","11/nov./2021 17:36 PM;6183fd9425f313007050fa32;You closed this bug under the “Cannot Reproduce” condition, but did not indicate you tried to reproduce or validate. Did you reproduce the failure, but also validate that xml-mapping-metadata-complete resolved the issue? Or did you just suggest trying it and close? I assume the former given that I did test using the suggested property and it did not resolve the issue on my side.","11/nov./2021 22:19 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;>For the XML mappings test, I am not using any annotations that would be overridden by the XML configuration. I don’t think setting xml-mapping-metadata-complete should be required for an already XML-only configuration.

Even if you think so, the spec is pretty clear about this. You don't need any annotations on the fields/getters for the spec to require interpretation as persistent attributes.

Nonetheless, if you can provide a test case(https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java) that reproduces the issue, we can give a deeper look.

Please understand that people report a ton of issues and oftentimes after this initial ""dump"", they never respond. I was pretty sure this was due the missing configuration, but if it is not, then this really is a bug, hence why I reopened this issue.","11/nov./2021 22:21 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;{quote}You closed this bug under the “Cannot Reproduce” condition, but did not indicate you tried to reproduce or validate. Did you reproduce the failure, but also validate that xml-mapping-metadata-complete resolved the issue? Or did you just suggest trying it and close? I assume the former given that I did test using the suggested property and it did not resolve the issue on my side.{quote}

Please don’t take this personal. I’m just trying to keep things cleaned up here and it’s totally fine to reopen the issue if it turns out to be an actual bug, which I did 🙂 ","12/nov./2021 13:13 PM;6183fd9425f313007050fa32;I’m not sure I agree with the strategy of: Close, wait to see if they follow up, then reopen if they do. That keeps your overall numbers low, but still leaves a ton of issues that should be fixed. 

I also don’t agree with the strategy of: assume there isnt a problem unless they checkout our git repo and integrate a test that reproduces the problem. My test is a very simple JSE test that can be dropped into anyones testing environment, assuming they know their own environment. Requiring me to learn your testing environment or dismiss the issue seems like a bad strategy",12/nov./2021 14:39 PM;6183fd9425f313007050fa32;I created a test case here: [https://github.com/hibernate/hibernate-test-case-templates/pull/49|https://github.com/hibernate/hibernate-test-case-templates/pull/49|smart-link] ,"12/nov./2021 15:59 PM;6183fd9425f313007050fa32;{quote}it’s totally fine to reopen the issue if it turns out to be an actual bug{quote}

Again, if you remember to or if the reporter actually comes back to check up on the issue.



I think you need to appreciate that probably only 10% of users will actually come back and check up on the issue. And of those 10%, probably only another 10% will actually take the time and effort to create a test against your framework; creating a PR. 

That means your probably only getting 1% of your issues taken to a stage where you are willing to take a look. That’s great when you want to say “Our product is great, we have barely any open issues\!”, but fails miserably when you have legitimate issues you will only end up looking at 1% of the time.

I’m really sorry, I don’t mean to badger you in specific. I just see this behavior and disagree with it wholeheartedly. I’d rather your community just leave issues open because no one has time to investigate. That’s fine. Just don’t close them cause no one has time right this second.","13/nov./2021 03:07 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;First, I’d like to ask you to please keep the discussion here on a technical level. If you want talk about issue management or something else, you are very welcome to get in touch with the Hibernate community on Zulip.

Having said that, thanks a lot for the test case. This is very much appreciated and will make it much more likely to be fixed. Could you please add the metadata complete snippet

{{<persistence-unit-metadata><xml-mapping-metadata-complete/></persistence-unit-metadata>}}

so I can actually see the failure with that?

Also, it seems that your test is running just fine, there is no test failure for the test you added. You can see the pipeline run for this on [https://ci.hibernate.org/blue/organizations/jenkins/hibernate-test-case-templates/detail/PR-49/1/pipeline|https://ci.hibernate.org/blue/organizations/jenkins/hibernate-test-case-templates/detail/PR-49/1/pipeline|smart-link] ",13/nov./2021 03:08 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;You could assert that the schema doesn’t contain the column by e.g. asserting an exception is thrown on a native query like {{select longPK from XMLPKEntityLong}},"14/nov./2021 12:03 PM;6183fd9425f313007050fa32;Thank you\! I wasn’t quite sure how to test to validate teh schema generation, but the native query suggestion was a good idea. I have updated to include that strategy and I see it is failing with the expected error. ","15/nov./2021 04:17 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Ok, so could you please also add {{<persistence-unit-metadata><xml-mapping-metadata-complete/></persistence-unit-metadata>}} as that is required by the specification to instruct the JPA provider to treat the XML as “complete mapping” and not as “additional mapping”.","15/nov./2021 07:54 AM;6183fd9425f313007050fa32;I don’t agree that {{xml-mapping-metadata-complete}} is required by the specification to use XML mapping. I’m not quite sure why you keep thinking that property is required/needed here.
The only purpose of the {{xml-mapping-metadata-complete}} configuration is to inform the provider that XML relational mapping descriptors should override any annotation values. When {{xml-mapping-metadata-complete}} is used, any persistence annotations on the classes are ignored.

However, there are no annotations in this usecase. There are no annotations to ignore. Why would a user read section 12.1, look at their XML only configuration, and come to the conclusion that {{xml-mapping-metadata-complete}} is required by Hibernate?



Also, setting {{xml-mapping-metadata-complete}} has no visible change to behavior ","16/nov./2021 00:09 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Let me cite the specification 12.1.:

{quote}If the xml-mapping-metadata-complete subelement is specified, the complete set of mapping metadata for the persistence unit is contained in the XML mapping files for the persistence unit, and any persistence annotations on the classes are ignored. 

If xml-mapping-metadata-complete is specified and XML elements are omitted, the default values apply. These default values are the same as the corresponding defaults when annotations are used, except in the cases specified in Section 12.2 below. When the xml-mapping-metadata-complete element is specified, any metadata-complete attributes specified within the entity, mapped-superclass, and embeddable elements are ignored.{quote}

So from this it follows that not specifying this element will cause the *default values to apply*, just like the second section I cited says. Now you might think that because there are no annotations on the properties, that “the annotation perspective” is that the class has no properties, but this is AFIAU not correct. Every property/field (depending on the access type) has implicit defaults as per 2.8, even if it doesn’t have annotations.

{quote}If a persistent field or property other than a relationship property is not annotated with one of the mapping annotations defined in Chapter 11 (or equivalent mapping information is not specified in the XML descriptor), the following default mapping rules are applied in order: 

• If the type is a class that is annotated with the Embeddable annotation, it is mapped in the same way as if the field or property were annotated with the Embedded annotation. See Section 11.1.15 and Section 11.1.16. 

• If the type of the field or property is one of the following, it is mapped in the same way as it would if it were annotated as Basic: Java primitive types, wrappers of the primitive types, java.lang.String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, java.time.LocalDate, java.time.LocalTime, java.time.LocalDateTime, java.time.OffsetTime, java.time.OffsetDateTime, byte\[], Byte\[], char\[], Character\[], enums, any other type that implements Serializable. See Section 11.1.6, Section 11.1.18, Section 11.1.28, and Section 11.1.53. 

It is an error if no annotation is present and none of the above rules apply{quote}

I’m also actually pretty sure that the TCK asserts this interpretation, which is, XML mapping is by default an override to the implicit mapping defaults. So using {{<entity class=”...”>}} within the orm.xml is like annotating the class with {{@Entity}}, which I hope you agree is bound to this implicit mapping defaults.

So what is happening from my POV for your model is that, because you are missing the {{xml-mapping-metadata-complete}} element, the properties/fields are interpreted as per 2.8 and the XML mapping is treated as override.

Now, if you could please commit the persistence.xml change, we could observe what Hibernate does with a mapping that meets your needs according to the JPA spec and if it doesn’t, I will take a deeper look.","10/déc./2021 01:49 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I’ll close this issue as I provided you citation from the spec that supports/permits the current behavior and you haven’t responded yet. You know the procedure, I’ll reopen in case you think this is still an issue 😉. After all, Hibernate is passing the JPA TCK, so if there is anything to do here, it would be adding a test to the TCK that asserts whatever behavior you think can be deduced from the spec text. Like I outlined through citation though, and I assume other JPA spec committers will come to the same conclusion, the current behavior is AFAIU supported/permitted.",Terminé,,
Can't run Configuration().configure().buildSessionFactory() method for create instance for the first time in Tomcat context.,HHH-14911,71574,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Impossible à reproduire,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,mattia marchetti,5cdec71109c5fa0fd9faf891,mattia marchetti,5cdec71109c5fa0fd9faf891,04/nov./2021 11:36 AM,11/nov./2021 00:54 AM,14/mars/2022 12:54 PM,11/nov./2021 00:54 AM,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,docker,hibernate,tomcat9,,,"After many hours of work I have come to the conclusion then Hibernate version 5.6.1 and Tomcat version 9.0 are incompatible.
The Tomcat version tested by me is simple to replicate because I have used this image of docker: tomcat:9.0.
After call in initial context the method: Configuration().configure().buildSessionFactory()... Tomcat report the error then I attached and kill the process.
When I insert in my pom.xml the hibernate version 5.4.2.Final the bug was fix.


",Tomcat v9.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/nov./2021 11:32 AM;ug:0bfd0acf-eb8f-4353-8343-d375f5b401ad;error.txt;https://hibernate.atlassian.net/secure/attachment/49938/error.txt,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,christian.beikov(christian.beikov),ug:0bfd0acf-eb8f-4353-8343-d375f5b401ad(ug:0bfd0acf-eb8f-4353-8343-d375f5b401ad),,,,,,,,0|104w80:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.2,2021-11-11 08:54:11.587,,,,"11/nov./2021 00:54 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Even though you are saying that it is easy to reproduce you are not providing a reproducer, so there is nothing we can do. Apart from that, the problem is not the integration or anything but something in your model that apparently doesn't work anymore in 5.6.1.Final. If you get around to actually provide more information about the error and the entity model or maybe even a reproducer, you can create a new issue, but this issue is useless to us.",,,,,,,,,,,,,,,,Terminé,,
Mapping Embeddable to Secondary Table with XML mapping creates incorrect schema,HHH-14910,71573,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Will Dazey,6183fd9425f313007050fa32,Will Dazey,6183fd9425f313007050fa32,04/nov./2021 09:07 AM,10/déc./2021 01:43 AM,14/mars/2022 12:54 PM,10/déc./2021 01:43 AM,5.2.18,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I was testing Hibernate's behavior with Secondary Tables and Embeddables and noticed a difference in behavior between the annotation version and the equivalent XML mapping version. First, I will document the annotation usecase and Hibernates behavior.

— Annotation Usecase —

{code:java}@Entity
@SecondaryTable(name = ""SEC_TABLEEMB"", pkJoinColumns = @PrimaryKeyJoinColumn(name = ""id""))
public class AnnEmbedMultiTableEnt {
    @Id private int id;
    private String name;

    @Embedded
    @AttributeOverrides({ @AttributeOverride(name = ""street"", column = @Column(table = ""SEC_TABLEEMB"")),
                          @AttributeOverride(name = ""city"", column = @Column(table = ""SEC_TABLEEMB"")),
                          @AttributeOverride(name = ""state"", column = @Column(table = ""SEC_TABLEEMB"")),
                          @AttributeOverride(name = ""zip"", column = @Column(table = ""SEC_TABLEEMB"")) })
    private MTEmbeddable embeddedObj;
...
}

@Embeddable
public class MTEmbeddable implements Serializable {
    private String street;
    private String city;
    private String state;
    private String zip;
...
}{code}

Hibernate generated schema:

{code:sql}create table AnnEmbedMultiTableEnt (
    id integer not null, name varchar(255), primary key (id)
)
create table SEC_TABLEEMB (
    city varchar(255), state varchar(255), street varchar(255), zip varchar(255), id integer not null, primary key (id)
)
alter table SEC_TABLEEMB  add constraint FKf95axq0hu7vdm1vopk83qalp foreign key (id) references AnnEmbedMultiTableEnt{code}

Notice how the primary table `AnnEmbedMultiTableEnt` does not contain the Embeddable values as they have been mapped to the Secondary Table via `@Column(table = ""SEC_TABLEEMB"")` in the AttributeOverrides. I believe this is a correct schema generation.

— XML Mapping Usecase —

{code:java}public class XMLEmbedMultiTableEnt {
    private int id;
    private String name;
    private XMLMTEmbeddable embeddedObj;
}
public class XMLMTEmbeddable implements Serializable {
    private String street;
    private String city;
    private String state;
    private String zip;{code}

orm.xml:

{code:xml}...
    <entity
        class=""jpa.entity.entities.multitable.xml.XMLEmbedMultiTableEnt"">
        <secondary-table name=""XSEC_TABLEEMB"">
            <primary-key-join-column name=""id"" />
        </secondary-table>
        <attributes>
            <id name=""id""></id>
            <basic name=""name""></basic>
            <embedded name=""embeddedObj"">
                <attribute-override name=""street"">
                    <column table=""XSEC_TABLEEMB"" />
                </attribute-override>
                <attribute-override name=""city"">
                    <column table=""XSEC_TABLEEMB"" />
                </attribute-override>
                <attribute-override name=""state"">
                    <column table=""XSEC_TABLEEMB"" />
                </attribute-override>
                <attribute-override name=""zip"">
                    <column table=""XSEC_TABLEEMB"" />
                </attribute-override>
            </embedded>
        </attributes>
    </entity>
    <embeddable
        class=""jpa.entity.entities.multitable.xml.XMLMTEmbeddable"">
        <attributes>
            <basic name=""street""></basic>
            <basic name=""city""></basic>
            <basic name=""state""></basic>
            <basic name=""zip""></basic>
        </attributes>
    </embeddable>
...{code}

Hibernate generated schema:

{code:sql}create table XMLEmbedMultiTableEnt (
    id integer not null, city varchar(255), name varchar(255), state varchar(255), street varchar(255), zip varchar(255), primary key (id)
)
create table XSEC_TABLEEMB (
    city varchar(255), state varchar(255), street varchar(255), zip varchar(255), id integer not null, primary key (id)
)
alter table XSEC_TABLEEMB add constraint FKprr5o8qw74rxr7gnnr6ol7ida foreign key (id) references XMLEmbedMultiTableEnt{code}

Notice now how the primary table `XMLEmbedMultiTableEnt` DOES contain the Embeddable values; as well as the Secondary Table. 

The issue however, may be more complex than JUST the schema generation being wrong. If I use the Annotation Usecase schema (which is correct), but run with the XML mapping configuration, Hibernate assumes that the primary table `XMLEmbedMultiTableEnt` should have the columns that should be attributeoverridden to the Secondary Table and fails with an exception on transaction commit:

{code:java}at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1443)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:494)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3245)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2451)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:473)
	at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl.beforeCompletion(JtaTransactionCoordinatorImpl.java:330)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.SynchronizationCallbackCoordinatorNonTrackingImpl.beforeCompletion(SynchronizationCallbackCoordinatorNonTrackingImpl.java:47)
	at org.hibernate.resource.transaction.backend.jta.internal.synchronization.RegisteredSynchronization.beforeCompletion(RegisteredSynchronization.java:37)
Caused by: java.sql.SQLSyntaxErrorException: 'CITY' is not a column in table or VTI 'APP.XMLEMBEDMULTITABLEENT'.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source){code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139(ug:14f4c9bf-6da2-49f2-a6cb-3425cf1ea139),,,,,,,,0|104w7s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-11 09:14:12.5,,,,"11/nov./2021 01:14 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I believe the reason for this issue is the same as I outlined in [https://hibernate.atlassian.net/browse/HHH-14912|https://hibernate.atlassian.net/browse/HHH-14912|smart-link] so I will close this issue for now. If that is not the case, I can reopen it.","11/nov./2021 17:27 PM;6183fd9425f313007050fa32;@Christian No, the suggestion you gave for [https://hibernate.atlassian.net/browse/HHH-14912|https://hibernate.atlassian.net/browse/HHH-14912|smart-link] did not resolve that issue nor this issue. Also, these issues are completely different. I think it is unwise to close issues without a resolution and expect to just reopen them again in the future if you get around to it.","11/nov./2021 22:27 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;{quote}I think it is unwise to close issues without a resolution and expect to just reopen them again in the future if you get around to it.{quote}

See, the problem I am trying to solve with this strategy is to ensure the reporter is still around and provides a test case([https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java)|https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java)]  that reproduces the issue. Like I wrote on the other issue, there are tons of reports where the reporter never provides the reproducer and also never responds back. Regardless, let’s please get past this and stick to the technical aspects, the strategy is merely a way to keep things cleaned up.

{quote}Also, these issues are completely different.{quote}

That’s not true, because the reason you are seeing this is the same one. The XML mapping is interpreted as “additional mapping” instead of as “complete mapping”. Like I tried to explain on the other issue, the JPA spec requires us to interpret fields/getters even if they don’t have annotations on them, so that’s what is happening. The spec says we have to use the “implicit default values”, which is exactly what I tried to explain.","12/nov./2021 14:41 PM;6183fd9425f313007050fa32;{quote}Like I wrote on the other issue, there are tons of reports where the reporter never provides the reproducer and also never responds back.{quote}

Question 1: Did you read my description where I detail how to reproduce the failure?
Question 2: Did you attempt to reproduce the failure?

If you have an issue that prevents you from running my reproduce description, respond with that issue so that I can update the description. If I dont respond, then close as “unable to be reproduced”.

{quote}the strategy is merely a way to keep things cleaned up.{quote}

I think it’s a bad strategy since you are not actually attempting to validate. If you did, and legitimately could not reproduce, fair enough and I apologize for everything\! Otherwise, your closing possibly legitimate issues because you dont have the time right now? Because reporters didn’t go the extra step of committing tests? Be happy people report issues that you can fix. If you dont have time to validate, leave them open as “to be investigated” or close with “not enough information” if there legitimately isnt enough information.","12/nov./2021 15:41 PM;6183fd9425f313007050fa32;{quote}That’s not true, because the reason you are seeing this is the same one. The XML mapping is interpreted as “additional mapping” instead of as “complete mapping”{quote}

I disagree. These are two entirely different issues. The root cause may be the same thing in the Hibernate code, but until you fix it you are only guessing about that and users do not know about that. The only similarity between these issues is that they involve incorrect DDL generation for XML mapped entities. The root cause could be in completely different locations\!

[https://hibernate.atlassian.net/browse/HHH-14912|https://hibernate.atlassian.net/browse/HHH-14912|smart-link] deals with non-entity superclass mappings being incorrectly added to inheriting entity classes. Spec section 2.11.3 prohibits this behavior specifically. 

[https://hibernate.atlassian.net/browse/HHH-14910|https://hibernate.atlassian.net/browse/HHH-14910|smart-link] deals with Embeddable fields that should be `attribute-override` to a Secondary Table.

One issue is adding XML non-entity superclass fields and the other is adding XML embeddable attribute override fields. Again, the root issue may be the same in the code, but the user usecase is completely different and until you fix it, you are only guessing that they are the same issue.",12/nov./2021 15:42 PM;6183fd9425f313007050fa32;I created a test case here: [https://github.com/hibernate/hibernate-test-case-templates/pull/50|https://github.com/hibernate/hibernate-test-case-templates/pull/50|smart-link] ,"13/nov./2021 03:04 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;First, I’d like to ask you to please keep the discussion here on a technical level. If you want talk about issue management or something else, you are very welcome to get in touch with the Hibernate community on Zulip.

Having said that, thanks a lot for the test case. This is very much appreciated and will make it much more likely to be fixed. Could you please add the metadata complete snippet

{{<persistence-unit-metadata><xml-mapping-metadata-complete/></persistence-unit-metadata>}}

 so I can actually see the failure with that?

Also, it seems that your test is not reproducing this issue but failing to boot saying {{No identifier specified for entity: org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt}}. You can see the pipeline run for this on [https://ci.hibernate.org/blue/organizations/jenkins/hibernate-test-case-templates/detail/PR-50/1/pipeline|https://ci.hibernate.org/blue/organizations/jenkins/hibernate-test-case-templates/detail/PR-50/1/pipeline|smart-link] ","14/nov./2021 11:15 AM;6183fd9425f313007050fa32;{quote}{{No identifier specified for entity: org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt}}{quote}

Looking at the trace, I am seeing the following:


{noformat}WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt.id not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt.name not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt.embeddedObj not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLMTEmbeddable.street not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLMTEmbeddable.city not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLMTEmbeddable.state not found in class but described in <mapping-file/> (possible typo error)
Nov 12, 2021 5:23:49 PM org.hibernate.cfg.annotations.reflection.internal.JPAXMLOverriddenAnnotationReader checkForOrphanProperties
WARN: HHH000207: Property org.hibernate.bugs.hhh14910.model.xml.XMLMTEmbeddable.zip not found in class but described in <mapping-file/> (possible typo error){noformat}

Can you see anything wrong with my configuration? These warnings seem to be inconsistent with my model. I can’t see anything obviously wrong, but I’m probably just missing something.

Ex. {{org.hibernate.bugs.hhh14910.model.xml.XMLEmbedMultiTableEnt.name not found in class}}

That field actually does exist in the class. The class is listed in the persistence.xml. Removing the <exclude-unlisted-classes> doesn't seem to change this","14/nov./2021 12:47 PM;6183fd9425f313007050fa32;Ok, so it turned out that the reason for the WARNINGS was because I did not have getter/setter methods specified on the XML entity classes. It took me a bit to think of that as a possibility as the messages didn’t really imply that to be the issue, but after adding those methods, it started working.

This may to be another bug as I am not required to set getter/setter methods on the annotation entity classes. Or maybe a place for messaging improvement… But section 2.3.1 of the specification is pretty vague on the default access type for XML based configuration… it may just be a grey area and provider specific behavior.","14/nov./2021 13:59 PM;6183fd9425f313007050fa32;After looking at this case further, I discovered that if I explicitly set 'access=""FIELD""' on the orm.xml mapping, then the DDL starts generating as expected.

It appears that XML processing is defaulting to use AccessType.PROPERTY for Hibernate (this appears to be at odds with other persistent providers like EclipseLink and OpenJPA who default to FIELD). This is causing the problem as inherited methods are being treated as persistent fields, even if there are no persistent fields.



The spec defines the default type for annotations quite well in section 2.3.1, but then only mention XML configuration with a footnote:

{quote}The use of XML as an alternative and the interaction between Java language annotations and XML elements in defining default
and explicit access types is described in Chapter 12.{quote}

Unfortunately, Chapter 12 fails to ever describe a default for XML elements other than simply how to override the default with the “access” XML configuration.



I think perhaps the only comment of substance I can find is the following from section 2.3.1:

{quote}It is an error if a default access type cannot be determined and an access type is not explicitly specified
by means of annotations or the XML descriptor.{quote}

For XML, it may be argued that a default access type cannot be determined given no annotations or explicit instructions. And if no explicit access type is specified, then providers should error.

Thoughts?",15/nov./2021 04:12 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Sounds to me like this is not clearly specified and thus it is the user responsibility to set the access type. AFAIU this is not a bug then?,"09/déc./2021 20:17 PM;6183fd9425f313007050fa32;Yes, my conclusion is that the JPA specification is not clear on specifying any default access type for XML configuration. Hibernate defaults to AccessType.PROPERTY for XML configuration and for my test above, the super class getter/setting methods with this unexpected default accesstype was causing unexpected behavior.

I believe this case can be closed. Thanks you for the assistance\!",,,,,Terminé,,
NPE on SingletonTask,HSEARCH-4363,71572,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Gustavo Fernandes,557058:083ff261-4168-4515-981d-75f8fd1c9fd8,Gustavo Fernandes,557058:083ff261-4168-4515-981d-75f8fd1c9fd8,04/nov./2021 07:46 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,05/nov./2021 07:24 AM,6.0.7.Final,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta1,,,,,,,,,,,,0,,,,,,"{noformat}
ERROR: HSEARCH000058: Exception occurred java.lang.NullPointerException
Failing operation:
Handling post-execution in task 'Delayed commit for index 'org.infinispan.QueryTest$MyBook''

java.lang.NullPointerException
	at org.hibernate.search.engine.backend.orchestration.spi.SingletonTask$RunnableWrapper.afterRun(SingletonTask.java:229)
	at org.hibernate.search.engine.backend.orchestration.spi.SingletonTask$RunnableWrapper.onWorkFinished(SingletonTask.java:205)
	at org.hibernate.search.util.common.impl.Futures.lambda$handler$2(Futures.java:80)
	at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:930)
	at java.base/java.util.concurrent.CompletableFuture.uniHandleStage(CompletableFuture.java:946)
	at java.base/java.util.concurrent.CompletableFuture.handle(CompletableFuture.java:2266)
	at org.hibernate.search.engine.backend.orchestration.spi.SingletonTask$RunnableWrapper.run(SingletonTask.java:192)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/nov./2021 07:46 AM;gustavonalle;reproducer.zip;https://hibernate.atlassian.net/secure/attachment/49937/reproducer.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-05T07:24:35.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,fercoli(fercoli),gustavonalle(gustavonalle),,,,,,,https://github.com/hibernate/hibernate-search/pull/2698,0|1009cw:000000xdur3mhxzzzxezsq7uwcr,,,,,,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Schema Update ojn H2 always re-creates unique indices from table definition,HHH-14909,71571,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Michael Wyraz,5f5732d086199e007c0b963e,Michael Wyraz,5f5732d086199e007c0b963e,04/nov./2021 06:42 AM,04/nov./2021 06:51 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.8,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hello,

my program checks on startup for pending schema updates by dry-running SchemaUpdate against the database. It turned out that this does not work properly on unique indices with H2.

I have created a test case for it (see below). I tracked the issue down to AbstractSchemaMigrator.applyUniqueKeys. It looks for an index `UKJMXNS5RIFN5RV1V6M4NLB3H1H` but the index in TableInformationImpl is named `UKJMXNS5RIFN5RV1V6M4NLB3H1H_INDEX_E`. So the existing index is not found and a new is applied.



{code:java}package test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;

import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.tool.hbm2ddl.SchemaUpdate;
import org.hibernate.tool.schema.TargetType;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabase;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;

public class TestH2SchemaMigration {
	
	@Entity
	@Table(name=""testdata"", indexes = @Index(columnList = ""prop1"", unique = true))
	public class TestEntity1 {
		@Id
		public String id;

		@Id
		public String prop1;
	}
	
	
	@Test
	public void testMigration() throws Exception {

		EmbeddedDatabase h2=new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2).build();
		
		ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
				.applySetting(""hibernate.dialect"",""org.hibernate.dialect.H2Dialect"")
				.applySetting(""hibernate.connection.datasource"", h2)
				.build();
		
		MetadataSources meta=new MetadataSources(serviceRegistry);
		meta.addAnnotatedClass(TestEntity1.class);
		
		String schemaInit=getPendingSchemaUpdates(meta);
		
		System.err.println(""Initial schema:"");
		System.err.println(""-----"");
		System.err.println(schemaInit);
		System.err.println(""-----"");
		System.err.println();
		
		h2.getConnection().createStatement().execute(schemaInit);
		

		String schemaUpdate=getPendingSchemaUpdates(meta);
		
		System.err.println(""Updated schema:"");
		System.err.println(""-----"");
		System.err.println(schemaUpdate);
		System.err.println(""-----"");
		System.err.println();
		
		assertEquals("""",schemaUpdate.trim());
		
	}
	
	protected String getPendingSchemaUpdates(MetadataSources meta) throws Exception {
		PrintStream origOut=System.out;
		GrabSchemaPrintStream grabOut=new GrabSchemaPrintStream(origOut);
		try {
			// Start grabbing Stdout
			System.setOut(grabOut);
			new SchemaUpdate()
				.setDelimiter("";"")
				.setFormat(true)
				.setHaltOnError(true)
				.execute(EnumSet.of(TargetType.STDOUT), meta.buildMetadata());
		} finally {
			// Stop grabbing Stdout
			System.setOut(origOut);
		}

		return grabOut.toString();
	}

	/**
	 * Derived from https://stackoverflow.com/a/741783
	 * 
	 * Captures stdout of the current thread (only System.put.println) since Hibernate SchemaUpdate can only write to files or stdout.
	 * 
	 * It also fixes indentation per SQL command since each seems to have it's own indentation...
	 *   
	 * @author mwyraz
	 */
	protected static class GrabSchemaPrintStream extends PrintStream {
		protected final Thread myThread=Thread.currentThread();
		protected final List<String> grabbedLines=new ArrayList<>();
		public GrabSchemaPrintStream(PrintStream originalTarget) {
			super(originalTarget);
		}
		public void println(String line) {
			if (Thread.currentThread()==myThread) { // only grab for current thread
				grabbedLines.add(line);
			} else {
				super.println(line);
			}
		}
		public String toString() {
			return String.join(""\n"",grabbedLines);
		}
		
	}
	
}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0c5908af-4180-449e-aff4-edf15a18eae5(ug:0c5908af-4180-449e-aff4-edf15a18eae5),,,,,,,,,0|104w7c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
CriteriaBuilder isFalse() does not return the negated predicate,HHH-14908,71570,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Tim Boeckstaens,557058:ea9f4380-d5e4-4e66-90c7-0efc7c6fb890,Tim Boeckstaens,557058:ea9f4380-d5e4-4e66-90c7-0efc7c6fb890,04/nov./2021 04:27 AM,11/nov./2021 01:25 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The behaviour of Predicate::not was altered in HHH-8450 to return a new instance. 
CriteriaBuilderImpl has a method isFalse() which negates the given expression.
In case the expression is a Predicate, the new instance should be returned. 

Before HHH-8450 the negation worked as no new instance was returned but the state of the Predicate was changed. 
After the change the not-negated predicate is returned as-is resulting in different behavior.

To fix this issue the 2 return statements in the isFalse method should be changed from
{code}
predicate.not();
return predicate;
{code}
To
{code}
return predicate.not();
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:02b44715-fca6-44d4-bdd9-2e5a77f382a3(ug:02b44715-fca6-44d4-bdd9-2e5a77f382a3),,,,,,,,0|104w74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.2.8,2021-11-11 09:25:17.963,,,,11/nov./2021 01:25 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Do you think you can provide a test case and a fix for this?,,,,,,,,,,,,,,,,A faire,,
Entities referencing another table with JoinColumn#referencedColumnName run multiple queries because of EntityUniqueKey,HHH-14907,71569,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,,,Nahydrin,557058:6a36a611-3c98-442b-bcc6-275ad1c91f67,Nahydrin,557058:6a36a611-3c98-442b-bcc6-275ad1c91f67,03/nov./2021 22:35 PM,04/nov./2021 03:46 AM,14/mars/2022 12:54 PM,04/nov./2021 03:46 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-hikaricp,,,0,hibernate,,,,,"This is a re-creation of another issue that was created over 3 years ago that got no response, and the bug is still active in the latest final/stable version.

[https://hibernate.atlassian.net/browse/HHH-13024|https://hibernate.atlassian.net/browse/HHH-13024]

{code:java}public class A {
  @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
  @JoinColumn(name = ""NONPK"", referencedColumnName=""NONPK"")
  private C cValue;
}

public class B {
  @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
  @JoinColumn(name = ""NONPK"", referencedColumnName=""NONPK"")
  private C cValue;
}

public class C {
  @Id
  @Column(name = ""ID"", unique = true, nullable = false, precision = 10)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = ""IDNR"")
  @NotNull
  private Long id;

  @Column(name = ""NONPK"", unique = true, nullable = false, length = 10)
  @NotNull
  private String nonPk;
}{code}

When A is loaded, it also loads the entity C. Because entity C is not already loaded in the session, it will load it from the resultset. Then it constructs a EntityUniqueKey based on C and A and puts that in the persistanceContext of the session (see Loader.loadFromResultSet). Later when B is loaded, it already sees entity C loaded and does not try to load it again. For B there won’t be a EntityUniqueKey. When it is time to hydrate the relationship, it tries to search for C based on the EntityUniqueKey of C and B (see TwoPhaseLoad.doInitializeEntity and EntityType.resolve, isReferenceToPrimaryKey = false). Because the entity is only available on the key of C and A, it will not find anything, therefore it will issue a query.","Hibernate 5.5.7.Final
Java 1.8.0_282
Windows 11 x64
HikariCP",,,,,,,,,,,,,,,HHH-13024,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,11/oct./2018 00:00 AM,,,,true,0.0,christian.beikov(christian.beikov),ug:0595bf8b-e8c4-416a-8935-4f54f47b5d89(ug:0595bf8b-e8c4-416a-8935-4f54f47b5d89),,,,,,,,0|104w6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-04 10:46:10.699,,,,"04/nov./2021 03:46 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;There is no reason to create a duplicate issue. If this is important to you, you can provide a fix for it.",,,,,,,,,,,,,,,,Terminé,,
Support H2GIS in Spatial,HHH-14906,71568,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,03/nov./2021 12:25 PM,23/janv./2022 08:16 AM,14/mars/2022 12:54 PM,11/nov./2021 03:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-04T00:26:49.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104w6o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Verify that custom JavaType and JdbcType registration combo works,HHH-14905,71567,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,03/nov./2021 10:40 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Verify that contributing a custom `JavaType` and `JdbcType` are enough to fully support non-standard SQL types and special Java type to represent them.

Test will use H2GIS to test the usage of a `Point` mapping",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-11-05T08:35:21.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104w6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
checkForOrphanProperties in JPAOverridenAnnotationReader not considering private fields and showing wrong information in log,HHH-14904,71566,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,B Praveen,5beab10ed488fd7262254b80,B Praveen,5beab10ed488fd7262254b80,03/nov./2021 02:23 AM,03/nov./2021 02:29 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate checks the list of members(variables) in the class in 2 ways (in xml config). 
1. Extract them from getters and 
2. Get them from the fields in the class. 

Here No.2 only picks the variables declared as public because hibernate uses getFields rather than getDeclaredFields which is a bug IMO. This is not happening, If we annotate. I have attached the reproducable bug as a small project here (reproducable-bug.zip - Run the App.java main class).

{panel:bgColor=#deebff}
WARN  HHH000207: Property com.test.hibernate.Employee.dummy not found in class but described in <mapping-file/> (possible typo error)
{panel}

*Link to the code:*
[https://github.com/hibernate/hibernate-orm/blob/02f22e1e6fed4774aa6e101876587283bd550d3f/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java#L583|https://github.com/hibernate/hibernate-orm/blob/02f22e1e6fed4774aa6e101876587283bd550d3f/hibernate-core/src/main/java/org/hibernate/cfg/annotations/reflection/JPAOverriddenAnnotationReader.java#L583]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,03/nov./2021 02:23 AM;ug:2a4512fe-e2ce-4d6f-ba1d-62862b2aff99;reproducable-bug.zip;https://hibernate.atlassian.net/secure/attachment/49936/reproducable-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:2a4512fe-e2ce-4d6f-ba1d-62862b2aff99(ug:2a4512fe-e2ce-4d6f-ba1d-62862b2aff99),,,,,,,,,0|104w68:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Customizable optional operators for the regexp query,HSEARCH-4362,71564,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/nov./2021 04:50 AM,18/janv./2022 00:41 AM,14/mars/2022 12:54 PM,07/janv./2022 06:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,backend-elasticsearch,backend-lucene,,,0,,,,,,"See [https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html#regexp-optional-operators|https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html#regexp-optional-operators]. This is a Lucene feature, so it actually works for the Lucene backend too.

It turns out those operators are enabled by default, so for example searching for {{.*@gmail.com}} will match {{www.gmail.com}}, because {{@}} is a meta-character and means ""any string"".

This is definitely surprising, but more importantly it stands in the way of users simply wanting to use ""standard"" meta-characters.

We *should offer a way to customize enabled operators*, with flags, similar to what we did for simpleQueryString. See {{org.hibernate.search.engine.search.predicate.dsl.SimpleQueryStringPredicateOptionsStep#flags(org.hibernate.search.engine.search.predicate.dsl.SimpleQueryFlag...)}}

Also, *let’s disable Lucene-specific, optional operators by default*.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-07T06:07:56.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2820,0|104usn:4,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
HSEARCH000501: Invalid value for configuration property 'hibernate.search.backend.analysis.configurer',HSEARCH-4361,71563,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Critique,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,al turker,61704775f6da6a006a9b4bd0,al turker,61704775f6da6a006a9b4bd0,29/oct./2021 08:17 AM,02/nov./2021 00:37 AM,14/mars/2022 12:54 PM,02/nov./2021 00:37 AM,6.0.7.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

I am trying to integrate Hibernate Search 6.0.7.Final with JBoss EAP 7.3.
This version of Hibernate Search requires Hibernate ORM 5.4.32.Final.
I tried to upgrade hibernate by this setting <property name=""jboss.as.jpa.providerModule"" value=""application""> in persistence.xml.
But it caused the following error.
HSEARCH 000501: Invalid value for configuration property 'hibernate.search.backend.analysis.configurer'

Here is error log:
Failure:: org.hibernate.search.util.common.SearchException: HSEARCH000329: Unable to apply analysis configuration: HSEARCH000501: Invalid value for configuration property 'hibernate.search.backend.analysis.configurer': 'class:com.das.search.lucene.DasLuceneAnalysisConfigurer'. CDI BeanManager not (yet) ready to use
        at org.hibernate.search.backend.lucene.impl.LuceneBackendFactory.getAnalysisDefinitionRegistry(LuceneBackendFactory.java:159)
        at org.hibernate.search.backend.lucene.impl.LuceneBackendFactory.create(LuceneBackendFactory.java:77)
        at org.hibernate.search.engine.common.impl.IndexManagerBuildingStateHolder.createBackend(IndexManagerBuildingStateHolder.java:128)
        at org.hibernate.search.engine.common.impl.IndexManagerBuildingStateHolder.createBackends(IndexManagerBuildingStateHolder.java:69)
        at org.hibernate.search.engine.common.impl.SearchIntegrationBuilderImpl.prepareBuild(SearchIntegrationBuilderImpl.java:241)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.doBootFirstPhase(HibernateOrmIntegrationBooterImpl.java:259)
        at org.hibernate.search.mapper.orm.bootstrap.spi.HibernateOrmIntegrationBooterBehavior.bootFirstPhase(HibernateOrmIntegrationBooterBehavior.java:17)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.lambda$bootNow$7(HibernateOrmIntegrationBooterImpl.java:218)
        at java.util.Optional.orElseGet(Optional.java:267)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.bootNow(HibernateOrmIntegrationBooterImpl.java:218)
        at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)
        at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)
        at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
        at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateSearchSessionFactoryObserver.sessionFactoryCreated(HibernateSearchSessionFactoryObserver.java:41)
        at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
        at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:385)
        at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:468)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1259)
        at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:141)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl.createContainerEntityManagerFactory(PersistenceUnitServiceImpl.java:365)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl.access$1300(PersistenceUnitServiceImpl.java:71)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:190)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:128)
        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:658)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:212)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)
Caused by: org.hibernate.search.util.common.SearchException: HSEARCH000501: Invalid value for configuration property 'hibernate.search.backend.analysis.configurer': 'class:com.das.search.lucene.DasLuceneAnalysisConfigurer'. CDI BeanManager not (yet) ready to use
        at org.hibernate.search.engine.cfg.impl.AbstractConfigurationProperty.doGet(AbstractConfigurationProperty.java:61)
        at org.hibernate.search.engine.cfg.impl.AbstractConfigurationProperty.getAndTransform(AbstractConfigurationProperty.java:36)
        at org.hibernate.search.engine.cfg.impl.OptionalConfigurationPropertyImpl.getAndMap(OptionalConfigurationPropertyImpl.java:27)
        at org.hibernate.search.backend.lucene.impl.LuceneBackendFactory.getAnalysisDefinitionRegistry(LuceneBackendFactory.java:150)
        ... 31 more
Caused by: org.hibernate.resource.beans.container.internal.NotYetReadyException: CDI BeanManager not (yet) ready to use
        at org.hibernate.resource.beans.container.internal.ContainerManagedLifecycleStrategy$BeanImpl.resolveContainerInstance(ContainerManagedLifecycleStrategy.java:160)
        at org.hibernate.resource.beans.container.internal.ContainerManagedLifecycleStrategy$AbstractBeanImpl.initialize(ContainerManagedLifecycleStrategy.java:92)
        at org.hibernate.resource.beans.container.internal.CdiBeanContainerImmediateAccessImpl.createBean(CdiBeanContainerImmediateAccessImpl.java:43)
        at org.hibernate.resource.beans.container.spi.AbstractCdiBeanContainer.createBean(AbstractCdiBeanContainer.java:64)
        at org.hibernate.resource.beans.container.spi.AbstractCdiBeanContainer.getBean(AbstractCdiBeanContainer.java:38)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmBeanContainerBeanProvider.forType(HibernateOrmBeanContainerBeanProvider.java:67)
        at org.hibernate.search.engine.environment.bean.impl.BeanResolverImpl.tryResolve(BeanResolverImpl.java:198)
        at org.hibernate.search.engine.environment.bean.impl.BeanResolverImpl.resolveFromFirstSuccessfulSource(BeanResolverImpl.java:162)
        at org.hibernate.search.engine.environment.bean.impl.BeanResolverImpl.resolve(BeanResolverImpl.java:91)
        at org.hibernate.search.engine.environment.bean.TypeAndNameBeanReference.resolve(TypeAndNameBeanReference.java:28)
        at org.hibernate.search.engine.environment.bean.BeanResolver.resolve(BeanResolver.java:75)
        at java.util.Optional.map(Optional.java:215)
        at org.hibernate.search.engine.cfg.impl.OptionalConfigurationPropertyImpl.lambda$getAndMap$0(OptionalConfigurationPropertyImpl.java:27)
        at org.hibernate.search.engine.cfg.impl.OptionalConfigurationPropertyImpl.convert(OptionalConfigurationPropertyImpl.java:44)
        at org.hibernate.search.engine.cfg.impl.AbstractConfigurationProperty.doGet(AbstractConfigurationProperty.java:44)
        ... 34 more
Caused by: org.jboss.weld.exceptions.IllegalStateException: WELD-001332: BeanManager method createInstance() is not available during application initialization. Container state: STARTING
        at org.jboss.weld.bean.builtin.BeanManagerProxy.checkContainerState(BeanManagerProxy.java:235)
        at org.jboss.weld.bean.builtin.BeanManagerProxy.createInstance(BeanManagerProxy.java:186)
        at org.jboss.weld.bean.builtin.BeanManagerProxy.createInstance(BeanManagerProxy.java:64)
        at org.jboss.weld.util.ForwardingBeanManager.createInstance(ForwardingBeanManager.java:288)
        at org.hibernate.resource.beans.container.internal.ContainerManagedLifecycleStrategy$BeanImpl.resolveContainerInstance(ContainerManagedLifecycleStrategy.java:155)
        ... 48 more

Thanks.",JBoss EAP 7.3.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca(ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca),yrodiere(fenrhil),,,,,,,,0|104w5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-02 07:37:43.348,,,,"02/nov./2021 00:37 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;This is yet another problem with your upgrade.

In WildFly, the bean manager is in a “pre-started” state while Hibernate ORM is starting, and cannot be used yet.

That’s why WildFly passes an [“ExtendedBeanManager”|https://github.com/wildfly/wildfly/blob/main/jpa/hibernate5/src/main/java/org/jboss/as/jpa/hibernate5/HibernateExtendedBeanManager.java#L41] to Hibernate ORM, not just a “BeanManager”. That “extended” bean manager provides methods that allow Hibernate ORM (and Hibernate Search) to delay operations to a later point in time when the bean manager can be used.

In this case, the operation evidently wasn’t delayed, which means ORM wasn’t passed an ExtendedBeanManager. Which probably means something is wrong in the way you upgraded ORM.

Again, if you’re using Red Hat EAP, please reach out to Red Hat support, they’ll be more able to help you. Please don’t open bugs about this here.

Closing.",,,,,,,,,,,,,,,,Terminé,,
Method getConfiguredJdbcBatchSize can be optimised for StatelessSession as well,HHH-14903,71562,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,29/oct./2021 06:13 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,01/nov./2021 03:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,hibernate-core,,,,0,,,,,,"This is a follow up to HHH-14899, which optimised the method for use in SessionImpl but I forgot to check StatelessSession for similar opportunities.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-01T03:28:12.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104w5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Use conflict-free entity names for entities added by the database-polling coordination strategy,HSEARCH-4360,71561,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/oct./2021 05:28 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,15/nov./2021 01:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"Names such as {{Agent}} will pollute the entity name namespace of user applications, potentially creating conflicts with user entities.

We need to use prefixes for entity names, not just table names.

The problem is, setting {{<class entity-name=""foo"" ...>}} in hbm.xml will change the _native_ (non-JPA) entity name, after which all entity operations (persist, load, …) must pass the entity name explicitly, because Hibernate ORM can no longer guess it from the class name. That may be easy, though; we just have to try.

I started a branch here: [https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4360|https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4360|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-15T01:59:32.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2703,0|1009cw:000000xdur3mhxzzzxezsq7uxt,,,,,,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,,,,,,"29/oct./2021 05:36 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;One idea would be to set the entity name explicitly to… the class name. That would override the JPA entity name, which is our main concern in this case, while leaving the native entity name identical, in which case hopefully all entity operations (persist, load, …) will still work the same.",,,,,,,,,,,,,,,,Terminé,,
"Separate artifacts for compatibility with Hibernate ORM 6 (Jakarta Persistence only, no Java EE)",HSEARCH-4359,71560,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Doublon,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/oct./2021 01:01 AM,15/nov./2021 02:46 AM,14/mars/2022 12:54 PM,15/nov./2021 02:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,mapper-orm,,,,0,,,,,,"Similar to [what we did for ORM 5.5 + Jakarta Persistence support|https://github.com/hibernate/hibernate-search/pull/2661], but this time for ORM 6.0.

This will involve additional patches, because ORM 6.0 breaks several APIs and SPIs.

Some work in progress can be found here, though for now it changes the whole codebase directly, instead of creating separate artifacts: https://github.com/yrodiere/hibernate-search/tree/tracking-orm6.0-main",,,,,,,,,,,,,,,,HSEARCH-3277,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104usl:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15/nov./2021 02:44 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Closing as duplicate of HSEARCH-3277,,,,,,,,,,,,,,,,Terminé,,
Prevent concurrent execution of outbox event processing and mass indexing,HSEARCH-4358,71557,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/oct./2021 00:21 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,29/nov./2021 23:48 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"In theory, if automatic indexing runs concurrently to mass indexing, or if two mass indexers run concurrently, it could be possible for two “indexing sources” to trigger two updates to the same document, but with different source data, and for those updates to be processed by Elasticsearch in the wrong order, resulting in an out-of-sync index.

For example:

* Indexing source IS1 reads entity A, version 1
* Indexing source IS2 reads entity A, version 2
* IS2 sends the document for A, version 1 to Elasticsearch
* IS1 sends the document for A, version 2 to Elasticsearch

This cannot be solved with Elasticsearch optimistic concurrency control (_version), because the “update” could be in an {{@IndexedEmbedded}} entity, and we can’t generate a monotonically increasing version number for all entities involved in the creation of one document.

So, the solution would be to simply prevent two indexing sources from executing concurrently:

* When mass indexing is in progress, we suspend outbox event processing.
* When two mass indexer execute concurrently, the second one waits until the first one is finished.

h1. Potential solution

This could be achieved by registering mass indexers in the “Agent” table currently used for outbox event processing, and having outbox event processors stop automatically when they detect a mass indexing agent (identified by a new “type” column, maybe?). The mass indexer could start purging the index (if relevant) and indexing as soon as all event processors stopped.

Those “mass indexing agents” will probably have to pulse regularly (update their entry in the agent table) and have a configured timeout, just like outbox event processors, so that we don’t end up blocking automatic indexing forever if a mass indexer fails. To allow configuration, maybe we should rename configuration properties like “processors.indexing.pulse_interval” to “agents.automatic_indexing.pulse_interval”, and add configuration properties such as “agents.mass_indexing.pulse_interval”?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-29T23:48:19.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2709,0|104us5:,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix some integration tests not being executed in jakarta artifacts,HSEARCH-4357,71556,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,27/oct./2021 23:32 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,28/oct./2021 07:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-28T07:15:39.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2693,0|1009cw:000000xdur3mhxzzzxezsq7uxdy,,,,,,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
JpaCompliantLifecycleStrategy$BeanImpl#initialize causes a deployment failure due to CDI Bean Manager not being available ,HHH-14902,71555,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Impossible à reproduire,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Scott Marlow,557058:db1a3420-e3e5-4207-9989-5d434a8152e9,Scott Marlow,557058:db1a3420-e3e5-4207-9989-5d434a8152e9,27/oct./2021 15:09 PM,02/nov./2021 11:25 AM,14/mars/2022 12:54 PM,02/nov./2021 10:22 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The CDI Bean manager is not always available, so we shouldn't expect it to always be available.  

I'm seeing the following exception while running the Jakarta EE 9.1 Platform TCK against WildFly with Hibernate ORM 6.0.0.Beta1.  The failing TCK test is [jpa/jpa22/datetime/Client.java#L146|https://github.com/eclipse-ee4j/jakartaee-tck/blob/master/src/com/sun/ts/tests/jpa/jpa22/datetime/Client.java#L146]:

{quote}2021-10-27 13:20:44,466 ERROR \[org.jboss.msc.service.fail] (ServerService Thread Pool – 61) MSC000001: Failed to start service jboss.persistenceunit.""jpa_22_dateTime_appmanagedNoTx_vehicle.ear#CTS-EM-NOTX"": org.jboss.msc.service.StartException in service jboss.persistenceunit.""jpa_22_dateTime_appmanagedNoTx_vehicle.ear#CTS-EM-NOTX"": jakarta.persistence.PersistenceException: \[PersistenceUnit: CTS-EM-NOTX] Unable to build Hibernate SessionFactory
at org.jboss.as.jpa@26.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:198)
at org.jboss.as.jpa@26.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:128)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
at org.wildfly.security.elytron-base@1.17.2.Final//org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:664)
at org.jboss.as.jpa@26.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:213)
at org.jboss.threads@2.4.0.Final//org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1990)
at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
at org.jboss.threads@2.4.0.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
at java.base/java.lang.Thread.run(Thread.java:833)
at org.jboss.threads@2.4.0.Final//org.jboss.threads.JBossThread.run(JBossThread.java:513)
Caused by: jakarta.persistence.PersistenceException: \[PersistenceUnit: CTS-EM-NOTX] Unable to build Hibernate SessionFactory
at org.hibernate@6.0.0.Beta1//org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1547)
at org.hibernate@6.0.0.Beta1//org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1467)
at org.hibernate.jipijapa-hibernate6@26.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.hibernate.TwoPhaseBootstrapImpl.build(TwoPhaseBootstrapImpl.java:45)
at org.jboss.as.jpa@26.0.0.Beta1-SNAPSHOT//org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:170)
... 10 more
Caused by: org.hibernate.MappingException: Could not instantiate id generator \[entity-name=com.sun.ts.tests.jpa.jpa22.datetime.DummyEntity]
at org.hibernate@6.0.0.Beta1//org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.createIdentifierGenerator(DefaultIdentifierGeneratorFactory.java:150)
at org.hibernate@6.0.0.Beta1//org.hibernate.mapping.SimpleValue.createIdentifierGenerator(SimpleValue.java:387)
at org.hibernate@6.0.0.Beta1//org.hibernate.internal.SessionFactoryImpl.lambda$new$1(SessionFactoryImpl.java:288)
at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
at java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1761)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
at org.hibernate@6.0.0.Beta1//org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:287)
at org.hibernate@6.0.0.Beta1//org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:467)
at org.hibernate@6.0.0.Beta1//org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1462)
... 12 more
Caused by: java.lang.IllegalStateException: org.hibernate.resource.beans.container.internal.NotYetReadyException: CDI BeanManager not (yet) ready to use
at org.hibernate@6.0.0.Beta1//org.hibernate.resource.beans.container.internal.JpaCompliantLifecycleStrategy$BeanImpl.initialize(JpaCompliantLifecycleStrategy.java:112)
at org.hibernate@6.0.0.Beta1//org.hibernate.resource.beans.container.internal.CdiBeanContainerExtendedAccessImpl$BeanImpl.initialize(CdiBeanContainerExtendedAccessImpl.java:113)
at org.hibernate@6.0.0.Beta1//org.hibernate.resource.beans.container.internal.CdiBeanContainerExtendedAccessImpl$BeanImpl.getBeanInstance(CdiBeanContainerExtendedAccessImpl.java:119)
at org.hibernate@6.0.0.Beta1//org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.createIdentifierGenerator(DefaultIdentifierGeneratorFactory.java:141)
... 26 more
Caused by: org.hibernate.resource.beans.container.internal.NotYetReadyException: CDI BeanManager not (yet) ready to use
... 30 more
Caused by: java.lang.NullPointerException: Cannot invoke ""jakarta.enterprise.inject.spi.BeanManager.createAnnotatedType(java.lang.Class)"" because ""this.beanManager"" is null
at org.hibernate@6.0.0.Beta1//org.hibernate.resource.beans.container.internal.JpaCompliantLifecycleStrategy$BeanImpl.initialize(JpaCompliantLifecycleStrategy.java:109)
... 29 more{quote}



[https://gist.githubusercontent.com/scottmarlow/1491fdfa02f852156c5ab5ea86f99f89/raw/b6113ee31913a57dab5747616ea81535bb0fe84b/gistfile1.txt|https://gist.githubusercontent.com/scottmarlow/1491fdfa02f852156c5ab5ea86f99f89/raw/b6113ee31913a57dab5747616ea81535bb0fe84b/gistfile1.txt] has a copy of the exception as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-29T13:21:14.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,smarlow@redhat.com(smarlow@redhat.com),steve(steve),,,,,,,,0|104w48:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-29 20:30:17.94,,,,"29/oct./2021 13:30 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;I won’t bring up all of the past discussions, but this is a problem with the persistence specification requiring us to do one thing (access the BeanManager immediately) and WildFly doing something else (passing us an unusable (yet\!) BeanManager).

Hibernate however has 2 ways around this, both using the standard {{javax.persistence.bean.manager}} / {{javax.persistence.bean.manager}} as either persistence unit settings or as “container integration settings”.

The test linked below shows that working.  You said WildFly uses the {{ExtendedBeanManager}} approach, so that’s what I tested here.  



[https://github.com/hibernate/hibernate-orm/commit/46877fdcb43643d3b34703848276f2615671d457|https://github.com/hibernate/hibernate-orm/commit/46877fdcb43643d3b34703848276f2615671d457|smart-link] ",02/nov./2021 10:22 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Going to resolve this as I cannot reproduce it and based on our discussions it seems likely just a mis-configuration for WildFly or the TCK,"02/nov./2021 11:25 AM;557058:db1a3420-e3e5-4207-9989-5d434a8152e9;This issue may still be legit as per [https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java#L192|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/AvailableSettings.java#L192|smart-link], Hibernate ORM 6 still supports delayed access to the (bootstrap specified) ExtendedBeanManager.

If we update WildFly to pass in an integration/pu property for {{AvailableSettings.JAKARTA_CDI_BEAN_MANAGER}} that is set to the CDI Bean manager, that would have to be an ExtendedBeanManager which WildFly is already passing in via an integration property {{jakarta.persistence.bean.manager}}.  ",,,,,,,,,,,,,,Terminé,,
Populated wrong Lucene libraries,HSEARCH-4356,71552,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,al turker,61704775f6da6a006a9b4bd0,al turker,61704775f6da6a006a9b4bd0,26/oct./2021 09:09 AM,27/oct./2021 00:30 AM,14/mars/2022 12:54 PM,27/oct./2021 00:30 AM,6.0.7.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

When I add Hibernate search 6.0.7.Final to an EAR project deployed on JBoss EAP 7.3 using Maven, Hibernate search populated old lucene libraries. There are old lucene libraries such as lucene-core-5.5.5.redhat-2.jar in lib/ directory of deployed EAR file.
I am not sure if this is a bug due to Hibernate Search or wrong settings.

Thanks,
Ben",JBoss EAP 7.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca(ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca),yrodiere(fenrhil),,,,,,,,0|104w3k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-27 07:30:13.216,,,,"27/oct./2021 00:30 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hibernate Search 6 definitely doesn't depend on Lucene 5.5. That's not your problem. None of our tests would work if that was the case, and the build time checks (dependency convergence) we have in Hibernate Search would fail.

I suggest you check your own dependencies for references to Lucene 5.5 or Hibernate Search 5, which would indeed bring in Lucene 5.5 as a transitive dependency.

Also, check that WildFly isn't adding Hibernate Search 5 or Lucene 5.5 to your application; that's possible, since WildFly currently ships with Hibernate Search 5 and Lucene 5.5. If it's the case, I suppose you will have to go to the WildFly community for a solution.

I you need more help related to Hibernate Search, please use [the appropriate channels|https://hibernate.org/community/] instead of bug reports.

I'll close this ticket.",,,,,,,,,,,,,,,,Terminé,,
"Introduce a new BatchBuilder implementation, suitable for immutable code deployments",HHH-14901,71551,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,26/oct./2021 08:58 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,27/oct./2021 03:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,0,,,,,,"The default implementation of the {{BatchBuilder}} Service is exposed as a Managed service and allows the batch sizing to be reconfigured via JMX.

That's nice but for environments not supporting JMX we could offer a simpler version, not least to take advantage of its immutable state.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-27T03:58:11.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104w3c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Minor code cleanup in BatchBuilderImpl,HHH-14900,71550,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,26/oct./2021 02:44 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,26/oct./2021 08:34 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,,,,,0,,,,,,"A volatile is missing, the default values are being parsed from configuration twice, and related tests contain unnecessary overrides.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-25T09:09:04.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104w34:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Dialect no longer controlling the default jdbc batch size to use,HHH-14899,71549,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,26/oct./2021 02:41 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,26/oct./2021 08:34 AM,5.2.15,5.3.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,0,,,,,,"Since [HHH-2558] was merged, the {{BasicCollectionPersister}} and {{AbstractEntityPersister}} are no longer taking into account the values suggested by the current Dialect in regards to what the default JDBC batch size should be, instead reading only the {{Environment.STATEMENT_BATCH_SIZE}} property - or falling back to the default of one for this property.

This is suboptimal, and is not taking into account the database metadata either.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-26T02:30:01.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104w2w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Schema update with dropped column from entity does not execute an alter drop query,HHH-14898,71548,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Barry Lafond,5f3d6504fe0a46004d7136a0,Barry Lafond,5f3d6504fe0a46004d7136a0,25/oct./2021 14:56 PM,26/oct./2021 08:25 AM,14/mars/2022 12:54 PM,,5.6.0,6.0.0.Alpha9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Working on schema update corner test cases I wrote a test to drop a column from a simple entity using the schema update.

Looks like in https://github.com/hibernate/hibernate-orm/blob/91e29358be0a73d77ac00de45ddf56dd989fefd2/hibernate-core/src/main/java/org/hibernate/mapping/Table.java#L444 the column iterator is for the targeted new entity and there is no reconciliation on the original entity columns to create and add the drop SQL strings.

I ran the attached test locally and manually added **alter table if exists ColumnsUpdateTestEntity drop column columnThree* to the result list and the test passed.  Also tested it from my Hibernate Reactive.

Wasn't sure how to obtain the column names from the **TableInformation** object so I could create/test a fix. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,25/oct./2021 14:49 PM;ug:1c1bf8cf-5e3a-44c5-9751-f523535ece5c;SchemaUpdateNumberColumnsChangeTest.java;https://hibernate.atlassian.net/secure/attachment/49935/SchemaUpdateNumberColumnsChangeTest.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:1c1bf8cf-5e3a-44c5-9751-f523535ece5c(ug:1c1bf8cf-5e3a-44c5-9751-f523535ece5c),,,,,,,,,0|104w2o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0,,,,,26/oct./2021 08:25 AM;5f3d6504fe0a46004d7136a0;Also found that doing an update where column datatype or column properties (annotations) changed the columns weren’t updated.,,,,,,,,,,,,,,,,A faire,,
Allow ordering with nulls first/last from JPA implementation,HHH-14897,71547,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Jens Schauder,5a685ede4e6fa32306362e53,Jens Schauder,5a685ede4e6fa32306362e53,25/oct./2021 08:19 AM,08/déc./2021 05:00 AM,14/mars/2022 12:54 PM,06/déc./2021 07:49 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.2,,,,,,,,,,,,,0,,,,,,"HHH-465 allows to order by with nulls first/last but the it requires using org.hibernate.citerion.Order, which can't be easily combined with the JPA Criteria API. 

If that feature would be available from the implementation of the equivalent JPA interfaces, users could downcast that class and use that feature while otherwise stay within JPA.

This was also discussed on twitter: https://twitter.com/c_beikov/status/1451189613641404431",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-06T07:49:21.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),jschauder(jschauder),,,,,,,,0|104w2g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Built-in support for translating more complex entity IDs (@EmbeddedId, @IdClass, ...) into document IDs",HSEARCH-4355,71546,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/oct./2021 05:44 AM,01/févr./2022 05:11 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-orm,,,,0,,,,,,"See also [HSEARCH-4352]

Currently, attempting to mark {{@Indexed}} an entity whose ID is derived from an association (see [https://docs.jboss.org/hibernate/stable/orm/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-associations|https://docs.jboss.org/hibernate/stable/orm/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite-associations] ) or whose ID is an {{@IdClass}} will result in an exception telling the user to define a {{@DocumentId}}. I believe an {{@EmbeddedId}} will result in a similar failure.

Maybe we should try to support those identifiers by default?

This would mean:

* Adapting the way of retrieving from an entity an object that represents the ID.
* Adapting the way we list all IDs of an entity when mass indexing; we can no longer assume the ID is a {{SingularAttribute}}.
* Automatically handling of the ""composite-ness"" of an ID by converting each component to a string, then concatenating it in a way that is both unique and lossless (so that we can convert the string back to the original components). We could get some inspiration from {{org.hibernate.search.backend.elasticsearch.multitenancy.impl.DiscriminatorMultiTenancyStrategy.DiscriminatorMultiTenancyElasticsearchDocumentIdHelper}}
* Handling IDs that contain entity references, which must be resolved from the session.
* ... more?",,,,,,,,,,,,,,,,HSEARCH-1879,HSEARCH-161,,HSEARCH-4352,HSEARCH-4025,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Avoid retrieving additional metadata for properties that are not used by Hibernate Search,HSEARCH-4354,71545,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/oct./2021 05:19 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,26/oct./2021 07:54 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta1,,,,,,,,,,,,0,,,,,,"Some exotic Hibernate ORM mappings tend to trigger exceptions because we don't have code to handle those corner cases yet (see HSEARCH-4352, https://discourse.hibernate.org/t/nullpointerexception-when-using-latest-hibernate-search-6-with-idclass/3937 ).

That we don't support those mapping is okay, we can't fix everything immediately. However, it's a shame that those exotic mappings trigger exceptions *even if the entity or property involved is not used in Hibernate Search at all*.

We should make additional metadata retrieval lazy and avoid retrieving it when we don't need it, so that unsupported Hibernate ORM mappings are ignored as long as we don't use the relevant entity type or properties in Hibernate Search.",,,,,,,,,,,,,,,,,,HSEARCH-4352,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-26T07:54:01.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2690,0|1009cw:000000xdur3mhxzzzxezsq7uxdx,,,,,,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Sensitive information printing,HHH-14896,71544,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Xuejiao Han,6176794525f3130070a439c8,Xuejiao Han,6176794525f3130070a439c8,25/oct./2021 04:30 AM,25/oct./2021 04:55 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"We found that hibernate source code will print sensitive information such as database password at the debug log level.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:03ee99bf-3891-44e7-9753-c778491c5cb6(ug:03ee99bf-3891-44e7-9753-c778491c5cb6),,,,,,,,,0|104w28:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"25/oct./2021 04:55 AM;6176794525f3130070a439c8;If the log level is debug, the following code fragment will print sensitive information such as database password, resulting in the disclosure of sensitive information and increasing the possibility of successful attack on the system. It is recommended not to print the password directly here or control the printing of sensitive information through configuration.

Code location：hibernate-core\\src\\main\\java\\org\\hibernate\\engine\\jdbc\\connections\\internal\\DriverManagerConnectionProviderImpl.java

{noformat}// if debug level is enabled, then log the password, otherwise mask it
if ( log.isDebugEnabled() ) {
   log.connectionProperties( connectionProps );
}
else {
   log.connectionProperties( ConfigurationHelper.maskOut( connectionProps, ""password"" ) );
}{noformat}",,,,,,,,,,,,,,,,A faire,,
Deadlocks after upgrading from Hibernate 3.6 to 5.4,HHH-14895,71541,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Uriel Zylbermann,5ca33fce3318e72736efa12b,Uriel Zylbermann,5ca33fce3318e72736efa12b,24/oct./2021 04:40 AM,24/oct./2021 04:40 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

We are using Hibernate for our system.
We're in the process of upgrading from Hibernate 3.6.10.Final to 5.4.0.Final.
One of the issues that we've encountered repeatedly is as follows:
* We make a change to an Entity during some transaction
* We call a function with Transactional(Propagation = ""REQUIRES_NEW"")
* We make a change to the same Entity
* We get a deadlock

We realize that this is very bad practice, but for some reason we had a lot of places where we had this issue, and none of them created a deadlock in Hibernate 3.
We're working on fixing these one by one but we don't know how many instances of this issue we have in the system, and are afraid we'll create a big regression.

Our first guess was that the flush mode is different, but we checked and they're both ""auto"".
When flushing (manually) in the outer transaction (before entering the inner transaction), we get the same deadlock behaviour as with Hibernate 5.

Our questions are basically:
* Is this a known issue?
* Is the behaviour of ""Auto"" flush mode different between Hibernate 3 and 5 (e.g. different buffer size)?
* Is there a way to make the behaviour in 5 the same as in 3?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:1265d0f7-056b-400f-af54-b4caceb77e27(ug:1265d0f7-056b-400f-af54-b4caceb77e27),,,,,,,,,0|104w1k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Hibernate 5, Oracle native query - DATE passed in as TIMESTAMP (regression from Hibernate 4)",HHH-14894,71540,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex Malgaroli,70121:17a283cf-803d-4281-8ac6-31499594bfc1,Alex Malgaroli,70121:17a283cf-803d-4281-8ac6-31499594bfc1,24/oct./2021 02:16 AM,26/oct./2021 13:26 PM,14/mars/2022 12:54 PM,,5.4.24,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"When doing an hibernate upgrade (from 4.3 to latest 5.5) on our main application, we found a breaking change on some Oracle native queries.

We've a fairly beefy query that contains a few calculations on our transactions like the following:

{code:java}SUM(DECODE(SIGN(at.value_date - :valueDate), -1, at.amount, 0)) AS calculated_value{code}

We were passing the valueDate as: {{query.setParameter(""valueDate"", valueDate, TemporalType.DATE);}} (the valueDate variable is a plain java.util.Date). The column is a java DATE (which can contains date and time with second precision, no milliseconds or timzone).

When upgrading to Hibernate 5, we started getting this error: {{SQLSyntaxErrorException: ORA-00932: inconsistent datatypes: expected NUMBER got INTERVAL DAY TO SECOND}}. Activating debug log, we found that Hibernate 4 was binding the value as a DATE, while v5 is mapping as a TIMESTAMP. This change seems to be the cause that is making Oracle calculate the result differently thus erroring out.

We did manage to work around the issue by changing the parameter to a string like this:

{code:java}SUM(DECODE(SIGN(at.value_date - TO_DATE(:valueDate, 'YYYY-MM-DD')), -1, at.amount, 0)) AS calculated_value{code}

As per discussion on StackOverflow, I'm attaching a test case using the template - test case includes both ORM4 and ORM5 for comparison.

The test case errored out both on ORM 5.4 and ORM 5.5","Java 8.0.231
Oracle 19c
",,,,,,,,,,,,,,,,,,,,,,,,,,,,24/oct./2021 02:17 AM;ug:0388e990-4f03-4302-8801-6de262b03fb9;hibernate-oracle-bug.zip;https://hibernate.atlassian.net/secure/attachment/49934/hibernate-oracle-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:0388e990-4f03-4302-8801-6de262b03fb9(ug:0388e990-4f03-4302-8801-6de262b03fb9),,,,,,,,,0|104w1c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.3.10,,,,,,,,,,,,,,,,,,,,,A faire,,
Add mapper ORM Spring integration tests to profiles targeting specific databases,HSEARCH-4353,71539,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Won't Do,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,22/oct./2021 02:02 AM,25/oct./2021 06:19 AM,14/mars/2022 12:54 PM,25/oct./2021 06:19 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,mapper-orm,tests,,,0,,,,,,"Looking at the {{Jenkinsfile}} under the portion we define the executions of ORM integration with multiple databases, it seems that we forgot to add {{org.hibernate.search:hibernate-search-integrationtest-mapper-orm-spring}} module.

I think it is very important to test this module with multiple databases, because it is the only module which we test JTA transactions for. Or at least is the only module for which we test JTA transaction timeout on outbox event processing.

I don't know if it is the case of backport it to 6.0 branch.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-25T06:20:18.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2689,0|104w14:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-25 13:19:41.722,,,,"25/oct./2021 06:19 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;XA transaction tests are not working for reasons related to setup rather than Hibernate Search itself. It seems time-consuming to do.

I'll follow [~accountid:557058:097eae70-1c75-4c16-ab75-ab9600f8e584]'s suggestion:

> before the introduction of the outbox events probably we didn't have any worth... but now maybe we do
> if you believe we still don't, please be free to close the issue

I believe we don't have tests worth re-executing against every database in this module, at least not if that means spending hours or days on the setup. So I'll close the issue.",,,,,,,,,,,,,,,,Terminé,,
MappingException: property [xxx] not found on entity [yyy],HSEARCH-4352,71538,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,al turker,61704775f6da6a006a9b4bd0,al turker,61704775f6da6a006a9b4bd0,21/oct./2021 12:02 PM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,29/oct./2021 04:47 AM,6.0.7.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta1,,,,,,,,,,,,0,,,,,,"Hi,

When I am trying to do indexing following 2 classes, I got a org.hibernate.MappingException.

@Entity
@Indexed
public class Table1 {
  @OneToOne(fetch = FetchType.EAGER, mappedBy = ""table1"")
  public Table2 getTable2() {
    return this.table2;
  }
}

@Entity
public class Table2 {
  @Id
  @OneToOne(fetch = FetchType.LAZY)
  @NotNull
  @JoinColumn(name = ""table1_Id"", nullable = false)
  public Table1 getTable1() {
    return table1;
  }
}

Error log:
javax.persistence.PersistenceException: [PersistenceUnit: primary] Unable to build Hibernate SessionFactory
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:198)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:128)
        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:658)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:212)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)
Caused by: javax.persistence.PersistenceException: [PersistenceUnit: primary] Unable to build Hibernate SessionFactory
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1336)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1262)
        at org.hibernate.jpa.HibernatePersistenceProvider.createContainerEntityManagerFactory(HibernatePersistenceProvider.java:141)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl.createContainerEntityManagerFactory(PersistenceUnitServiceImpl.java:365)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl.access$1300(PersistenceUnitServiceImpl.java:71)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:190)
        ... 9 more
Caused by: org.hibernate.MappingException: property [table1] not found on entity [Table2]
        at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:514)
        at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:525)
        at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.resolveMappedByPath(HibernateOrmMetatadaContributor.java:226)
        at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.collectPropertyMetadataContributors(HibernateOrmMetatadaContributor.java:155)
        at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.collectPropertyDelegates(HibernateOrmMetatadaContributor.java:115)
        at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.configure(HibernateOrmMetatadaContributor.java:67)
        at org.hibernate.search.mapper.pojo.mapping.spi.AbstractPojoMappingInitiator.configure(AbstractPojoMappingInitiator.java:120)
        at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMappingInitiator.configure(HibernateOrmMappingInitiator.java:113)
        at org.hibernate.search.engine.common.impl.SearchIntegrationBuilderImpl$MappingBuildingState.collect(SearchIntegrationBuilderImpl.java:342)
        at org.hibernate.search.engine.common.impl.SearchIntegrationBuilderImpl.prepareBuild(SearchIntegrationBuilderImpl.java:217)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.doBootFirstPhase(HibernateOrmIntegrationBooterImpl.java:259)
        at org.hibernate.search.mapper.orm.bootstrap.spi.HibernateOrmIntegrationBooterBehavior.bootFirstPhase(HibernateOrmIntegrationBooterBehavior.java:17)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.lambda$bootNow$7(HibernateOrmIntegrationBooterImpl.java:218)
        at java.util.Optional.orElseGet(Optional.java:267)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.bootNow(HibernateOrmIntegrationBooterImpl.java:218)
        at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)
        at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)
        at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
        at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateSearchSessionFactoryObserver.sessionFactoryCreated(HibernateSearchSessionFactoryObserver.java:41)
        at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
        at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:385)
        at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:468)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1259)
        ... 13 more","JBoss 7.3, Hibernate Search + Apache Lucene 6.0.7.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-26T07:54:01.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca(ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2690,0|1009cw:000000xdur3mhxzzzxezsq7uxdv,,,,,,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,2021-10-25 12:46:03.469,,,,"25/oct./2021 05:46 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Thanks for the report.

The cause of the exception is that, for some reason, when one side of an association is also marked with {{@Id}}, Hibernate ORM does not expose the corresponding property in its metamodel. I'll investigate that.

However, since in your case the association is not used anywhere in your Hibernate Search mapping, you shouldn’t get an exception anyway. I opened [https://hibernate.atlassian.net/browse/HSEARCH-4354|https://hibernate.atlassian.net/browse/HSEARCH-4354|smart-link] to address that.

I also opened [https://hibernate.atlassian.net/browse/HSEARCH-4355|https://hibernate.atlassian.net/browse/HSEARCH-4355|smart-link] to hopefully support more complex entity IDs in indexed entities one day.",25/oct./2021 06:31 AM;61704775f6da6a006a9b4bd0;Thanks,,,,,,,,,,,,,,,Terminé,,
Access the Session from a custom SessionEventListener instance,HHH-14893,71537,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Florian Beaufumé,557058:47395af5-ee29-42ad-af52-3243ad9b7ca8,Florian Beaufumé,557058:47395af5-ee29-42ad-af52-3243ad9b7ca8,21/oct./2021 07:49 AM,21/oct./2021 07:57 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Custom SessionEventListener instanced registered with ""hibernate.session.events.auto"" are a great tool to monitor and troubleshoot database accesses.

But unfortunately +it does not work well with application using multiple SessionFactory+ (for example if multiple databases are used) since from our custom SessionEventListener there seems to be no way to known what Session or SessionFactory our custom SessionEventListener comes from.

Adding an extra method ""setSession"" to SessionEventListener would break backward compatiblity. So, instead we could use a new “*SessionAware*” interface or a new “*SessionAwareSessionEventListener*” sub-interface of SessionEventListener, with a ""*void setSession(Session session)*"" method.

With the Session instance, I can get many usefull data as well as the SessionFactory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,fbeaufume(fbeaufume),,,,,,,,,0|104w0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Avoid unnecessary Thread.sleep in database polling coordination tests,HSEARCH-4351,71536,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/oct./2021 01:01 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,21/oct./2021 05:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,tests,,,,0,,,,,,"Essentially, revert [https://hibernate.atlassian.net/browse/HSEARCH-4265|https://hibernate.atlassian.net/browse/HSEARCH-4265|smart-link] and part of [https://hibernate.atlassian.net/browse/HSEARCH-4281|https://hibernate.atlassian.net/browse/HSEARCH-4281|smart-link] , since those fixes are no longer needed now that we no longer depend on event creation time ([HSEARCH-4287])",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-21T05:40:11.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2688,0|1009cw:000000xdur3mhxzzzxezsq7uxdr,,,,,,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Consistently refer to the predicate inside a ""nested"" predicate as the ""inner"" predicate",HSEARCH-4350,71535,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/oct./2021 00:24 AM,01/févr./2022 02:25 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.3-backlog,,,,,,,,,documentation,engine,,,0,,,,,,"A ""nested"" predicate is called that way because it deals with ""nested"" documents/fields.

It also happens to contain another predicate, and we've always been weird about how to name that predicate. Sometimes we call it ""nested"", which is obviously confusing, since both the outer predicate and the inner predicate are called ""nested"". I think sometimes we call it some other ways, too.

Let's be consistent and always call the predicate inside a nested predicate the ""inner"" predicate.

This means:

* Changing the wording in the documentation
* Renaming {{NestedPredicateNestStep}} to {{NestedPredicateInnerStep}}, and {{NestedPredicateInnerStep#nest(...)}} to {{NestedPredicateInnerStep#inner(...)}}. Make sure to preserve backwards compatibility by keeping the deprecated ""nest"" interface/methods.
* Going through all the code related to nested predicates to always use the qualifier ""inner"" (and not ""nested"") for the inner predicate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzy9ui,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
 java.lang.ClassCastException: org.hibernate.search.mapper.orm.bootstrap.impl.ExtendedBeanManagerSynchronizer cannot be cast to org.hibernate.jpa.event.spi.jpa.ExtendedBeanManager$LifecycleListener,HSEARCH-4349,71534,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Critique,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,al turker,61704775f6da6a006a9b4bd0,al turker,61704775f6da6a006a9b4bd0,20/oct./2021 09:57 AM,21/oct./2021 04:09 AM,14/mars/2022 12:54 PM,20/oct./2021 23:52 PM,6.0.6.Final,6.0.7.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi,

I tried to add Hibernate Search 6.0.7.Final to my ejb project running on JBOSS EAP 7.3/7.4. When I start the server, I got the following error. I am not sure if hibernate search conflicts with JBOSS 7.3/7.4 or other libraries.
Hope your help.

Thanks,
Al

11:40:25,175 [] ERROR [org.jboss.msc.service.fail] (ServerService Thread Pool -- 84) MSC000001: Failed to start service jboss.persistenceunit.""LibraryAccessService-2.0.0-SNAPSHOT.ear/LibraryAccessService-ejb.jar#primary"": org.jboss.msc.service.StartException in service jboss.persistenceunit.""LibraryAccessService-2.0.0-SNAPSHOT.ear/LibraryAccessService-ejb.jar#primary"": javax.persistence.PersistenceException: [PersistenceUnit: primary] Unable to build Hibernate SessionFactory
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:198)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:128)
        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:658)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:212)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:485)
Caused by: javax.persistence.PersistenceException: [PersistenceUnit: primary] Unable to build Hibernate SessionFactory
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1016)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:942)
        at org.jboss.as.jpa.hibernate5.TwoPhaseBootstrapImpl.build(TwoPhaseBootstrapImpl.java:44)
        at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:170)
        ... 9 more
Caused by: java.lang.ClassCastException: org.hibernate.search.mapper.orm.bootstrap.impl.ExtendedBeanManagerSynchronizer cannot be cast to org.hibernate.jpa.event.spi.jpa.ExtendedBeanManager$LifecycleListener
        at org.hibernate.jpa.event.spi.jpa.ExtendedBeanManager.registerLifecycleListener(ExtendedBeanManager.java:18)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.<init>(HibernateOrmIntegrationBooterImpl.java:104)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.<init>(HibernateOrmIntegrationBooterImpl.java:53)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl$BuilderImpl.build(HibernateOrmIntegrationBooterImpl.java:368)
        at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateSearchIntegrator.integrate(HibernateSearchIntegrator.java:82)
        at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:276)
        at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:467)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:939)
        ... 11 more",JBOSS EAP 7.3/7.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca(ug:004f270d-bccc-42b8-8b1d-07c14c55c5ca),yrodiere(fenrhil),,,,,,,,0|104w0g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-21 06:47:54.885,,,,20/oct./2021 10:09 AM;61704775f6da6a006a9b4bd0;It works well in a desktop application under the same settings but JBoss EAR project.,"20/oct./2021 23:47 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;You seem affected by [https://hibernate.atlassian.net/browse/HHH-13309|https://hibernate.atlassian.net/browse/HHH-13309|smart-link], which was fixed in Hibernate ORM 5.4.2.Final. 

Because of that fix, and other incompatibilities, Hibernate Search 6 is only compatible with Hibernate ORM 5.4.4.Final or later (see [https://hibernate.org/search/releases/6.0/#compatibility|https://hibernate.org/search/releases/6.0/#compatibility|smart-link] ).

Red Hat JBoss EAP ships with Hibernate ORM 5.3.x, so it cannot work with Hibernate Search 6 without modifications.

You will need to [upgrade to a more recent, community version of Hibernate ORM|https://docs.jboss.org/hibernate/orm/5.4/topical/html_single/wildfly/Wildfly.html]. Only Hibernate ORM 5.4 has a chance to work correctly with both Red Hat JBoss EAP and Hibernate Search, and I think Red Hat support around Hibernate ORM will be limited to best-effort if you do that, because there were a few significant changes in Hibernate ORM 5.4. You may want to request help from Red Hat support.

If you want to see Hibernate Search 6 supported in EAP, I would suggest making your interest known to Red Hat support, so that future versions of EAP are upgraded and provide Hibernate Search 6 out-of-the-box.","20/oct./2021 23:52 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I'll close this ticket, since this is a problem with JBoss EAP, not with Hibernate Search. I mentioned some pointers to solve this problem in my previous comment.

If you want more help, please open a ticket to Red Hat support.

If you can't, try getting support from [the WildFly community|https://groups.google.com/g/wildfly). If you encounter problems that are clearly related to Hibernate and not WildFly/EAP, try getting support from [the Hibernate community|http://hibernate.org/community/].","21/oct./2021 02:20 AM;61704775f6da6a006a9b4bd0;No, I used Hibernate ORM 5.4.32.Final in my project.","21/oct./2021 02:51 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;This part of the stack trace clearly points to Hibernate ORM 5.3:

{quote}at org.hibernate.jpa.event.spi.jpa.ExtendedBeanManager.registerLifecycleListener(ExtendedBeanManager.java:18){quote}

This line does not contain any code in Hibernate ORM 5.4.32: [https://github.com/hibernate/hibernate-orm/blob/5.4.32/hibernate-core/src/main/java/org/hibernate/jpa/event/spi/jpa/ExtendedBeanManager.java#L18|https://github.com/hibernate/hibernate-orm/blob/5.4.32/hibernate-core/src/main/java/org/hibernate/jpa/event/spi/jpa/ExtendedBeanManager.java#L18|smart-link] 

But it does contain a cast in Hibernate ORM 5.3: [https://github.com/hibernate/hibernate-orm/blob/5.3/hibernate-core/src/main/java/org/hibernate/jpa/event/spi/jpa/ExtendedBeanManager.java#L18|https://github.com/hibernate/hibernate-orm/blob/5.3/hibernate-core/src/main/java/org/hibernate/jpa/event/spi/jpa/ExtendedBeanManager.java#L18|smart-link] 

My bet would be that you bundled Hibernate ORM with your application, but EAP is still using Hibernate ORM 5.3 somehow. Make sure you upgrade Hibernate ORM correctly, as documented [here|https://docs.jboss.org/hibernate/orm/5.4/topical/html_single/wildfly/Wildfly.html], or reach out to support if that documentation doesn’t apply in your case.

Upgrading Hibernate ORM in WildFly/EAP is not as simple as bundling the Hibernate ORM library with your application.

See also this similar problem (not the same, though): [https://discourse.hibernate.org/t/hsearch000501-cannot-add-custom-analyzer-to-perstience-xml/5682/4?u=yrodiere|https://discourse.hibernate.org/t/hsearch000501-cannot-add-custom-analyzer-to-perstience-xml/5682/4?u=yrodiere]",21/oct./2021 04:09 AM;61704775f6da6a006a9b4bd0;I will try it. Thanks.,,,,,,,,,,,Terminé,,
Parallel test with GRADLE,HHH-14892,71533,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,junhao,6167e98c198b4f0068fd3dae,junhao,6167e98c198b4f0068fd3dae,19/oct./2021 22:32 PM,19/oct./2021 22:32 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-19T22:40:40.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:136efb5c-fc06-400c-9c10-5b45076e4cfc(ug:136efb5c-fc06-400c-9c10-5b45076e4cfc),,,,,,,,,0|104w08:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"JTS package not updated in ""spatial basic types table"" in user guide",HHH-14891,71532,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,19/oct./2021 20:12 PM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,20/oct./2021 01:05 AM,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,documentation,,,,0,,,,,,"Since v1.5, JTS core library has changed its package name from ""com.vividsolutions.jts"" to ""org.locationtech.jts"" (see [https://github.com/locationtech/jts/blob/master/MIGRATION.md#jts-115)|https://github.com/locationtech/jts/blob/master/MIGRATION.md#jts-115)]. We did update the package name in “Spatial” chapter but it seems we overlooked the “Hibernate Spatial Basic Types” table 3 in “Domain Model” chapter.

!Screen Shot 2021-10-19 at 23.23.25.png|width=1037,height=437!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,19/oct./2021 20:23 PM;nathan.qingyang.xu;Screen Shot 2021-10-19 at 23.23.25.png;https://hibernate.atlassian.net/secure/attachment/49933/Screen+Shot+2021-10-19+at+23.23.25.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-20T01:05:12.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4317,0|104w00:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
One-to-one mapped-by referencing embedded nested property doesn't work in Hibernate 6.0.0.Beta1,HHH-14890,71531,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,19/oct./2021 08:46 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,20/oct./2021 06:57 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"Restore the support for a one-to-one with a mapped-by referencing embedded nested property.
This seems to be working for 5.x, but not yet in 6.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-20T06:54:26.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,,0|104vzs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Create-drop schema to log less warnings when using Oracle,HHH-14889,71530,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Andres Almiray,557058:abf37b35-f993-468a-9f93-afeb75ce924d,Andres Almiray,557058:abf37b35-f993-468a-9f93-afeb75ce924d,19/oct./2021 06:28 AM,26/oct./2021 09:23 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Previously reported at https://github.com/micronaut-projects/micronaut-data/issues/1130

Copied here in full. Micronaut team said they can't fix it on their side and suggested posting here.

### Expected Behavior

An application configured with `data-jpa`, `jdbc-ucp`, 'oracle` and is schema strategy set to ""create-drop"" (for demo purposes of course) should work on every invocation.

```yaml
datasources:
  default:
    url: jdbc:oracle:thin:@localhost:1521/XEPDB1
    driverClassName: oracle.jdbc.OracleDriver
    username: System
    password: Admin01
    schema-generate: CREATE_DROP
    dialect: ORACLE

jpa.default.properties.hibernate.hbm2ddl.auto: create-drop
````

### Actual Behaviour

An exception occurs when launching the application as the tables to be dropped does not exist. The application continues execution as the exception is logged at WARN level

```
15:45:08.054 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL ""drop table todo cascade constraints"" via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""drop table todo cascade constraints"" via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlString(SchemaDropperImpl.java:375)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlStrings(SchemaDropperImpl.java:359)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:241)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:154)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:126)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:153)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:81)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:327)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at io.micronaut.configuration.hibernate.jpa.EntityManagerFactoryBean.hibernateSessionFactory(EntityManagerFactoryBean.java:222)
	at io.micronaut.configuration.hibernate.jpa.$EntityManagerFactoryBean$HibernateSessionFactory3Definition.build(Unknown Source)
	at io.micronaut.context.BeanDefinitionDelegate.build(BeanDefinitionDelegate.java:136)
	at io.micronaut.context.DefaultBeanContext.doCreateBean(DefaultBeanContext.java:2238)
	at io.micronaut.context.DefaultBeanContext.createAndRegisterSingletonInternal(DefaultBeanContext.java:3193)
	at io.micronaut.context.DefaultBeanContext.createAndRegisterSingleton(DefaultBeanContext.java:3179)
	at io.micronaut.context.DefaultBeanContext.loadContextScopeBean(DefaultBeanContext.java:2555)
	at io.micronaut.context.DefaultBeanContext.initializeContext(DefaultBeanContext.java:1834)
	at io.micronaut.context.DefaultApplicationContext.initializeContext(DefaultApplicationContext.java:235)
	at io.micronaut.context.DefaultBeanContext.readAllBeanDefinitionClasses(DefaultBeanContext.java:3362)
	at io.micronaut.context.DefaultBeanContext.start(DefaultBeanContext.java:243)
	at io.micronaut.context.DefaultApplicationContext.start(DefaultApplicationContext.java:181)
	at io.micronaut.context.ApplicationContextBuilder.start(ApplicationContextBuilder.java:233)
	at io.micronaut.configuration.picocli.PicocliRunner.run(PicocliRunner.java:113)
	at com.acme.demo.Application.main(Application.java:21)
Caused by: java.sql.SQLSyntaxErrorException: ORA-00942: table or view does not exist

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:628)
	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:562)
	at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1207)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:727)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:291)
	at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:498)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:115)
	at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:1155)
	at oracle.jdbc.driver.OracleStatement.executeSQLStatement(OracleStatement.java:1747)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1432)
	at oracle.jdbc.driver.OracleStatement.executeInternal(OracleStatement.java:2418)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:2373)
	at oracle.jdbc.driver.OracleStatementWrapper.execute(OracleStatementWrapper.java:328)
	at oracle.ucp.jdbc.proxy.oracle$1ucp$1jdbc$1proxy$1oracle$1StatementProxy$2oracle$1jdbc$1internal$1OracleStatement$$$Proxy.execute(Unknown Source)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 25 common frames omitted
Caused by: oracle.jdbc.OracleDatabaseException: ORA-00942: table or view does not exist

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:632)
	... 39 common frames omitted
15:45:08.060 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL ""drop sequence hibernate_sequence"" via JDBC Statement
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL ""drop sequence hibernate_sequence"" via JDBC Statement
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:67)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlString(SchemaDropperImpl.java:375)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.applySqlStrings(SchemaDropperImpl.java:359)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.dropFromMetadata(SchemaDropperImpl.java:249)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.performDrop(SchemaDropperImpl.java:154)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:126)
	at org.hibernate.tool.schema.internal.SchemaDropperImpl.doDrop(SchemaDropperImpl.java:112)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:153)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:81)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:327)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:471)
	at io.micronaut.configuration.hibernate.jpa.EntityManagerFactoryBean.hibernateSessionFactory(EntityManagerFactoryBean.java:222)
	at io.micronaut.configuration.hibernate.jpa.$EntityManagerFactoryBean$HibernateSessionFactory3Definition.build(Unknown Source)
	at io.micronaut.context.BeanDefinitionDelegate.build(BeanDefinitionDelegate.java:136)
	at io.micronaut.context.DefaultBeanContext.doCreateBean(DefaultBeanContext.java:2238)
	at io.micronaut.context.DefaultBeanContext.createAndRegisterSingletonInternal(DefaultBeanContext.java:3193)
	at io.micronaut.context.DefaultBeanContext.createAndRegisterSingleton(DefaultBeanContext.java:3179)
	at io.micronaut.context.DefaultBeanContext.loadContextScopeBean(DefaultBeanContext.java:2555)
	at io.micronaut.context.DefaultBeanContext.initializeContext(DefaultBeanContext.java:1834)
	at io.micronaut.context.DefaultApplicationContext.initializeContext(DefaultApplicationContext.java:235)
	at io.micronaut.context.DefaultBeanContext.readAllBeanDefinitionClasses(DefaultBeanContext.java:3362)
	at io.micronaut.context.DefaultBeanContext.start(DefaultBeanContext.java:243)
	at io.micronaut.context.DefaultApplicationContext.start(DefaultApplicationContext.java:181)
	at io.micronaut.context.ApplicationContextBuilder.start(ApplicationContextBuilder.java:233)
	at io.micronaut.configuration.picocli.PicocliRunner.run(PicocliRunner.java:113)
	at com.acme.demo.Application.main(Application.java:21)
Caused by: java.sql.SQLSyntaxErrorException: ORA-02289: sequence does not exist

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:628)
	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:562)
	at oracle.jdbc.driver.T4C8Oall.processError(T4C8Oall.java:1207)
	at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:727)
	at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:291)
	at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:498)
	at oracle.jdbc.driver.T4CStatement.doOall8(T4CStatement.java:115)
	at oracle.jdbc.driver.T4CStatement.executeForRows(T4CStatement.java:1155)
	at oracle.jdbc.driver.OracleStatement.executeSQLStatement(OracleStatement.java:1747)
	at oracle.jdbc.driver.OracleStatement.doExecuteWithTimeout(OracleStatement.java:1432)
	at oracle.jdbc.driver.OracleStatement.executeInternal(OracleStatement.java:2418)
	at oracle.jdbc.driver.OracleStatement.execute(OracleStatement.java:2373)
	at oracle.jdbc.driver.OracleStatementWrapper.execute(OracleStatementWrapper.java:328)
	at oracle.ucp.jdbc.proxy.oracle$1ucp$1jdbc$1proxy$1oracle$1StatementProxy$2oracle$1jdbc$1internal$1OracleStatement$$$Proxy.execute(Unknown Source)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:54)
	... 25 common frames omitted
Caused by: oracle.jdbc.OracleDatabaseException: ORA-02289: sequence does not exist

	at oracle.jdbc.driver.T4CTTIoer11.processError(T4CTTIoer11.java:632)
	... 39 common frames omitted
```

### Steps To Reproduce

See linked application at https://github.com/aalmiray/demos/tree/main/micronaut-demo

1. Edit `application.yml` and set ""jpa.default.properties.hibernate.hbm2ddl.auto: update""
2. Run the application, no error should occur.
3. Edit `application.yml` and set ""jpa.default.properties.hibernate.hbm2ddl.auto: create-drop""
4. Run the application, no error should occur.
5. Run the application one more time, an exception is logged at WARN level.

### Environment Information

- Operating System: OSX
- JDK: Azul 11.0.11

### Example Application

https://github.com/aalmiray/demos/tree/main/micronaut-demo

### Version

3.0.0","- Operating System: OSX
- JDK: Azul 11.0.11",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:39707014-5ddc-4a86-b883-b37237ecdd22(ug:39707014-5ddc-4a86-b883-b37237ecdd22),sanne(sanne),,,,,,,,0|104vzk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-26 10:50:08.85,,,,"26/oct./2021 03:50 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Thanks for the report\!  But are you sure it doesn’t work? From the logs it would seem it’s a case of over noisy error handling.

The way Hibernate ORM issues the drop schema statements is to generate a general-purpose script: so it doesn’t check if the elements to be deleted currently exist in the schema - this would also be far too slow for the typical use case here, which is quick developer turnarounds (as this is most definitely used only in the context of experimenting with schema mapping changes, no production).

On other databases we use the “if exists” hint to signal that it’s not an error if the element doesn’t exist; unfortunately it seems Oracle DB doesn’t support it.

An alternative we have is to swallow such warnings, but here it’s the JDBC layer which is issuing an _ERROR_ - we need to be very careful when deciding to not even log a warning for an error; currently this is being logged as a warning; perhaps we can improve by checking the error codes. Ideally I’d prefer if the DB SQL syntax could accept the “if exists” clause, like many other databases do.","26/oct./2021 09:23 AM;557058:abf37b35-f993-468a-9f93-afeb75ce924d;Hey Sanne, yes it seems that the drop operation throws an error but the application continues.

I understand the risks of swallowing any SQL error however do you think it’s worth while adding a switch (perhaps attached to the OracleDialect) to just log errors like this one (when we know it’s caused by the “if exists” clause)?",,,,,,,,,,,,,,,A faire,,
Running the Compiler as a separate process  to shorten the build time,HHH-14888,71529,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,junhao,6167e98c198b4f0068fd3dae,junhao,6167e98c198b4f0068fd3dae,19/oct./2021 00:48 AM,19/oct./2021 00:51 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"We found that the project had over 1000 Java and Groovy files, so running the Compiler as a separate process shortened the build time of this project",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-19T00:51:45.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:136efb5c-fc06-400c-9c10-5b45076e4cfc(ug:136efb5c-fc06-400c-9c10-5b45076e4cfc),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4312,0|104vzc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
forking of the compilation process,HHH-14887,71528,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,junhao,6167e98c198b4f0068fd3dae,junhao,6167e98c198b4f0068fd3dae,19/oct./2021 00:28 AM,19/oct./2021 00:47 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"According to Process forking options, Gradle will run all tests in a single forked VM by default. This can be problematic if there are a lot of tests or some very memory-hungry ones.
one option is to fork a new test VM after a certain number of tests have run. So our recommendation is to configure ""forkEvery"" and we give a specific value of 100",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-19T00:34:30.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:136efb5c-fc06-400c-9c10-5b45076e4cfc(ug:136efb5c-fc06-400c-9c10-5b45076e4cfc),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4311,0|104vz4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add ability to influence CollectionSemantics,HHH-14886,71527,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/oct./2021 13:59 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Following in the vein of [HHH-14856] and [https://hibernate.atlassian.net/browse/HHH-14885|https://hibernate.atlassian.net/browse/HHH-14885|smart-link] , add the ability to specify a custom `CollectionSemantics`.",,,,,,,,,,,,,,,,,,,,,,,,HHH-14951,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vyw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
New composite user-type,HHH-14885,71526,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/oct./2021 13:56 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,For much the same reasons as custom basic types (HHH-14856) we need to redefine what used to be called the CompositeUserType plus introduce the necessary annotations,,,,,,,,,,,,,,,,,,,,,,,,HHH-14886,,,,,,,,,,,,"{repository={count=7, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":7,""lastUpdated"":""2021-12-02T12:04:12.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":7,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vyo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
More improvements to Domain Model chapter of the User Guide,HHH-14884,71525,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/oct./2021 13:36 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,documentation,,,,0,,,,,,Apply additional improvements to the _Domain Model_ chapter of the _User Guide_,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vyg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Mapping does not work when the properties are defined inside Groovy Traits,HSEARCH-4348,71524,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Ollie Freeman,557058:8c86bb2a-59ae-41d6-b1ff-8aa90fd65ea4,Ollie Freeman,557058:8c86bb2a-59ae-41d6-b1ff-8aa90fd65ea4,Ollie Freeman,557058:8c86bb2a-59ae-41d6-b1ff-8aa90fd65ea4,18/oct./2021 03:05 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,26/oct./2021 04:41 AM,6.0.6.Final,6.0.7.Final,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.8.Final,6.1.0.Beta1,,,,,,,,engine,mapper-orm,,,0,,,,,,"I am in the process of trying to update the Grails Hibernate Search Plugin ([https://github.com/mathpere/grails-hibernate-search-plugin/issues/47)|https://github.com/mathpere/grails-hibernate-search-plugin/issues/47)] to use Hibernate Search 6 in preparation for the update to Grails 5 and the requirement for HIbernate Core 5.5+ and the environment I am testing it in uses groovy traits to define some of the common persisted fields.

When we define the field to map, which is then added using the programmatic mapping we define the simple field name, e.g. {{label}}, with HS5 we found the BackingField which (in the case of a trait defined field) would come back with the property name {{uk.ac.ox.softeng.maurodatamapper.core.traits.domain.InformationAware__label}}, HS 5 would handle this passed to the binding very happily.

With HS6 however when the {{HibernateOrmClassRawTypeModel}} is accessed to {{createPropertyModel}},

> if we use the trait defined name then the {{declaredFieldAccessXPropertiesByName}} finds the field and the {{declaredMethodAccessXPropertiesByName}} does not (as expected) then in {{findOrmPropertyMetadata}} there is no such OrmPropertyMetadata, again as expected so the {{findPropertyMember}} defines the field as transient or possible derived.

> if we use the field name then the {{declaredFieldAccessXPropertiesByName}} finds the field and the {{declaredMethodAccessXPropertiesByName}} also finds the field and {{findOrmPropertyMetadata}} finds the OrmPropertyMetadata as expected. The issue then arises in the {{findPropertyMember}} method where the {{memberFromHibernateOrmMetamodel}} is found, but then the declaredFields are searched by the propertyName NOT the name of the {{memberFromHibernateOrmMetamodel}}. This results in the {{Member}} not being found and the mapping returning null as the name in the {{memberFromHibernateOrmMetamodel}} is the full trait name

The solution is to use the name of the {{memberFromHibernateOrmMetamodel}} to search the declaredFields as this is how the OrmMetamodel was built up.","Hibernate-core 5.4.4
JVM 8+
Groovy 2.5.14+",,,,,,,,,,,,,,,,,,,,,,,,,,,,18/oct./2021 03:36 AM;ug:0fdb07e6-719b-4802-840b-ea006ffd9ed2;Screenshot 2021-10-18 at 11.35.48.png;https://hibernate.atlassian.net/secure/attachment/49931/Screenshot+2021-10-18+at+11.35.48.png,18/oct./2021 03:36 AM;ug:0fdb07e6-719b-4802-840b-ea006ffd9ed2;Screenshot 2021-10-18 at 11.36.07.png;https://hibernate.atlassian.net/secure/attachment/49932/Screenshot+2021-10-18+at+11.36.07.png,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-26T04:41:09.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,ug:0fdb07e6-719b-4802-840b-ea006ffd9ed2(ug:0fdb07e6-719b-4802-840b-ea006ffd9ed2),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2686,0|104vy8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/oct./2021 03:36 AM;557058:8c86bb2a-59ae-41d6-b1ff-8aa90fd65ea4;!Screenshot 2021-10-18 at 11.35.48.png|width=1113,height=471!

!Screenshot 2021-10-18 at 11.36.07.png|width=1023,height=278!",,,,,,,,,,,,,,,,Terminé,,
Fix an AsciiDoc rendering error in 'spatial' user guide,HHH-14883,71522,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,17/oct./2021 12:47 PM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,18/oct./2021 01:48 AM,5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,documentation,,,,0,,,,,,"!Screen Shot 2021-10-17 at 16.05.11.png|width=518,height=70!

As seen above (see [https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#spatial-overview|https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#spatial-overview|smart-link] ), an ending AsciiDoc format char (`) is missing so the JTS geometry is not rendered as the Geolatte counterpart.

There are other minor defects in the ""Spatial"" chapter in the Hibernate user guide. For instance:

* Over the years JTS has emerged the de facto standard to fill this gap. (emerged => emerged as)
* Supported databases are Oracle 10g/11g, PostgreSQL/PostGIS, MySQL, Microsoft SQL Server and H2/GeoDB. (missing DB2 and CockroachDB which are added later)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,17/oct./2021 13:09 PM;nathan.qingyang.xu;Screen Shot 2021-10-17 at 16.05.11.png;https://hibernate.atlassian.net/secure/attachment/49930/Screen+Shot+2021-10-17+at+16.05.11.png,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-18T01:47:53.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4307,0|104vxs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Rename OutboxEvent table and clean up related code,HSEARCH-4347,71521,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/oct./2021 01:34 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,15/oct./2021 06:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-15T06:11:45.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2685,0|1009cw:000000xdur3mhxzzzxezsq7uxzv,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Limit double-indexing by ensuring processing of contained entities happens before that of indexed entities,HSEARCH-4346,71520,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/oct./2021 23:47 PM,15/nov./2021 01:36 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,"*Important*: This might require changing the schema of the OutboxEvent table (adding a “process_after” column), so we need to consider this ticket before 6.1.0.CR1.

When multiple entities are modified within a single transaction, it’s possible that we produce multiple events that will lead to the reindexing of the same entity multiple times.

E.g. if A contains B, and both A and B are modified:

* We issue two events for the changes in A and B: E_A1 and E_B1
* On node N1, assigned to the shard that contains A, we process E_A1, reindexing A
* On node N2, assigned to the shard that contains B, we process E_B1, creating an event E_A2 to reindex A
* On node N1, we process E_A2, reindexing A again

The second reindexing of A was clearly unnecessary.

If A and B were assigned to the same shard, it might have been avoided thanks to batching, since we could have processed E_A1 and E_B1 in the same batch and thus reindexed A only once. But there will always be cases like that were a containing entity and a contained entity are in distinct shards; there is no way around it.

h2. Potential solution

One way to approach the problem would be to ensure that E_B1 is always (or at least, often) processed before E_A1, so that E_A2 ends up being created before E_A1 is processed, ensuring E_A1 and E_A2 are processed in the same batch.

Maybe there is a way to ensure that by delaying the processing of E_A1?

For example we could split E_A1 in two:

* One event E_A1_a about reindexing resolution, which would be processed immediately
* One event E_A1_b about reindexing A itself, which would be processed after a short delay, ensuring E_A2 is created before E_A1_b is processed.

That could be done with a configurable delay (say, 1s by default) and a {{process_after}} column in the event table (like the one we will probably need in [https://hibernate.atlassian.net/browse/HSEARCH-4194|https://hibernate.atlassian.net/browse/HSEARCH-4194|smart-link]):

* When we create E_A1_a and E_B1, we push “now” into the {{process_after}} column
* When we create E_A1_b, we push “now + 1s” into the {{process_after}} column
* When we process events, we add a clause {{where process_after <= now}}
* When we create E_A2, we also push “now + 1s” into the  {{process_after}} column… but we ensure it will be processed at the same time as E_A1_b by changing the request that retrieves event to process in the same because that event was created. We would use the technique suggested [here|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134/near/231280623]: {{select * from outboxevent where entityid in (select entityid from outbox event order by id where process_after < now() limit 50) order by id limit 200}} . This ensures if we process an event for a given entity, we process all (or at least, most) events for that same entity, event those supposed to be processed later, in the same batch. We effectively override {{process_after}}, which is exactly what we need.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vxl:9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Minor implementation optimisations in internal StandardStack,HHH-14882,71519,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,14/oct./2021 05:44 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,18/oct./2021 05:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,0,,,,,,"The current StandardStack implementation is based on a LinkedList, which is well known to be a suboptimal choice; this should be switched to a lazily allocated ArrayDeque.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-18T05:11:46.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104vxc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Converters defined through orm.xml are never retrieved from the CDI context,HHH-14881,71518,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/oct./2021 03:50 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,14/oct./2021 08:07 AM,5.3.23,5.4.32,5.5.8,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,0,,,,,,"The implementation calls the constructor directly, without even trying to retrieve something from the bean manager:

{code}
				final Class<? extends AttributeConverter> attributeConverterClass = classLoaderAccess.classForName(
						className
				);
				attributeConverterInfoList.add(
						new AttributeConverterDefinition( attributeConverterClass.newInstance(), autoApply )
				);
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-14T08:07:30.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4304,0|104vx4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"<converter class=""...""> in orm.xml ignores the <package> element",HHH-14880,71517,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/oct./2021 03:19 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,14/oct./2021 06:22 AM,5.3.23,5.4.32,5.5.8,5.6.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,,,,,0,,,,,,"See {{org.hibernate.cfg.annotations.reflection.internal.XMLContext#setLocalAttributeConverterDefinitions}}: we take the class name as-is, and don't even try to prefix it with the package given in the {{<package>}} element.

This seems incorrect, since we do use the prefix for every other class name.

Also, according to the JPA spec (emphasis mine):

{quote}
The package subelement specifies the package of the classes listed *within the subelements and attributes of the same mapping file* only. The package subelement is overridden if the fully qualified class name is specified for a class and the two disagree.
{quote}

This does not appear limited to the {{<entity>}}, {{mapped-superclass}} and {{embeddable}} elements.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-14T06:22:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4302,0|104vww:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve GRADLE build Performance,HHH-14879,71515,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,junhao,6167e98c198b4f0068fd3dae,junhao,6167e98c198b4f0068fd3dae,14/oct./2021 01:42 AM,14/oct./2021 01:42 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,build,hibernate-gradle-plugin,,,0,Gradle,,,,,"We find that there are some points which can Improve gradle build performance for this project.

1.Parallel test execution maxParallelForks: If we ensure that test cases are independent, i.e. don’t share resources, be that files, databases or something else, we can run multiple test cases in parallel. That is useful and helpful when there are several CPU cores. 

2.Process forking options: Gradle will run all tests in a single forked VM by default. This can be problematic if there are a lot of tests or some very memory-hungry ones.
one option is to fork a new test VM after a certain number of tests have run. So our recommendation is to configure ""forkEvery"" and we give a specific value of 100

3.Disable report generation: Gradle will automatically create test reports by default which will slowing down the overall build. So it's better to disable the test reports while we don't need it. 
If we do need those reports in particular period, we can set a property to make this setting work

4.Compiler daemon:We found that the project had over 1000 Java and Groovy files, so running the Compiler as a separate process shortened the build time of this project",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-18T03:26:32.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:136efb5c-fc06-400c-9c10-5b45076e4cfc(ug:136efb5c-fc06-400c-9c10-5b45076e4cfc),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4298,0|104vwg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.6.0.Final,HSEARCH-4345,71508,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/oct./2021 23:29 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,14/oct./2021 03:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-14T03:56:04.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2684,0|1009cw:000000xdur3mhxzzzxezsq7uxzr,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Repository Delete Query throws NPE #2317,HHH-14878,71506,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Incomplet,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Roginluo,557058:05540fd0-2f34-4c3a-99a9-f071432872f3,Roginluo,557058:05540fd0-2f34-4c3a-99a9-f071432872f3,13/oct./2021 02:07 AM,13/oct./2021 04:37 AM,14/mars/2022 12:54 PM,13/oct./2021 04:37 AM,5.4.33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-entitymanager,hibernate-orm-modules,,0,,,,,,"i write delete query in repostory

{code:java}@Modifying
	@Query(""DELETE FROM AclEntity WHERE AclEntity.ownerId = ?1 and exists ""
			+ ""(select 1 from FunctionEntity where FunctionEntity.id = AclEntity.functionId and FunctionEntity.appCode = ?2)"")
	long deleteByOwnerIdAndAppCode(Long ownerId, String appCode);{code}

when i start my application ,got this error.

{code:java}org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authoriseController' defined in file [D:\ProjectArea\ubf\ubf\udf-parent\ubf-4a\ubf-4a-supplier\target\classes\com\usc\ubf\security\api\rest\AuthoriseController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authoriseServiceImpl' defined in file [D:\ProjectArea\ubf\ubf\udf-parent\ubf-4a\ubf-4a-supplier\target\classes\com\usc\ubf\security\service\impl\AuthoriseServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 3; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'aclServiceImpl': Unsatisfied dependency expressed through field 'aclRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'aclRepository' defined in com.usc.ubf.security.dao.repo.AclRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Validation failed for query for method public abstract long com.usc.ubf.security.dao.repo.AclRepository.deleteByOwnerIdAndAppCode(java.lang.Long,java.lang.String)!
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:799) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1203) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) ~[spring-context-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143) ~[spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.3.7.RELEASE.jar:2.3.7.RELEASE]
	at com.usc.UscApplication.main(UscApplication.java:24) [classes/:na]
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authoriseServiceImpl' defined in file [D:\ProjectArea\ubf\ubf\udf-parent\ubf-4a\ubf-4a-supplier\target\classes\com\usc\ubf\security\service\impl\AuthoriseServiceImpl.class]: Unsatisfied dependency expressed through constructor parameter 3; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'aclServiceImpl': Unsatisfied dependency expressed through field 'aclRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'aclRepository' defined in com.usc.ubf.security.dao.repo.AclRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Validation failed for query for method public abstract long com.usc.ubf.security.dao.repo.AclRepository.deleteByOwnerIdAndAppCode(java.lang.Long,java.lang.String)!
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:799) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1356) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1203) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:886) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:790) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'aclServiceImpl': Unsatisfied dependency expressed through field 'aclRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'aclRepository' defined in com.usc.ubf.security.dao.repo.AclRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Validation failed for query for method public abstract long com.usc.ubf.security.dao.repo.AclRepository.deleteByOwnerIdAndAppCode(java.lang.Long,java.lang.String)!
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:886) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:790) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	... 34 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'aclRepository' defined in com.usc.ubf.security.dao.repo.AclRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: Validation failed for query for method public abstract long com.usc.ubf.security.dao.repo.AclRepository.deleteByOwnerIdAndAppCode(java.lang.Long,java.lang.String)!
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	... 48 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract long com.usc.ubf.security.dao.repo.AclRepository.deleteByOwnerIdAndAppCode(java.lang.Long,java.lang.String)!
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:93) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:63) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:76) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromQueryAnnotation(JpaQueryFactory.java:56) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:146) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:216) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:81) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:99) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$mapMethodsToQuery$1(QueryExecutorMethodInterceptor.java:92) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[na:1.8.0_291]
	at java.util.Iterator.forEachRemaining(Iterator.java:116) ~[na:1.8.0_291]
	at java.util.Collections$UnmodifiableCollection$1.forEachRemaining(Collections.java:1051) ~[na:1.8.0_291]
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ~[na:1.8.0_291]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482) ~[na:1.8.0_291]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) ~[na:1.8.0_291]
	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[na:1.8.0_291]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[na:1.8.0_291]
	at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[na:1.8.0_291]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:94) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:84) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at java.util.Optional.map(Optional.java:215) ~[na:1.8.0_291]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:84) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:332) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:297) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:211) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.util.Lazy.get(Lazy.java:95) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:300) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:144) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790) ~[spring-beans-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	... 58 common frames omitted
Caused by: java.lang.NullPointerException: null
	at java.lang.String$CaseInsensitiveComparator.compare(String.java:1192) ~[na:1.8.0_291]
	at java.lang.String$CaseInsensitiveComparator.compare(String.java:1186) ~[na:1.8.0_291]
	at java.util.TreeMap.getEntryUsingComparator(TreeMap.java:376) ~[na:1.8.0_291]
	at java.util.TreeMap.getEntry(TreeMap.java:345) ~[na:1.8.0_291]
	at java.util.TreeMap.get(TreeMap.java:278) ~[na:1.8.0_291]
	at org.hibernate.dialect.function.SQLFunctionRegistry.findSQLFunction(SQLFunctionRegistry.java:45) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.util.SessionFactoryHelper.findSQLFunction(SessionFactoryHelper.java:385) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.tree.IdentNode.getDataType(IdentNode.java:367) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.HqlSqlWalker.lookupProperty(HqlSqlWalker.java:667) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.addrExpr(HqlSqlBaseWalker.java:5068) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1299) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.exprOrSubquery(HqlSqlBaseWalker.java:4771) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4237) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2161) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2086) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:827) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.deleteStatement(HqlSqlBaseWalker.java:469) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:289) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:276) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:192) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:144) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:113) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:73) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:162) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:604) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:716) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:23) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_291]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_291]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_291]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_291]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366) ~[spring-orm-5.2.12.RELEASE.jar:5.2.12.RELEASE]
	at com.sun.proxy.$Proxy180.createQuery(Unknown Source) ~[na:na]
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:87) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
	... 87 common frames omitted{code}

{code:java}<spring-cloud-alibaba.version>2.2.5.RELEASE</spring-cloud-alibaba.version>
    <spring-boot.version>2.3.7.RELEASE</spring-boot.version>{code}","Spring Data Jpa with SpringBoot Project
Java8 
mysql8.0
linux
Hibernate core 5.4.25.Final.jar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:00c62830-681d-4401-8506-2ef49616d135(ug:00c62830-681d-4401-8506-2ef49616d135),,,,,,,,0|104vuo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-13 09:12:48.209,,,,"13/oct./2021 02:12 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Well this is not how HQL works. You have to give your from nodes an alias:

{noformat}@Modifying
@Query(""DELETE FROM AclEntity a WHERE a.ownerId = ?1 and exists ""
		+ ""(select 1 from FunctionEntity f where f.id = a.functionId and f.appCode = ?2)"")
long deleteByOwnerIdAndAppCode(Long ownerId, String appCode);{noformat}",13/oct./2021 04:37 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I'll close this for now as I believe your issue can be fixed by using aliases. I can reopen the issue if you provide a test case that reproduces your issue.,,,,,,,,,,,,,,,Terminé,,
Log a warning or throw an error for Hibernate Search annotations on methods with unsupported name or arguments,HSEARCH-4344,71505,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/oct./2021 08:52 AM,12/oct./2021 08:52 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Currently if we annotate a method whose name, arguments, or modifiers (static) do not match the definition of a JavaBean getter, the annotation will simply be ignored.

We should consider logging a warning or throwing an exception instead. Probably warn for now and throw an exception in Hibernate Search 7. 

See https://discourse.hibernate.org/t/suggestion-raise-an-exception-when-hsearch-annotation-is-present-on-unrecognized-method/5769",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vug:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
FetchMode.SUBSELECT ignored,HHH-14877,71503,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Thorben Janssen,5a9d06b37b6a362a6237a0de,Thorben Janssen,5a9d06b37b6a362a6237a0de,12/oct./2021 06:57 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,21/oct./2021 14:50 PM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,"Setting FetchMode.SUBSELECT on an eagerly fetched many-to-many association doesn't have any affect in Hibernate 6.0.0.Beta1. Hibernate still uses FetchMode.SELECT

{noformat}@Entity
public class Author {
    @Id 
    @GeneratedValue(strategy = GenerationType.AUTO) 
    private Long id;
    
    @ManyToMany(mappedBy=""authors"", fetch = FetchType.EAGER)
    @Fetch(FetchMode.SUBSELECT)
    private Set<Book> books = new HashSet<Book>();
    ...
}{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-21T14:49:02.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),thorbenjanssen(thorbenjanssen),,,,,,,,0|104vu0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,2021-10-16 00:06:47.806,,,,"15/oct./2021 17:06 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Would be great if you could give this a try - [https://github.com/hibernate/hibernate-orm/pull/4306|https://github.com/hibernate/hibernate-orm/pull/4306|smart-link]

Still a bit more investigating to do in terms of the original subselect fetch tests, but the basics work",16/oct./2021 02:16 AM;5a9d06b37b6a362a6237a0de;All of my (very basic) tests for this are passing. Seems to be OK.,,,,,,,,,,,,,,,Terminé,,
Parameter padding for IN clauses doesn't work in Hibernate 6.0.0.Beta1,HHH-14876,71502,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Thorben Janssen,5a9d06b37b6a362a6237a0de,Thorben Janssen,5a9d06b37b6a362a6237a0de,12/oct./2021 06:55 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,09/nov./2021 03:38 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,"In Hibernate 5.5, you can set the configuration property hibernate.query.in_clause_parameter_padding to pad the parameters of an IN clause to the next power of 2. This feature seems to be missing Hibernate 6.0.0.Beta1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-09T14:08:26.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),thorbenjanssen(thorbenjanssen),,,,,,,,0|104vts:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Slow query log seems to be missing in Hibernate 6.0.0.Beta1,HHH-14875,71501,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Thorben Janssen,5a9d06b37b6a362a6237a0de,Thorben Janssen,5a9d06b37b6a362a6237a0de,12/oct./2021 06:52 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,19/oct./2021 08:31 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,"In Hibernate 5.5, you can set the configuration property hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS to track the execution time of a query and let Hibernate write a log message if it's above the configured threshold. This feature seems to be missing in Hibernate 6.0.0.Beta1",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-19T08:30:54.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),thorbenjanssen(thorbenjanssen),,,,,,,,0|104vtk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,,,,,,,,,,,,,Terminé,,
Lazy loading of basic attributes in different @LazyGroups throws ArrayIndexOutOfBoundsException,HHH-14874,71500,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Thorben Janssen,5a9d06b37b6a362a6237a0de,Thorben Janssen,5a9d06b37b6a362a6237a0de,12/oct./2021 06:30 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,13/oct./2021 09:33 AM,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,bytecode-enhancement,,,,0,,,,,,"Bytecode enhancement to enable lazy loading of basic attributes seems to only work if all lazy attributes are in the same @LazyGroup. This can either be the default or a named group. But as soon as there are multiple groups, Hibernate throws:
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
        at org.hibernate.persister.entity.AbstractEntityPersister.initializeLazyPropertiesFromDatastore(AbstractEntityPersister.java:1673)
        at org.hibernate.persister.entity.AbstractEntityPersister.initializeLazyProperty(AbstractEntityPersister.java:1599)
        at org.hibernate.bytecode.enhance.spi.interceptor.LazyAttributeLoadingInterceptor.lambda$loadAttribute$0(LazyAttributeLoadingInterceptor.java:104)




@Entity
public class Review {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;
	

	@Enumerated
	@Basic(fetch = FetchType.LAZY)
	private Rating rating;

	@Basic(fetch = FetchType.LAZY)
	@LazyGroup( ""comment"" )
	private String comment;

    ...
}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-13T09:33:20.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),thorbenjanssen(thorbenjanssen),,,,,,,,0|104vtc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,,,,,,,,,,,,,Terminé,,
Move away from repository.jboss.org for releases and (where possible) dependencies,HSEARCH-4343,71496,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/oct./2021 03:13 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,14/oct./2021 04:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,6.0.7.Final,6.1.0.Beta1,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-10-13T07:15:18.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uxzi,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
PostFlush / PreFlush and lazy loading lead to ConcurrentModificationException,HHH-14873,71495,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Tassilo Karge,5f50ce413aa35b003faed29e,Tassilo Karge,5f50ce413aa35b003faed29e,12/oct./2021 01:30 AM,25/oct./2021 07:22 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,flush,interceptor,,,,"Hibernate hands out the managedEntitiesIterator when calling postFlush(Iterator) or preFlush(Iterator) on its Interceptor.

The managedEntitiesIterator iterates over the values of the entitiesByKey collection in StatefulPersistenceContext. That collection is modified whenever a new entity is loaded. Even if the user does not explicitly load entities in the posFlush() or preFlush() methods, that can happen easily by lazy loading. Loading an entity while iterating over the managedEntitiesIterator leads to a ConcurrentModificationException.

I propose to copy the contents of the entitiesByKey.values() collection on first access to iterator.next() to avoid such problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-12T02:58:02.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),ug:50d1b8be-070f-42cb-92bc-f3193954103f(ug:50d1b8be-070f-42cb-92bc-f3193954103f),karge(karge),,,,,,https://github.com/hibernate/hibernate-orm/pull/4287,0|104vsg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-12 12:55:52.0,,,,"12/oct./2021 05:55 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;This is by (current) design, hence cannot be a bug.","12/oct./2021 06:08 AM;5f50ce413aa35b003faed29e;@Steve Ebersole, could you explain why this fault is considered as “by design”? Obviously, most basic things like reading properties of entities in preFlush or postFlush do not work (see the test case in my PR). Also, the fix is nothing that could disturb anything built with Hibernate, so I see no reason to delay it.",12/oct./2021 06:23 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Because loading things into the Session during flush is not (and has never been) supported.  ,"12/oct./2021 06:30 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}I propose to copy the contents of the entitiesByKey.values() collection on first access to iterator.next() to avoid such problems.{quote}

I mean you can see how that will kill perf, right?","12/oct./2021 06:32 AM;5f50ce413aa35b003faed29e;Thanks for the explanation. Then the loading (implicit or explicit) should throw an error on such occasions. If entities are accessible, this has to be accounted for.

As to killing the performance, that depends on how many entities are inside the iterator. Further, in my solution, the iterator is only copied on access, which only imposes the performance penalty if the entities are used.",12/oct./2021 06:33 AM;5f50ce413aa35b003faed29e;Let me also point to the issue that there has been no test whatsoever that tests the proper functionality of the Hibernate Interceptor´s preFlush() and postFlush() methods.,12/oct./2021 06:36 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Thanks for proving my point even more.  An untested and undocumented thing can never be a bug.,"12/oct./2021 06:38 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}As to killing the performance, that depends on how many entities are inside the iterator. Further, in my solution, the iterator is only copied on access, which only imposes the performance penalty if the entities are used.{quote}

Simply accessing the entities is not the problem.  If the entities are already loaded, or if you only access the id, then there is no problem.  The problem comes when you force a lazy reference to initialize itself","12/oct./2021 06:41 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}or if you only access the id{quote}

I should clarify this a bit.  Hibernate does not trigger initializing the entity when accessing it’s identifier.  

JPA on the other hand requires that the provider does initialize it when accessing the identifier.  So if “JPA compliance” is enabled, even accessing the id on an uninitialized entity will cause a problem","12/oct./2021 07:41 AM;5f50ce413aa35b003faed29e;{quote}Simply accessing the entities is not the problem. If the entities are already loaded, or if you only access the id, then there is no problem. The problem comes when you force a lazy reference to initialize itself{quote}

“force a lazy reference to initialize itself” sounds as if there was a conscious distinction between accessing an uninitialized reference vs an initialized reference vs no reference at all. However, they can only be distinguished by explicit checks ({{if (.. instanceof HibernateProxy || .. instanceof PersistentCollection) }}). It is not great to be forced to check these implementation details in the application code.

If being undocumented and untested is an excuse for not being robust API, the fix I developed also does not make anything worse. No matter whether it is labelled “improvement”, “bug” or “code change for the sake of change because it is used nowhere but in endpoints that are undocumented”, my proposed change should be made.","12/oct./2021 09:22 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;I never said anything about whether you made a conscious choice.  Can you please drop the attitude? 

Actually the distinction matters very much, thank you.  If you delivered multi-branch software you would understand why.

And I never said we would or would not include your patch.  But I can for sure say we will not accept it as is.  Your work is a huge performance implication for people who are not doing this.  Now, if you want to protect those other users and make this configurable (with the current behavior the default), then fine.","13/oct./2021 00:58 AM;5f50ce413aa35b003faed29e;Sorry for expressing myself in a way that made you think I had any negative attitude. My intention was to make clear what was unexpected about the behavior to me and likely also to others. The last part expressed my perspective that the distinction between the kinds of patches does not impact whether this particular one should be included, which also is what you said in your last comment.

With that hopefully out of the way, the question remains how we could solve the tradeoff between maintaining maximum performance when managedEntitiesIterator is only used to access loaded entities and at most IDs of unloaded entities (in non JPA-compliant mode) and being able to safely access entities and all their relations during iteration.

Should I rather comment about possible implementations in the GitHub PR or here? I will start out with the GitHub PR.","13/oct./2021 11:18 AM;5a90cab99dc88047b0b56058;{quote}does not impact whether this particular one should be included{quote}

It affects _where_ that gets applied","25/oct./2021 07:21 AM;5f50ce413aa35b003faed29e;We had a discussion about the potential performance impacts of adding this without making it optional, and how loading entities while flushing was never supported at all. Today I found this piece of code in AbstractFlushingEventListener.java:

{noformat}// Among other things, updateReachables() will recursively load all
// collections that are moving roles. This might cause entities to
// be loaded.

// So this needs to be safe from concurrent modification problems.

final Map.Entry<Object,EntityEntry>[] entityEntries = persistenceContext.reentrantSafeEntityEntries();{noformat}

and this code in EntityEntryContext.java:


{noformat}/**
	 * The main bugaboo with IdentityMap that warranted this class in the first place.
	 *
	 * Return an array of all the entity/EntityEntry pairs in this context.  The array is to make sure
	 * that the iterators built off of it are safe from concurrency/reentrancy
	 *
	 * @return The safe array
	 */
	public Map.Entry<Object, EntityEntry>[] reentrantSafeEntityEntries() {
		if ( dirty ) {
			reentrantSafeEntries = new EntityEntryCrossRefImpl[count];
			int i = 0;
			ManagedEntity managedEntity = head;
			while ( managedEntity != null ) {
				reentrantSafeEntries[i++] = new EntityEntryCrossRefImpl(
						managedEntity.$$_hibernate_getEntityInstance(),
						managedEntity.$$_hibernate_getEntityEntry()
				);
				managedEntity = managedEntity.$$_hibernate_getNextManagedEntity();
			}
			dirty = false;
		}
		return reentrantSafeEntries;
	}{noformat}

Isn´t this doing the same thing with the same reason for every single flush as what I want to do after each flush, namely, making an array with #entities size?",,,A faire,,
Re-enable hibernate-gradle-plugin,HHH-14872,71494,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/oct./2021 13:54 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,[https://discuss.gradle.org/t/plugin-publish-problems/41173|https://discuss.gradle.org/t/plugin-publish-problems/41173],,,,,,,,,,,,,,,,,,,HHH-14871,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vs8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Temporarily disable hibernate-gradle-plugin,HHH-14871,71493,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/oct./2021 13:49 PM,11/oct./2021 13:55 PM,14/mars/2022 12:54 PM,11/oct./2021 13:55 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Gradle's plugin publishing plugin has been giving problems trying to release Beta1.

So in the interest of getting Beta1 published, disable the module until that can get sorted out.

See https://discuss.gradle.org/t/plugin-publish-problems/41173",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-11T13:52:26.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vs0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Rename {Xyz}TypeDescriptor as {Xyz}Type,HHH-14870,71492,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/oct./2021 08:42 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,11/oct./2021 09:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Rename:

* `JavaTypeDescriptor` -> `JavaType`
* `JdbcTypeDescriptor` -> `JdbcType`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-11T09:47:50.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vrs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Extract JPA listener definitions when building metadata rather than when creating the SessionFactory,HHH-14869,71491,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/oct./2021 06:20 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,15/oct./2021 01:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,0,,,,,,"Currently, {{@PreUpdate}}, {{@EntityListeners}}, etc. are detected using reflection when we create the {{SessionFactory}}.

This is problematic when using native compilation (GraalVM) because then reflection may not be available anymore when we create the {{SessionFactory}}.

We should move the detection of these annotations to an earlier phase, during metadata construction.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-15T01:05:29.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4296,0|104vrk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to ByteBuddy 1.11.20,HHH-14868,71490,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,11/oct./2021 03:35 AM,11/oct./2021 12:41 PM,14/mars/2022 12:54 PM,11/oct./2021 07:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0,,,,,,,,,,,,,0,,,,,,"Upgrading to latest ByteBuddy release 1.11.20.

Of particular interest, the changelog for 1.11.19 mentions efficiency improvements.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-11T07:28:33.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104vrc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Hibernate shouldn't require a connection and call commit() when the database hasn't been accessed at all,HHH-14867,71489,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Emanuel Kupcik,557058:2cdebdc3-60aa-4c0b-aac2-c58ba530c8e8,Emanuel Kupcik,557058:2cdebdc3-60aa-4c0b-aac2-c58ba530c8e8,10/oct./2021 07:15 AM,10/oct./2021 07:15 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When you have code which in the end didn't hit the dabase at all because everything was served from the 2nd level cache hibernate actually requests a connection from the connection pool during the ""commit"" and also calls connection.commit() even though it never did anything with the connection during the session/transaction.

 !image-2021-10-10-16-08-31-747.png|thumbnail! 

It would be nice if this could be avoided by realizing that if it doesn't have a DB at this moment then it doesn't make much sense get one just to call commit on it and relase it again.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,10/oct./2021 07:08 AM;ekupcik;image-2021-10-10-16-08-31-747.png;https://hibernate.atlassian.net/secure/attachment/49928/image-2021-10-10-16-08-31-747.png,,,,,,,{},,,,,,,,,,true,1.0,ekupcik(ekupcik),,,,,,,,,0|104vr4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add SchemaManager in the Javabean mapper,HSEARCH-4342,71488,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Waldemar Klaczyński,608c01da5797db0069b9f5f7,Waldemar Klaczyński,608c01da5797db0069b9f5f7,Waldemar Klaczyński,608c01da5797db0069b9f5f7,08/oct./2021 10:23 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,14/oct./2021 03:30 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"Add SchemaManager in the Javabean mapper

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-14T03:30:31.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:3a8486e3-ef03-4f5f-a26e-2259fcf593d9(ug:3a8486e3-ef03-4f5f-a26e-2259fcf593d9),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2681#pullrequestreview-778524621,0|104vqw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix GitHub action build taking 6+ hours to complete,HSEARCH-4341,71486,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/oct./2021 23:26 PM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,11/oct./2021 07:54 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Beta1,,,,,,,,build,,,,0,,,,,,"I suspect this is caused by slow Maven downloads; maybe the Maven mirror we're using has become too slow. We cache the local Maven repository and only refresh it each month, so that would explain why the builds have been failing since the beginning of the month.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-11T07:53:51.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2680,0|1009cw:000000xdur3mhxzzzxezsq7uw9,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop `@ParamDef#type`,HHH-14866,71485,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,07/oct./2021 14:56 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 06:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,Drop `@ParamDef#type`,,,,,,,,,,,,,,,,,,,HHH-14864,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vqg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Re-work @Any and @ManyToAny support,HHH-14865,71484,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,07/oct./2021 07:12 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,08/oct./2021 10:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Following on the work done for [https://hibernate.atlassian.net/browse/HHH-14856|https://hibernate.atlassian.net/browse/HHH-14856|smart-link], re-work the annotations for describing an ANY mapping.



Partially this will mean dropping:

* {{@MetaValue}}
* {{@AnyMetaDef}}
* {{@AnyMetaDefs}}



And adding new annotations:

* {{@AnyDiscriminator}} 
* {{@AnyDiscriminatorValue}}
* {{@AnyDiscriminatorValues}}
* {{@AnyKeyJavaClass}}
* {{@AnyKeyJavaType}}
* {{@AnyKeyJdbcType}}
* {{@AnyKeyJdbcTypeCode}}



To describe an ANY mapping:

* {{@Any}} or {{@ManyToAny}} must be present (no change there).  The options on these have been reduced significantly to just the values that describe the attribute as a whole.
* For {{@ManyToAny}}, {{@JoinTable}} describes the association table.
* The discriminator can now be a formula in addition to a column.  To specify the formula/column use {{@Formula}} / {{@Column}}
* The foreign-key column is described via {{@JoinColumn}}.  For a {{@ManyToAny}}, the {{@JoinColumn}} comes from the associated {{@JoinTable}}
* To describe the discriminator, one of {{@AnyDiscriminator}}, {{@JdbcTypeCode}} or {{@JdbcType}} can be used.  {{@AnyDiscriminator}} use’s  JPA’s {{DiscriminatorType}} to define a simplified mapping for most cases.  {{@JdbcTypeCode}} or {{@JdbcType}} can be used instead for more options
* To describe the foreign-key, any of {{@AnyKeyJavaType}}, {{@AnyKeyJavaClass}}, {{@AnyKeyJdbcType}} or {{@AnyKeyJdbcTypeCode}} can be used
* Use {{@AnyDiscriminatorValue}} to describe the mapping between discriminator-values and corresponding entity classes



E.g.

{code:java}@Any
@Column(name = ""property_type"")
@JoinColumn(name = ""property_id"")
@AnyKeyJavaClass( Integer.class )
@AnyDiscriminatorValue( discriminator = ""C"", entity = CharProperty.class )
@AnyDiscriminatorValue( discriminator = ""I"", entity = IntegerProperty.class)
@AnyDiscriminatorValue( discriminator = ""S"", entity = StringProperty.class)
@AnyDiscriminatorValue( discriminator = ""L"", entity = LongProperty.class)
@Cascade( CascadeType.ALL )
public Property getSomeProperty() {
    return someProperty;
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-07T14:53:30.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vq8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 7.16,HSEARCH-4340,71483,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/oct./2021 06:37 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,10/déc./2021 09:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,"Hopefully ES 7.16 will fix the bugs mentioned in [https://hibernate.atlassian.net/browse/HSEARCH-4286|https://hibernate.atlassian.net/browse/HSEARCH-4286|smart-link] , which will allow our test suite to pass without changing it too much.",,,,,,,,,,,,,,,,,,,HSEARCH-4280,HSEARCH-4286,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-10T09:26:08.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2780,0|104usn:zzx,,,,,,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/oct./2021 09:36 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[https://github.com/elastic/elasticsearch/issues/76415|https://github.com/elastic/elasticsearch/issues/76415|smart-link]  was fixed in ES 7.16 (not released yet).

I submitted a patch to fix [https://github.com/elastic/elasticsearch/issues/76362|https://github.com/elastic/elasticsearch/issues/76362|smart-link]  : [https://github.com/elastic/elasticsearch/pull/78841|https://github.com/elastic/elasticsearch/pull/78841|smart-link]  . Let’s hope it makes its way into ES 7.16.0.","02/nov./2021 04:06 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I thought 7.16 had been released, but I was wrong. Postponing this to the next sprint.",,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch client 7.15,HSEARCH-4339,71482,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/oct./2021 06:35 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,07/oct./2021 23:27 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-07T23:27:08.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2679,0|1009cw:000000xdur3mhxzzzxezsq7uxz,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Primary/replica setup for the Lucene backend with outbox-polling coordination,HSEARCH-4338,71481,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/oct./2021 01:20 AM,08/mars/2022 03:28 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,,,,,0,,,,,,"In Hibernate Search 5, we used to provide an index replication feature that allowed the Lucene backend to work even in a multi-node application. See for example [https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#search-architecture-jms|https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#search-architecture-jms|smart-link] 

In Hibernate Search 6, this replication feature is gone, and that was no big deal in 6.0, since there was no way to reliably send indexing works to the primary node in such a setup, because the JMS/JGroups backends are gone as well.

But in 6.1, we’ve introduced the “outbox-polling” coordination strategy, whose purpose is to redirect indexing works to another node. A specific configuration could allow this strategy to redirect all indexing works to a single “primary” node, and ignore them on “replica” nodes. *Then*, it would make sense to reintroduce the replication feature, because it would allow the Lucene backend to work correctly in a multi-node application.

h3. Notes

* We’re only going to support setups where there’s a single primary node that manages all indexes, and all other nodes are replicas. Non-goal: handling scenarios where a each node is the primary node for a single index, but a replica node for other indexes; i.e. where primary indexes are spread over all nodes. This means in particular that [sharding in the coordination strategy|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#coordination-database-polling-sharding] will not be related in any way to [sharding in the Lucene backend|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#backend-lucene-configuration-sharding].
* We’re only going to support static setups. Non-goal: handling scenarios where the primary node goes down and another node is dynamically elected. This means in particular that we will not support [dynamic sharding in the coordination strategy|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#coordination-database-polling-sharding-dynamic], only [static sharding|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#coordination-database-polling-sharding-static].
* Maybe the replication feature should not be a directory provider, but an option of the {{local-filesystem}} directory provider? I.e. add properties that make Hibernate Search automatically copy the index to a given target location, or synchronize it from a given source location.
* Ideally, a “primary” index should perform some checks on startup to make sure the current node is the only node that performs reindexing. For example it could check that all shards are assigned to the current node.
* Ideally, a “replica” index should explicitly disallow writes (throw exceptions when attempting to write), so as to detect configuration mistakes early (it’s happened before…).

h3. Why

This is important to Wildfly in particular, which includes the JMS backend. Some WildFly users currently use JMS + Lucene + replication, and may not be able to migrate to Elasticsearch easily. By reintroducing replication along with the {{database-polling}} coordination strategy, we’re providing an easier migration path: from “JMS + replication” to “database queues + replication”.

Note that ideally, users who need distributed applications really should migrate to an Elasticsearch backend, which would be vastly safer and more robust. Implementing replication for the Lucene backend is more of a temporary bandaid, really.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vxm:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/mars/2022 03:28 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Postponing until we get more feedback, as I haven’t heard of anyone migrating from HSearch 5 + JMS to HSearch 6 and not being able to rely on Elasticsearch.",,,,,,,,,,,,,,,,A faire,,
Document in the 6.0 migration guide the features restored in Hibernate Search 6.1,HSEARCH-4337,71480,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/oct./2021 07:53 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,11/oct./2021 07:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-11T07:32:39.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2676,0|1009cw:000000xdur3mhxzzzxezsq7uxy,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop legacy Type-based annotations,HHH-14864,71479,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,05/oct./2021 07:11 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,07/oct./2021 14:56 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Specifically, drop:

* {{@Type}}
* {{@TypeDef}}
* {{@TypeDefs}}
* {{@MapKeyType}}
* {{@CollectionId#type}}
* {{@AnyMetaDef#metaType}}
* {{@AnyMetaDef#idType}}
* {{@ParamDef#type}}",,,,,,,,,,,,,,,,,,,,,,,,HHH-14865,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-07T14:53:30.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vpk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/oct./2021 14:54 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;This one is mostly done, though {{@ParamDef#type}} remains an open task as it is not straight-forward",,,,,,,,,,,,,,,,Terminé,,
Deprecate features that don't have a direct equivalent in Hibernate Search 6.0,HSEARCH-4336,71478,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/oct./2021 06:53 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,11/oct./2021 07:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,,,,,,,,backend-elasticsearch,backend-lucene,engine,mapper-orm,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-11T07:56:23.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2677,0|1009cw:000000xdur3mhxzzzxezsq7uxx,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Compositional definition of basic value mappings,HHH-14863,71477,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,05/oct./2021 05:20 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,07/oct./2021 14:57 PM,6.0.0.Alpha9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Support configuration of various basic-valued model parts.  

* `@JavaType`
* `@JdbcType`
* `@JdbcTypeCode`
* `@Mutability`
* `@CustomType`

Plus, annotations for specific usage sites:

* `@MapKeyJavaType`
* `@MapKeyJdbcType`
* `@MapKeyJdbcTypeCode`
* `@MapKeyMutability`
* `@MapKeyCustomType`
* `@CollectionIdJavaType`
* `@CollectionIdJdbcType`
* `@CollectionIdJdbcTypeCode`
* `@CollectionIdMutability`
* `@CollectionIdCustomType`
* `@ListIndexJavaType`
* `@ListIndexJdbcType`
* `@ListIndexJdbcTypeCode`
* `@ListIndexMutability`
* `@ListIndexCustomType`

Still to do:

* Compositional configuration of any-discriminator mapping

",,,,,,,,,,,,,,,,,,,,,,,,HHH-14864,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-07T14:53:30.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vpc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
support on delete restrict,HHH-14862,71476,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,ningpp,557058:d1749ac8-f410-43a5-9d28-22a9b69fc748,ningpp,557058:d1749ac8-f410-43a5-9d28-22a9b69fc748,05/oct./2021 01:29 AM,05/oct./2021 19:39 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,, add RESTRICT in OnDeleteAction ? or add it into CascadeType?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ningpp(ningpp),,,,,,,,,0|104vp4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,05/oct./2021 19:39 PM;557058:d1749ac8-f410-43a5-9d28-22a9b69fc748;hello,,,,,,,,,,,,,,,,A faire,,
Improve support for mapping lists and bags in annotations,HHH-14861,71473,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,01/oct./2021 06:50 AM,07/oct./2021 07:10 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Consider this mapping -

```
@OneToMany( ... )
List<SomeEntity> myList;
```

At the moment, Hibernate interprets this as a BAG.  To get LIST semantics, a user must explicitly say -

```
@OneToMany( ... )
@OrderColumn
List<SomeEntity> myList;
```

FWIW, this is not the JPA expectation and requires us to define a compatibility setting (`hibernate.jpa.compliance.list`) to meet this expectation for the TCK.

However, I think JPA has this one right.  If the defined type is a List I think that should imply LIST semantics.  I propose the following changes:

# When `@ElementCollection`, `@OneToMany` or `@ManyToMany` are applied to a `List`, the LIST semantics should be used
# When applied to a `Collection`, BAG semantics should be used
# Add a `@Bag` annotation to To mapping a `List` as a BAG ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vog:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Clean up dead code and deprecated usage in ORM mapper,HSEARCH-4335,71472,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/oct./2021 04:53 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,01/oct./2021 09:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,This should help with the upgrade to ORM 6 (HSEARCH-3277).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-01T09:44:55.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2671,0|1009cw:000000xdur3mhxzzzxezsq4ww,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"java.lang.NumberFormatException: For input string: ""12345678901234567890""",HHH-14860,71471,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Vitali Yemialyanchyk,5af936e6b0c5845738d8da1f,Vitali Yemialyanchyk,5af936e6b0c5845738d8da1f,01/oct./2021 04:00 AM,01/oct./2021 05:10 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,query-hql,,,,0,,,,,,"{code:java}Caused by: java.lang.NumberFormatException: For input string: ""12345678901234567890""
        at java.lang.NumberFormatException.forInputString(Unknown Source) ~[?:?]
        at java.lang.Long.parseLong(Unknown Source) ~[?:?]
        at java.lang.Long.valueOf(Unknown Source) ~[?:?]
        at org.hibernate.hql.internal.ast.util.LiteralProcessor.determineIntegerRepresentation(LiteralProcessor.java:248) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.ast.util.LiteralProcessor.processNumeric(LiteralProcessor.java:209) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.ast.HqlSqlWalker.processNumericLiteral(HqlSqlWalker.java:1223) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.literal(HqlSqlBaseWalker.java:5668) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.constant(HqlSqlBaseWalker.java:3173) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1353) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.exprOrSubquery(HqlSqlBaseWalker.java:4771) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4240) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2161) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2089) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2086) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:827) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:621) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:325) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:273) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:276) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:192) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:144) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:113) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:73) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:162) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:604) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:716) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:816) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:113) ~[hibernate-core-5.4.27.Final.jar!/:5.4.27.Final]
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:?]
        at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:?]
        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:?]
        at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366) ~[spring-orm-5.2.12.RELEASE.jar!/:5.2.12.RELEASE]
        at com.sun.proxy.$Proxy183.createQuery(Unknown Source) ~[?:?]
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:?]
        at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:?]
        at java.lang.reflect.Method.invoke(Unknown Source) ~[?:?]
        at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:314) ~[spring-orm-5.2.12.RELEASE.jar!/:5.2.12.RELEASE]
        at com.sun.proxy.$Proxy183.createQuery(Unknown Source) ~[?:?]{code}

BigInteger should be used",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0328cbd8-19ad-461c-b9b6-e88fef7b15f5(ug:0328cbd8-19ad-461c-b9b6-e88fef7b15f5),,,,,,,,,0|104vo8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"01/oct./2021 05:10 AM;5af936e6b0c5845738d8da1f;sufix “BI“ (""12345678901234567890BI"") allows to solve my issue, anyway code in LiteralProcessor.determineIntegerRepresentation have a sense to adjust",,,,,,,,,,,,,,,,A faire,,
Refactor default bridge implementations,HSEARCH-4334,71467,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/sept./2021 07:56 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,06/oct./2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"In particular, reduce code duplication by merging default value bridge implementations with default identifier bridge implementations.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-06T06:46:18.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2669,0|1009cw:000000xdur3mhxzzzxezsq4wv,,,,,,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.3.23.Final,HSEARCH-4333,71464,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/sept./2021 00:07 AM,18/oct./2021 01:24 AM,14/mars/2022 12:54 PM,13/oct./2021 07:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-13T07:13:43.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2683,0|1009cw:000000xdur3mhxzzzxezsq7uzu,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.6.0.CR1,HSEARCH-4332,71463,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/sept./2021 09:45 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,05/oct./2021 06:30 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-05T06:30:38.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2674,0|1009cw:000000xdur3mhxzzzxezsq7uv2,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Introduce a Function<Session,SessionEventListener> capability to SessionBuilder",HHH-14859,71462,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,29/sept./2021 07:40 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vmw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Default identifier bridges for some types supported in Search 5,HSEARCH-4331,71460,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/sept./2021 04:29 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,06/oct./2021 03:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Beta1,,,,,,,,mapper-pojo-base,,,,0,,,,,,"The following types had a default identifier bridge in Search 5, but no longer have in Search 6:

{noformat}
java.math.BigDecimal
java.net.URI
java.net.URL
java.sql.Date
java.sql.Time
java.sql.Timestamp
java.time.Instant
java.util.Date
java.util.Calendar
java.time.LocalDate
java.time.LocalDateTime
java.time.LocalTime
java.time.MonthDay
java.time.OffsetDateTime
java.time.OffsetTime
java.time.Duration
java.time.Period
java.time.YearMonth
java.time.Year
java.time.ZonedDateTime
java.time.ZoneId
java.time.ZoneOffset
{noformat}

Let's add a default identifier bridge for those types.

I left out {{Class}} on purpose; we already document in the migration guide that Hibernate Search 6 no longer provides a default bridge for {{Class}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-06T03:43:00.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2667,0|1009cw:000000xdur3mhxzzzxezsq4wr,,,,,,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
JRT Module VFS Support,HHH-14858,71459,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Marc Marc,557058:3b2c4fcb-0d65-4737-a720-98714eb43224,Marc Marc,557058:3b2c4fcb-0d65-4737-a720-98714eb43224,29/sept./2021 04:24 AM,29/sept./2021 04:24 AM,14/mars/2022 12:54 PM,,5.5.5,5.5.6,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,JDK11,JDK17,JRT,,,"Currently the JAR Archive Descriptor does not support searching for classes in the JRT virtual file system

Steps to reproduce 
---------------------
* Create a native runtime image with hibernate-core using  JLink or JPackage. 
Bug is generic and no hibernate functionality is available as no classes can be found

Fix
--------------------
Create an archive descriptor that supports the JRT URI syntax",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-30T03:55:45.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ged_marc(ged_marc),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4265,0|104vmg:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Configurable mapping for entities added by the database-polling coordination strategy,HSEARCH-4330,71458,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/sept./2021 00:22 AM,18/janv./2022 00:41 AM,26/déc./2021 15:07 PM,11/janv./2022 03:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.CR1,,,,,,,,,,,,,0,,,,,,"Use cases:

* Customize the length of the binary “payload” column, because its maximum length may need to be raised for very complex Hibernate Search mappings which involve very long paths.
* Customize the database schema where OutboxEvent and other entities are added, because users may want to put them in a different database schema than their business data.
* Work around any problem with the schema on exotic databases, for example unsupported or badly supported standard SQL types.



Note that users will have to rely on internals in order to provide their own mapping; they’ll need to include in the mapping this supposedly internal information, in particular:

* Class name (e.g. {{org.hibernate.search.mapper.orm.coordination.databasepolling.event.impl.OutboxEvent}})
* Property names
* etc.

For that reason:

# I think this custom mapping configuration should be SPI, not API. We can’t promise not to break it in minor versions.
# We should probably provide some constants somewhere through an SPI, to avoid users having to hardcode the values or access internal code. At least the class names.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-11T03:41:27.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2833,0|104usn:6,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Some more APIs marked as deprecated in preparation for v. 6,HHH-14857,71457,,Deprecation,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,28/sept./2021 23:34 PM,11/oct./2021 12:41 PM,14/mars/2022 12:54 PM,11/oct./2021 11:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0,,,,,,,,,,,,,0,,,,,,Ongoing deprecations in preparation for ORM 6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-12-02T13:06:01.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vm0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Introduce @CustomType,HHH-14856,71456,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,28/sept./2021 23:23 PM,18/oct./2021 14:00 PM,14/mars/2022 12:54 PM,07/oct./2021 14:57 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"Introduce {{@CustomType}} as a type-safe replacement for {{@Type}}.

Entails dropping {{@Type}}, {{@TypeDef}}, {{@TypeDefs}} and {{@MapKeyType}}

[https://github.com/hibernate/hibernate-orm/discussions/4266|https://github.com/hibernate/hibernate-orm/discussions/4266|smart-link] ",,,,,,,,,,,,HHH-14865,,,,,,,,,,,,HHH-14863,HHH-14864,HHH-14884,HHH-14886,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-10-07T14:53:30.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vls:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Lucene 8.10,HSEARCH-4329,71455,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,28/sept./2021 22:52 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,29/sept./2021 02:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-lucene,,,,0,,,,,,https://lucene.apache.org/core/8_10_0/changes/Changes.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-29T02:32:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2663,0|1009cw:000000xdur3mhxzzzxezsq4wi,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support passing a String representation of EntityGraph we can parse through the graph-language parser ,HHH-14855,71454,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,28/sept./2021 15:51 PM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,21/janv./2022 13:25 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Today we only support accepting the load and fetch graph hints as `org.hibernate.graph.Graph` instances.

But would also be cool to accept a String representation of that using the graph parser so users don't have to make those calls themselves.


{code:java}
Query<?> qry = ...;
qry.setHint( ""jakarta.persistence.fetchgraph"", ""Customer(id, name, orders)"" );
...
{code}

A minor note is that this requires a change to the grammar to now support defining the root as part of the String.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-24T00:47:10.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vlk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/janv./2022 06:12 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Implemented for {{jakarta.persistence.fetchgraph}} and {{jakarta.persistence.loadgraph}}, but not {{javax.persistence.fetchgraph}}and {{javax.persistence.loadgraph}}","12/janv./2022 06:14 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;{quote}A minor note is that this requires a change to the grammar to now support defining the root as part of the String.{quote}

Or, parse the String in the Query impl to “split” the entity name and the graph language",,,,,,,,,,,,,,,Terminé,,
HHH000099: an assertion failure occurred  - Unsupported named query model.,HHH-14854,71453,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Murray Wilson,557058:6e2ad38d-f61b-45ba-ac6c-08c3f8b7e578,Murray Wilson,557058:6e2ad38d-f61b-45ba-ac6c-08c3f8b7e578,28/sept./2021 15:37 PM,28/sept./2021 15:37 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-entitymanager,,,,0,,,,,,"I am getting this odd exception that requests that I create a bug, so here is the bug.
I am attempting to use a very complex native query from a (very) legacy VB6 application form the 90s and it is throwing this exception :(

I do not have an actual entity for this query as the (very) legacy database is very complex and there is no one left that knows WTF it is :( The database is an oracle database and the query selects values from about a dozen tables in 2 schemas. I have attached the code for the Repository, the dummy entity object with the queries, the DTO object to hold the actual values and the openapi delegate implementation class that uses the repository class to retrieve the values. The application was generated using jhipster with openapi support.

Here is the full exception:

2021-09-28 18:18:00.412 ERROR 20168 --- [  XNIO-1 task-2] org.hibernate.AssertionFailure           : HHH000099: an assertion failure occurred 
(this may indicate a bug in Hibernate, but is more likely due to unsafe use of the session): org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager

org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager
        at org.hibernate.internal.AbstractSharedSessionContract.resultClassChecking(AbstractSharedSessionContract.java:958)
        at org.hibernate.internal.AbstractSharedSessionContract.createNativeQuery(AbstractSharedSessionContract.java:924)
        at org.hibernate.internal.AbstractSharedSessionContract.buildQueryFromName(AbstractSharedSessionContract.java:902)
        at org.hibernate.internal.AbstractSharedSessionContract.createNamedQuery(AbstractSharedSessionContract.java:1003)
        at org.hibernate.internal.AbstractSharedSessionContract.createNamedQuery(AbstractSharedSessionContract.java:114)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
        at com.sun.proxy.$Proxy181.createNamedQuery(Unknown Source)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
        at com.sun.proxy.$Proxy181.createNamedQuery(Unknown Source)
        at org.springframework.data.jpa.repository.query.NamedQuery.doCreateCountQuery(NamedQuery.java:190)
        at org.springframework.data.jpa.repository.query.NamedQuery.doCreateCountQuery(NamedQuery.java:43)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createCountQuery(AbstractJpaQuery.java:253)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.count(JpaQueryExecution.java:183)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.lambda$doExecute$0(JpaQueryExecution.java:178)      
        at org.springframework.data.support.PageableExecutionUtils.getPage(PageableExecutionUtils.java:62)
        at org.springframework.data.repository.support.PageableExecutionUtils.getPage(PageableExecutionUtils.java:51)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.doExecute(JpaQueryExecution.java:177)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:88)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:155)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:143)
        at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
        at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:152)  
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:131)    
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)  
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)        
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)    
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:145)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
        at com.sun.proxy.$Proxy201.findByProgrammeId(Unknown Source)
        at com.epsilon.metadater.web.api.CvarVariableApiDelegateImpl.getCvarVariableList(CvarVariableApiDelegateImpl.java:88)
        at com.epsilon.metadater.web.api.CvarVariableApi.getCvarVariableList(CvarVariableApi.java:52)
        at com.epsilon.metadater.web.api.CvarVariableApi$$FastClassBySpringCGLIB$$1f100eec.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
        at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:123)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
        at com.epsilon.metadater.web.api.CvarVariableApiController$$EnhancerBySpringCGLIB$$8cc0444f.getCvarVariableList(<generated>)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:497)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:584)
        at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)     
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:149) 
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at com.epsilon.metadater.security.jwt.JWTFilter.doFilter(JWTFilter.java:37)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
        at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)      
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)       
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:97)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
        at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
        at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
        at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
        at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)
        at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117)    
        at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)     
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
        at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
        at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
        at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)   
        at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119)
        at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78)
        at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99)
        at io.undertow.server.Connectors.executeRootHandler(Connectors.java:387)
        at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:841)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1449)
        at java.base/java.lang.Thread.run(Thread.java:829)

2021-09-28 18:18:00.459 ERROR 20168 --- [  XNIO-1 task-2] o.z.problem.spring.common.AdviceTraits   : Internal Server Error

org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager; nested exception is java.lang.IllegalArgumentException: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager
        at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:374)      
        at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:235)
        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:551)
        at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
        at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242)
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:152)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:145)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215)
        at com.sun.proxy.$Proxy201.findByProgrammeId(Unknown Source)
        at com.epsilon.metadater.web.api.CvarVariableApiDelegateImpl.getCvarVariableList(CvarVariableApiDelegateImpl.java:88)
        at com.epsilon.metadater.web.api.CvarVariableApi.getCvarVariableList(CvarVariableApi.java:52)
        at com.epsilon.metadater.web.api.CvarVariableApi$$FastClassBySpringCGLIB$$1f100eec.invoke(<generated>)
        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:779)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
        at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:123)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)
        at com.epsilon.metadater.web.api.CvarVariableApiController$$EnhancerBySpringCGLIB$$8cc0444f.getCvarVariableList(<generated>)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:497)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:584)
        at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:113)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:105)     
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:149) 
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at com.epsilon.metadater.security.jwt.JWTFilter.doFilter(JWTFilter.java:37)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
        at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)      
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)       
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:97)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
        at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
        at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
        at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
        at io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
        at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
        at io.undertow.servlet.handlers.RedirectDirHandler.handleRequest(RedirectDirHandler.java:68)
        at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:117)    
        at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)     
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
        at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
        at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
        at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)   
        at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.SendErrorPageHandler.handleRequest(SendErrorPageHandler.java:52)
        at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
        at io.undertow.servlet.handlers.SessionRestoringHandler.handleRequest(SessionRestoringHandler.java:119)
        at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:269)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:78)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:133)
        at io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:130)
        at io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
        at io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
        at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:249)
        at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:78)
        at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:99)
        at io.undertow.server.Connectors.executeRootHandler(Connectors.java:387)
        at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:841)
        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2019)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1558)
        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1449)
        at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.lang.IllegalArgumentException: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager
        at org.hibernate.internal.AbstractSharedSessionContract.buildQueryFromName(AbstractSharedSessionContract.java:908)
        at org.hibernate.internal.AbstractSharedSessionContract.createNamedQuery(AbstractSharedSessionContract.java:1003)
        at org.hibernate.internal.AbstractSharedSessionContract.createNamedQuery(AbstractSharedSessionContract.java:114)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
        at com.sun.proxy.$Proxy181.createNamedQuery(Unknown Source)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
        at com.sun.proxy.$Proxy181.createNamedQuery(Unknown Source)
        at org.springframework.data.jpa.repository.query.NamedQuery.doCreateCountQuery(NamedQuery.java:190)
        at org.springframework.data.jpa.repository.query.NamedQuery.doCreateCountQuery(NamedQuery.java:43)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createCountQuery(AbstractJpaQuery.java:253)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.count(JpaQueryExecution.java:183)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.lambda$doExecute$0(JpaQueryExecution.java:178)      
        at org.springframework.data.support.PageableExecutionUtils.getPage(PageableExecutionUtils.java:62)
        at org.springframework.data.repository.support.PageableExecutionUtils.getPage(PageableExecutionUtils.java:51)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.doExecute(JpaQueryExecution.java:177)
        at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:88)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:155)
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:143)
        at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137)
        at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121)
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:152)  
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:131)    
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80)  
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)        
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)    
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
        ... 133 common frames omitted
Caused by: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager
        at org.hibernate.internal.AbstractSharedSessionContract.resultClassChecking(AbstractSharedSessionContract.java:958)
        at org.hibernate.internal.AbstractSharedSessionContract.createNativeQuery(AbstractSharedSessionContract.java:924)
        at org.hibernate.internal.AbstractSharedSessionContract.buildQueryFromName(AbstractSharedSessionContract.java:902)
        ... 170 common frames omitted

2021-09-28 18:18:00.522  WARN 20168 --- [  XNIO-1 task-2] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager; 
nested exception is java.lang.IllegalArgumentException: org.hibernate.AssertionFailure: Unsupported named query model. Please report the bug in Hibernate EntityManager]","<hibernate.version>5.4.32.Final</hibernate.version>
<spring-boot.version>2.4.7</spring-boot.version>
<jhipster-dependencies.version>7.1.0</jhipster-dependencies.version>
<groupId>com.oracle.database.jdbc</groupId><artifactId>ojdbc8</artifactId>
",,,,,,,,,,,,,,,,,,,,,,,,,,,,28/sept./2021 15:26 PM;ug:1e63eff8-2a77-476c-9442-94ffad763ff5;CvarVariable.java;https://hibernate.atlassian.net/secure/attachment/49925/CvarVariable.java,28/sept./2021 15:26 PM;ug:1e63eff8-2a77-476c-9442-94ffad763ff5;CvarVariableApiDelegateImpl.java;https://hibernate.atlassian.net/secure/attachment/49923/CvarVariableApiDelegateImpl.java,28/sept./2021 15:26 PM;ug:1e63eff8-2a77-476c-9442-94ffad763ff5;CvarVariableDTO.java;https://hibernate.atlassian.net/secure/attachment/49924/CvarVariableDTO.java,28/sept./2021 15:25 PM;ug:1e63eff8-2a77-476c-9442-94ffad763ff5;CvarVariableRepository.java;https://hibernate.atlassian.net/secure/attachment/49926/CvarVariableRepository.java,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,4.0,ug:1e63eff8-2a77-476c-9442-94ffad763ff5(ug:1e63eff8-2a77-476c-9442-94ffad763ff5),,,,,,,,,0|104vlc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Get backend id from new transaction,HHH-14853,71452,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,27/sept./2021 15:35 PM,27/sept./2021 15:59 PM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I want to listen when a transaction is created and get the postgres backend id associated with the connection.
Using the *Interceptor* interface to listen when a new transaction is created:

{code:java}void afterTransactionBegin(Transaction tx);{code}

The supplied parameter of *Transaction* type is too limited, and I cannot use it to get the backend id.
I need some method to access the Session or the connection associated with the transaction.

I see that *TransactionImpl* already has the session member but no way of accessing it.
A simple fix would be to provide a method *Session getSession()* to the *Transaction* interface.

Alternatively, *Session* could be added to the interceptor method as a second parameter (the method is called by session itself).",Postgres 12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),,,,,,,,,0|104vl4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade GraalVM to version 21.2.0,HHH-14852,71451,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,27/sept./2021 14:46 PM,29/sept./2021 06:42 AM,14/mars/2022 12:54 PM,28/sept./2021 02:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.CR1,,,,,,,,,hibernate-graalvm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-28T02:52:34.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104vkw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
JPA Criteria API literals lose type information for enums,HHH-14851,71450,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jyri-Matti Lähteenmäki,557058:5f23b7ac-6327-4255-8c2c-3d0e8cf0a798,Jyri-Matti Lähteenmäki,557058:5f23b7ac-6327-4255-8c2c-3d0e8cf0a798,27/sept./2021 13:55 PM,27/sept./2021 13:55 PM,14/mars/2022 12:54 PM,,5.4.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"JPA Criteria API seems to have some trouble determining the types of certain Literals. At least enums are a problem.
A workaround is to register usertypes (for the enums in question) to the deprecated TypeResolver, and in case of enums having class bodies the registration has to be done for all enum constants separately. It's of course nice that there is a workaround, but this seems hardly an elegant thing to do.

Please have a look at the test case. org.hibernate.type logging is on, so you can see the actual bind parameters.

I have no expertise for the internals of Hibernate. Would there possibly be an easy fix for this? Or is this whole thing already resolved in some upcoming version of Hibernate by some new implementation of type resolution?

 [^hibernate-orm-5.zip] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,27/sept./2021 13:48 PM;jyri-matti;hibernate-orm-5.zip;https://hibernate.atlassian.net/secure/attachment/49922/hibernate-orm-5.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,jyri-matti(jyri-matti),,,,,,,,,0|104vko:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Values in @Comment annotation should be escaped,HHH-14850,71449,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,송병준,60f9a310199a8400686216ca,송병준,60f9a310199a8400686216ca,송병준,60f9a310199a8400686216ca,27/sept./2021 09:50 AM,27/sept./2021 11:22 AM,14/mars/2022 12:54 PM,,5.6.0.Beta2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I have an entity like below:

{noformat}@Entity
class MyEntity(
    @Id
    @GeneratedValue
    val id: Int,

    @Column
    @Comment(""User's name"")
    val name: String
){noformat}

Hibernate will generate this DDL:

{code:sql}create table my_entity (
  id integer not null,
  name varchar(255) comment 'User's name', 
  primary key (id)
) engine=InnoDB{code}

It will lead to a syntax error:

{noformat}java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 's name', primary key (id)) engine=InnoDB' at line 3{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),ug:5281c7d4-4901-4fcf-8fd5-16abd430fe87(ug:5281c7d4-4901-4fcf-8fd5-16abd430fe87),,,,,,,,0|104vkg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,2021-09-27 18:22:02.731,,,,"27/sept./2021 11:22 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;From its Javadoc…

{noformat}SQL column comment which can be defined at property level.{noformat}



It expects a SQL comment, aka it expects the value to already be escaped.  So clearly not a bug.  For sure we can consider it as an enhancement..",,,,,,,,,,,,,,,,A faire,,
Typo in BaseCoreFunctionalTestCase.java,HHH-14849,71448,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,Mohammad Taghizadeh,70121:1ee7d41e-deda-4634-b096-5f445a61e53a,Mohammad Taghizadeh,70121:1ee7d41e-deda-4634-b096-5f445a61e53a,Mohammad Taghizadeh,70121:1ee7d41e-deda-4634-b096-5f445a61e53a,27/sept./2021 08:07 AM,27/sept./2021 08:11 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"There is a typo in:

[https://github.com/hibernate/hibernate-orm/blob/main/hibernate-testing/src/main/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-testing/src/main/java/org/hibernate/testing/junit4/BaseCoreFunctionalTestCase.java|smart-link] 

{noformat}		// we can'trely on a Bulk Delete query which will not clear the link tables in @ElementCollection or unidirectional collections{noformat}

can’trely

must be:

can’t rely",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-27T08:17:33.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:36e8ecdc-cd95-4105-a29f-a1d20ee378d2(ug:36e8ecdc-cd95-4105-a29f-a1d20ee378d2),,,,,,,,,0|104vk8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Move Ant tasks + support from hibernate-core into tooling/hibernate-ant,HHH-14848,71447,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/sept./2021 06:09 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,29/sept./2021 00:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-09-29T00:11:49.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vk0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Deprecate JMX integration,HHH-14847,71446,,Deprecation,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/sept./2021 06:06 AM,29/sept./2021 06:42 AM,14/mars/2022 12:54 PM,28/sept./2021 08:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.23,5.4.33,5.5.8,5.6.0.CR1,,,,,,,,,,0,,,,,,"Deprecate in prep for removal in 6.

Be sure to deprecate `org.hibernate.service.spi.Manageable`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-29T13:00:18.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vjs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop JMX integration,HHH-14846,71445,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/sept./2021 06:05 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,27/sept./2021 11:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,Drop the JMX integration (`org.hibernate.jmx`) from 6.0,,,,,,,,,,,,,,,,,,,HHH-14847,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-28T23:36:43.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vjk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Deprecate JACC integration,HHH-14845,71444,,Deprecation,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/sept./2021 06:03 AM,04/mars/2022 11:00 AM,14/mars/2022 12:54 PM,28/sept./2021 05:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.23,5.4.33,5.5.8,5.6.0.CR1,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-28T03:21:04.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:20267b79-8b30-4ea5-9586-d55d46f88b0f(ug:20267b79-8b30-4ea5-9586-d55d46f88b0f),steve(steve),,,,,,,,0|104vjc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-03-04 19:00:42.711,,,,"04/mars/2022 11:00 AM;557058:07107454-79f4-41af-bdcd-149c64e0a5dc;Hello 


getEntity()	of AbstractPreDatabaseOperationEvent is now deprecated. (Support for JACC will be removed in 6.0). But the Event and PreUpdateEvent are not deprecated.

In PostUpdateEvent getEntity() is not deprecated.

Is this an error?
How can i determine the entity?
Will PreUpdateEvent/AbstractPreDatabaseOperationEvent be removed completely?",,,,,,,,,,,,,,,,Terminé,,
Drop JACC integration,HHH-14844,71443,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/sept./2021 06:01 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,27/sept./2021 11:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"It was an interesting proof-of-concept, but not really useful and I do not believe anyone uses this seriously",,,,,,,,,,,,,,,,,,,HHH-14845,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-28T23:36:05.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Enhanced embeddable identifiers need to be serializable,HHH-14843,71442,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,24/sept./2021 02:05 AM,24/sept./2021 02:05 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"As we're looking into https://issues.redhat.com/browse/NCLSUP-444 , the issue seems to be with the Infinispan 2LC attempting to serialize (and fail) the identifier of the entity as it's being cached.

The entity has a  
{code:java}
@EmbeddedId private Base32LongID id;
{code}

Which is defined in https://github.com/project-ncl/pnc/blob/e29a194e0e56f4aa351fa1f4c1fd58040813fda5/model/src/main/java/org/jboss/pnc/model/Base32LongID.java#L28-L56

Serialization fails with 


{noformat}
stackTrace: : org.infinispan.commons.marshall.NotSerializableException: java.lang.reflect.Field
Caused by: an exception which occurred:
        in field org.hibernate.property.access.spi.SetterFieldImpl.field
        in object org.hibernate.property.access.spi.EnhancedSetterImpl@7711f53c
        in field org.hibernate.tuple.component.AbstractComponentTuplizer.setters
        in object org.hibernate.tuple.component.PojoComponentTuplizer@768d76f0
        in field org.hibernate.type.ComponentType.componentTuplizer
        in object org.hibernate.type.ComponentType@6c15cabd
        in field org.hibernate.cache.internal.CacheKeyImplementation.type
        in object org.hibernate.cache.internal.CacheKeyImplementation@736506fa
        in object org.hibernate.cache.internal.CacheKeyImplementation@736506fa

{noformat}

Since I see an EnhancedSetterImpl, I suspect that the process of enhancing this entity has made it non-serializable in practice; I suggest we need integration tests to verify that the bytecode enhancers don't make entity non-serializable.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104viw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Refactor JSR-352 ITs for safer startup/shutdown,HSEARCH-4328,71441,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/sept./2021 01:56 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,24/sept./2021 06:19 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Beta1,,,,,,,,,,,,0,,,,,,"I was bitten by some unsafe code in there (e.g. {{emf.close()}} without a null-check on {{emf}}) which makes it harder than necessary to work with.

I'll fix that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-24T06:19:17.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2659,0|1009cw:000000xdur3mhxzzzxezsq4w,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Not able to connect to Oracle 18C ,HHH-14842,71440,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Sreenivasulu Reddy Jollu,614d7bc35f54810068dba180,Sreenivasulu Reddy Jollu,614d7bc35f54810068dba180,24/sept./2021 00:27 AM,24/sept./2021 00:42 AM,14/mars/2022 12:54 PM,24/sept./2021 00:42 AM,5.4.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I am facing connection issue with Oracle 18C data base. Not able to connect the data base and it is taking more time(an hour) to connect, some times not even also. But other versions its working as expected and connection also fast. It is working till 5.4.16 version for Oracle 18C then later versions it is not working.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:4c7fcf2b-e9d1-44b4-829d-719f6172a88e(ug:4c7fcf2b-e9d1-44b4-829d-719f6172a88e),,,,,,,,0|104vio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.28,2021-09-24 07:42:06.053,,,,"24/sept./2021 00:42 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;If you have a question or need help please go to our [forum|https://discourse.hibernate.org/], but this is an issue tracker and your issue is neither a proper bug report, nor a feature request. We successfully connect to Oracle 18c in our tests so this must be an issue with your environment. Please consult your DBA or Oracle about the problem. This has nothing to do with Hibernate.",,,,,,,,,,,,,,,,Terminé,,
"When setting use_revision_entity_with_native_id=true , ADD new record will execute additional sql to update audit table's end rev to current rev id",HHH-14841,71439,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,jasonshi,5b0c07e6d50d3d56fa78cba4,jasonshi,5b0c07e6d50d3d56fa78cba4,23/sept./2021 23:47 PM,09/nov./2021 18:17 PM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"*From the document:*

_>>org.hibernate.envers.allow_identifier_reuse_

_>>While deleting revision entry, remove data of associated audited entities. Requires database support for cascade row removal._
>>_org.hibernate.envers.allow_identifier_reuse	false	Guarantees proper validity audit strategy behavior when application reuses identifiers of deleted entities. >>Exactly one row with null end date exists for each identifier._



*Additional update sql will be executed when ADD new record*

{{1） insert into PolicyRisk (POLICY_ELEMENT_ID, ….,) values (9,…. )}}

{{2） insert into PolicyRisk_L (START_REV_ID,END_REV_ID,REV_TYPE ,  POLICY_ELEMENT_ID,…}}
{{) values (12, NULL, 0, 9, …)}}

{{3）update PolicyRisk_L set END_REV_ID=12 where POLICY_ELEMENT_ID=9 and START_REV_ID<> 12 and END_REV_ID}}
{{is null}}



This will cause performance issue when creating many new records.

And I think the update sql is not necessary : 

# When query the audit table, envers will add filter condition: REV_TYPE<>DELETE, the deleted record’s audit log will not be filter out
# When update pre audit log records’s end rev id for UPDATE & DELETE operation, we can add a additional CONDITION: REV_TYPE<>DELETE to where clause, to ensure only one record will be update",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,crancran(crancran),jasonshi19751(jasonshi19751),,,,,,,,0|104vig:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-09 18:03:58.345,,,,"09/nov./2021 10:03 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;Hi [~accountid:5b0c07e6d50d3d56fa78cba4] what is your audit strategy, are you using the {{ValidityAuditStrategy}} rather than the {{DefaultAuditStrategy}}?","09/nov./2021 18:17 PM;5b0c07e6d50d3d56fa78cba4;Yes, I’m using {{ValidityAuditStrategy}}",,,,,,,,,,,,,,,A faire,,
Run tests against Elasticsearch 7.15,HSEARCH-4327,71438,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Aucune correction envisagée,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/sept./2021 00:20 AM,07/oct./2021 06:38 AM,14/mars/2022 12:54 PM,07/oct./2021 06:38 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uvr,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/oct./2021 06:38 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;ES 7.15 is still affected by bugs mentioned in HSEARCH-4286.

We'll try to upgrade to 7.16 directly when it's out; see HSEARCH-4340.",,,,,,,,,,,,,,,,Terminé,,
Avoid null values for DirtinessDescriptor.dirtyPath(),HSEARCH-4326,71437,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/sept./2021 23:46 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,06/oct./2021 05:42 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"Currently, we sometimes set that value to {{null}}. But as far as I can see, we don't assign a particular meaning to {{null}}, so we could avoid it.

The {{dirtyPaths}} are eventually consumed by {{org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan.AbstractEntityState#addDirtyPaths}}, and in that method, {{null}} only has the effect of sparing us the allocation of one BitSet.

Let's avoid using {{null}} for {{dirtyPaths}} across the codebase, except maybe at the API level where we can either add null-checks or interpret {{null}} in some specific way (but transform it into an empty collection).

Let's adapt the Avro schema in particular to avoid marking {{dirtyPaths}} as nullable; see [https://github.com/hibernate/hibernate-search/pull/2655/|https://github.com/hibernate/hibernate-search/pull/2655/]. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-06T05:42:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2675,0|1009cw:000000xdur3mhxzzzxezsq7uv4,,,,,,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
IBM Db2 11.1 fails on TransientOverride test cases,HHH-14840,71436,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,22/sept./2021 14:16 PM,15/déc./2021 04:59 AM,14/mars/2022 12:54 PM,11/oct./2021 07:55 AM,5.3.22,5.4.33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.23,5.4.33,,,,,,,,testsuite,,,,0,,,,,,"Thanks you to [~accountid:5ac5dffb72078614ad177fd1] for tracking this down.

Running {{org.hibernate.test.inheritance.TransientOverrideAsPersistentJoined.testQueryByRootClass}} and {{org.hibernate.test.inheritance.TransientOverrideAsPersistentTablePerClass.testQueryByRootClass}} results in an {{AssertionError}:

{code:java}
java.lang.AssertionError
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.hibernate.test.inheritance.TransientOverrideAsPersistentTablePerClass.lambda$testQueryByRootClass$2(TransientOverrideAsPersistentTablePerClass.java:87)
	at org.hibernate.testing.transaction.TransactionUtil.doInHibernate(TransactionUtil.java:319)
	at org.hibernate.test.inheritance.TransientOverrideAsPersistentTablePerClass.testQueryByRootClass(TransientOverrideAsPersistentTablePerClass.java:83)
{code}

*Note:* The issue persists in [Hibernate ORM test suite|https://github.com/hibernate/hibernate-orm/tree/5.3.20] of version 5.3.20, in the latest one (_5.5.0_) it is already fixed by [this commit|https://github.com/hibernate/hibernate-orm/commit/d767d46d05a9a1f754dca6be870bbf9f17bdb553#diff-4214b7ebbde141b7ab515ce3c5a84ac354bf9b5b7d255953f20190ac6d24d94b].
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-11T07:54:56.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104vi8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29/sept./2021 09:46 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in 5.3 branch. PR for 5.4 is still open.,,,,,,,,,,,,,,,,Terminé,,
detached and new entities are not fully attached to the session during merge and persist,HHH-14839,71435,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,22/sept./2021 13:45 PM,04/nov./2021 01:10 AM,14/mars/2022 12:54 PM,,5.6.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate should return or update an entity object to an identical state as the ones returned by find and refresh for all other operations such as persist, merge and remove.  For example, after a detached entity is merged, the associations should be ready to be traversed normally through lazy loading.  Currently, a flush and refresh is the only way we know of to accomplish this.

Hibernate Search 6 has changed the timing of when it gathers data for indexing from commit time to the time of a flush.  Due to the non-functioning associations in the objects saved in the Hibernate Session, Hibernate Search is now buffering incomplete entity data (null or empty associations).  This behavior is a new bug in Hibernate Search, of corrupting the index with no reasonable workaround, resulting from the upstream bug in Hibernate ORM.

Our previous workaround of flush and refresh used to happen before indexing in Hibernate Search 5.  In Hibernate Search 6, there is no way for us to provide a freshened object for indexing.

We are not aware of any easily accessible methods on the EntityManager we can use +before flush+ to install a PersistentSet proxy in place of all OneToMany association properties, and a HibernateProxy in place of all ManyToOne association properties on an object so that indexing would proceed normally.

Test cases are attached to this issue:

[https://hibernate.atlassian.net/browse/HSEARCH-4323|https://hibernate.atlassian.net/browse/HSEARCH-4323]",,,,,,,,,,,,HSEARCH-4323,HSEARCH-4323,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-12-06T09:49:43.000-0800"",""stateCount"":3,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,matt(matt),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4340,0|104vi0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/oct./2021 14:32 PM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;One of the main features of ORM is to provide the developer to travel from one object to another across the various types of object-relational associations defined in the data model.  The vehicle by which this occurs is through the augmentation of ToOne and ToMany objects with advanced capabilities for triggering the loading of additional objects which are themselves similarly augmented.  This augmentation has been implemented through the use of various types of proxy objects and interceptors.

Using these proxy objects and interceptors is one of the most fundamental needs of Hibernate Search during indexing, especially for embedding nested indexes several layers deep, both up and down the hierarchical tree.  When objects are passed to Hibernate Search which have not been augmented, the entire system breaks down.

The main issue in [https://hibernate.atlassian.net/browse/HHH-14839|https://hibernate.atlassian.net/browse/HHH-14839|smart-link] is that the installation of proxy objects and interceptors into objects by ORM when they are added to the session is currently incomplete.

One design limitation we’ve noticed is that when an entity’s interceptor is found to be null, ORM makes the assumption that the object is fully initialized, when in fact the opposite is true.  A null interceptor is always found on a newly instantiated object.

{{BytecodeEnhancementMetadata.isAttributeLoaded}} is an excellent example of this, which always returns true when the interceptor is null in the {{BytecodeEnhancementMetadataPojoImpl}} implementation class.  Later, this erroneous value is used by {{AbstractEntityTuplizer}} which prevents uninitialized  collection properties to be reflected as {{LazyPropertyInitializer.UNFETCHED_PROPERTY}}.  Instead, a null value is treated as the actual contents of the collection, which defeats lazy loading of that collection  even through interceptors are sometimes (not always) installed into objects at various levels in the hierarchical tree during merge (and never during persist).

During persist, we’ve noticed that no interceptors are installed.  This is incorrect because it can not be rightly assumed that a new object just persisted has all relations populated prior to persist, or no data exists on the other side of any of the association properties, especially those which are (possibly huge) collections.

A great use case to consider which consistently exposes the issues in this case is when entity objects are serialized and leave the JVM and ORM environment to be sent to the client application, and then are deserialized back into the JVM when they come back from the client with changes.  

Communication libraries commonly instansiate these objects outside of the ORM session, and therefore are not augmented, but will be passed later to persist, merge, remove and other {{EntityManager}} methods, and then additional business logic will expect these objects to be fully “alive” with respect to traversal, change tracking and indexing.","28/oct./2021 16:56 PM;557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60;It is probably outside the scope of this issue, however I still wanted to mention it because it is realted to proxies in general, and especially to the sequence of statements when writing unit tests.

Lazy loaded collections are in their most fundamental form the results of a database query, most notably when using a normalized database schema and foreign keys.  Database queries like HQL and SQL are designed to return current results, subject only to the transaction isolation level.

However, the results of a lazy loaded collection can easily become out of sync, because ORM has no way to track and invalidate collections in a similar way to how the second level query cache can become invalidated.  *This means Hibernate Search has the potential to index a stale collection, i.e. index corruption.*

Everyone agrees that a second level query cache (or any cache for that matter) absolutely must support invalidation and refresh to avoid returning stale results.  However this invalidation concept appears to have never made its way into the realm of what truly is simply another query cache: the {{OneToMany}} collection property.

*It would really be neat to have consecutive calls to a getter which returns a OneToMany collection for a lazy loaded property to be smart enough to return correct results every time, by being aware of when the cache state is stale/invalid.*

It is understood that from a modeling standpoint (and when considering cascade features) the association appears to be “real” and even bidirectional, however from the perspective of the collection in a normalized database schema, “the other side” is really “the only side” (join tables aside).

User interfaces which facilitate data entry, and populate objects for persist and merge are also totally orthogonal to the concept that dozens (or hundreds) of collections across the model might be affected due to one ManyToOne property value set upon one entity record.

Similarly, it is not feasible to hard-code the maintainance of all collections in memory, especially when the business logic will never traverse most of them, even if those collections have been previously loaded, and it is costly in terms of CPU performance for the ORM framework to do so globally.  This is especially true when when collections are huge.

The best implementation in our opinion would be to limit the refresh operations to when the association is visited or revisited, by having the framework simply recognize the circumstances which cause a relationship to become invalidated.  When an invalidated association is revisited again post-invalidation, the refresh query would occur as if it has never been loaded, and the correct results would be returned.

Of course if the developer wants to maintain a tiny collection in memory to use cascade features, or sling arrays across the network, or wants to spend all his time writing boilerplate logic to do this manually, as is the case in many of the test cases in the ORM repository, this is an entirely different subject.  We avoid this design because it does not scale.  The only time we use cascade is when persisting the root node of an XML document that has been deserialized into an in-memory hierarchical tree.",,,,,,,,,,,,,,,A faire,,
Fix formatting for generics,HHH-14838,71434,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,,,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,21/sept./2021 19:49 PM,21/sept./2021 19:49 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,Add space after comma,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-11T07:59:36.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,quaff(quaff),,,,,,,,,0|104vhs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Migrate to Jakarta EE ,HHH-14837,71433,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,21/sept./2021 13:18 PM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,28/sept./2021 18:24 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,"This is a task to move from Java EE dependencies to Jakarta EE dependencies.  For Hibernate this mostly boils down to JPA, JTA and JAXB for direct dependencies.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-29T08:44:17.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104vhk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Provide `ExtensionTypes` class to hold the non-standard type codes,HHH-14836,71428,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,21/sept./2021 01:53 AM,30/oct./2021 05:04 AM,14/mars/2022 12:54 PM,30/oct./2021 04:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104vgg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30/oct./2021 04:52 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;See commit: a4e406a54eb3f5d6ed2b4090f9073c28e5d22515,,,,,,,,,,,,,,,,Terminé,,
More changes to support SchemaMigrator/SchemaValidator using Hibernate Reactive,HHH-14835,71427,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,20/sept./2021 21:57 PM,29/sept./2021 06:42 AM,14/mars/2022 12:54 PM,24/sept./2021 03:17 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14794,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-24T03:17:17.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104vg8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@Table annotation is ignored when fetching a lazy 1:m relationship - hibernate tries with derived name and causes SQL exception.,HHH-14834,71426,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Kai Hackemesser,557058:836f0206-1636-4060-abfd-e43ed4dc9f08,Kai Hackemesser,557058:836f0206-1636-4060-abfd-e43ed4dc9f08,20/sept./2021 18:55 PM,20/sept./2021 19:28 PM,14/mars/2022 12:54 PM,,5.4.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"In a Kotlin 1.5 codebase using Spring-Boot I use a Hibernate JPA model to access an Informix database.
There is an entity `Person` which is using an entity `UserProfileXRef` as rich M:N relationship to an entity `Profile`

I have a functional named JPA query on `UserProfileXRef` like this:
`SELECT p.user FROM UserProfileXRef p WHERE p.profile.id = '13 - TPC' AND p.user.status = UserStatusCode.ACTV` 

Which results in this SQL statement:

`select user1_.id as id2_46_, user1_.audit_id as audit_id3_46_, user1_.contact_given_name as contact_4_46_, user1_.contact_surname as contact_5_46_, user1_.default_theme as default_6_46_, user1_.email_address as email_ad7_46_, user1_.failed_logins as failed_l8_46_, user1_.grace_login_count as grace_lo9_46_, user1_.locked_out as locked_10_46_, user1_.int_max_hold as int_max11_46_, user1_.off_code as off_cod53_46_, user1_.password_date as passwor12_46_, user1_.postal_address as postal_13_46_, user1_.postal_country as postal_14_46_, user1_.postal_postcode as postal_15_46_, user1_.postal_address_town as postal_16_46_, user1_.scrambled as scrambl17_46_, user1_.single_pref_contact as single_18_46_, user1_.status as status19_46_, user1_.type as type1_46_, user1_.addr_country as addr_co20_46_, user1_.addr_street as addr_st21_46_, user1_.addr_town as addr_to22_46_, user1_.contact_title as contact23_46_, user1_.usr_id_coordinator as usr_id_54_46_, user1_.corporate_name as corpora24_46_, user1_.cus_acc_balance as cus_acc25_46_, user1_.cus_acc_credit_lim as cus_acc26_46_, user1_.cus_account_ref as cus_acc27_46_, user1_.cus_credit_status as cus_cre28_46_, user1_.fax as fax29_46_, user1_.geo_accr_status as geo_acc30_46_, user1_.given_names as given_n31_46_, user1_.init_authentic as init_au32_46_, user1_.login as login33_46_, user1_.login_type as login_t34_46_, user1_.mobile_phone as mobile_35_46_, user1_.news_account_no as news_ac36_46_, user1_.phone as phone37_46_, user1_.postal_dx_box as postal_38_46_, user1_.postal_recipient_prefix as postal_39_46_, user1_.postal_recipient_suffix as postal_40_46_, user1_.prob_status as prob_st41_46_, user1_.quick_code as quick_c42_46_, user1_.suv_auth_ref as suv_aut43_46_, user1_.enu_flag as enu_fla44_46_, user1_.int_employee_code as int_emp45_46_, user1_.password_reset_datetime as passwor46_46_, user1_.preferred_name as preferr47_46_, user1_.sup_agency_type as sup_age48_46_, user1_.sup_competency_det as sup_com49_46_, user1_.surname as surname50_46_, user1_.system_manager as system_51_46_, user1_.title as title52_46_ from crs_user_profile userprofil0_ inner join crs_user user1_ on userprofil0_.usr_id=user1_.id where userprofil0_.prf_id='13 - TPC' and user1_.status='ACTV'`

This query succeeds. A few follow-up queries happen to populate the remaining m:1 relationships of the Person entity.
Now in my further code I am lazy fetching the Person entity's `profileXref` set, which is linking to a set of `UserProfileXRef` entities. This causes the generation of a faulty query:
`select profilexre0_.person_id as person_i1_50_0_, profilexre0_.profile_xref_prf_id as profile_2_50_0_, profilexre0_.profile_xref_usr_id as profile_3_50_0_, userprofil1_.prf_id as prf_id1_49_1_, userprofil1_.usr_id as usr_id2_49_1_, userprofil1_.audit_id as audit_id3_49_1_, profile2_.id as id1_28_2_, profile2_.audit_id as audit_id2_28_2_, profile2_.description as descript3_28_2_ from crs_user_profile_xref profilexre0_ inner join crs_user_profile userprofil1_ on profilexre0_.profile_xref_prf_id=userprofil1_.prf_id and profilexre0_.profile_xref_usr_id=userprofil1_.usr_id inner join crs_profile profile2_ on userprofil1_.prf_id=profile2_.id where profilexre0_.person_id=?`
`crs_user_profile_xref`  is not a valid table name. `crs_user` is the table name of Person entities, or rather abstract User entities through inheritance. `UserProfileXRef` is annotated to have the table name `crs_user_profile`

I am adding the involved entity classes as attachments 
The code that triggers the lazy lookup that fails:
`        val queues: List<Person> = persons.allActiveTPCs().filter { it.profiles.any { p->p.id == ""NPM"" } && it.profiles.any { p->p.id == ""13 - TPC"" } }
`
It fails when accessing the `profiles` getter. persons.allActiveTPCs is a JPA repository function that calls the JPA named query defined in Person entity.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/sept./2021 18:54 PM;schlaufuchs;Person.kt;https://hibernate.atlassian.net/secure/attachment/49921/Person.kt,20/sept./2021 18:54 PM;schlaufuchs;Profile.kt;https://hibernate.atlassian.net/secure/attachment/49920/Profile.kt,20/sept./2021 18:54 PM;schlaufuchs;User.kt;https://hibernate.atlassian.net/secure/attachment/49919/User.kt,20/sept./2021 18:54 PM;schlaufuchs;UserProfileXRef.kt;https://hibernate.atlassian.net/secure/attachment/49918/UserProfileXRef.kt,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,4.0,schlaufuchs(schlaufuchs),,,,,,,,,0|104vg0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/sept./2021 19:28 PM;557058:836f0206-1636-4060-abfd-e43ed4dc9f08;you can delete that. it was a bidirectional relationship and one side was missing the mappedBy attribute.,,,,,,,,,,,,,,,,A faire,,
Upgrade to Byte Buddy 1.11.16,HHH-14833,71425,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,20/sept./2021 15:03 PM,20/sept./2021 15:40 PM,14/mars/2022 12:54 PM,20/sept./2021 15:38 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,bytecode-enhancement,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-20T15:38:02.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104vfs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"When @EntityListener annotates with @PostCreate/@PostUpdate/@PostRemove... methods inherited from an unnanotated abstract parent, l get ""You can only annotate one callback method with javax.persistence.X in bean class""",HHH-14832,71424,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Mi 84,6148eb8e7a3c8800672ab9b8,Mi 84,6148eb8e7a3c8800672ab9b8,20/sept./2021 13:27 PM,22/sept./2021 04:18 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"If I have the following setup:

{code:java}public abstract class MyListenerParent<T extends MyType> {
   public abstract void onCreate(T entity);
}{code}

{code:java}public MyListener extends MyListenerParent<Foo> {
  @PostPersist
  public void onCreate(Foo entity){ /* do something */}
}{code}

I get_ You can only annotate one callback method with javax.persistence.PostPersist in bean class_

I debugged the code and the thing is CallbackBuilderLegacyImpl.resolveEntityCallbacks is getting as methods 
both the child and the parent onCreate, but {{xMethod.isAnnotationPresent( callbackType.getCallbackAnnotation() ) }}is always returning the same boolean as the child when inspecting the parent method.  So if you only annotate the parent, both methods are resolved as non-annotated, and if you annotate the child, both methods are resolved as annotated thus giving the error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:550360f6-3304-49fe-a990-4a8ec0582aa9(ug:550360f6-3304-49fe-a990-4a8ec0582aa9),,,,,,,,,0|104vfk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"21/sept./2021 01:25 AM;6148eb8e7a3c8800672ab9b8;Update, it also happens if implementing an interface, both if the methods are abstract or default. So this means that if we use polymorphism, we cannot make this work?","22/sept./2021 04:18 AM;6148eb8e7a3c8800672ab9b8;I found same explanation [https://javachannel.org/posts/hibernate-ignores-entity-listeners/|https://javachannel.org/posts/hibernate-ignores-entity-listeners/|smart-link] `

Looks like it is due to the fact that compiler considers both child and parent methods different because of the generic on the parent",,,,,,,,,,,,,,,A faire,,
Schema validation fails for char(n) column mapped to string on SQL Server 2016,HHH-14831,71422,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Junxiang Hao,6148ba3eba1b34006aa6c87a,Junxiang Hao,6148ba3eba1b34006aa6c87a,20/sept./2021 10:12 AM,23/sept./2021 05:20 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,DDL,schema,sqlserver,validation,,"can you help me to address the issue? I been searching online for couple of days and tried all the solutions I can. still cannot figure out the right way. thank you so much for the help\!\!\!

I am not able to change the Char(45) to varchar in SQL Server since it is not managed by me

h2. error msg:

when spring.jpa.properties.hibernate.hbm2ddl.auto=validate in properties file,
has error when running the spring boot application: Schema-validation: wrong column type encountered in column \[prod_name] in table \[product]; found \[sam_prodname (Types#CHAR)], but *expecting \[char(45) (Types#VARCHAR)]*

h2. Code:

entity:
@Column(columnDefinition = ""CHAR(45)"")
*private String prod_name;*

table in SQL Server:
CREATE TABLE \[dbo].\[product](
\[productId] \[int] IDENTITY(1,1) NOT NULL,
**\[prod_name] \[dbo].\[sam_prodName] NOT NULL,**
type in DB:
*CREATE TYPE \[dbo].\[sam_prodName] FROM \[char](45) NOT NULL*

h2. solutions that not working

Also I tried 

{{1.hibernate.globally_quoted_identifiers_skip_column_definitions=true}}, 

2. @TYPE(“char”), 

3.defined the type myself by extend {{AbstractSingleColumnStandardBasicType<String>}}, or 

4. using @TypeDefs(\{         @TypeDef(name = ""oldChar"", typeClass = CharArrayType.class), })

5. use @Column(columnDefinition = ""CHAR(45)"")

neither of them works

h2. if Turn off the hbm2ddl:

If I set spring.jpa.properties.hibernate.hbm2ddl.auto=none, then everything works good, char(45) successfully mapped to string.","Java 8, hibernate-core 5.3.7, mssql-jdbc 6.4.0, SQL Server 2016 Standard Edition",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0a74af2f-1030-4422-be85-3671f25546e4(ug:0a74af2f-1030-4422-be85-3671f25546e4),,,,,,,,,0|104vf4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,23/sept./2021 05:20 AM;6148ba3eba1b34006aa6c87a;is there any way to solve it without set spring.jpa.properties.hibernate.hbm2ddl.auto=none?,,,,,,,,,,,,,,,,A faire,,
Extra cross-join generated on many-to-one or one-to-one entities using same table,HHH-14830,71421,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Cristian Berner,5d839d49c75e070c2d0b5dbe,Cristian Berner,5d839d49c75e070c2d0b5dbe,20/sept./2021 03:00 AM,20/sept./2021 03:04 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,3,,,,,,"We've found out there's an extra join created when working with one-to-one or many-to-one relationship entities, although entities use the same underlying table.

A test-case is provided here(in *orm/hibernate-orm-5*): [https://github.com/Kryword/hibernate-test-case-templates/tree/extra-join-formula|https://github.com/Kryword/hibernate-test-case-templates/tree/extra-join-formula] (note the test doesn't fail, log should be checked to see the generated SQL query)

We are doing this many-to-one relationship to allow lazy loading of the underlying computed properties. This way these are only calculated and retrieved when accessed.

Example model:
*City.hbm.xml*:

{code:xml}<class name=""org.hibernate.bugs.model.City"" table=""city"">
        ...other non-relevant properties...
        <many-to-one name=""_computedColumns"" column=""id"" update=""false"" insert=""false"" entity-name=""org.hibernate.bugs.model.City_ComputedColumns""/>
</class>{code}

*City_ComputedColumns.hbm.xml*:

{code:xml}<class name=""org.hibernate.bugs.model.City_ComputedColumns"" table=""city"">
        ...other non-relevant properties...
        <property name=""nameZIPCode"" type=""string"" formula=""name || '-' || ZIP"" update=""false"" insert=""false""/>
</class>{code}

With this model, executing this query({{select id, name, _computedColumns.nameZIPCode from City}}) through hibernate, results in the following SQL query being generated:

{code:sql}select
        city0_.id as col_0_0_,
        city0_.name as col_1_0_,
        city_compu1_.name || '-' || city_compu1_.ZIP as col_2_0_ 
    from
        city city0_ cross 
    join
        city city_compu1_ 
    where
        city0_.id=city_compu1_.id{code}

As you might see, there's an extra cross join with the table city, which shouldn't be there. The expected query should be this one:

{code:sql}select
        city0_.id as col_0_0_,
        city0_.name as col_1_0_,
        city0_.name || '-' || city0_.ZIP as col_2_0_ 
    from
        city city0_{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:552f9359-72d1-4f12-9230-d7b31d95cb16(ug:552f9359-72d1-4f12-9230-d7b31d95cb16),,,,,,,,,0|104vew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Causing Null exception when migrating from 5.4.4.Final to Hibernate 6.0.0 alpha9,HHH-14829,71420,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Chenxing Cao,601b99d44e258e006965d5ce,Chenxing Cao,601b99d44e258e006965d5ce,18/sept./2021 21:01 PM,18/sept./2021 22:42 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:163) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:577) ~[spring-context-5.3.9.jar:5.3.9]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332) ~[spring-boot-2.5.4.jar:2.5.4]
	at sg.gov.defence.nspay.app.NspayApplication.main(NspayApplication.java:31) ~[classes/:na]
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:450) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:199) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:182) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:160) ~[spring-boot-2.5.4.jar:2.5.4]
	... 8 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'filterSecurityInterceptor' defined in class path resource [sg/gov/defence/atms/common/trust5/ss5/beans/TrustBeansConfig.class]: Unsatisfied dependency expressed through method 'filterSecurityInterceptor' parameter 1; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityMetadataSource': Unsatisfied dependency expressed through field 'authorityService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorityService': Unsatisfied dependency expressed through field 'resourceRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceRepository' defined in sg.gov.defence.atms.common.trust5.ss5.repository.ResourceRepository defined in @EnableJpaRepositories declared on NspayApplication: Cannot create inner bean '(inner bean)#30adae45' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#30adae45': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:800) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:541) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:212) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:175) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:170) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:155) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:87) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:260) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53) ~[spring-boot-2.5.4.jar:2.5.4]
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5219) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:835) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) ~[na:na]
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:263) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:432) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:927) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:486) ~[tomcat-embed-core-9.0.52.jar:9.0.52]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123) ~[spring-boot-2.5.4.jar:2.5.4]
	... 13 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'securityMetadataSource': Unsatisfied dependency expressed through field 'authorityService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorityService': Unsatisfied dependency expressed through field 'resourceRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceRepository' defined in sg.gov.defence.atms.common.trust5.ss5.repository.ResourceRepository defined in @EnableJpaRepositories declared on NspayApplication: Cannot create inner bean '(inner bean)#30adae45' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#30adae45': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1413) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791) ~[spring-beans-5.3.9.jar:5.3.9]
	... 54 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'authorityService': Unsatisfied dependency expressed through field 'resourceRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceRepository' defined in sg.gov.defence.atms.common.trust5.ss5.repository.ResourceRepository defined in @EnableJpaRepositories declared on NspayApplication: Cannot create inner bean '(inner bean)#30adae45' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#30adae45': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1413) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:657) ~[spring-beans-5.3.9.jar:5.3.9]
	... 69 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'resourceRepository' defined in sg.gov.defence.atms.common.trust5.ss5.repository.ResourceRepository defined in @EnableJpaRepositories declared on NspayApplication: Cannot create inner bean '(inner bean)#30adae45' of type [org.springframework.orm.jpa.SharedEntityManagerCreator] while setting bean property 'entityManager'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#30adae45': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:389) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:134) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1689) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1434) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:657) ~[spring-beans-5.3.9.jar:5.3.9]
	... 83 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name '(inner bean)#30adae45': Cannot resolve reference to bean 'entityManagerFactory' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:342) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:113) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveConstructorArguments(ConstructorResolver.java:693) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:510) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveInnerBean(BeanDefinitionValueResolver.java:374) ~[spring-beans-5.3.9.jar:5.3.9]
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1786) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:330) ~[spring-beans-5.3.9.jar:5.3.9]
	... 104 common frames omitted
Caused by: java.lang.NullPointerException: null
	at org.hibernate.type.internal.UserTypeJavaTypeWrapper.<init>(UserTypeJavaTypeWrapper.java:49) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.type.CustomType.<init>(CustomType.java:89) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.type.CustomType.<init>(CustomType.java:73) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.model.TypeDefinition.createResolution(TypeDefinition.java:180) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.model.TypeDefinition.createResolution(TypeDefinition.java:120) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.model.TypeDefinition.resolve(TypeDefinition.java:104) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.mapping.BasicValue.interpretExplicitlyNamedType(BasicValue.java:524) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.mapping.BasicValue.buildResolution(BasicValue.java:281) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.mapping.BasicValue.resolve(BasicValue.java:249) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.mapping.BasicValue.resolve(BasicValue.java:239) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.lambda$processValueResolvers$4(InFlightMetadataCollectorImpl.java:1729) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at java.base/java.util.ArrayList.removeIf(ArrayList.java:1712) ~[na:na]
	at java.base/java.util.ArrayList.removeIf(ArrayList.java:1690) ~[na:na]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processValueResolvers(InFlightMetadataCollectorImpl.java:1728) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1714) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.buildMetadataInstance(InFlightMetadataCollectorImpl.java:2298) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:325) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1345) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1416) ~[hibernate-core-6.0.0.Alpha9.jar:6.0.0.Alpha9]
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58) ~[spring-orm-5.3.9.jar:5.3.9]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365) ~[spring-orm-5.3.9.jar:5.3.9]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-5.3.9.jar:5.3.9]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-5.3.9.jar:5.3.9]
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341) ~[spring-orm-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845) ~[spring-beans-5.3.9.jar:5.3.9]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-5.3.9.jar:5.3.9]
	... 111 common frames omitted


Process finished with exit code 1
","Hibernate 6.0.0 alpha9
Java 11
MySQL ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:062b9efd-75d8-45d4-b12a-5f42bbea6692(ug:062b9efd-75d8-45d4-b12a-5f42bbea6692),,,,,,,,,0|104veo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Bytecode enhancement generates invalid bytecode for final fields,HHH-14828,71419,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/sept./2021 06:18 AM,15/déc./2021 04:59 AM,14/mars/2022 12:54 PM,18/oct./2021 02:10 AM,5.4.32,5.5.7,5.6.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.33,5.5.8,5.6.0.Beta2,,,,,,,hibernate-core,,,,0,,,,,,"Affects 5.6 for sure, maybe earlier versions.

Originally reported in Quarkus: https://github.com/quarkusio/quarkus/issues/20186

Hibernate ORM incorrectly enhances final fields (which seem legal in embedables used as embedded identifiers, apparently), resulting in the following exception when we call the constructor of the {{DrinkId}} embeddable below:

{noformat}
java.lang.IllegalAccessError: Update to non-static final field org.hibernate.test.bytecode.enhancement.basic.EmbeddedIdFinalFieldTest$Drink$DrinkId.id attempted from a different method ($$_hibernate_write_id) than the initializer method <init> 

	at org.hibernate.test.bytecode.enhancement.basic.EmbeddedIdFinalFieldTest$Drink$DrinkId.$$_hibernate_write_id(EmbeddedIdFinalFieldTest.java)
	at org.hibernate.test.bytecode.enhancement.basic.EmbeddedIdFinalFieldTest$Drink$DrinkId.<init>(EmbeddedIdFinalFieldTest.java:72)
	at org.hibernate.test.bytecode.enhancement.basic.EmbeddedIdFinalFieldTest.embeddedIdConstructorTest(EmbeddedIdFinalFieldTest.java:29)
{noformat}

{code}


    @Entity
    public static class Drink {

        @EmbeddedId
        private DrinkId id;

        private String name;

        public Drink() {
            this.id = DrinkId.of( UUID.randomUUID().toString());
        }

        public DrinkId getId() {
            return id;
        }

        public void setId(DrinkId id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Immutable
        @Embeddable
        public static class DrinkId implements Serializable {

            private final String id;

            public DrinkId() {
                this.id = null;
            }

            private DrinkId(String id) {
                this.id = id;
            }

            public static DrinkId of(String string) {
                return new DrinkId(string);
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (!(o instanceof DrinkId)) return false;
                DrinkId drinkId = (DrinkId) o;
                return Objects.equals(id, drinkId.id);
            }

            @Override
            public int hashCode() {
                return Objects.hash(id);
            }
        }
    }
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=15, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":15,""lastUpdated"":""2021-10-19T03:00:08.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":15,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4231,0|104veg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Try a different phase to generate Avro DTOs,HSEARCH-4325,71418,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,17/sept./2021 04:21 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,23/sept./2021 04:32 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"At the moment we're using the {{initialize}} phase to generate the DTOs models with the {{avro-maven-plugin}}.
With this issue we're exploring if there are alternative solutions, e.g. try to use the {{maven-helper-plugin}}.",,,,,,,,,,,,,,,,,,,HSEARCH-4209,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-20T13:46:26.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2655,0|1009cw:000000xdur3mhxzzzxezsq4v,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Document removed default identifier bridges in the migration guide,HSEARCH-4324,71417,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Out of Date,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/sept./2021 23:17 PM,29/sept./2021 04:31 AM,14/mars/2022 12:54 PM,29/sept./2021 04:31 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"We documented the removed class bridge, but it seems several identifier bridges were removed too, including the {{BigDecimal}} bridge.

See https://discourse.hibernate.org/t/hibernate-search-6-doesnt-support-bigdecimal-primary-keys/5712",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq4r,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,29/sept./2021 04:31 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It seems more useful to implement the missing default bridges: HSEARCH-4331,,,,,,,,,,,,,,,,Terminé,,
"Extraction of data from entities on session flush leads to out-of-sync index if entities were just recently merged, because @OneToMany associations are still null",HSEARCH-4323,71416,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,Matthew Frederes,557058:a57813c6-adf5-4b5b-a520-3f01ceb90b60,16/sept./2021 18:56 PM,18/oct./2021 00:31 AM,14/mars/2022 12:54 PM,,6.0.6.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,mapper-orm,,,,0,,,,,,"See the following test cases:

[Hibernate Search 5 Test Cases|https://github.com/busitech/hibernate-test-case-templates/tree/main/search/hibernate-search-5/lucene/src/test/java/biz/bitech/hibernate/search5/lucene/bugs] 

[Hibernate Search 6 Test Cases|https://github.com/busitech/hibernate-test-case-templates/tree/main/search/hibernate-search-6/orm-lucene/src/test/java/biz/bitech/hibernate/search6/lucene/bugs] 

Conversation in Forum:

[HS6 not indexing add or delete, only update with @OneToMany @IndexedEmbedded|https://discourse.hibernate.org/t/hs6-corrupting-index-after-merge-of-detached-entity-with-onetomany-association/5686/6]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-04T00:16:06.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,matt(matt),yrodiere(fenrhil),,,,,,,,0|104ve0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-18 07:26:17.534,,,,"18/oct./2021 00:26 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Caused by [https://hibernate.atlassian.net/browse/HHH-14839|https://hibernate.atlassian.net/browse/HHH-14839|smart-link] . If that bug gets solved, we won’t need to change anything in Hibernate Search: [https://hibernate.atlassian.net/browse/HSEARCH-4323|https://hibernate.atlassian.net/browse/HSEARCH-4323|smart-link] should be automatically solved as well.","18/oct./2021 00:31 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Note that enabling asynchonous automatic indexing (e.g. the [database-polling coordination strategy|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#coordination-database-polling]) should get rid of the problem, as entities would be re-loaded from the database in a background thread before being reindexed, thereby ignoring most “incorrect” state of entities (such as null associations caused by HHH-14839). ",,,,,,,,,,,,,,,A faire,,
@AttributeOverride at type level does not work when also using orm.xml,HHH-14827,71415,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/sept./2021 01:36 AM,20/sept./2021 15:40 PM,14/mars/2022 12:54 PM,16/sept./2021 07:23 AM,5.6.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.8,5.6.0.Beta2,,,,,,,,hibernate-core,,,,0,,,,,,"Reported downstream: [https://github.com/quarkusio/quarkus/issues/19867|https://github.com/quarkusio/quarkus/issues/19867]

Affects ORM 5.6 for sure, but probably affects older versions as well.

With the mapping below, {{@AttributeOverride}} will work correctly, unless we use an {{orm.xml}}, in which case the {{@AttributeOverride}} is ignored.

Strangely, this bug does not affect {{@AttributeOverride}} at the property level (embedded properties).

{code:java}@MappedSuperclass
    public static class MappedSuperclassType {

        private String name;

        public MappedSuperclassType() {
        }

        public MappedSuperclassType(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    @Entity(name = ""derivedentity"")
    @AttributeOverride(name = ""name"", column = @Column(name = ""custom_name""))
    public static class DerivedEntityType extends MappedSuperclassType {

        @Id
        @GeneratedValue
        private long id;

        public DerivedEntityType() {
        }

        public DerivedEntityType(String name) {
            super(name);
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }
    }
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-16T07:23:26.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4224,0|104vds:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Dynamic configuration resolved programmatically on startup,HSEARCH-4322,71414,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Won't Do,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 08:58 AM,27/sept./2021 07:22 AM,14/mars/2022 12:54 PM,27/sept./2021 07:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,mapper-orm,,,,0,,,,,,"We sometimes need to make some settings ""dynamic"", i.e. resolved on startup based on some external services. One example is the list of tenant IDs (see HSEARCH-4316 , HSEARCH-4321). I'm sure there are  more, though, and it would be a shame to have to introduce one separate pluggable interface for each single place where we need ""dynamic"" settings.

Let's introduce a {{ConfigurationContributor}} interface as a silver bullet for all ""dynamic"" settings.
This would be implemented by users. It's {{configure}} method would be called on startup, and get passed a (very_ limited context with just a {{SessionFactory}} and {{BeanResolver}}. It would be given a chance to contribute contribute configuration properties on startup, programmatically, before Hibernate Search even starts configuring itself.

Note that most frameworks already allow something like that, but they don’t give access to a usable SessionFactory, so they wouldn’t allow retrieving the configuration from the database through Hibernate ORM.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq4k,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,"27/sept./2021 07:22 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Upon closer inspection, this turns out to be a bad idea:

* this feature already exists in most frameworks (e.g. https://quarkus.io/guides/config-extending-support#custom-config-source), so the only added value here would only be the ability to work with the session factory while generating configuration.
* the session factory is not fully built when Hibernate Search starts and could ask users for dynamic configuration, so it's not safe to use. Things that are missing at this point include metadata validation, identifier generators, metamodel, named queries, and more. Worse: what is available or not at this point is unspecified, so it could change in the future. Really, that's not something we want to do assumptions about.",,,,,,,,,,,,,,,,Terminé,,
Mass indexing for multiple tenants at once,HSEARCH-4321,71413,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 08:47 AM,26/nov./2021 02:31 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.3-backlog,,,,,,,,,mapper-orm,mapper-pojo-base,,,0,,,,,,"Currently, the mass indexer will only target one tenant, and reindex all entities of that tenant. If you want to reindex multiple tenants, you will have to run the mass indexer twice.

We should provide a way to reindex multiple tenants at once.",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4322,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzw,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"15/sept./2021 08:59 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;One solution would be to allow passing multiple tenant IDs to {{SearchScope.massIndexer(String... tenantIds)}}. Internally, we would create one {{PojoMassIndexingBatchIndexingWorkspace}} per (tenantId, typeGroup) combination, which would naturally lead to indexing all tenants in the same mass indexer.

We could also improve {{SearchScope.massIndexer()}} (the one without a {{tenantId}} parameter) to have it reindex all tenants by default, instead of throwing an exception. We would only need a configuration option to allow users to tell us what the tenant IDs are:

{noformat}hibernate.search.multi_tenancy.tenant_ids=tenant1,tenant2,tenant3,tenant4,tenant5{noformat}

As it happens, we are actually introducing this property in [https://hibernate.atlassian.net/browse/HSEARCH-4316|https://hibernate.atlassian.net/browse/HSEARCH-4316|smart-link], for other reasons.

To address use cases where the tenants are semi-dynamic (list retrieved from an external service on startup rather than from compile-time configuration files), users could take advantage of framework features that allow generating configuration dynamically; see [https://quarkus.io/guides/config-extending-support#custom-config-source|https://quarkus.io/guides/config-extending-support#custom-config-source|smart-link]  for example. Alternatively, see [https://hibernate.atlassian.net/browse/HSEARCH-4322|https://hibernate.atlassian.net/browse/HSEARCH-4322|smart-link] .",,,,,,,,,,,,,,,,A faire,,
Regression: OneToOne fields are always null if parent is loaded from L2 cache,HHH-14826,71412,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Corrigé,Amit Mendapara,557058:514c99cd-0c5d-4627-a765-18ba5ad68295,Amit Mendapara,557058:514c99cd-0c5d-4627-a765-18ba5ad68295,Amit Mendapara,557058:514c99cd-0c5d-4627-a765-18ba5ad68295,15/sept./2021 03:45 AM,19/janv./2022 09:35 AM,14/mars/2022 12:54 PM,01/oct./2021 01:52 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.8,5.6.0.Beta2,,,,,,,,hibernate-core,,,,0,,,,,,The fix for HHH-14216 is causing a regression and now bi-directional OneToOne fields are always `null` if parent is loaded from the L2 cache.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,15/sept./2021 06:38 AM;cristatus;hibernate-orm-5.zip;https://hibernate.atlassian.net/secure/attachment/49917/hibernate-orm-5.zip,15/sept./2021 06:35 AM;cristatus;hibernate-test.zip;https://hibernate.atlassian.net/secure/attachment/49916/hibernate-test.zip,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2022-01-25T06:49:21.000-0800"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,cristatus(cristatus),sanne(sanne),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4221,0|104vdk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,2021-09-20 21:41:38.488,Backport?,Approved,,15/sept./2021 03:50 AM;557058:514c99cd-0c5d-4627-a765-18ba5ad68295;I created pull request to fix the issue https://github.com/hibernate/hibernate-orm/pull/4221,"20/sept./2021 14:41 PM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Many thanks, this was merged now.",30/sept./2021 23:22 PM;557058:514c99cd-0c5d-4627-a765-18ba5ad68295;Should be backported to 5.5.x release.,"01/oct./2021 01:46 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Agreed, I’ll backport it.",,,,,,,,,,,,,Terminé,,
Publish mapper-pojo as an incubating module,HSEARCH-4320,71411,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 01:53 AM,08/mars/2022 04:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,HSEARCH-1800,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vdc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add mapper-pojo section to the reference documentation,HSEARCH-4319,71410,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 01:52 AM,08/mars/2022 04:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,HSEARCH-1800,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vd4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Review mapper-pojo API, mark as @Incubating if necessary, remove loose ends",HSEARCH-4318,71409,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 01:49 AM,08/mars/2022 04:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,HSEARCH-1800,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vcw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Rename mapper-javabean to mapper-pojo mapper (including APIs),HSEARCH-4317,71408,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/sept./2021 01:49 AM,08/mars/2022 04:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,HSEARCH-1800,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vco:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
selecting a PostgresSQL UUID results in MappingException with native queries,HHH-14825,71407,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jon Harper,557058:af0f75b6-8759-490b-aba3-4c8bb72f896c,Jon Harper,557058:af0f75b6-8759-490b-aba3-4c8bb72f896c,14/sept./2021 07:38 AM,14/sept./2021 07:42 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"please see [https://github.com/spring-projects/spring-data-jpa/issues/1796#issuecomment-752499053|https://github.com/spring-projects/spring-data-jpa/issues/1796#issuecomment-752499053|smart-link] 
copied here in case it gets lost: it works with createQuery but doesn’t with createNativeQuery:
org.hibernate.MappingException: No Dialect mapping for JDBC type: 1111

{noformat}	@Autowired
	private EntityManager entityManager;

	@Test
	void selectJpaNoTargetClass() {

		Person p = new Person();
		p.setName(""Daisy"");
		UUID id = personRepository.save(p).getId();

		Object reloadedId = entityManager //
				.createQuery(""select id from Person"") //
				.getSingleResult();

		Assertions.assertEquals(id, reloadedId);
	}

	@Test
	void selectNativeJpaNoTargetClass() {

		Person p = new Person();
		p.setName(""Daisy"");
		UUID id = personRepository.save(p).getId();

		Object reloadedId = entityManager //
				.createNativeQuery(""select id from Person"") //
				.getSingleResult();

		Assertions.assertEquals(id, reloadedId);
	}{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:02cc6881-9c6c-4071-927f-031cb0212686(ug:02cc6881-9c6c-4071-927f-031cb0212686),,,,,,,,,0|104vcg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,14/sept./2021 07:39 AM;557058:af0f75b6-8759-490b-aba3-4c8bb72f896c;.,,,,,,,,,,,,,,,,A faire,,
Multi-tenancy for asynchronous indexing,HSEARCH-4316,71406,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/sept./2021 06:51 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,30/nov./2021 09:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"I believe that right now, asynchronous indexing will not work with multitenancy enabled: outbox events do not even mention the tenant, and background event processors open sessions without mentioning the tenant.

We should think about it; it’s not just as simple as adding the tenant ID to outbox events.

We will probably want to configure sharding differently per tenant, so that some nodes can focus on a specific tenant. But then that makes configuration much more complex. It also means we will have one background processor per tenant per shard… ?",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4322,HSEARCH-4321,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-30T09:04:30.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2713,0|104us6:,,,,,,HSEARCH - 2021-22,HSEARCH - 2021-23,,,,,,,,,,,,,,,,,,,,,,,,,,"15/sept./2021 08:59 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Maybe something like this:

{noformat}hibernate.search.multi_tenancy.tenant_ids=tenant1,tenant2,tenant3,tenant4,tenant5
hibernate.search.coordination.strategy = outbox-polling
# Defaults for all tenants
hibernate.search.coordination.event_processor.enabled = false
# Per-tenant settings
hibernate.search.coordination.tenants.tenant1.event_processor.enabled = true
hibernate.search.coordination.tenants.tenant1.shards.static = true
hibernate.search.coordination.tenants.tenant1.shards.total_count = 4
hibernate.search.coordination.tenants.tenant1.shards.assigned = 2,3
hibernate.search.coordination.tenants.tenant2.event_processor.enabled = true
hibernate.search.coordination.tenants.tenant2.shards.static = true
hibernate.search.coordination.tenants.tenant2.shards.total_count = 2
hibernate.search.coordination.tenants.tenant2.shards.assigned = 0{noformat}

The setting {{hibernate.search.backend.multitenancy.tenant_ids}} could be used for other purposes, in particular [https://hibernate.atlassian.net/browse/HSEARCH-4321|https://hibernate.atlassian.net/browse/HSEARCH-4321|smart-link] .

To address use cases where the tenants are semi-dynamic (list retrieved from an external service on startup rather than from compile-time configuration files), users could take advantage of framework features that allow generating configuration dynamically; see [https://quarkus.io/guides/config-extending-support#custom-config-source|https://quarkus.io/guides/config-extending-support#custom-config-source|smart-link]  for example. Alternatively, see [https://hibernate.atlassian.net/browse/HSEARCH-4322|https://hibernate.atlassian.net/browse/HSEARCH-4322|smart-link] .",,,,,,,,,,,,,,,,Terminé,,
Fix example captions in documentation,HSEARCH-4315,71405,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/sept./2021 01:36 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,14/sept./2021 02:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,documentation,,,,0,,,,,,"Two examples have the same name:

Example 138. Getting a SearchQuery object

Example 139. Getting a SearchQuery object",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-14T02:24:50.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2654,0|1009cw:000000xdur3mhxzzzxezsq7uzt,,,,,,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
OneToOne persistence is not correct,HHH-14824,71404,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Andrew Heron,611bf6667b538a006977532b,Andrew Heron,611bf6667b538a006977532b,13/sept./2021 05:40 AM,13/sept./2021 05:40 AM,14/mars/2022 12:54 PM,,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-entitymanager,,,,1,,,,,,"Persisting 2 entities that both have a @OneToOne mapping with each other causes incorrect PK field determination.

{quote}java [^OneToOneTest.zip] x.persistence.PersistenceException: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private int org.hibernate.test.BIdClass.field1] by reflection for persistent property [org.hibernate.test.BIdClass#field1] : String1
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1395)
	at org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1378)
	at org.hibernate.test.Tester.test1(Tester.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:768)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private int org.hibernate.test.BIdClass.field1] by reflection for persistent property [org.hibernate.test.BIdClass#field1] : String1
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:75)
	at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue(AbstractComponentTuplizer.java:59)
	at org.hibernate.type.ComponentType.getPropertyValue(ComponentType.java:419)
	at org.hibernate.type.ComponentType.isDirty(ComponentType.java:262)
	at org.hibernate.type.OneToOneType.isDirty(OneToOneType.java:161)
	at org.hibernate.type.OneToOneType.isDirty(OneToOneType.java:166)
	at org.hibernate.type.TypeHelper.findDirty(TypeHelper.java:316)
	at org.hibernate.persister.entity.AbstractEntityPersister.findDirty(AbstractEntityPersister.java:4737)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.dirtyCheck(DefaultFlushEntityEventListener.java:584)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.isUpdateNecessary(DefaultFlushEntityEventListener.java:245)
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:170)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:229)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:93)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1391)
	... 25 more
Caused by: java.lang.IllegalArgumentException: Can not set int field org.hibernate.test.BIdClass.field1 to null value
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeIntegerFieldAccessorImpl.getInt(UnsafeIntegerFieldAccessorImpl.java:56)
	at java.lang.reflect.Field.getInt(Field.java:574)
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:62)
	... 41 more{quote}


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/sept./2021 05:40 AM;ug:118fdc1c-d088-46e5-a5b2-e58b52c97272;OneToOneTest.zip;https://hibernate.atlassian.net/secure/attachment/49913/OneToOneTest.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:118fdc1c-d088-46e5-a5b2-e58b52c97272(ug:118fdc1c-d088-46e5-a5b2-e58b52c97272),,,,,,,,,0|104vc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.0.10,,,,,,,,,,,,,,,,,,,,,A faire,,
Null Pointer Exception during findDirty check,HHH-14823,71402,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Milo van der Zee,557058:fd2cb2ca-a1c6-4310-9631-c439520f7a36,Milo van der Zee,557058:fd2cb2ca-a1c6-4310-9631-c439520f7a36,11/sept./2021 05:54 AM,11/sept./2021 06:39 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Also see [https://stackoverflow.com/questions/68994840/unexpected-null-pointer-exception-npe-in-hibernate-finddirty-during-commit|https://stackoverflow.com/questions/68994840/unexpected-null-pointer-exception-npe-in-hibernate-finddirty-during-commit|smart-link] 

There is an unexpected NPE while doing a findDirty:

{code:java}Caused by: java.lang.NullPointerException
at org.hibernate.type.TypeHelper.findDirty(TypeHelper.java:313)
at org.hibernate.persister.entity.AbstractEntityPersister.findDirty(AbstractEntityPersister.java:4737)
at org.hibernate.event.internal.DefaultFlushEntityEventListener.dirtyCheck(DefaultFlushEntityEventListener.java:584)
at org.hibernate.event.internal.DefaultFlushEntityEventListener.isUpdateNecessary(DefaultFlushEntityEventListener.java:245)
at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:170){code}



This probably is because of abuse of Hibernate but still should not happen. Even worse is that there is no addition info on which entity it happens. A simple fix in `AbstractEntityPersister.java` is like:

{noformat}	public int[] findDirty(Object[] currentState, Object[] previousState, Object entity, SharedSessionContractImplementor session)
			throws HibernateException {
		try {
			int[] props = TypeHelper.findDirty(
					entityMetamodel.getProperties(),
					currentState,
					previousState,
					propertyColumnUpdateable,
					session
			);
			if (props == null) {
				return null;
			}
			else {
				logDirtyProperties(props);
				return props;
			}
		}
		catch(HibernateException e1) {
			throw e1;
		}
		catch(Exception e2) {
			String message = ""findDirty: entity="" + entity + "", currentState="" + Arrays.toString(currentState) + "", previousState="" + Arrays.toString(previousState);
			throw new RuntimeException(message, e2);
		}
	}
{noformat}","hibernate-core, Java 11, MySQL, Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,Clueless(clueless),,,,,,,,,0|104vbk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Allow non-string tenant identifiers and tenant resolver as managed bean,HHH-14822,71401,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,11/sept./2021 05:32 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-core,,,,0,,,,,,"A follow-up of https://github.com/hibernate/hibernate-orm/pull/3867#discussion_r706607286 which introduces support for a discriminator-like tenant strategy. We should change a few APIs that currently always expect a String. Also, we should look into creating {{CurrentTenantIdentifierResolver}} as managed bean the as per https://github.com/hibernate/hibernate-orm/pull/3867#discussion_r706574620",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104vbc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
EntityKey 'null identifier' should not happen,HHH-14821,71400,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Milo van der Zee,557058:fd2cb2ca-a1c6-4310-9631-c439520f7a36,Milo van der Zee,557058:fd2cb2ca-a1c6-4310-9631-c439520f7a36,11/sept./2021 04:00 AM,11/sept./2021 05:45 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Stacktrace:

{noformat}org.hibernate.AssertionFailure: null identifier
	at org.hibernate.engine.spi.EntityKey.<init>(EntityKey.java:51)
	at org.hibernate.internal.AbstractSharedSessionContract.generateEntityKey(AbstractSharedSessionContract.java:545)
	at org.hibernate.event.internal.DefaultRefreshEventListener.onRefresh(DefaultRefreshEventListener.java:104)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)
	at org.hibernate.internal.SessionImpl.fireRefresh(SessionImpl.java:1298)
	at org.hibernate.internal.SessionImpl.refresh(SessionImpl.java:1261)
	at org.hibernate.engine.spi.CascadingActions$3.cascade(CascadingActions.java:142){noformat}



Fix in DefaultRefreshEventListener.java:105

{noformat}          source.getFactory()
   )
   );
}
if ( id == null ) {
   throw new IllegalIdentifierException(
         ""attempted to refresh instance with null identifier: "" +
               MessageHelper.infoString( persister, id, source.getFactory() )
   );
}
final EntityKey key = source.generateEntityKey( id, persister );
if ( persistenceContext.getEntry( key ) != null ) {
   throw new PersistentObjectException(
         ""attempted to refresh transient instance when persistent instance was already associated with the Session: "" +
{noformat}","hibernate-core, Java 11, MySQL, Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,Clueless(clueless),,,,,,,,,0|104vb4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Querying IndexedEmbedded entities (sometimes) returning wrong result,HSEARCH-4314,71399,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Dimitrios Stamatis,557058:7fbf453f-88a7-4bf9-865c-4dfb94165aef,Dimitrios Stamatis,557058:7fbf453f-88a7-4bf9-865c-4dfb94165aef,10/sept./2021 18:11 PM,12/sept./2021 23:46 PM,14/mars/2022 12:54 PM,12/sept./2021 23:46 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,backend-lucene,,,,0,hibernate,lucene,search,,,"I’m attaching a test case that demonstrates unwanted search results.

I understand that Hibernate Search uses some tricks to support joined entities, using Apache Lucene, but I’m hoping you can suggest a solution.

I’m searching for “Foo” entities where its “Bar” children must match TWO fields:
bar_name: Bar2
AND
bar_visibility: public

I only want Foo results where a child Bar matches BOTH ""Bar2"" AND ""public"".

But, that’s not what’s happening. I’m seeing Foo results when just ONE of the two Bar fields are matched.

This apparently only happens when there are 2 (or more) Bar entities that point to the same Foo entity. 

I.e., if you comment out these lines in my attached test case:
			Bar bar1 = new Bar(1L, ""Bar1"", ""public"", foo1);
			foo1.getBars().add(bar1);
			s.persist(bar1);
it correctly returns 0 results, as I’d expect.

Please advise.
 [^hibernate-test-case-templates-master.zip] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,10/sept./2021 18:06 PM;dastamatis;hibernate-test-case-templates-master.zip;https://hibernate.atlassian.net/secure/attachment/49906/hibernate-test-case-templates-master.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,dastamatis(dastamatis),yrodiere(fenrhil),,,,,,,,0|104vaw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-09-13 06:46:27.225,,,,"12/sept./2021 23:46 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;This is expected behavior.

By default, for performance reasons, objects in Lucene documents are flattened, i.e. the values of all their fields are put together and merged into the root document. So your query:

{noformat}Foo results where a child Bar matches BOTH ""Bar2"" AND ""public""{noformat}

Is actually interpreted as:

{noformat}Foo results where (a child Bar matches ""Bar2"") AND (a child Bar matches ""public""){noformat}

If you want to preserve the identity of “Bar” children, then you need nested documents, and that’s a feature added in Hibernate Search 6.

More info in [this section of the documentation|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-orm-indexedembedded-structure].

I’m going to close this ticket; if you have more questions, please use [your topic on the forums|https://discourse.hibernate.org/t/querying-indexedembedded-entities-sometimes-returning-wrong-result/5692].",,,,,,,,,,,,,,,,Terminé,,
Missing anchors in the documentation,HSEARCH-4313,71398,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/sept./2021 01:28 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,04/oct./2021 07:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Beta1,,,,,,,,documentation,,,,0,,,,,,"While writing my announcement for 6.1, I had to rely on several auto-generated anchors (starting with ""_""). Those may change as soon as we change the corresponding title, so they are dodgy.

Let's add explicit anchors everywhere, and update the 6.1 announcement as well as the ""what's new"" page for 6.1 on hibernate.org.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-04T07:24:40.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2672,0|1009cw:000000xdur3mhxzzzxezsq4u,,,,,,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"type-defs with ""global"" parameters not working",HHH-14820,71397,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Guillaume Toison,70121:38de86ea-8f29-43d6-935e-91c519fdc623,Guillaume Toison,70121:38de86ea-8f29-43d6-935e-91c519fdc623,09/sept./2021 11:51 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,30/sept./2021 12:58 PM,6.0.0.Alpha9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"In order to map enums by name (instead of the default by ordinal) it is configured this way:

Example hbm.xml file:


{code:xml}
<hibernate-mapping package=""x.y.z"">
  <typedef name=""exampleEnumType"" class=""x.y.z.EnumUserType"">
  	<param name=""enumClass"">x.y.z.ExampleEnum</param>
  </typedef>
...
  <property name=""..."" type=""exampleEnumType""/>
{code}


And our custom EnumUserType overrides the parameters to force the use of NamedEnumValueConverter:


{code:java}
import java.util.Properties;
import org.hibernate.type.EnumType;

public class EnumUserType<T extends Enum<T>> extends EnumType<T> {

	@Override
	public void setParameterValues(Properties parameters) {
		parameters.setProperty(EnumType.NAMED, ""true"");

		super.setParameterValues(parameters);
	}
}

{code}


This works fine with Hibernate 5 but when moving to 6.0.0 Alpha 9 only one instance of that EnumUserType ever seems to be created by Hibernate, even though there are multiple typedef in multiple hbm files. That instance is configured multiple times and in the end keeps the last enumClass. Then when the type is used in a query the wrong enum is used and the data fails to load.
In debug I was able to confirm that the EnumUserType.setParameterValues() method is always called on the same instance.

This was initially discussed here: https://discourse.hibernate.org/t/enumtype-with-hbm-mapping-in-hibernate-6/5681",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-09-30T12:57:30.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:554ce08d-5b3c-4a43-accf-731e27420f16(ug:554ce08d-5b3c-4a43-accf-731e27420f16),steve(steve),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4210,0|104vao:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,2021-09-30 12:55:23.743,,,,09/sept./2021 12:12 PM;70121:38de86ea-8f29-43d6-935e-91c519fdc623;Pull request for reproducer: [https://github.com/hibernate/hibernate-orm/pull/4210|https://github.com/hibernate/hibernate-orm/pull/4210|smart-link] ,"30/sept./2021 05:55 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;This is most likely a side-effect of leveraging the managed-bean registry for custom types.  What should happen is a sort of cascade:

# If there is a set of parameters associated with the “usage” (your PR does not), we should bypass the bean registry all together.
# Use the type-def name to obtain the managed bean.

I’m guessing (2) does not happen, insofar as we do not use the name.",30/sept./2021 10:19 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Shoot.  My fix causes a problem with hibernate-envers that I will have to think through,30/sept./2021 12:59 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Fixed the envers issue.  This is ready to try out,,,,,,,,,,,,,Terminé,,
Sorting and limiting on a one to many attribute is not working from 5.3.4 onwards,HHH-14819,71396,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,vaidya nathan,557058:b1612c9e-81ef-49b3-ac5f-e040b1798a0b,vaidya nathan,557058:b1612c9e-81ef-49b3-ac5f-e040b1798a0b,09/sept./2021 09:10 AM,29/sept./2021 09:58 AM,14/mars/2022 12:54 PM,,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"*Overview*

We are using spring boot in our project and we migrated recently from spring boot 2.0.0.RELEASE to 2.4.3.RELEASE. As part of this migration, hibernate core transitive dependency moved from 5.2.14 to 5.4.28 and it broke some functionality. Working backwards, found that the cutoff point was 5.3.4 - meaning from 5.3.4 this functionality is broke. 

*What Broke*

When trying to sort on a one to many relation with a simple where clause on the main table and with oracle9i dialect (default from 5.3.4 onwards) there is an extra select * for that is added to the start that is causing the orderby to get out of place causing oracle errors. 

*Domain Object Model*

{code:java}@Entity
    @Table(schema=""XXX"" ,name=""YYY"")
    public class User{
       @OneToMany(cascade = CascadeType.ALL)
       @JoinColumn(name=""USER_KEY"" , referencedColumnName=""USER_KEY"")
       private  List<UserFunctionalArea> functionalArea;
	   @Column(name=""STTS"")
	   private String status;
    }
 
    @Entity
    public class UserFunctionalArea{
        @Id
        @Column(name=""USER_KEY"")
        private int userKey;
        private String userAreaName; // -> what we need to be sorted by 
   }{code}

My DAO is as follows

*DAO code*

{code:sql}public Page<User> getFilteredUsers(int pageNumber, int pageSize, String sortBy, String sortOrder)
{
        Pageable pageable = PageRequest.of(pageNumber, pageSize);
        //building a criteria
        CriteriaBuilder criteriabuilder = entitymanager.getCriteriaBuilder();
        CriteriaQuery criteriaquery = criteriabuilder.createQuery();
        Root<User> user = criteriaquery.from(User.class);
        Join<User, UserFunctionalArea> functionalArea = user.join(""functionalArea"", JoinType.LEFT);
 	    List<Predicate> predicates = new ArrayList<>();
        predicates.add(criteriabuilder.or(criteriabuilder.equal(user.get(""status""), ""A"")))
	    List<Predicate> notNullPredicate = predicates.parallelStream().filter(Objects::nonNull)
				.collect(Collectors.toList());
	    criteriaquery.select(user).where(notNullPredicate.toArray(new Predicate[]{})).distinct(true);		
	    criteriaquery.orderBy(criteriabuilder.desc(criteriabuilder.upper(functionalArea.get(sortBy)))));
        //sortBy -userAreaName
        TypedQuery<User> createQuery = entitymanager.createQuery(criteriaquery);
        List<User> content = createQuery.setFirstResult((int) pageable.getOffset()).setMaxResults(pageable.getPageSize()).getResultList();
        Long totalRecords = 200L;
        //result set in pagable model
        Page<User> result1 = new PageImpl<User>(content, pageable, totalRecords);
        return result1;
}{code}

With the above code, from Hibernate 5.3.4 (tested with hibernate 5.3.4 and hibernate 5.4.28.Final )onwards the following query gets generated 

*select-5.3.4 onwards*

{code:java}select * from ( select <<user attributes >> from  user0_ left outer join user_funcl_area functional1_ on user0_.user_key=functional1_.user_key where 1=1 order by upper(functional1_.funcl_area_key) desc, upper(user0_.last_nm_prfrd) asc ) where rownum <= 10{code}

this gives the error 

*select-5.3.4 onwards  (*

{code:java}2021-09-09 10:50:19.944 [main] WARN 
				o.h.e.jdbc.spi.SqlExceptionHelper.logExceptions(137) - SQL Error: 1791, SQLState: 42000
2021-09-09 10:50:19.944 [main] ERROR
				o.h.e.jdbc.spi.SqlExceptionHelper.logExceptions(142) - ORA-01791: not a SELECTed expression{code}

Before 5.3.3 this used to work fine. and this is what we got 

*select-until 5.3.3* 

{code:java}select distinct <<user attributes >> from  user user0_ left outer join user_funcl_area functional1_ on user0_.user_key=functional1_.user_key where 1=1 order by upper(functional1_.funcl_area_key) desc, upper(user0_.last_nm_prfrd) asc fetch first 10 rows only{code}

One way in which I could overcome this issue is by introducing my own dialect that overrides the limithandler but that looks like a kludge and this should work out of the box. An extra select * from is causing the issue where the orderby is getting confused .",,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/sept./2021 13:42 PM;ug:3723f73c-daba-454f-99a9-6ba945fa5b9f;hibernateormtest.zip;https://hibernate.atlassian.net/secure/attachment/49915/hibernateormtest.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:3723f73c-daba-454f-99a9-6ba945fa5b9f(ug:3723f73c-daba-454f-99a9-6ba945fa5b9f),,,,,,,,,0|104vag:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.3,,,,,13/sept./2021 13:44 PM;557058:b1612c9e-81ef-49b3-ac5f-e040b1798a0b;I have attached the zip file that has the test that i am trying to run - i am getting an order by expression when i run this ( which i am not getting it when running inside a spring boot app)  - the intent is to sort on the one to many attribute with a limit since it will be paginated call. ,,,,,,,,,,,,,,,,A faire,,
Fix a few typos in the documentation,HSEARCH-4312,71395,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/sept./2021 08:26 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/sept./2021 08:30 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzi,,,,,,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Lucene 8.9,HSEARCH-4311,71394,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/sept./2021 05:29 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,21/sept./2021 08:00 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-lucene,,,,0,,,,,,https://lucene.apache.org/core/8_9_0/changes/Changes.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-21T08:00:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2658,0|1009cw:000000xdur3mhxzzzxezsq4db,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Disable tests for dynamic BigDecimal fields on Elasticsearch 5.6,HSEARCH-4310,71393,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/sept./2021 03:44 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/sept./2021 03:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"They seem to fail from time to time with what looks like an Elasticsearch bug:

{noformat}
java.util.concurrent.CompletionException: 
org.hibernate.search.util.common.SearchException: HSEARCH400008: Elasticsearch bulked request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request metadata: 
{
  ""index"": {
    ""_index"": ""indexname-write"",
    ""_type"": ""doc"",
    ""_id"": ""document_1""
  }
}
Response: 
{
  ""index"": {
    ""_index"": ""indexname-000001"",
    ""_type"": ""doc"",
    ""_id"": ""document_1"",
    ""status"": 400,
    ""error"": {
      ""type"": ""mapper_parsing_exception"",
      ""reason"": ""failed to parse"",
      ""caused_by"": {
        ""type"": ""illegal_argument_exception"",
        ""reason"": ""Field [foo_BigDecimal] misses required parameter [scaling_factor]""
      }
    }
  }
}

	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)
	at java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:645)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2073)
	at org.hibernate.search.util.common.impl.Futures.lambda$copyHandler$4(Futures.java:117)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:859)
	at java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:837)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2073)
	at org.hibernate.search.util.common.impl.Futures.lambda$copyHandler$4(Futures.java:117)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:859)
	at java.base/java.util.concurrent.CompletableFuture.uniWhenCompleteStage(CompletableFuture.java:883)
	at java.base/java.util.concurrent.CompletableFuture.whenComplete(CompletableFuture.java:2251)
	at org.hibernate.search.backend.elasticsearch.orchestration.impl.ElasticsearchDefaultWorkSequenceBuilder$AbstractWorkExecutionState.addPostExecutionHandlers(ElasticsearchDefaultWorkSequenceBuilder.java:189)
	at org.hibernate.search.backend.elasticsearch.orchestration.impl.ElasticsearchDefaultWorkSequenceBuilder$BulkedWorkExecutionState.onBulkWorkSuccess(ElasticsearchDefaultWorkSequenceBuilder.java:247)
	at java.base/java.util.concurrent.CompletableFuture$UniCompose.tryFire(CompletableFuture.java:1072)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2073)
	at org.hibernate.search.backend.elasticsearch.client.impl.ElasticsearchClientImpl$1.onSuccess(ElasticsearchClientImpl.java:117)
	at org.elasticsearch.client.RestClient$FailureTrackingResponseListener.onSuccess(RestClient.java:636)
	at org.elasticsearch.client.RestClient$1.completed(RestClient.java:376)
	at org.elasticsearch.client.RestClient$1.completed(RestClient.java:370)
	at org.apache.http.concurrent.BasicFuture.completed(BasicFuture.java:122)
	at org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl.responseCompleted(DefaultClientExchangeHandlerImpl.java:181)
	at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.processResponse(HttpAsyncRequestExecutor.java:448)
	at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.inputReady(HttpAsyncRequestExecutor.java:338)
	at org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput(DefaultNHttpClientConnection.java:265)
	at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:81)
	at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:39)
	at org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady(AbstractIODispatch.java:114)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:162)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:337)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:315)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:276)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:104)
	at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:591)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400008: Elasticsearch bulked request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request metadata: 
{
  ""index"": {
    ""_index"": ""indexname-write"",
    ""_type"": ""doc"",
    ""_id"": ""document_1""
  }
}
Response: 
{
  ""index"": {
    ""_index"": ""indexname-000001"",
    ""_type"": ""doc"",
    ""_id"": ""document_1"",
    ""status"": 400,
    ""error"": {
      ""type"": ""mapper_parsing_exception"",
      ""reason"": ""failed to parse"",
      ""caused_by"": {
        ""type"": ""illegal_argument_exception"",
        ""reason"": ""Field [foo_BigDecimal] misses required parameter [scaling_factor]""
      }
    }
  }
}

	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractSingleDocumentIndexingWork.handleBulkResult(AbstractSingleDocumentIndexingWork.java:79)
	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractSingleDocumentIndexingWork.handleBulkResult(AbstractSingleDocumentIndexingWork.java:18)
	at org.hibernate.search.backend.elasticsearch.work.impl.BulkWork$BulkResultImpl.extract(BulkWork.java:96)
	at org.hibernate.search.backend.elasticsearch.orchestration.impl.ElasticsearchDefaultWorkSequenceBuilder$BulkedWorkExecutionState.extract(ElasticsearchDefaultWorkSequenceBuilder.java:252)
	at org.hibernate.search.util.common.impl.Futures.lambda$create$0(Futures.java:44)
	at java.base/java.util.concurrent.CompletableFuture.uniComposeStage(CompletableFuture.java:1106)
	at java.base/java.util.concurrent.CompletableFuture.thenCompose(CompletableFuture.java:2235)
	at org.hibernate.search.util.common.impl.Futures.create(Futures.java:44)
	at org.hibernate.search.backend.elasticsearch.orchestration.impl.ElasticsearchDefaultWorkSequenceBuilder$BulkedWorkExecutionState.onBulkWorkSuccess(ElasticsearchDefaultWorkSequenceBuilder.java:246)
	... 22 more
Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400090: Elasticsearch response indicates a failure.
	at org.hibernate.search.backend.elasticsearch.work.impl.DefaultElasticsearchRequestSuccessAssessor.checkSuccess(DefaultElasticsearchRequestSuccessAssessor.java:103)
	at org.hibernate.search.backend.elasticsearch.work.impl.DefaultElasticsearchRequestSuccessAssessor.checkSuccess(DefaultElasticsearchRequestSuccessAssessor.java:94)
	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractSingleDocumentIndexingWork.handleBulkResult(AbstractSingleDocumentIndexingWork.java:76)
	... 30 more
{noformat}

See https://ci.hibernate.org/job/hibernate-search/job/main/106/testReport/junit/org.hibernate.search.integrationtest.backend.tck.work/IndexingFieldTypesIT(elasticsearch-local-_5_6_6_0_-it-elasticsearch)/Non_default_environments___elasticsearch_local__5_6_6_0____dynamic_withPath_BigDecimalFieldTypeDescriptor_DECIMAL_SCALE_2__/

I can't reproduce the problem locally, and this feature wasn't available in Search 5, and ES 5.6 has EOL'd a long time ago, so let's not bother and let's just disable the corresponding tests for ES 5.6.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-09T03:48:27.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uz,,,,,,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support null embedded objects,HHH-14818,71392,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Paul Harrison,557058:6d4b59cf-de34-4899-933b-0cbca595b867,Paul Harrison,557058:6d4b59cf-de34-4899-933b-0cbca595b867,09/sept./2021 02:50 AM,13/sept./2021 08:04 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"This is sort of the converse of [HHH-7610] in that I want to be able to model the case where the whole embedded field is nullable even when some of the fields of the embeddable are marked as not nullable - it has been suggested [on stackoverflow|https://stackoverflow.com/a/1324391] that using 

{code:java}@AttributeOverride(name=""value"", column = @Column(name=""error_value"",nullable = true){code}

with a new column annotation solves this problem, and would be a fine solution, but it does not work in my case (and there is at least one ""doesn't work for me"" comment on stack overflow too). ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,13/sept./2021 08:03 AM;ug:310a8cd4-bba6-42a8-9a03-4f83a764cfc0;hiberr.tgz;https://hibernate.atlassian.net/secure/attachment/49914/hiberr.tgz,,,,,,,{},,,,,,,,,,true,1.0,ug:310a8cd4-bba6-42a8-9a03-4f83a764cfc0(ug:310a8cd4-bba6-42a8-9a03-4f83a764cfc0),,,,,,,,,0|104va8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/sept./2021 02:51 AM;557058:6d4b59cf-de34-4899-933b-0cbca595b867;My case is from a complex auto-generated model - I will endeavour to provide a small example,"09/sept./2021 02:58 AM;557058:6d4b59cf-de34-4899-933b-0cbca595b867;BTW I get a this error

{{javax.persistence.PersistenceException: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.ivoa.dm.sample.catalog.LuminosityMeasurement.error}}
{{at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154)}}
{{at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)}}
{{at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:188)}}
{{at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:779)}}
{{at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:741)}}
{{at org.hibernate.engine.spi.CascadingActions$7.cascade(CascadingActions.java:298)}}
{{at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:510)}}
{{at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:434)}}
{{at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)}}
{{at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:543)}}
{{at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:474)}}
{{at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:437)}}
{{at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)}}
{{at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:459)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:293)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:135)}}
{{at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)}}
{{at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)}}
{{at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)}}
{{at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:773)}}

{{Caused by: org.hibernate.PropertyValueException: not-null property references a null or transient value : org.ivoa.dm.sample.catalog.LuminosityMeasurement.error}}
{{at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:111)}}
{{at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:55)}}
{{at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:116)}}
{{at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:125)}}
{{at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:289)}}
{{at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:263)}}
{{at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:250)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:338)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)}}
{{at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:135)}}
{{at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:185)}}
{{at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:128)}}
{{at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)}}
{{at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:773)}}
{{... 106 more}}
",13/sept./2021 08:04 AM;557058:6d4b59cf-de34-4899-933b-0cbca595b867;I have attached a compressed tar file with some example code of what is not working as expected,,,,,,,,,,,,,,A faire,,
Document deprecated/changed API/SPI/configuration in 6.1.0.Alpha1,HSEARCH-4309,71391,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/sept./2021 02:22 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/sept./2021 03:50 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-09T03:49:53.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2651,0|1009cw:000000xdur3mhxzzzxezsq7uy,,,,,,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Make tests more resilient to duplicate indexing works,HSEARCH-4308,71390,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/sept./2021 00:46 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,13/sept./2021 08:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,tests,,,,0,,,,,,"When using database-polling coordination, entity change events are pushed to a queue and processed asynchronously, in batches.

Sometimes, events from a single transaction will be split into two batches. That can happen even if the number of events is smaller than the max batch size, because (at least with H2) it seems rows inserted in a single transaction do not appear atomically (newly opened transaction may see the first 3 events first, and the others only a bit later).

This can result in some entities being reindexed twice. For example if there are two events: ""entity A updated, requiring a reindexing of B"", and ""entity B updated, requiring a reindexing of B"". If those events are processed in the same batch, B will be reindexed once; if they are processed in two different batches, B will be reindexed twice.

That's not important as far as Hibernate Search is concerned, and it will not matter to our users except from a performance standpoint. But when it comes to tests, it means we will get errors due to the framework seeing multiple works where only one was expected.

Example: [https://github.com/hibernate/hibernate-search/actions/runs/1216207374|https://github.com/hibernate/hibernate-search/actions/runs/1216207374] . I wasn’t able to reproduce the problem locally except by forcing the batch size to 3, but I’m pretty sure the reason is what I explained above. It happens rather consistently on GitHub Actions, for some reason.

We should probably relax constraints regarding duplicate indexing works when testing with the database-polling coordination strategy. That's probably something to include in {{org.hibernate.search.util.impl.integrationtest.mapper.orm.CoordinationStrategyExpectations}}, because we definitely don't want to allow duplicate works everywhere (especially not in mass indexing tests).

Note: LocalHeapQueueCoordinationStrategy is affected too.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-13T08:20:31.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2653,0|1009cw:000000xdur3mhxzzzxezsq7uzm,,,,,,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,"10/sept./2021 02:51 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Finally managed to reproduce on Jenkins, so we have logs: [https://ci.hibernate.org/job/hibernate-search/job/main/114/testReport/junit/org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association/AutomaticIndexingAssociationDeletionBytecodeEnhancementIT(database-mssql-default)/Non_default_environments___database_mssql___manyToMany_deleteNonOwner/|https://ci.hibernate.org/job/hibernate-search/job/main/114/testReport/junit/org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association/AutomaticIndexingAssociationDeletionBytecodeEnhancementIT(database-mssql-default)/Non_default_environments___database_mssql___manyToMany_deleteNonOwner/]",,,,,,,,,,,,,,,,Terminé,,
Hibernate Search version detection doesn't work on native images,HSEARCH-4307,71389,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/sept./2021 23:56 PM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,21/sept./2021 08:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Beta1,,,,,,,,engine,,,,0,,,,,,See https://quarkusio.zulipchat.com/#narrow/stream/187038-dev/topic/Stack.20Overflow/near/252494122 ; we cannot rely on {{Version.class.getPackage().getImplementationVersion()}} to retrieve the Hibernate Search version on native images.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-21T08:02:32.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2656,0|1009cw:000000xdur3mhxzzzxezsq4d9,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
hibernate-core-jakarta source jar does not contain source,HHH-14817,71388,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Paul Harrison,557058:6d4b59cf-de34-4899-933b-0cbca595b867,Paul Harrison,557058:6d4b59cf-de34-4899-933b-0cbca595b867,08/sept./2021 09:25 AM,08/mars/2022 13:01 PM,14/mars/2022 12:54 PM,08/mars/2022 13:01 PM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.6,,,,,,,,,hibernate-core,,,,1,,,,,,it just contains the META-INF directory,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-08T13:00:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:310a8cd4-bba6-42a8-9a03-4f83a764cfc0(ug:310a8cd4-bba6-42a8-9a03-4f83a764cfc0),,,,,,,,0|104va0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Can not set lock mode with QueryHint due to type case problem,HHH-14816,71387,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Dariush Moshiri,557058:3187e28d-4410-4ea6-a9aa-c29a0aa3df28,umut yusuf tontuş,557058:e0fb15ad-e154-4e74-9327-604d0362710d,umut yusuf tontuş,557058:e0fb15ad-e154-4e74-9327-604d0362710d,08/sept./2021 09:05 AM,27/oct./2021 04:03 AM,14/mars/2022 12:54 PM,18/oct./2021 04:20 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.1,,,,,,,,,hibernate-core,,,,2,core,,,,,"Trying to execute a native SELECT query over Spring JPA and with a *LockMode*(*LockModeType*). Using `*JpaRepository*` for the operation, can not provide a *LockMode* due to `*QueryHint*` only accepts a value as `*String*` and the part to apply the lock mode requires `*LockMode*` or `*LockModeType*` enums.



{code:java}@NotNull
@QueryHints({@QueryHint(name = org.hibernate.jpa.QueryHints.HINT_NATIVE_LOCKMODE, value = ""none"")})
@Query(
      value = ""SELECT id FROM listing_items "" +
                ""WHERE user_id = :userId AND "" +
                ""session_id = :sessionId AND "" +
                ""date_updated < :date "" +
                ""ORDER BY date_updated DESC "" +
                ""LIMIT :pageSize"",
      nativeQuery = true
)
List<Long> seekListingsForUserAndSession(@Param(""userId"") long userId,
                                         @Param(""sessionId"") long sessionId,
                                         @Param(""date"") @NotNull Integer date,
                                         @Param(""pageSize"") int pageSize);{code}

And the issue on the hibernate part resides here ->

{code:java}NativeQueryImpl#applyNativeQueryLockMode{code}

NOTE: 
I'm using SpringBoot 2.4.5. It normally depends on version 5.4.30.Final but I override it to work on the final version 5.5.7.Final. But version has the same problem
Also checked the issue very similar to this one -> [https://hibernate.atlassian.net/browse/HHH-13586?jql=text%20~%20%22queryhint%22|https://hibernate.atlassian.net/browse/HHH-13586?jql=text%20~%20%22queryhint%22]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-18T04:19:45.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,moshiri.dariush(moshiri.dariush),ug:10b5bd2b-634b-43bb-a419-aa14bac2eab9(ug:10b5bd2b-634b-43bb-a419-aa14bac2eab9),,,,,,,,0|104v9s:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid ORM warnings on locking outbox events,HSEARCH-4306,71386,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/sept./2021 07:59 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,27/oct./2021 09:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"When testing against oracle, each single query that locks outbox events (see [https://hibernate.atlassian.net/browse/HSEARCH-4289|https://hibernate.atlassian.net/browse/HSEARCH-4289|smart-link],  [https://hibernate.atlassian.net/browse/HSEARCH-4297|https://hibernate.atlassian.net/browse/HSEARCH-4297|smart-link] ) triggers this warning:

{noformat}16:56:20,035 (Hibernate Search - Outbox event processor - 0)  WARN Loader:282 - HHH000444: Encountered request for locking however dialect reports that database prefers locking be done in a separate select (follow-on locking); results will be locked after initial query executes{noformat}

Apparently this warning was introduced in [https://hibernate.atlassian.net/browse/HHH-1168|https://hibernate.atlassian.net/browse/HHH-1168|smart-link] (so a long time ago).

Let’s check whether the warning is legitimate in our specific case. If so, we may we need to change our code (and maybe [https://hibernate.atlassian.net/browse/HSEARCH-4297|https://hibernate.atlassian.net/browse/HSEARCH-4297|smart-link] will get rid of the problem, since we won’t be using locking and paging together anymore). If not, we may need to tweak ORM to not display the warning in this specific case.",,,,,,,,,,,,,,,,,,,HSEARCH-4289,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-20T08:16:42.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2687,0|1009cw:000000xdur3mhxzzzxezsq7uwd,,,,,,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"RenderingContext::aliasCount is not preserved between createQuery() calls, leading to incorrect query if CriteriaQuery is changed",HHH-14815,71385,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Sergey Vladimirov,557058:c72b0d84-7770-4321-9bde-dc1e985002f7,Sergey Vladimirov,557058:c72b0d84-7770-4321-9bde-dc1e985002f7,08/sept./2021 07:34 AM,08/sept./2021 08:01 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,query-criteria,,,,0,,,,,,"As far as I know it's not prohibited to change CriteriaQuery between createQuery() calls. Internally Hibernate assigns aliases to used roots on first createQuery() call. Those aliases can conflict with aliases from new subquery conditions added after before second createQuery() call, leading to incorrect query generated.



{code:java}		final CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		final CriteriaQuery<FirstEntity> query = cb.createQuery(FirstEntity.class);
		final Root<FirstEntity> root = query.from(FirstEntity.class);
		query.select(root);

		// first condition (will be replaced after first execution)
		{
			final Subquery<SecondEntity> sq1 = query.subquery(SecondEntity.class);
			final Root<SecondEntity> sq1From = sq1.from(SecondEntity.class);
			sq1.select(sq1From);
			sq1.where(cb.equal(sq1From.get(""secondValue""), root.get(""firstValue"")));
			query.where(cb.exists(sq1));
		}

		// Rendered criteria query -> select generatedAlias0 from FirstEntity as
		// generatedAlias0 where exists (select generatedAlias1 from SecondEntity as
		// generatedAlias1 where generatedAlias1.secondValue=generatedAlias0.firstValue)
		entityManager.createQuery(query).getResultList();

		// replace condition with new instance with subquery
		{
			final Subquery<SecondEntity> sq2 = query.subquery(SecondEntity.class);
			final Root<SecondEntity> sq2From = sq2.from(SecondEntity.class);
			sq2.select(sq2From);
			sq2.where(cb.equal(root.get(""firstId""), sq2From.get(""secondId"")));
			query.where(cb.exists(sq2));
		}

		entityManager.createQuery(query).getResultList();
		// Rendered criteria query -> select generatedAlias0 from FirstEntity as
		// generatedAlias0 where exists (select generatedAlias0 from SecondEntity as
		//                                      ^^^^^^^^^^^^^^^
		// generatedAlias0 where generatedAlias0.firstId=generatedAlias0.secondId) }
		//                                               ^^^^^^^^^^^^^^^
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,08/sept./2021 07:35 AM;bsp;bughhh14815.zip;https://hibernate.atlassian.net/secure/attachment/49905/bughhh14815.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,bsp(bsp),,,,,,,,,0|104v9c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Inconsistent rendering of table alias in delete queries,HHH-14814,71384,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/sept./2021 00:32 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,09/sept./2021 00:33 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"If I try to execute this query:

{code:java}delete from myentity e where type(e) in :types{code}

It gets rendered as this SQL:

{code:java}delete from containing where automatici0_.DTYPE in (?){code}

The alias is applied to the where clause, but not to the from clause.

Obviously, this result in an exception:

{noformat}Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Column ""AUTOMATICI0_.DTYPE"" not found; SQL statement:
delete from containing where automatici0_.DTYPE in (?) [42122-200]{noformat}

Tested in ORM 5.5 only, but I'd wager it happens in 5.6 and 5.4 as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-09T00:32:44.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4206,0|104v94:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Update DB2 dialect with bind parameters limit,HHH-14813,71383,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,07/sept./2021 07:23 AM,20/sept./2021 15:40 PM,14/mars/2022 12:54 PM,07/sept./2021 07:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,,,,,0,,,,,,"As documented here:
 - https://www.ibm.com/docs/en/db2/11.5?topic=sql-xml-limits

the current DB2 Dialect doesn't override _getInExpressionCountLimit()_",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-06T06:59:47.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4194,0|104v8w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade integration tests to use Oracle JDBC driver v 21.3.0.0,HHH-14812,71382,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,06/sept./2021 02:28 AM,20/sept./2021 15:40 PM,14/mars/2022 12:54 PM,17/sept./2021 02:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-07T03:27:28.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104v8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
org.hibernate.AssertionFailure thrown instead of LazyInitializationException when trying to access a lazy property on a deleted entity,HHH-14811,71381,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/sept./2021 00:37 AM,20/sept./2021 15:40 PM,14/mars/2022 12:54 PM,07/sept./2021 03:41 AM,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,"For various reasons related mainly to performance (see https://discourse.hibernate.org/t/hs6-not-indexing-add-or-delete-only-update-with-onetomany-indexedembedded/5638), sometimes Hibernate Search needs to access associations on deleted entities. When associations are already loaded, it can go on with what it needs to do; when they are not, it usually catches the resulting {{LazyInitializationException}} and gives up (that's a best-effort feature).

However, when using bytecode enhancement, it seems Hibernate ORM does not throw a {{LazyInitializationException}}, but an {{org.hibernate.AssertionFailure}}.

Ideally, Hibernate ORM should throw a {{LazyInitializationException}} in this case, even when using bytecode enhancement? It would allow Hibernate Search to avoid catching all {{org.hibernate.AssertionFailure}}, which seems like an even dodgier practice than catching {{LazyInitializationException}}.

I'm not sure if this is a regression, but I suspect it is; otherwise processing of deleted entities by Hibernate Search with bytecode-enhanced entities would have been broken for years, even in Hibernate Search 5.

{noformat}
[...]
Caused by: org.hibernate.AssertionFailure: Could not locate EntityEntry for the collection owner in the PersistenceContext
	at org.hibernate.persister.entity.AbstractEntityPersister.initializeLazyProperty(AbstractEntityPersister.java:1153)
	at org.hibernate.bytecode.enhance.spi.interceptor.LazyAttributeLoadingInterceptor.lambda$loadAttribute$0(LazyAttributeLoadingInterceptor.java:105)
	at org.hibernate.bytecode.enhance.spi.interceptor.EnhancementHelper.performWork(EnhancementHelper.java:206)
	at org.hibernate.bytecode.enhance.spi.interceptor.LazyAttributeLoadingInterceptor.loadAttribute(LazyAttributeLoadingInterceptor.java:77)
	at org.hibernate.bytecode.enhance.spi.interceptor.LazyAttributeLoadingInterceptor.fetchAttribute(LazyAttributeLoadingInterceptor.java:73)
	at org.hibernate.bytecode.enhance.spi.interceptor.LazyAttributeLoadingInterceptor.handleRead(LazyAttributeLoadingInterceptor.java:54)
	at org.hibernate.bytecode.enhance.spi.interceptor.AbstractInterceptor.readObject(AbstractInterceptor.java:153)
	at org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association.AutomaticIndexingAssociationDeletionIT$AssociationNonOwner.$$_hibernate_read_manyToMany(AutomaticIndexingAssociationDeletionIT.java)
	at org.hibernate.search.util.common.reflect.impl.MethodHandleValueReadHandle.get(MethodHandleValueReadHandle.java:39)
	... 71 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-07T03:41:04.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4191,0|104v8g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"@NotBlank and @NotEmpty were used, ""NOT NULL"" option wasn't add in generated DDL.",HHH-14810,71380,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,geonhee lee,557058:0f166245-8a6b-4a59-a7e9-a83e635d8cb5,geonhee lee,557058:0f166245-8a6b-4a59-a7e9-a83e635d8cb5,geonhee lee,557058:0f166245-8a6b-4a59-a7e9-a83e635d8cb5,04/sept./2021 06:45 AM,04/sept./2021 07:42 AM,14/mars/2022 12:54 PM,,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,query,validation,,,"Hello! :)

I have suggestion about beanvalidation logic in hibernate-core. 
(I don't think my opinion is necessarily right. Please comment opinions about that)

In the functions provided by Hibernate, I know that if @NotNull is annotated, the not null property is attached when ddl is automatically generated.

(spring.jpa.properties.hibernate.validator.apply_to_ddl is in charge of this, and I found that TypeSafeActivator in [org.hibernate.cfg.beanvalidation|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/beanvalidation/TypeSafeActivator.java] does this.)

However, as a result of my checking, it was found that if @NotBlank and @NotEmpty were used, ""NOT NULL"" option wasn't add.

The documentation also say that there is no Hibernate metadata impact for this.

Link: https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-defineconstraints-spec

I think it's weird.

The document definition of @NotBlank and @NotEmpty includes that value is not null.

It's unnatural that ""NOT NULL"" doesn't apply to ddl.

Hibernate's NotEmpty/NotBlank Annotations includes @NotNull.

https://docs.jboss.org/hibernate/stable/validator/api/org/hibernate/validator/constraints/NotBlank.html

This code was deprecated as the method was added to Bean Validation 2.0.

Before Deprecated, @NotBlank and @NotEmpty contained @NotNull, so obviously ""NOT NULL"" was entered in the column when generating DDL.

@NotBlank and @NotEmpty in Jakatra Bean Validation (Bean Validation 2.0, JSR 380), which replaced the previous version, does not include the @NotNull annotation.

https://javaee.github.io/javaee-spec/javadocs/javax/validation/constraints/NotBlank.html

So, that's why I think that using @NotBlank and @NotEmpty will not apply to DDL.

I suggest a solution to this.

add new method, ""applyNotBlank"" and ""applyNotEmpty"" in TypeSafeActivator. 
or, contains NotBlank/NotEmpty annotation in applyNotNull method(in TypeSafeActivator) logics.

unfortunately, i'm not good at english, if anything in the text that you don't understand, please comment questions.

thank you. 
good luck on your code :)",Hibernate 5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-06T09:48:32.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:2a9d22fd-43ac-4734-8a99-a893d8456716(ug:2a9d22fd-43ac-4734-8a99-a893d8456716),,,,,,,,,0|104v88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade SpatialPredicates for H6,HHH-14809,71379,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 06:13 AM,04/sept./2021 06:14 AM,14/mars/2022 12:54 PM,04/sept./2021 06:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14807,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v80:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Refactor SpatialPredicates for H6,HHH-14808,71378,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 06:10 AM,24/janv./2022 12:06 PM,14/mars/2022 12:54 PM,24/janv./2022 12:06 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14807,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-22T12:52:24.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v7s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for Oracle,HHH-14807,71377,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:04 AM,22/janv./2022 09:11 AM,14/mars/2022 12:54 PM,21/janv./2022 06:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-21T13:23:15.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),steve(steve),,,,,,,,0|104v7k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-18 12:34:16.382,,,,"18/déc./2021 04:34 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;[~accountid:557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740] Are these done?  Just checking, as you’ve done a lot of work lately on Spatial in 6 wrt Dialect changes.",,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for DB2,HHH-14806,71376,,Amélioration,En cours,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:03 AM,08/mars/2022 19:18 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14801,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,maeseka(maeseka),steve(steve),,,,,,,,0|104v7c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-18 12:34:00.612,,,,"18/déc./2021 04:34 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;[~accountid:557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740] Are these done?  Just checking, as you’ve done a lot of work lately on Spatial in 6 wrt Dialect changes.",,,,,,,,,,,,,,,,En cours,,
Upgrade spatial support for SqlServer,HHH-14805,71375,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:03 AM,24/janv./2022 11:59 AM,14/mars/2022 12:54 PM,22/janv./2022 09:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14801,,,,,,,,,HHH-14807,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-24T11:44:53.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),steve(steve),,,,,,,,0|104v74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-18 12:33:42.206,,,,"18/déc./2021 04:33 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;[~accountid:557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740] Are these done?  Just checking, as you’ve done a lot of work lately on Spatial in 6 wrt Dialect changes.",,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for MySQL,HHH-14804,71374,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:03 AM,24/janv./2022 12:06 PM,14/mars/2022 12:54 PM,24/janv./2022 12:06 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14801,,,,,,,,,HHH-14807,HHH-14802,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-11-05T08:19:56.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),steve(steve),,,,,,,,0|104v6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-18 12:33:30.233,,,,"18/déc./2021 04:33 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;[~accountid:557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740] Are these done?  Just checking, as you’ve done a lot of work lately on Spatial in 6 wrt Dialect changes.",18/déc./2021 05:40 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;No  this issue (and all the other open issues w.r.t. dialect upgrades for 6.0)  still need work.  ,24/janv./2022 12:06 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;Was fixed in MariaDB upgrade,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for MariaDB,HHH-14803,71373,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:03 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,11/nov./2021 03:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14801,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-05T08:53:06.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v6o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for CockroachDB,HHH-14802,71372,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:02 AM,18/déc./2021 04:37 AM,14/mars/2022 12:54 PM,30/oct./2021 05:07 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,HHH-14801,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-26T12:37:06.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade spatial support for Postgis,HHH-14801,71371,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:01 AM,18/déc./2021 04:37 AM,14/mars/2022 12:54 PM,30/oct./2021 05:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14807,HHH-14802,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-08-26T09:30:25.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v68:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Remove need for SpatialDialects,HHH-14800,71370,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,04/sept./2021 05:00 AM,30/oct./2021 05:06 AM,14/mars/2022 12:54 PM,30/oct./2021 05:06 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-21T02:55:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104v60:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@OneToOne Right and Full Outer Join,HHH-14799,71369,,Story,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Sudarshan,59f9294e8c7b8e3f6a1a28dc,Sudarshan,59f9294e8c7b8e3f6a1a28dc,03/sept./2021 12:05 PM,04/sept./2021 13:02 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,I had tried to implement Right and Full Outer join using @OneToOne. But i am able to see only Left Outer and Inner Join. Can you please help me on Right and Full Outer join. And if there are any references could share.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:1d93d87b-51f3-47fc-85c8-9eca89e56a21(ug:1d93d87b-51f3-47fc-85c8-9eca89e56a21),,,,,,,,,0|104v5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
No PostUpdateEvent fired when setting a property with @OneToOne(mappedBy = ...) to null,HHH-14798,71367,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/sept./2021 03:44 AM,03/sept./2021 06:37 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.7,5.6.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4-backlog,5.5-backlog,5.6-backlog,,,,,,,hibernate-core,,,,1,,,,,,"Causes [https://hibernate.atlassian.net/browse/HSEARCH-4305|https://hibernate.atlassian.net/browse/HSEARCH-4305|smart-link] .

Note that we do get an event when setting such a property to a non-null value; the problem only occurs when setting the property to a null value.",,,,,,,,,,,,,HSEARCH-4305,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-03T06:33:53.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),yrodiere(fenrhil),,,,,,,,0|104v5c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"03/sept./2021 03:45 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I will submit a reproducer, and hopefully a fix, soon.","03/sept./2021 06:36 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;While I think I identified the root cause as a problem in dirty-checking, I’m not sure how to solve it without breaking other things (“property-ref” support in particular).

I opened [https://github.com/hibernate/hibernate-orm/pull/4188/files|https://github.com/hibernate/hibernate-orm/pull/4188/files|smart-link] with a test case  , hopefully someone more knowledgeable will have an easier time.",,,,,,,,,,,,,,,A faire,,
@Column with the name attribute is not used by Hibernate Envers to create the column,HHH-14797,71366,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,raphael,557058:fad03376-4d16-4818-8eaa-c3ae4bc06a0e,raphael,557058:fad03376-4d16-4818-8eaa-c3ae4bc06a0e,raphael,557058:fad03376-4d16-4818-8eaa-c3ae4bc06a0e,03/sept./2021 03:05 AM,20/nov./2021 23:34 PM,14/mars/2022 12:54 PM,20/nov./2021 23:34 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"When using @Column with the name attribute Hibernate Envers does not use this name to construct the name of the audit column when the column has the modify flag.


Configuration
org.hibernate.envers.global_with_modified_flag=true


@Audited
public class Entity {

  @Column(name = ""custom_column_name"")
  private String columnName;
    
}

When create the audit column modified the Hibernate create 'column_name_mod' instead of 'custom_column_name_mod'",,,,,,,,,,,,,,,,HHH-8795,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-03T03:09:26.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:4d0e7312-5d8a-4122-a7cd-fda6a666b74e(ug:4d0e7312-5d8a-4122-a7cd-fda6a666b74e),,,,,,,,,0|104v54:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
No automatic reindexing when setting a property annotated with @OneToOne(mappedBy = ...) @IndexedEmbedded to null,HSEARCH-4305,71365,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/sept./2021 01:43 AM,02/nov./2021 01:28 AM,14/mars/2022 12:54 PM,,6.0.0.Final,6.0.1.Final,6.0.2.Final,6.0.3.Final,6.0.4.Final,6.0.5.Final,6.0.6.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,mapper-orm,,,,1,,,,,,"From what I can see, we're not getting any ORM ""post-update"" event in this case. It's weird, because we do get an event when setting the property to a non-null value. I suspect it's a bug in Hibernate ORM.",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4303,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzui,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,03/sept./2021 01:53 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I just confirmed this also affects Hibernate Search 6.0 (Hibernate ORM 5.4.32.Final),"06/sept./2021 05:18 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It’s caused by [https://hibernate.atlassian.net/browse/HHH-14798|https://hibernate.atlassian.net/browse/HHH-14798|smart-link].

Note: I added tests while working on [https://hibernate.atlassian.net/browse/HSEARCH-4303|https://hibernate.atlassian.net/browse/HSEARCH-4303|smart-link], annotated them with {{@TestForIssue(jiraKey = { …, “HSEARCH-4305“ })}}, and disabled them because they failed. When we upgrade to a version of ORM that fixed [https://hibernate.atlassian.net/browse/HHH-14798|https://hibernate.atlassian.net/browse/HHH-14798|smart-link], we should re-enable these tests.",,,,,,,,,,,,,,,A faire,,
Cannot replace an existing JPQL NamedQuery with a native NamedQuery,HHH-14796,71363,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,02/sept./2021 12:26 PM,23/sept./2021 09:08 AM,14/mars/2022 12:54 PM,07/sept./2021 04:30 AM,5.5.7,5.6.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.23,5.4.33,5.5.8,5.6.0.Beta2,,,,,,hibernate-core,,,,0,,,,,,"From [~accountid:613090c744c8ed0068934c32]:

I discovered a weird behavior working in KEYCLOAK-18842. The main problem in that JIRA is that there is a bug in mariadb/mysql that makes a delete with a subquery terribly slow ([MDEV-21012|https://jira.mariadb.org/browse/MDEV-21012]). I was trying to just use the {{addNamedQuery}} method to replace that named query with a native implementation for those engines at runtime/startup. But it doesn't work because it seems that the {{NamedQueryRepository}} stores them in two different maps and the jpql one is always tried first when the {{createNamedQuery}} method is called. Reading the javadoc for the [addNamedQuery|https://docs.oracle.com/javaee/7/api/javax/persistence/EntityManagerFactory.html#addNamedQuery-java.lang.String-javax.persistence.Query-] I think this is a bug, replacing a jpql query with a native one is impossible right now.

I implemented a tentative fix for this with this [commit|https://github.com/rmartinc/hibernate-orm/commit/d1caf20911dcddd83b28854df5484eecd5ae10f5]. There is a test which exemplifies the problem better than this description.

WDYT? Is the PR worthy? You can use or extend it if necessary...

Thanks a lot!",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-07T04:30:16.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),ug:095ccae5-b037-46ec-829e-dac78eec5fac(ug:095ccae5-b037-46ec-829e-dac78eec5fac),sanne(sanne),sanne.grinovero(sanne.grinovero),,,,,,0|104v4o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-09-03 07:12:39.555,,,,"03/sept./2021 00:12 AM;613090c744c8ed0068934c32;I have submited a PR for this:

[https://github.com/hibernate/hibernate-orm/pull/4187|https://github.com/hibernate/hibernate-orm/pull/4187|smart-link] 

Any improvement will be welcomed\! 🙂 ","08/sept./2021 08:57 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:690dd548-c602-4a58-9c7e-0923346f4e97] , thanks for your help on this\!","08/sept./2021 09:00 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;NP, [~accountid:613090c744c8ed0068934c32] did all the work 🙂 ",,,,,,,,,,,,,,Terminé,,
Upgrade CDI support to Jakarta CDI3,HSEARCH-4304,71360,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,02/sept./2021 01:47 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,05/oct./2021 12:41 PM,6.0.6.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"Jakarta CDI 3 defines an automatic module name for the cdi api. Thus, with this upgrade, we don't need to keep Mapper ORM as an automatic module to be a bridge to an unnamed module.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-09-29T03:44:11.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2644,0|1009cw:000000xdur3mhxzzzxezsq4df,,,,,,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
No automatic reindexing on insert/delete of contained entity without corresponding update in the containing entity,HSEARCH-4303,71359,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/sept./2021 01:18 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/sept./2021 00:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,mapper-orm,,,,0,,,,,,"See [https://discourse.hibernate.org/t/hs6-not-indexing-add-or-delete-only-update-with-onetomany-indexedembedded/5638/|https://discourse.hibernate.org/t/hs6-not-indexing-add-or-delete-only-update-with-onetomany-indexedembedded/5638/]

Classifying as a bug since it's a regression from Hibernate Search 5.

This is mostly about ORM; I doubt it makes sense to solve this in other mappers.

With this model:

{code:java}@Entity
@Indexed
class A {
  @Id
  Long id;
  @IndexedEmbedded
  @OneToMany(mappedBy = ""a"")
  List<B> b;
}

@Entity
class B {
  @Id
  Long id;
  @FullTextField
  String text;
  @ManyToOne
  A a;
}{code}

If I do this:

{code:java}A a = session.load(A.class, 1L);
B b = new B();
b.id = 2L;
b.a = a;
session.persist(b);{code}

{{a}} will not be reindexed as expected.

Similarly, if I do this:

{code:java}B b = session.load(B.class, 2L);
session.delete(b);{code}

{{a}} will not be reindexed as expected.

At least for the delete, it used to work in Hibernate Search 5. We should see if we can make it work in Hibernate Search 6, too.

There may be cases where this won't work anyway, because {{A.b}} was not updated correctly by the user, and thus reindexing {{a}} will result in the exact same document as before. The only solution is asynchronous indexing, which is already being worked on, so we will simply ignore this problem for now.

There are other cases where we simply won't be able to reindex, for example when {{b}} gets deleted and {{B.a}} is lazy, and thus cannot be loaded after the deletion. For now we will simply ignore the loading failures. We will try to do better in [https://hibernate.atlassian.net/browse/HSEARCH-3567|https://hibernate.atlassian.net/browse/HSEARCH-3567|smart-link] .

Let's focus on making it work at least as well as in Hibernate Search 5.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-09-09T00:48:24.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2647,0|1009cw:000000xdur3mhxzzzxezsq7uv,,,,,,HSEARCH - 2021-16,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@OneToOne declared as an interface in an entity and using @MapsId fails,HHH-14795,71358,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Xavier Dury,557058:20f9812a-a2aa-4464-9ab0-7d307061dfd3,Xavier Dury,557058:20f9812a-a2aa-4464-9ab0-7d307061dfd3,01/sept./2021 07:16 AM,01/sept./2021 07:17 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"An entity class {color:#14892c}CAN {color}declare a {{@OneToOne}} association as an interface as long as the {{OneToOne.targetEntity()}} attributes refers to the concrete type of the association.

An entity class {color:#14892c}CAN {color}declare a {{@OneToOne}} association as a concrete type and share its PK with {{@MapsId}}.

An entity class {color:#d04437}CAN NOT{color} declare a {{@OneToOne}} association as an interface (with the {{OneToOne.targetEntity()}} referring to the concrete type) and share its PK with {{@MapsId}}. This will throw an error of the type:
{code}
org.hibernate.AnnotationException: Unknown entity name: eg.company.MyInterface
{code}

So it seems that the {{@MapsId}} does not take the {{OneToOne.targetEntity()}} attribute into account.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,01/sept./2021 07:17 AM;kalgon;HHH14795TestSuite.java;https://hibernate.atlassian.net/secure/attachment/49904/HHH14795TestSuite.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,kalgon(kalgon),,,,,,,,,0|104v3s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Use MethodHandles.Lookup instances from Hibernate ORM,HSEARCH-4302,71357,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),,,,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,01/sept./2021 05:36 AM,14/déc./2021 00:13 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,,,,,0,,,,,,"At the moment Hibernate Search uses its own reflection to get method and property handles, even if the mapper in use is the mapper ORM.
While we could try to ask for {{MethodHandles.Lookup}} instances to Hibernate ORM if mapper ORM is used.
This will allow us to not open a client module to the module {{org.hibernate.search.mapper.orm}} in case the client is a non automatic Java module.",,,,,,,,,,,,,,,,,,,,,,HSEARCH-3277,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,,0|104vxl:i,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-28 08:03:05.45,,,,"28/oct./2021 01:03 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Requires [https://hibernate.atlassian.net/browse/HSEARCH-4359|https://hibernate.atlassian.net/browse/HSEARCH-4359|smart-link], as we’ll probably need to introduce an SPI in ORM 6 in order to allow that.","28/oct./2021 01:04 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Note that maybe it’s not such a good idea, as any SPI allowing this would effectively allow an {{Integrator}} implementation to gain reflective access to all of the user’s entity classes.

Maybe we should just stick to requiring the user to open their entity classes to Hibernate Search?","28/oct./2021 01:07 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Or maybe we should make that SPI visible to Hibernate projects only.

I.e. {{exports org.hibernate.core.methodhandlesharing to org.hibernate.search, org.hibernate.valitator, org.hibernate.reactive}}",,,,,,,,,,,,,,A faire,,
Document the change of default Similarity in the migration guide,HSEARCH-4301,71356,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/sept./2021 04:21 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,02/sept./2021 08:33 AM,6.0.6.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,,,,,,,,,documentation,,,,0,,,,,,"We switched from ClassicSimilarity to BM25Similarity. I think Lucene did the same, but I might be wrong. In any case, we need to mention this in the migration guide.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-02T02:35:35.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2645,0|1009cw:000000xdur3mhxzzzxezsq7ur,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix build timeout after 1 hour when testing against DB2,HSEARCH-4300,71355,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,31/août/2021 23:33 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/sept./2021 00:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"E.g. https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/main/104/pipeline

Some tests are super slow:

{noformat}
[INFO] Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 38.005 s - in org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association.AutomaticIndexingSingleAssociationIT
...
[INFO] Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 223.639 s - in org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association.multi.AutomaticIndexingMapKeysAssociationIT
{noformat}

Some wild guesses:

# Maybe schema creation is slow with DB2 (and probably other RDBMS too), leading to very long runtime for tests with many test methods that recreate the schema for every test method.
# Maybe async indexing is slow with DB2 for some reason.

We should either try change tests to make them run faster against DB2 (e.g. create the schema once per test class), or we should increase the timeout with DB2.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-09T00:48:24.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2649,0|1009cw:000000xdur3mhxzzzxezsq7ui,,,,,,HSEARCH - 2021-16,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
More changes to support SchemaMigrator/SchemaValidator using Hibernate Reactive,HHH-14794,71354,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,30/août/2021 13:30 PM,20/sept./2021 21:57 PM,14/mars/2022 12:54 PM,17/sept./2021 02:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14744,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-17T02:40:30.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104v3c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add easier conversion support for version mappings via annotations,HHH-14793,71343,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,25/août/2021 09:55 AM,25/août/2021 11:31 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.Next,,,,,,,,,,,,,0,,,,,,"Specifically can see:

{code:java}@interface VersionConvert {
    Class<? extends VersionConverter<?>> converter();
}

interface VersionConverter extends AttributeConverter {
	Object seed(SharedSessionContractImplementor session);
	Object next(Object current, SharedSessionContractImplementor session);
}{code}

{code:java}@interface VersionType {
    Class<? extends UserVersionType> userType() default void.class;
}{code}

*though I believe the second can already be done in a less type-safe using {{org.hibernate.annotations.Type}} defined on the version attribute.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104v0w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Remove support for bytecode enhancement via Javassist,HHH-14792,71342,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,25/août/2021 08:53 AM,27/août/2021 02:31 AM,14/mars/2022 12:54 PM,26/août/2021 07:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta1,,,,,,,,,,,,,0,,,,,,"Enhancement via ByteBuddy has been the default since Hibernate ORM 5.3, and shortly after the use of Javassist has been deprecated.

It's time to remove the code supporting Javassist.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-26T07:22:30.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104v0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Rejected,,,,,,,,,,,,,,,,,,Terminé,,
Problems with no exceptions if the Access Modifier of an argumentless constructor is private,HHH-14791,71341,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,홍지훈,5f45dfb98d89e30046a8a730,홍지훈,5f45dfb98d89e30046a8a730,24/août/2021 00:22 AM,24/août/2021 00:22 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When creating entity using bytebuddyproxyfactory, an exception occurs when the Access Modifier of the constructor without arguments is private.

But, Problems with no exceptions if the Access Modifier of an argumentless constructor is private
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:0890e546-4e07-4b37-9367-220dc6642ac8(ug:0890e546-4e07-4b37-9367-220dc6642ac8),,,,,,,,,0|104v0g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix Gradle build failure with JDK 11,HHH-14790,71340,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,23/août/2021 01:10 AM,23/août/2021 01:15 AM,14/mars/2022 12:54 PM,23/août/2021 01:15 AM,5.3.22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.23,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-23T01:12:34.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104v08:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
NegatedPredicateWrapper.not() should return original positive predicate,HHH-14789,71339,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,20/août/2021 03:39 AM,20/août/2021 03:39 AM,14/mars/2022 12:54 PM,,5.5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,Two negatives make a positive.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-20T07:34:49.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,quaff(quaff),,,,,,,,,0|104v00:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,Backport?,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Byteman 4.0.16,HHH-14788,71337,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 09:40 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 03:49 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,5.4.33,5.5.7,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-20T03:45:31.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uzk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade ORM 5.3 to Javassist 3.27.0-GA,HHH-14787,71336,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 09:25 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T09:16:57.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uzc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade ORM 5.3 to Weld 3.1.8.Final,HHH-14786,71335,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:54 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:31:32.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uz4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade ORM 5.3 to Hibernate Validator 6.0.22.Final,HHH-14785,71334,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:54 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:32:11.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uyw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade ORM 5.3 to Hibernate Commons Annotations 5.0.5.Final,HHH-14784,71333,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:54 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:39:29.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uyo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade Hibernate ORM 5.3 to Joda Time 2.9.7,HHH-14783,71332,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:53 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:40:54.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uyg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade Hibernate ORM 5.3 to Classmate 1.5.1,HHH-14782,71331,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:53 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:43:11.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uy8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to JBoss Logging 3.4.2.Final,HHH-14781,71330,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/août/2021 08:53 AM,20/août/2021 06:18 AM,14/mars/2022 12:54 PM,20/août/2021 06:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-19T08:49:18.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uy0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Wildfly 22 - Hibernate-Core 5.4.32 - Unable to build PersistenceContext NullPointerException while checking for existing foreign key - AbstractSchemaMigrator.java - equivalentForeignKeyExistsInDatabase:477,HHH-14780,71329,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Ranjith Kumar,5f7eb524a2909600754b688d,Ranjith Kumar,5f7eb524a2909600754b688d,19/août/2021 00:05 AM,20/août/2021 03:44 AM,14/mars/2022 12:54 PM,20/août/2021 03:43 AM,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Wildfly 22 - Hibernate-Core 5.4.32 - Unable to build PersistenceContext due to NullPointerException while checking for existing foreign key - blocks wildfly ear deployment.

AbstractSchemaMigrator.java - equivalentForeignKeyExistsInDatabase:477

m.getReferencingColumnMetadata() returns null, and it throws nullpointerexception which is unhandled and it blocking the wildfly deployment

Need to add null check and handle NullpointerException.


Trace:


2021-08-16 10:08:24,179 ERROR [org.jboss.msc.service.fail] (ServerService Thread Pool -- 254) MSC000001: Failed to start service jboss.persistenceunit.""cems.ear/inventoryManager.jar#InventoryPersistenceUnit"": org.jboss.msc.service.StartException in service jboss.persistenceunit.""cems.ear/inventoryManager.jar#InventoryPersistenceUnit"": javax.persistence.PersistenceException: [PersistenceUnit: InventoryPersistenceUnit] Unable to build Hibernate SessionFactory
	at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:198) [wildfly-jpa-22.0.0.Final.jar:22.0.0.Final]
	at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:128) [wildfly-jpa-22.0.0.Final.jar:22.0.0.Final]
	at java.security.AccessController.doPrivileged(Native Method) [rt.jar:1.8.0_292]
	at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:664) [wildfly-elytron-security-manager-1.14.1.Final.jar:1.14.1.Final]
	at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:213) [wildfly-jpa-22.0.0.Final.jar:22.0.0.Final]
	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1990)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
	at java.lang.Thread.run(Thread.java:748) [rt.jar:1.8.0_292]
	at org.jboss.threads.JBossThread.run(JBossThread.java:513)
Caused by: javax.persistence.PersistenceException: [PersistenceUnit: InventoryPersistenceUnit] Unable to build Hibernate SessionFactory
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1327) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1253) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.jboss.as.jpa.hibernate5.TwoPhaseBootstrapImpl.build(TwoPhaseBootstrapImpl.java:44)
	at org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:170) [wildfly-jpa-22.0.0.Final.jar:22.0.0.Final]
	... 10 more
Caused by: java.lang.NullPointerException
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.lambda$checkForExistingForeignKey$0(AbstractSchemaMigrator.java:467) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at java.util.stream.MatchOps$1MatchSink.accept(MatchOps.java:90) [rt.jar:1.8.0_292]
	at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1361) [rt.jar:1.8.0_292]
	at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276) [rt.jar:1.8.0_292]
	at java.util.HashMap$ValueSpliterator.tryAdvance(HashMap.java:1649) [rt.jar:1.8.0_292]
	at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) [rt.jar:1.8.0_292]
	at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:499) [rt.jar:1.8.0_292]
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:486) [rt.jar:1.8.0_292]
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472) [rt.jar:1.8.0_292]
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230) [rt.jar:1.8.0_292]
	at java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196) [rt.jar:1.8.0_292]
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) [rt.jar:1.8.0_292]
	at java.util.stream.ReferencePipeline.anyMatch(ReferencePipeline.java:516) [rt.jar:1.8.0_292]
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.checkForExistingForeignKey(AbstractSchemaMigrator.java:473) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applyForeignKeys(AbstractSchemaMigrator.java:423) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:249) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:114) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:183) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:72) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:310) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:467) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1250) [hibernate-core-5.3.20.Final.jar:5.3.20.Final]
	... 12 more
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,dreab8(dreab8),ug:2a861538-dc8e-4223-bdf4-0c4ec2bb73fd(ug:2a861538-dc8e-4223-bdf4-0c4ec2bb73fd),sanne(sanne),,,,,,,0|104uxs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.2.21,2021-08-20 09:18:14.964,,,,"20/août/2021 02:18 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;Hi [~accountid:5f7eb524a2909600754b688d] can you please provide a failing test? It would be of great help especially to prevent future regressions. [Here|https://github.com/hibernate/hibernate-test-case-templates/tree/main/orm/hibernate-orm-5]  you can find a template that can help you write a test.



Thanks ","20/août/2021 03:43 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;I’m not sure what you’re doing, but the logs show you’re mixing versions of Hibernate ORM: one message is about {{5.4.32}} while others are about {{5.3.20.Final}} - that’s an invalid configuration, and WildFly doesn’t support ORM series {{5.4.x}}.

So I’ll close this issue as invalid, please open again if you can provide with a reproducer using a single version of ORM.",,,,,,,,,,,,,,,Terminé,,
Lookup of an inheritance entity results in WrongClassException when second level cache is enabled,HHH-14779,71328,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,Rostyslav Smirnov,557058:3c4f2376-1a10-49af-9da7-556130dc1bd8,17/août/2021 22:50 PM,17/août/2021 22:50 PM,14/mars/2022 12:54 PM,,5.5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Lookup of an entity that doesn't exist returns a null pointer. However, if second level cache is enabled, and contains another entity, that is part of the same inheritance hierarchy, WrongClassException is thrown.

If the second level cache is disabled, and the lookup proceeds from the datasource, or if persistence context contains that other entity, that is part of the same inheritance hierarchy, then null pointer is returned as expected.

Test case attached.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,17/août/2021 22:49 PM;rsmirnov;InheritanceTest.java;https://hibernate.atlassian.net/secure/attachment/49903/InheritanceTest.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,rsmirnov(rsmirnov),,,,,,,,,0|104uxk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Postgres native query set null parameter: column is of type <type> but expression is of type bytea,HHH-14778,71322,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,13/août/2021 12:20 PM,26/nov./2021 19:08 PM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"{code:java}Query query = entityManager.createNativeQuery(""update table set column = :val"");
query.setParameter(""val"", null);{code}

Error:

{code:java}org.postgresql.util.PSQLException: ERROR: column ""column"" is of type integer but expression is of type bytea{code}

Related: [https://hibernate.atlassian.net/browse/HHH-9165|https://hibernate.atlassian.net/browse/HHH-9165]","Postgres 12.4
Postgres driver 42.2.20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),ug:1993031d-7a1e-4204-af57-b81ae8fcbdb4(ug:1993031d-7a1e-4204-af57-b81ae8fcbdb4),,,,,,,,0|104uw8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-26 07:25:19.473,,,,"25/nov./2021 23:25 PM;557058:225029b3-6da4-418f-a708-eea494844d50;Hello, I also faced the same problem. 🤣 ","26/nov./2021 04:34 AM;557058:225029b3-6da4-418f-a708-eea494844d50;I share a repo that I simply reproduced.

* Hibernate version - {{5.6.1.Final}}
* Postgres version - {{14.1}} 
* Postgres Driver - {{42.3.1}}

I was able to solve this by using a {{NamedQuery}}, or by using {{TypeParameterValue}}. Of course, this is only an alternative solution.

See [https://github.com/heowc-scratch/hibernate_postgres_HHH-14778/blob/main/src/test/java/com/example/ApplicationTests.java|https://github.com/heowc-scratch/hibernate_postgres_HHH-14778/blob/main/src/test/java/com/example/ApplicationTests.java]  ",,,,,,,,,,,,,,,A faire,,
"@ObjectField/@ObjectBinding: unify @IndexedEmbedded, @PropertyBinding, @TypeBinding and more",HSEARCH-4299,71321,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/août/2021 23:36 PM,28/févr./2022 01:23 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Provide an {{@ObjectField}} and {{@ObjectBinding}} annotation to unify and simplify various complicated concepts, while providing more expression power.

h1. Prerequisites

h2. Annotations on type parameters

In order to solve [HSEARCH-3689] with {{@ObjectField}}, we will need to be able to apply annotations on type parameters, e.g.:

{code:java}Map<String, @FullTextField> myMap;{code}

See [https://hibernate.atlassian.net/browse/HSEARCH-2444|https://hibernate.atlassian.net/browse/HSEARCH-2444|smart-link] 

CAUTION: maybe it would be simpler if this didn't have any effect (or threw an error) when there is no corresponding {{@ObjectField}} annotation; see ""Problems to solve"" below.

h2. Definition of static fields on dynamic object field templates

In order to solve with {{@ObjectField}}, we will need to be able to work on an object field template as if it was a static object field definition. See [https://hibernate.atlassian.net/browse/HSEARCH-4493|https://hibernate.atlassian.net/browse/HSEARCH-4493|smart-link] 

h2. Maybe: Filters based exclusively on mapper metadata for @IndexedEmbedded

[https://hibernate.atlassian.net/browse/HSEARCH-3903|https://hibernate.atlassian.net/browse/HSEARCH-3903|smart-link]

h2. Maybe: Multi-fields (backend-defined copies of fields using a slightly different type)

[https://hibernate.atlassian.net/browse/HSEARCH-3465|https://hibernate.atlassian.net/browse/HSEARCH-3465|smart-link] 

h1. Use cases

h2. {{@ObjectField}} to implement {{@IndexedEmbedded}}

Assuming {{MyEntity}} is mapped using annotations:

{code:java}@ObjectField
MyEntity myEntity;{code}

{code:java}{
  ""myEntity"": {
    ""entityProperty1"": ""val1"",
    ""entityProperty2"": ""val2""
  }
}{code}

We would also allow all non-deprecated attributes of {{@IndexedEmbedded}}:

{code:java}@ObjectField(name = ""foo"", structure = ObjectStructure.NESTED, includePaths = { ...}, ...)
MyEntity myEntity;{code}

h2. {{@ObjectField}} to map a {{Map}} as an object

{code:java}@ObjectField
Map<String, @FullTextField String> myMap;{code}

{code:java}{
  ""myMap"": {
    ""key1"": ""val1"",
    ""key2"": ""val2""
  }
}{code}

Or even:

{code:java}@ObjectField
Map<String, @ObjectField MyEntity> myMap;{code}

{code:java}{
  ""myMap"": {
    ""key1"": {
      ""entityProperty1"": ""val1"",
      ""entityProperty2"": ""val2""
    },
    ""key2"": {
      ""entityProperty1"": ""val3"",
      ""entityProperty2"": ""val4""
    }
  }
}{code}

h2. {{@ObjectField}} for a custom binding

Equivalent to {{@PropertyBinding}}: the binder could declare fields on the resulting object, apply a bridge, and even declare the programmatic equivalent of a nested {{@ObjectField}} (something similar to a programmatic {{@IndexedEmbedded}}).

{code:java}@ObjectField(binder = @ObjectBinderRef(type = MyObjectBinder.class))
MyEntity myMap;{code}

*CAUTION*: this use may not be compatible with filtering ({{includePaths}}, …)

h2. {{@ObjectField}} to map JSON

This would require [https://hibernate.atlassian.net/browse/HSEARCH-1526|https://hibernate.atlassian.net/browse/HSEARCH-1526|smart-link] , but once we have it, we could imagine something like this:

{code:java}@ObjectField(targetType = @TypeRef(""someJsonTypeRegisteredAndMappedElsewhere""))
JsonObject myJsonObject;

// Once indexed:
{
  ""myJsonObject"": {
    ""field1"": [""val1"", ""val2""],
    ""field2"": {
      ""subField1"": ""val3"",
      ""subField2"": ""val4""
    }
  }
}{code}

Or even:

{code:java}@ObjectField(targetType = @TypeRef(""someJsonTypeRegisteredAndMappedElsewhere""))
String mySerializedJson;

// Once indexed:
{
  ""mySerializedJson"": {
    ""field1"": [""val1"", ""val2""],
    ""field2"": {
      ""subField1"": ""val3"",
      ""subField2"": ""val4""
    }
  }
}{code}

This would require some mechanism to automatically translate a string to a JsonObject, though. Maybe that could be part of the type registration?

h2. {{@ObjectBinding}}: apply binding on a type

{code:java}@ObjectBinding(binder = @ObjectBinderRef(type = MyObjectBinder.class))
class MyEntity {

}{code}

Equivalent to {{@TypeBinding}}: the binder could declare fields on the resulting object, apply a bridge, and even declare the programmatic equivalent of a nested {{@ObjectField}} (something similar to a programmatic {{@IndexedEmbedded}}).

*CAUTION*: {{@ObjectBinding}} would *not* expose any attribute of {{@IndexedEmbedded}} ({{name}},  {{structure}}, {{includePaths}}, …)

h1. Implementation

We would need a concept of {{ObjectBinder}}. It would be passed a context, and would be able to  declare fields, bridges, and ""recurse"" in the mapping, i.e. apply the equivalent of nested {{@IndexedEmbedded}}s.

For example the default impl ({{@ObjectField}} as {{@IndexedEmbedded}}):

{code:java}void bind(Context ctx) {
  NestedBinding nestedBinding = ctx.bridgedElement().nestedBinding(ctx.objectField());
  ctx.bridge(Object.class, new MyBridge(nbt));
}

class ObjectObjectBridge implements ObjectBridge<Object> {
  NestedBinding nb = ...;
  public void write(DocumentElement target, Map source) {
    // Will push all fields declared by the object type to the given target
    nb.write( target, source );
  }
}{code}

The {{Map}} impl:

{code:java}void bind(Context ctx) {
  NestedBindingFieldTemplate nbft = ctx.bridgedElement().extract(ContainerExtractors.MAP_VALUES).nestedBindingFieldTemplate(ctx.objectField());
  ctx.bridge(Map.class, new MyBridge(nbt));
}

class MapObjectBridge implements ObjectBridge<Map> {
  NestedBindingFieldTemplate nbft = ...;
  public void write(DocumentElement target, Map source) {
    for (entry : source.entrySet()) {
      // Will create a field value using the mapping of map values
      nbt.write( target, entry.getKey(), entry.getValue() );
    }
  }
}{code}

Custom implementation could take advantage of those features too, plus do whatever they used to do in {{PropertyBinder}}/{{@TypeBinder}}.

h1. Problems to be solved

h2. Type safety

There are probably unforeseen type safety problems in the example {{ObjectBinder}} implementations above.

h2. Automatic extraction

If {{@ObjectField}} worked as {{@IndexedEmbedded}} or even {{@GenericField}} do, annotating a property of type {{Map}} would actually apply the annotation to map values, which is not what we want. We will need a different behavior here, and it will be difficult to make it seem consistent with {{@GenericField}}.

Would we allow this?

{noformat}@ObjectField
List<MyEntity> myEntities;{noformat}

Or would we require this syntax?

{noformat}List<@ObjectField MyEntity> myEntities;{noformat}

Or this one?

{noformat}@ObjectField(extraction = @ContainerExtraction(extract = ContainerExtract.YES))
List<MyEntity> myEntities;{noformat}

h2. Ambiguity between type parameter mapping with and without {{@ObjectField}} for Maps

h3. Problems

We can use type parameter annotations this way:

{code:java}Map<String, @FullTextField String> myMap;{code}

And it will produce this kind of documents:

{code:java}{
  ""myMap"":[""val1"", ""val2""]
}{code}

But if we add {{@ObjectField}}:

{code:java}@ObjectField
Map<String, @FullTextField String> myMap;{code}

All of a sudden the previous meaning is ignored, and we produce this kind of document instead:

{code:java}{
  ""myMap"": {
    ""key1"": ""val1"",
    ""key2"": ""val2""
  }
}{code}

But how, internally, can we detect that the first mapping must no longer be produced?

Also, what if we do this?

{code:java}@ObjectField
Map<String, @FullTextField @FullTextField(name = ""foo"") String> myMap;{code}

h3. Proposal 1: invalid without {{@ObjectField}}

Maybe we should just consider that this mapping is invalid:

{code:java}// ERROR: @FullTextField is dangling (not bound to a document object)
Map<String, @FullTextField String> myMap;{code}

... and consider that mapping annotations on type parameters only work if they are ""captured"" somehow by an {{@ObjectField}}:

{code:java}@ObjectField // Captures the @FullTextField annotation
Map<String, @FullTextField String> myMap;{code}

… but then that’s a bit inconsistent with other libraries, in particular Hibernate Validator. And a bit of a shame, really, since it would remove a handy new syntax.

Also, it doesn’t tell us what to do if there are more than one {{@ObjectField}} on a map.

h3. Proposal 2: capture annotation with default name only

Only the one annotation creating a field with thedefault field name is used in the object field; other fields follow the old approach of using container extractors

{code:java}@ObjectField
Map<String, @FullTextField @FullTextField(name = ""foo"") String> myMap;{code}

{noformat}{
  ""myMap"": {
    ""key1"": ""val1"",
    ""key2"": ""val2""
  },
  ""foo"":[""val1"", ""val2""]
}{noformat}

h3. Proposal 3: labels/groups

Maybe it’s better to really have {{@ObjectField}} “capture” annotations on type parameter, ensuring that those annotations are only used once (still, how to implement that?).

We could take advantage of labels/groups introduced in [https://hibernate.atlassian.net/browse/HSEARCH-3903|https://hibernate.atlassian.net/browse/HSEARCH-3903|smart-link] to allow one to select which type parameter annotations an {{@ObjectField}} actually captures.

{code:java}@ObjectField(includeLabels = ""label1"")
Map<String, @FullTextField(label = ""label1"") @FullTextField(name = ""foo"") String> myMap;{code}

{code:java}{
  ""myMap"": {
    ""key1"": ""val1"",
    ""key2"": ""val2""
  },
  ""foo"":[""val1"", ""val2""]
}{code}

We would simply forbid capturing more than one annotation, or find a way to handle it, e.g. creating an implicit object field to wrap the multiple value fields:

{code:java}@ObjectField
Map<String, @FullTextField @FullTextField(name = ""foo"") String> myMap;{code}

{noformat}{
  ""myMap"": {
    ""key1"": {
      ""myMap"": ""val1"", // Field with the default name
      ""foo"": ""val2""
    }
    ""key2"": {
      ""myMap"": ""val2"",
      ""foo"": ""val2""
    }
  },
  ""foo"":[""val1"", ""val2""]
}{noformat}

Or even using implicit multi-fields ( [https://hibernate.atlassian.net/browse/HSEARCH-3465|https://hibernate.atlassian.net/browse/HSEARCH-3465|smart-link] ), assuming that all fields have the same value (they should have):

{code:java}@ObjectField
Map<String, @FullTextField @FullTextField(name = ""foo"") String> myMap;{code}

{noformat}{
  ""myMap"": {
    ""key1"": ""val1"", // Will also implicitly populate the sub-field myMap.key1.foo
    ""key2"": ""val2"" // Will also implicitly populate the sub-field myMap.key2.foo
  }
}{noformat}",,,,,,,,,,,,,,,,,,,,,,HSEARCH-2444,HSEARCH-4493,HSEARCH-1887,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104uw0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"30/sept./2021 00:03 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It seems {{@ObjectField}} has another advantage: it makes it more obvious that {{@IndexedEmbedded}} creates a field in the index.

Judging from the code some users are writing, they seem to expect needing an additional {{@GenericField}} next to {{@IndexedEmbedded}}: [https://stackoverflow.com/q/69381101/6692043|https://stackoverflow.com/q/69381101/6692043|smart-link] 

At least the naming conflict would be more obvious if they had to write {{@GenericField @ObjectField Set<Languages> languages;}} .","25/févr./2022 09:54 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;FWIW, I started a prototype here: [https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4299|https://github.com/yrodiere/hibernate-search/tree/HSEARCH-4299|smart-link] 

I didn’t get to the hard parts, though.",,,,,,,,,,,,,,,A faire,,
Fix unfinished sentence in schema management documentation,HSEARCH-4298,71320,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/août/2021 08:25 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,31/août/2021 23:25 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,documentation,,,,0,,,,,,"https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-orm-schema-management-concepts
{quote}
This is because schemas may changed in an incompatible way, such as a field having its type changed,
updating the schema may be impossible without manual intervention,
and then the schema update
{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-15T06:05:36.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2643,0|1009cw:000000xdur3mhxzzzxezsq7u,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run background processor indexing and event deletes in separate transactions,HSEARCH-4297,71319,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/août/2021 05:57 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,27/oct./2021 09:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"The point would be to minimize the time spent holding database locks, so as to minimize the likeliness of race conditions (two processors needed the same page locks).

See [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/failures.20on.20main.20branch/near/249100757|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/failures.20on.20main.20branch/near/249100757]

Instead of this:

{noformat}while true
   start tx
   read 50 events, PESSIMISTIC_WRITE + SKIP_LOCKED
   index
   delete elements
   commit{noformat}

We would do this:

{noformat}while true
   start tx
   read 50 events, NO_LOCK
   index
   commit
   do
      start tx
      read the event we read above, PESSIMISTIC_WRITE + SKIP_LOCKED
      delete these events
      commit
   while some events were not deleted (due to lock failure because SKIP_LOCKED not supported, or due to skipping because they are currently locked){noformat}

This should be safe: even if the JVM crashes after we performed indexing, worst case we will reprocess the same events, which will work fine because event processing is no longer sensitive to processing order ( [https://hibernate.atlassian.net/browse/HSEARCH-4287|https://hibernate.atlassian.net/browse/HSEARCH-4287|smart-link] ).

And hopefully this will improve performance; though we would need to check that.",,,,,,,,,,,,,,,,,,,HSEARCH-4289,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-27T05:10:23.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2687,0|1009cw:000000xdur3mhxzzzxezsq7uwb,,,,,,HSEARCH - 2021-19,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support LockOptions.SKIP_LOCKED for MariaDB 10.6+,HHH-14777,71318,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/août/2021 05:23 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,11/oct./2021 10:18 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,6.0.0.Beta1,,,,,,,,hibernate-core,,,,0,,,,,,"MariaDB didn't support {{for update skip locked}} for a long time, but starting with 10.6 it apparently does: https://jira.mariadb.org/browse/MDEV-13115

It would be great to have a MariaDB 10.6 dialect that implements {{getWriteLockString}}/{{getReadLockString}} by taking {{LockOptions.SKIP_LOCKED}} into account; e.g. like {{org.hibernate.dialect.MySQL8Dialect#getWriteLockString(int)}}.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-17T01:38:28.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),yrodiere(fenrhil),,,,,,,,0|104uvk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Make sure assertion errors in background threads caused by unexpected works will fail a test,HSEARCH-4296,71317,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,10/août/2021 23:46 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,11/août/2021 02:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"Currently only ""invalid"" works (e.g. we expect an ADD, but get a DELETE) will be remembered and cause the test to fail, even if they happen in a background thread.

We should also make the test fail if unexpected works (e.g. we don't expect anything, but get a DELETE) happen.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-11T02:12:23.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2639,0|1009cw:000000xdur3mhxzzzxezsq7t,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Optimize Loader instantiate when EntityPersister is known,HHH-14776,71316,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,09/août/2021 06:58 AM,25/août/2021 06:58 AM,14/mars/2022 12:54 PM,09/août/2021 07:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,,,,,0,,,,,,The instantiation of a new entity is performing a series of indirections by `Load` in trying to find the right EntityPersister to use. Optimise for the common case in which there is no inheritance as that saves a persister lookup.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-09T06:23:04.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uvc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Exception during multiload leaves EntityManager / Session and entities in an invalid state,HHH-14775,71315,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Tassilo Karge,5f50ce413aa35b003faed29e,Tassilo Karge,5f50ce413aa35b003faed29e,09/août/2021 04:51 AM,09/août/2021 06:20 AM,14/mars/2022 12:54 PM,,5.4.28,5.4.29,5.4.30,5.4.31,5.4.32,5.5.0,5.5.2,5.5.3,5.5.4,5.5.5,5.5.6,5.5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,entitymanager,exception,loading,,,"After a multiload with an exception during the hydrate phase of an entity, the entities that were loaded so far remain in the EntityManager / Session if the exception is caught. The entity that was loaded with error also remains partially hydrated. No @PostLoad callbacks are executed for the loaded entities.
If the same entity is loaded in the same transaction by another method (e.g. session.find(...) ), no error is thrown. Further, all entities that were loaded before the faulty entity can be retrieved from the session without ever having the @PostLoad method called on them.

There are several different options to deal with this:

* Disable any access to the EntityManager / Session after an error in a multiload process
* Purge eintities that were loaded before a faulty entity in a multiload from the EntityManager / Session
* Ignore the error that the faulty entity caused, purge only the faulty entity from the EntityManager / Session and finish the multiload process (potentially repeat for other faulty entities, potentially throw an error nevertheless, after executing @PostLoad callbacks on all properly loaded entities)

The attached testcase shows a simple example where an invalid Enum case in the database causes an exception during the multiload and leaves several entities in an inconsistent state. See [https://github.com/hibernate/hibernate-orm/pull/4135|https://github.com/hibernate/hibernate-orm/pull/4135|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=0, unknownBuildCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T05:12:51.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":0,""unknownBuildCount"":1,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,karge(karge),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4135,0|104uv4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/août/2021 05:19 AM;5f50ce413aa35b003faed29e;Test cases in PR [https://github.com/hibernate/hibernate-orm/pull/4135|https://github.com/hibernate/hibernate-orm/pull/4135|smart-link] ,09/août/2021 06:20 AM;5f50ce413aa35b003faed29e;I am willing to contribute a solution if a decision for one of the above variants for the solution is made by the maintainers.,,,,,,,,,,,,,,,A faire,,
Refine the column types for synthetic tables added by the database-polling strategy,HSEARCH-4295,71314,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/août/2021 04:25 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,02/nov./2021 03:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"Let’s review the type of all columns added by the database-polling coordination strategy.

In particular, I see that the {{payload}} column of the outbox table has type binary, where {{varbinary}} seems more appropriate. Also, it has a length of {{8192}} , but {{8000}} would be better for SQL server in particular, because it avoids switching from the {{varbinary}} type to the {{image}} type. I’m not sure which size would be best, however; maybe that should be configurable.

Other columns might have similar problems.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-02T03:53:03.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2696,0|1009cw:000000xdur3mhxzzzxezsq7uwc,,,,,,HSEARCH - 2021-19,HSEARCH - 2021-20,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Targeting of ""implicit"" fields in the Search DSL",HSEARCH-4294,71313,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/août/2021 03:13 AM,01/févr./2022 02:25 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.3-backlog,,,,,,,,,backend-elasticsearch,backend-lucene,,,0,,,,,,"Elasticsearch creates some implicit fields when indexing, and so does Hibernate Search:

* {{_index}} (the name of the index)
* {{_entity_type}} (the name of the indexed entity type)
* etc.

It would be nice to be able to refer to these fields in the Search DSL, even though they weren't declared anywhere, e.g.:

{code}
AggregationKey<Map<String, Long>> countsByEntityKey = AggregationKey.of( ""countsByEntity"" );

SerachResult<MyEntity> result = searchSession.search(MyEntity.class).extension(ElasticsearchExtension.get())
        .where(...)
        .aggregation(countsByEntityKey, f -> f.terms()
                .field( ""_entity_type"", String.class ))
        .fetch( 20 );
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzy9u,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
jakarta.persistence.spi.PersistenceUnitInfo is not taking as constructor parameter in PersistenceUnitInfoDescriptor becouse its still using javax.persistence.spi.PersistenceUnitInfo,HHH-14774,71312,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Momtajul Karim,5cc70f2ed699e211e6a69f57,Momtajul Karim,5cc70f2ed699e211e6a69f57,09/août/2021 03:05 AM,09/août/2021 03:05 AM,14/mars/2022 12:54 PM,,5.5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,," PersistenceUnitInfo persistenceUnitInfo = new PersistenceUnitInfoImpl(builder.getPersistenceUnitName(), builder.getEntities(), properties);

 PersistenceUnitInfoDescriptor persistenceUnitInfoDescriptor = new PersistenceUnitInfoDescriptor(persistenceUnitInfo);

EntityManagerFactory emf =  new EntityManagerFactoryBuilderImpl(persistenceUnitInfoDescriptor, properties).build();",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,momtajulk(momtajulk),,,,,,,,,0|104uug:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,,,,,,,,,A faire,,
Validate generated module-info.class at build time,HSEARCH-4293,71311,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/août/2021 02:34 AM,28/oct./2021 00:04 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.2-backlog,,,,,,,,,build,,,,0,,,,,,"Our module-info are hardcoded and we don't have very extensive tests; in particular we don't check that all APIs are usable when Hibernate Search is in the modulepath.

We need something to check that all API/SPI packages for a given module are actually mentioned in its module-info.class",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104vxr:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
JdbcCoordinatorImpl micro improvement: unguarded tracev parameters should be constant,HHH-14773,71310,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,09/août/2021 02:06 AM,25/août/2021 06:58 AM,14/mars/2022 12:54 PM,09/août/2021 03:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T02:58:18.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uu8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Session.find does not respect enabled filters,HHH-14772,71308,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,06/août/2021 07:03 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,08/août/2021 22:23 PM,5.5.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-08T22:22:58.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104uts:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Stop testing against Open Distro for Elasticsearch in local mode,HSEARCH-4292,71307,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/août/2021 03:50 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,12/août/2021 05:53 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,"Because:

* we already test against it in remote mode (AWS)
* we don't advertise compatibilty so removing this is not a big deal
* we already test against its successor, OpenSearch, which is far more important.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-12T05:53:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2642,0|1009cw:000000xdur3mhxzzzxezsq6i,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Remove invalid dependencies from hibernate-search-util-common,HSEARCH-4291,71306,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/août/2021 02:48 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,06/août/2021 03:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"It seems we're depending on Guava and apache-commons. We really shouldn't, or only in tests.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-06T03:46:41.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2636,0|1009cw:000000xdur6hzr,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Byte Buddy 1.11.12,HHH-14771,71305,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,05/août/2021 16:01 PM,20/août/2021 09:01 AM,14/mars/2022 12:54 PM,20/août/2021 09:01 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,5.4.33,5.5.7,,,,,,,bytecode-enhancement,,,,0,,,,,,"
Avoid a problem with Security Managers:

* https://twitter.com/rafaelcodes/status/1423412622549037059
* https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.11.12
* https://github.com/raphw/byte-buddy/issues/1090",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-20T09:01:17.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104utk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Approved,,,,,,,,,,,,,,,,,,Terminé,,
Optimise access to EntityPersister in Metamodel via Class type,HHH-14770,71304,,Amélioration,Rouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,05/août/2021 14:17 PM,12/août/2021 06:26 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5-backlog,,,,,,,,,hibernate-core,,,,0,,,,,,"It would seem that the lookup of an `EntityPersister` in Metamodel needs to happen frequently via a Class as key in an hashmap; this is currently implemented as a CHM lookup, but would be better to use a ClassValue.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,12/août/2021 02:02 AM;yrodiere;Screenshot from 2021-08-12 11-00-35.png;https://hibernate.atlassian.net/secure/attachment/49902/Screenshot+from+2021-08-12+11-00-35.png,12/août/2021 02:02 AM;yrodiere;Screenshot from 2021-08-12 11-00-58.png;https://hibernate.atlassian.net/secure/attachment/49901/Screenshot+from+2021-08-12+11-00-58.png,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-12T02:57:13.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,sanne(sanne),yrodiere(fenrhil),,,,,,,,0|104utc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-08-12 08:49:07.878,,,,"12/août/2021 01:49 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It seems HHH-14770 introduced a memory leak through its use of {{ClassValue}}.

I don't fully understand how, to be honest. I wasn't able to make sense of the output of the memory analysis tools I attempted to use.

But I can see that in Hibernate Search, {{SessionFactory}} instance created in tests are no longer garbage-collected after [https://hibernate.atlassian.net/browse/HHH-14770|https://hibernate.atlassian.net/browse/HHH-14770|smart-link] ; if I revert the patch, they are. So, let's revert this patch, and try again later.","12/août/2021 02:02 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Some proof, if need be.

Memory profile when running Hibernate Search tests before this patch:

!Screenshot from 2021-08-12 11-00-35.png|width=590,height=386!

After this patch:

!Screenshot from 2021-08-12 11-00-58.png|width=590,height=377!","12/août/2021 06:26 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;How to reproduce the problem, if someone needs to (assuming you just built ORM 5.5.7-SNAPSHOT locally with the faulty patch):

{noformat}git clone git@github.com:yrodiere/hibernate-search.git -b tracking-orm5.5-main
cd hibernate-search
mvn -U clean install -pl integrationtest/mapper/orm -am -Dversion.org.hibernate=5.5.7-SNAPSHOT{noformat}",,,,,,,,,,,,,,A faire,,
"Add an example to the documentation using "".bridgedElement().name()"" in a property binder",HSEARCH-4290,71303,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 08:13 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,03/nov./2021 06:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,documentation,,,,0,,,,,,"Surprisingly we don't have anything about this yet...

This probably should be in the very first example.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-03T06:48:30.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2697,0|1009cw:000000xdur3mhxzzzxezsq7uxdi,,,,,,HSEARCH - 2021-20,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Ignore database-locked events in outbox automatic indexing processors,HSEARCH-4289,71302,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 06:22 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,11/août/2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"I.e. load events with {{PESSIMISTIC_WRITE}} lock type and using {{SKIP_LOCKED}}.

This should solve database deadlocks we’ve been experiencing in particular with SQL server (see [https://hibernate.atlassian.net/browse/HSEARCH-4288|https://hibernate.atlassian.net/browse/HSEARCH-4288|smart-link]).

See [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/failures.20on.20main.20branch/near/248471737|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/failures.20on.20main.20branch/near/248471737]

Requires [https://hibernate.atlassian.net/browse/HSEARCH-4287|https://hibernate.atlassian.net/browse/HSEARCH-4287|smart-link].",,,,,,,,,,,,,,,,,,,,,,HSEARCH-4287,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-11T08:20:55.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2641,0|1009cw:000000xdur3mhxzzzxezsq59,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Resume testing against MS SQL Server in CI,HSEARCH-4288,71301,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 06:15 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,11/août/2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,build,tests,,,0,,,,,,I had to disable it in [HSEARCH-4281] until we solve [https://hibernate.atlassian.net/browse/HSEARCH-4289|https://hibernate.atlassian.net/browse/HSEARCH-4289|smart-link] .,,,,,,,,,,,,,,,,,,,HSEARCH-4281,,,HSEARCH-4289,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-11T08:20:55.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2641,0|1009cw:000000xdur3mhxzzzxezsq5i,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Make processing of outbox events indifferent to processing order,HSEARCH-4287,71300,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 06:11 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,11/août/2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"Currently, the processing of outbox events is sensitive to event order, because we infer the operation (add, update, delete) from the ""event type"", part of the event itself.
This means that processing an ADD event, then a DELETE event is not the same as processing a DELETE event, then an ADD event (different outcome).

This causes all sorts of issues:

* Many headaches to get the events back in order if we can't rely on their IDs being increasing integers (see [https://hibernate.atlassian.net/browse/HSEARCH-4228|https://hibernate.atlassian.net/browse/HSEARCH-4228|smart-link] , and the resulting limitation caused by the lack of precision of date/time functions in some RDBMSs)
* We can't work around database locking issues by taking advantage of Hibernate ORM's ability to skip loading for events that are currently locked. (see [https://hibernate.atlassian.net/browse/HSEARCH-4289|https://hibernate.atlassian.net/browse/HSEARCH-4289|smart-link] )

Let's try to break free from event types.
We can auto-detect the operation to apply simply by loading entities: entity is present => UPDATE, not present => DELETE.

This has two (acceptable) downsides:

* We will attempt to load entities even when they are deleted. It should be cheap anyway.
* We will always perform `addOrUpdate` operations, never `add`. It's exactly the same as far as Elasticsearch is concerned anyway, and the outbox is primarily useful for Elasticsearch, not so much for Lucene. It will also still work with Lucene, it will just be a bit slower.",,,,,,,,,,,,,,,,,,,HSEARCH-4228,HSEARCH-4230,,,,,,,,,,,,,,,,"{repository={count=14, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":14,""lastUpdated"":""2021-10-21T01:03:12.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":14,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2641,0|1009cw:000000xdur3mhxzzzxezsq5,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Run tests against Elasticsearch 7.14 and upgrade to Elasticsearch client 7.14,HSEARCH-4286,71299,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Aucune correction envisagée,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 01:02 AM,12/oct./2021 02:38 AM,14/mars/2022 12:54 PM,07/oct./2021 06:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,backend-elasticsearch,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uvi,,,,,,HSEARCH - 2021-16,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,"11/août/2021 08:06 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Blocked by [https://github.com/elastic/elasticsearch/issues/76362|https://github.com/elastic/elasticsearch/issues/76362|smart-link]  , and maybe other bugs that are also present in 7.13.4 (see [https://hibernate.atlassian.net/browse/HSEARCH-4280|https://hibernate.atlassian.net/browse/HSEARCH-4280|smart-link] )","07/oct./2021 06:41 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Bugfixes are necessary in ES 7.16, and they are unlikely to be be backported to 7.13.

We'll try to upgrade to 7.16 directly when it's out; see HSEARCH-4340.",,,,,,,,,,,,,,,Terminé,,
Use containers to run databases in the 6.0 branch,HSEARCH-4285,71298,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/août/2021 00:30 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,09/août/2021 00:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,,,,,,,,,build,tests,,,0,,,,,,"I.e. backport most of HSEARCH-4242 , but not parts adding more RDBMS to test.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T00:08:21.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2635,0|1009cw:000000xdur6hzi,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Create a configuration option for FunctionContributor ordering,HHH-14769,71297,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,04/août/2021 09:35 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha9,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-core,,,,0,,,,,,"We introduced the {{FunctionContributor}} contract with a {{ordinal}} method for ordering, but as discussed with Steve, we also should add a config option to allow ordering contributors explicitly.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104usw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Use a different JDK for running Maven than for compiling tests in JDK CI jobs,HSEARCH-4284,71296,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/août/2021 05:53 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/août/2021 00:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,build,,,,0,,,,,,"Currently, in tests of JDKs other than JDK 11 we use:

* For JDKs newer than 11: the new JDK to run Maven, compile main code and tests, and run tests.
* For JDK 8: JDK 11 to run Maven, compile main code and tests, and JDK8 to run tests.

It causes some problems when some Maven plugin doesn't work with the new JDK , e.g. the {{maven-scripting-plugin}} which relies on Groovy.

Let's change this:

* Always use JDK11 to run Maven and compile main code.
* For JDKs newer than 11, use the new JDK to compile and run tests.
* For JDK 8, use JDK 11 to compile tests (with {{-release 8}}) and JDK8 to run tests.

See [https://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html|https://maven.apache.org/plugins/maven-compiler-plugin/examples/compile-using-different-jdk.html]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-09T00:08:21.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2633,0|1009cw:000000xdur6hz,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Solutions for persistent indexing errors,HSEARCH-4283,71294,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/août/2021 01:14 AM,05/janv./2022 05:08 AM,14/mars/2022 12:54 PM,04/janv./2022 05:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta2,,,,,,,,,,,,,0,,,,,,"It is possible that at some point, the processing of some entity change events fails.

When that happens, we currently try again 2 times, then give up, log an error with the entity ID and hope the user will deal with it.

Ideally, we should offer an easier way to deal with this:

* We could offer configurable strategies that retry indefinitely, for example with increasing delays.
* OR we could keep these events around, and allow users to trigger a retry explicitly.
* OR all of the above: retry for a pre-determined duration, then give up and store the event somewhere, but allow users to trigger a retry explicitly.
* OR just document how users can cope with failed events by implementing their own FailureHandler and storing the information “this entity needs reindexing along with all containing entities” somewhere.
* OR something else.

See comments for suggested solution.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-04T05:22:40.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2799,0|104usn:,,,,,,HSEARCH - 2021-24,HSEARCH - 2022-01,,,,,,,,,,,,,,,,,,,,,,,,,,"14/déc./2021 02:38 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Solution discussed during sprint planning:

* Instead of deleting an event after 3 attempts, we mark it as “not to be processed anymore”. The marking could be as simple as a “status” column, with an enum (two values: PENDING, ABORTED), and having a filter in the outbox event finder to exclude aborted events.
* We must offer an API to users so that they can count aborted events, trigger reprocessing of all aborted events, and clear all aborted events.
Fabio will propose a first draft of an API, which we will probably change after the PR is submitted.",,,,,,,,,,,,,,,,Terminé,,
Configurable transaction timeout for the outbox event processor in JTA environments,HSEARCH-4282,71293,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/août/2021 07:12 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,10/oct./2021 23:50 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"See this code in particular in {{OutboxEventBackgroundProcess}}:

{noformat}			try ( SessionImplementor session = (SessionImplementor) mapping.sessionFactory().openSession() ) {
				transactionHelper.begin( session, null );
				try {
					List<OutboxEvent> events = finder.findOutboxEvents( session, batchSize );
{noformat}

We're passing {{null}} to {{transactionHelper.begin}}, but we could pass a user-provided value to set a timeout higher than the default in their JTA environment (which would make sense since it’s a background process, where the duration of a transaction is not as problematic as when handling user requests).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-10T23:50:31.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2670,0|1009cw:000000xdur3mhxzzzxezsq4d,,,,,,HSEARCH - 2021-17,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
hibernate-jpamodelgen fails to generate metamodel for recursive type variable definition,HHH-14768,71292,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,02/août/2021 00:31 AM,04/août/2021 06:19 AM,14/mars/2022 12:54 PM,02/août/2021 00:59 AM,5.5.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.6,,,,,,,,,hibernate-jpamodelgen,,,,0,,,,,,"In HHH-14724 I fixed the support for annotated types, but this caused a regression that when compiling a type with recursive type variables now leads to a stack overflow error like in this example:

{code:java}
	public <E extends Enum<E>> E getMyEnum() {
		return null;
	}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-02T00:59:41.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104us0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,,,,,,,,,,,,,Terminé,,
eclipse formatter does not produce proper format for Enum,HHH-14767,71291,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,,,,IT Support,557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94,IT Support,557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94,01/août/2021 08:00 AM,01/août/2021 08:00 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"When editing org.hibernate.annotations.SourceType it removed the spaces on {{DB( ""dbtimestamp"" );}}

see: https://hibernate.org/community/contribute/eclipse-ide/ , specifically: https://raw.githubusercontent.com/hibernate/hibernate-ide-codestyles/master/eclipse/hibernate-java-formatting.xml",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,support(support),,,,,,,,,0|104urs:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix tests for outbox event processing using different databases,HSEARCH-4281,71289,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,30/juil./2021 08:28 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,03/août/2021 23:56 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=16, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":16,""lastUpdated"":""2021-10-21T01:03:12.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":16,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2634,0|1009cw:000000xdur62,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test against Elasticsearch 7.13.4,HSEARCH-4280,71287,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Aucune correction envisagée,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/juil./2021 05:15 AM,12/oct./2021 02:38 AM,14/mars/2022 12:54 PM,07/oct./2021 06:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"Follows up on HSEARCH-4276 .

There seems to be regressions in aggregation tests for {{OffsetTime}}/{{OffsetDateTime}}; things like this:

{noformat}
# Non-default environments / elasticsearch-local-[7.12,7.x) / simple[range on type OffsetDateTime - ROOT - SINGLE_VALUED] – org.hibernate.search.integrationtest.backend.tck.search.aggregation.SingleFieldAggregationBaseIT(elasticsearch-local-_7_12_7_x_-it-elasticsearch)
Expecting:
  <[[2018-01-01T12:58:30+02:00,2018-02-01T02:15:30-10:00)=0,
    [2018-02-01T02:15:30-10:00,2018-03-01T12:15:32+04:00)=9,
    [2018-03-01T12:15:32+04:00,+Infinity]=0]>
to contain only:
  <[MapEntry[key=[2018-01-01T12:58:30+02:00,2018-02-01T02:15:30-10:00), value=3L],
    MapEntry[key=[2018-02-01T02:15:30-10:00,2018-03-01T12:15:32+04:00), value=5L],
    MapEntry[key=[2018-03-01T12:15:32+04:00,+Infinity], value=2L]]>
elements not found:
  <[MapEntry[key=[2018-01-01T12:58:30+02:00,2018-02-01T02:15:30-10:00), value=3L],
    MapEntry[key=[2018-02-01T02:15:30-10:00,2018-03-01T12:15:32+04:00), value=5L],
    MapEntry[key=[2018-03-01T12:15:32+04:00,+Infinity], value=2L]]>
and elements not expected:
  <[[2018-01-01T12:58:30+02:00,2018-02-01T02:15:30-10:00)=0,
    [2018-02-01T02:15:30-10:00,2018-03-01T12:15:32+04:00)=9,
    [2018-03-01T12:15:32+04:00,+Infinity]=0]>
{noformat}

Let's investigate.",,,,,,,,,,,,,,,,,,,HSEARCH-4276,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uw,,,,,,HSEARCH - 2021-16,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,"07/oct./2021 06:39 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Bugfixes are necessary in ES 7.15, and they are unlikely to be be backported to 7.13.

We'll try to upgrade to 7.16 directly when it's out; see HSEARCH-4340.",,,,,,,,,,,,,,,,Terminé,,
Error calling Function(),HHH-14766,71286,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Ricardo Matos,6103deba75ad960069f20cf4,Ricardo Matos,6103deba75ad960069f20cf4,30/juil./2021 04:34 AM,30/juil./2021 04:55 AM,14/mars/2022 12:54 PM,30/juil./2021 04:47 AM,5.3.12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,query-hql,,,,0,,,,,,"Hi guys, I have a question about a query I've made.

I am trying running this query on JPA Console calling a sql funcion on select and that gives an error on *image 1* 

!Image 1.JPG|width=1358,height=68!

 

{code:sql}QUERY: SELECT FUNCTION('dbo.getExchangeValue', c.value, 'EUR', 'AKZ', 'F')
FROM TableC c{code}

After a few time, I changed my query and a wrote this way and then worked *Image 2*:

{code:sql}SELECT CAST(COALESCE(FUNCTION('dbo.getExchangeValue', c.value, 'EUR', 'AKZ', 'F'), 0.00) AS big_decimal)
FROM Table c{code}

!Image 2.JPG|width=200,height=183!

 Query running on SQL Server *image 3*:

!Image 3.JPG|width=25%!



My question stands here, why if I remove coaleasce function, the query doesn't run if i dont have any NULL values?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,30/juil./2021 04:35 AM;ug:0538027a-2bda-4cc4-b7c3-e625351e621f;Image 1.JPG;https://hibernate.atlassian.net/secure/attachment/49899/Image+1.JPG,30/juil./2021 04:31 AM;ug:0538027a-2bda-4cc4-b7c3-e625351e621f;Image 2.JPG;https://hibernate.atlassian.net/secure/attachment/49897/Image+2.JPG,30/juil./2021 04:27 AM;ug:0538027a-2bda-4cc4-b7c3-e625351e621f;Image 2.PNG;https://hibernate.atlassian.net/secure/attachment/49898/Image+2.PNG,30/juil./2021 04:38 AM;ug:0538027a-2bda-4cc4-b7c3-e625351e621f;Image 3.JPG;https://hibernate.atlassian.net/secure/attachment/49900/Image+3.JPG,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,4.0,christian.beikov(christian.beikov),ug:0538027a-2bda-4cc4-b7c3-e625351e621f(ug:0538027a-2bda-4cc4-b7c3-e625351e621f),,,,,,,,0|104uqw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-30 11:47:07.235,,,,"30/juil./2021 04:47 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Please don't create issues when you have a question. We have a forum where you can ask questions: https://discourse.hibernate.org/

Having said that, without coalesce, Hibernate has no way to know what kind of datatype this database function will return and thus doesn't know how to fetch the result. To solve this, one usually uses a cast around the `function` invocation or registers the function in the dialect with the proper return type.","30/juil./2021 04:55 AM;6103deba75ad960069f20cf4;Thanks Christian, understood 🙂 ",,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.5.6.Final,HSEARCH-4279,71285,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/juil./2021 04:07 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/août/2021 05:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T05:24:41.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2637,0|1009cw:000000xdur3mhxzzzxezsq7r,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test against OpenSearch 1.0.0,HSEARCH-4278,71284,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/juil./2021 01:13 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,12/août/2021 05:54 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-12T05:53:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2642,0|1009cw:000000xdur3mhxzzzxezsq6,,,,,,HSEARCH - 2021-16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Awaitily 4.1.0,HSEARCH-4277,71283,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 23:14 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,30/juil./2021 00:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"Hopefully this will fix the unhelpful error messages we've been getting on timeouts:

{noformat}
org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.hibernate.search.integrationtest.mapper.orm.realbackend.limitations.ConcurrentEmbeddedUpdateLimitationIT null within 5 seconds.
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:165)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:119)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:31)
	at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:895)
	at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:679)
	at org.hibernate.search.integrationtest.mapper.orm.realbackend.limitations.ConcurrentEmbeddedUpdateLimitationIT.verify(ConcurrentEmbeddedUpdateLimitationIT.java:167)
	at org.hibernate.search.integrationtest.mapper.orm.realbackend.limitations.ConcurrentEmbeddedUpdateLimitationIT.indexingStrategyOutbox(ConcurrentEmbeddedUpdateLimitationIT.java:88)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.hibernate.search.util.impl.integrationtest.common.rule.MappingSetupHelper$1.evaluate(MappingSetupHelper.java:65)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)
	at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)
	at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:157)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
Caused by: java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)
	at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:101)
	at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:81)
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:101)
	... 47 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-07-30T00:52:45.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2631,0|1009cw:000000xdur6hy,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to the latest version of the Elasticsearch servers for tests,HSEARCH-4276,71282,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 09:03 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/août/2021 00:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,tests,,,0,,,,,,"Necessary for [https://hibernate.atlassian.net/browse/HSEARCH-4263|https://hibernate.atlassian.net/browse/HSEARCH-4263|smart-link] , because older micros of Elasticsearch are no longer available on dockerhub.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-09T00:08:21.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2633,0|1009cw:000000xdur6hx,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch Client 7.13.4,HSEARCH-4275,71281,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 09:02 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/août/2021 00:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"And decouple the client version from the server version in the POM, while we’re at it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T00:08:08.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2633,0|1009cw:000000xdur6hv,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Null pointers should not be dereferenced,HHH-14765,71280,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,29/juil./2021 08:36 AM,08/sept./2021 03:13 AM,14/mars/2022 12:54 PM,08/sept./2021 03:13 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"There are some codepoints per component having potential NullpointerException problems. This refers to [RSPEC-2259|https://rules.sonarsource.com/java/RSPEC-2259]

Fix: Individual check necessary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-08T03:13:36.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4124,0|104uqg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Set up SSH config as part of the Jenkinsfile,HSEARCH-4274,71279,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 08:23 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,30/juil./2021 04:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,5.5.9.Final,5.6.7.Final,5.7.4.Final,5.8.3.Final,5.9.4.Final,6.0.7.Final,6.1.0.Alpha1,build,,,,0,,,,,,... instead of relying on the Jenkins worker node to already have the right configuration.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=23, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":23,""lastUpdated"":""2021-09-09T08:44:49.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":23,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur6hr,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
MassIndexer.cacheMode is not honored,HSEARCH-4273,71278,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 06:38 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,10/nov./2021 11:30 AM,6.0.6.Final,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"See {{org.hibernate.search.integrationtest.mapper.orm.massindexing.MassIndexingCachingIT#explicit_get}} (added in HSEARCH-4272)

Verified to affect both 6.1 and 6.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-10T11:30:01.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2701,0|1009cw:000000xdur3mhxzzzxezsq7uwf,,,,,,HSEARCH - 2021-20,HSEARCH - 2021-21,,,,,,,,,,,,,,,,,,,,,,2021-11-09 13:35:29.928,,,,"09/nov./2021 05:35 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;In order to provide a valuable caching service to the user, we have to switch back from queries by ids to multiloading. This (in my opinion) will not only value the fact that cache mode will be honored, but also will make the fetching more efficient in general.","09/nov./2021 05:36 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;Following this strategy of the last comment, the scope of the issue results greatly enlarged.","09/nov./2021 06:12 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;{quote}will make the fetching more efficient in general{quote}

Well, let’s say it might 🙂 

Remember the first level cache is empty when mass indexing, so {{Session#byMultipleIds}} will not be that different from executing a query, except maybe when using the second-level cache, and that’s just opt-in (and the very point of this ticket).

We’ll see when we have numbers, but I’d be surprised (and, TBH, ashamed) if the bottleneck in mass indexing was just query parsing, and switching from query execution to {{Session#byMultipleIds}} magically improved mass indexing throughput without any other change.

I’m glad we’ll get working support for {{MassIndexer.cacheMode}}, though 🙂 ",,,,,,,,,,,,,,Terminé,,
Testsuite: AssertionErrors must not be caught,HHH-14764,71277,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,29/juil./2021 06:24 AM,11/oct./2021 10:15 AM,14/mars/2022 12:54 PM,11/oct./2021 10:15 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,,,,,0,,,,,,AssertionErrors must not be caught and ignored - the tests will never fail.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-23T03:12:54.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4123,0|104uq8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Restore the previous default of CacheMode.IGNORE in the mass indexer,HSEARCH-4272,71276,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 05:58 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,05/août/2021 03:20 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"Seems we switched to using {{null}} sometime while developing 6.1, which gets interpreted by ORM as {{CacheMode.NORMAL}}, but historically we have always been defaulting to {{CacheMode.IGNORE}}.

Let's get back to that (safer) default.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-05T03:19:48.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2630,0|1009cw:000000xdur6hi,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid supress exceptions in try/finally,HHH-14763,71275,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,29/juil./2021 05:21 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,09/sept./2021 08:42 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"Jump statements should not occur in ""finally"" blocks, refers to [RSPEC-1143|https://rules.sonarsource.com/java/RSPEC-1143]. Original exceptions in the try block are hidden by return or throw Exceptions from the finally block.

Fix: throw the original Exception with an addSuppressed for the Exception from the finally block.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-09T08:41:43.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4121,0|104uq0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
More intuitive metadata configuration with @IndexingDependency,HSEARCH-4271,71273,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,29/juil./2021 03:32 AM,29/juil./2021 03:32 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Currently, when {{@IndexingDependency}} is applied to a collection or map, it will add metadata to the *elements* of that collection/map, but not to the collection/map itself.

This leads to confusing situations like [this one|https://stackoverflow.com/questions/68532341/index-hashmap-using-keys-as-fields-names-hibernatesearch/68532820?noredirect=1#comment121168475_68532820] where the user thinks they added metadata, but their bridge is using the whole collection/map and thus doesn't find the metadata.

We should try to relax the rules when it comes to {{@IndexingDependency}}: when it's applied to a property and the {{extraction}} attribute is not provided, by default the metadata should be added to the whole property: without extraction, but also with extraction (collection elements, map keys, map values). 

We could make this work by:

* Changing {{@IndexingDependency.extraction}} to default to {{@ContainerExtraction(extract = ContainerExtract.NO)}}. This will solve the problem mentioned above.
* Having the code that inspects the metadata ""fall back"" to the non-extracted property whenever it's inspecting metadata on an extracted value and doesn't find metadata. E.g. if I'm looking for the metadata for the values of ""myMap"", and I don't find anything telling me that these values are derived from something else, then I'll have a look at the metadata for ""myMap"" without extraction. This would make sure that the metadata added by people relying on the previous default of {{@IndexingDependency.extraction}} would still be there.

Users who need more fine-grained settings would still be able to override settings by adding explicit {{@IndexingDependency}} with an explicit {{extraction}} attribute, but I'm wondering if it makes sense. I doubt we can have a Map property where the keys are derived but not the values, for example. I also doubt we can ask for reindexing to happen when keys change, but not when values change ({{@IndexingDependency(reindexOnUpdate = NO, extraction = @ContainerExtraction(MAP_VALUE))})}} + {{@IndexingDependency(reindexOnUpdate = DEFAULT, extraction = @ContainerExtraction(MAP_KEYS))})}} on the same property). So I think most of the time, {{@IndexingDependency}} should really apply to the whole property, extraction or not.

I believe {{@IndexingDependency}} is the only annotation where we have this kind of problems, but maybe it's worth having a look to check that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104q4e:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Testsuite: Assert.notNull must not be used on primitive types,HHH-14762,71271,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,29/juil./2021 00:10 AM,11/oct./2021 10:17 AM,14/mars/2022 12:54 PM,11/oct./2021 10:17 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"Assertions comparing incompatible types should not be made. Assertions comparing incompatible types always fail, and negative assertions always pass. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-10T05:08:35.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4120,0|104upc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Exception message String.format too many variables,HHH-14761,71270,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,28/juil./2021 23:31 PM,28/juil./2021 23:35 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"A exception message has more parameters in the String.format String than provided:

[CollectionBinder#L672|https://github.com/hibernate/hibernate-orm/blob/6.0.0.Alpha8/hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java#L672]

Fix: Remove one variable.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T04:02:01.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4119,0|104up4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Close resource - potential resource leak,HHH-14760,71269,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,28/juil./2021 22:51 PM,25/août/2021 06:58 AM,14/mars/2022 12:54 PM,09/août/2021 02:28 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,hibernate-core,,,,0,,,,,,"There are some Files or Filestreams not properly closed.
Fix: Use try-with-resource or a finally with safeClose, depending on the current Exception handling.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T02:28:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4118,0|104uow:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
StandardSQLExceptionConverter NPE: HSQLDialect creates a null SQLExceptionConversionDelegate,HHH-14759,71268,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Misagh Moayyed,5dd56d86a88b440ee7fa86e8,Misagh Moayyed,5dd56d86a88b440ee7fa86e8,28/juil./2021 11:24 AM,28/juil./2021 11:25 AM,14/mars/2022 12:54 PM,,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,NPE,,,,,"The HSQLDialect class does not implement the following method:

{code:java}public SQLExceptionConversionDelegate buildSQLExceptionConversionDelegate() {
  return null;
}{code}

The null delegate that is created here is passed onto StandardSQLExceptionConverter#addDelegate(), which does not protect against null delegates. This causes StandardSQLExceptionConverter to NPE, when the StandardSQLExceptionConverter#convert() method is called.",MacOS. JDK 11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:590dc7db-f86a-4353-8f91-1a4acf2213df(ug:590dc7db-f86a-4353-8f91-1a4acf2213df),,,,,,,,,0|104uoo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Update HikariCP to latest version (5.0.0),HHH-14758,71267,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Sergiu Hlihor,557058:102b1c5a-27e8-4bc3-9606-fabec2511305,Sergiu Hlihor,557058:102b1c5a-27e8-4bc3-9606-fabec2511305,28/juil./2021 01:19 AM,28/juil./2021 01:19 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-hikaricp,,,,0,,,,,,"Current ORM version branches 5.4.x and 5.5.x depend on a 3 years old version of HikariCP.

While technically a newer version can be used out of the box in most of the cases, it would be good if main release would be updated also to require the newest version.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sergiuhlihor(sergiuhlihor),,,,,,,,,0|104uog:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Cannot save (dirty check failed) single element GeometryCollection,HHH-14757,71266,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,niblings niblings,6100ceedae72b2006ff8fb3f,niblings niblings,6100ceedae72b2006ff8fb3f,27/juil./2021 20:46 PM,15/oct./2021 04:58 AM,14/mars/2022 12:54 PM,15/oct./2021 04:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.33,5.5.9,5.6.0.Beta2,,,,,,,hibernate-spatial,,,,1,,,,,,"JTSUtils.equalsExact3D() throw exception java.lang.IllegalStateException: Only simple geometries should be used

geolatte-geom same issues has been fixed.
[https://github.com/GeoLatte/geolatte-geom/issues/133|https://github.com/GeoLatte/geolatte-geom/issues/133]

{code:java}Caused by: java.lang.IllegalStateException: Only simple geometries should be used
	at org.hibernate.spatial.jts.JTSUtils.equals3DPrimitiveGeometries(JTSUtils.java:130) ~[hibernate-spatial-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.spatial.jts.JTSUtils.equalsExact3D(JTSUtils.java:67) ~[hibernate-spatial-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.spatial.JTSGeometryJavaTypeDescriptor.areEqual(JTSGeometryJavaTypeDescriptor.java:60) ~[hibernate-spatial-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.spatial.JTSGeometryJavaTypeDescriptor.areEqual(JTSGeometryJavaTypeDescriptor.java:28) ~[hibernate-spatial-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.type.AbstractStandardBasicType.isEqual(AbstractStandardBasicType.java:194) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.type.AbstractStandardBasicType.isSame(AbstractStandardBasicType.java:182) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.type.AbstractStandardBasicType.isDirty(AbstractStandardBasicType.java:225) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.type.AbstractStandardBasicType.isDirty(AbstractStandardBasicType.java:221) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.type.TypeHelper.findDirty(TypeHelper.java:316) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.findDirty(AbstractEntityPersister.java:4656) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.dirtyCheck(DefaultFlushEntityEventListener.java:584) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.isUpdateNecessary(DefaultFlushEntityEventListener.java:245) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:170) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
{code}","Spring Boot 2.5.2
hibernate-spatial 5.4.32.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-10-15T04:47:09.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),ug:33087efa-3659-4eea-9977-8a6637a5f1de(ug:33087efa-3659-4eea-9977-8a6637a5f1de),,,,,,,,0|104uo8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,"28/juil./2021 00:09 AM;6100ceedae72b2006ff8fb3f;testcase


{code:java}import static org.junit.jupiter.api.Assertions.assertTrue;

import org.geolatte.geom.codec.Wkt;
import org.geolatte.geom.jts.JTS;
import org.hibernate.spatial.jts.JTSUtils;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Geometry;

class HHH14757Test {

	@Test
	void testWithGeometryCollection() {
		Geometry elem2a = JTS.to(Wkt.fromWkt(""GEOMETRYCOLLECTION(POINT(2 3),LINESTRING(2 3,3 4))""));
		Geometry elem2b = JTS.to(Wkt.fromWkt(""GEOMETRYCOLLECTION(POINT(2 3),LINESTRING(2 3,3 4))""));
		Geometry elem1a = JTS.to(Wkt.fromWkt(""GEOMETRYCOLLECTION(POINT(2 3))""));
		Geometry elem1b = JTS.to(Wkt.fromWkt(""GEOMETRYCOLLECTION(POINT(2 3))""));
		
		assertTrue(JTSUtils.equalsExact3D(elem2a, elem2b));
		assertTrue(JTSUtils.equalsExact3D(elem1a, elem1b));
	}

}
{code}",23/sept./2021 09:27 AM;6100ceedae72b2006ff8fb3f;Will there be a backport to 5.4?,,,,,,,,,,,,,,,Terminé,,
JPA Attribute Converter for numeric types ignored in Criteria Query in some cases,HHH-14756,71264,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Daniel M.,5a7652b062323e24eaf7c5a5,Daniel M.,5a7652b062323e24eaf7c5a5,27/juil./2021 08:51 AM,27/juil./2021 08:54 AM,14/mars/2022 12:54 PM,,5.3.20,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When using a JPA Attribute Converter which converts numeric basic types in a {{WHERE}} Clause in a Criteria Query, the Attribute Converter is not used when the supplied numeric literal is negative.

A little background to the issue: X509 certificate serial numbers represented as Java {{BigIntegers}} should be persisted as uppercase Hex Strings in a {{VARCHAR}} Table Column. To convert between {{BigInteger}}s and Strings, a JPA Attribute Adapter is used. Everything works fine, except for one thing: When using the converted {{BigInteger}} field to query the database using the Criteria API, the serial number is not converted and the database returns an error because the type does not match (_ORA-01722: invalid number_). This only happens when the literal used in the {{WHEN}} clause is negative though. Positive literals work fine.

The issue seems to be related to how the AST is built for the resulting HQL Query, since a negative integer literal is split into separate AST Nodes. A {{UnaryArithmeticNode}} does not implement the {{ExpectedTypeAwareNode}} Interface, which results in the {{BinaryLogicOperatorNode}} not applying the Property Adapter to the right hand side of the equals expression. The literal is therefore not converted into the correct type.

HQL AST for the failing query:

{noformat}\-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'org'
    |  |     |  |  |  |  \-[IDENT] Node: 'hibernate'
    |  |     |  |  |  \-[IDENT] Node: 'converter'
    |  |     |  |  \-[IDENT] Node: 'entity'
    |  |     |  \-[IDENT] Node: 'Car'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'generatedAlias0'
          |  \-[IDENT] Node: 'serial'
          \-[UNARY_MINUS] Node: '-'
             \-[NUM_BIG_INTEGER] Node: '11BI'{noformat}

A sample project showcasing the issue is located [over at GitHub|https://github.com/dnl50/hibernate-converter-issue].","Databases: in-memory H2, Oracle 19.10
Hibernate Versions: 5.4.32, 5.3.20",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:29555bca-2a2d-4a02-af97-61617ac43090(ug:29555bca-2a2d-4a02-af97-61617ac43090),,,,,,,,,0|104uo0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,A faire,,
Allow to instantiate a DefaultIdentifierGeneratorFactory which does not bind to the BeanManager,HHH-14755,71263,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,27/juil./2021 08:45 AM,30/juil./2021 06:12 AM,14/mars/2022 12:54 PM,29/juil./2021 04:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.5,,,,,,,,,hibernate-core,,,,0,,,,,,"HHH-14688 introduced the ability for DefaultIdentifierGeneratorFactory to use managed beans as IdentifierGenerators; There currently is no way to opt-out from this, which should generally be fine as the BeanManager will simply not manage classes which aren't beans, but it's still useful to allow an SPI such as a custom `StandardServiceInitiator` to explicitly disable this new capability.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T04:04:38.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uns:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Allow HQL-like syntax for @Where,HHH-14754,71262,71258,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/juil./2021 06:31 AM,27/juil./2021 06:31 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,Allow HQL-like syntax for {{@Where#clause}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104unk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,71258,Allow object-oriented value for various mapping constructs
Allow HQL-like syntax for @Filter,HHH-14753,71261,71258,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/juil./2021 06:27 AM,27/juil./2021 06:27 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,Allow HQL-like syntax for {{@Filter#condition}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104unc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,71258,Allow object-oriented value for various mapping constructs
Allow HQL-like syntax for @Check,HHH-14752,71260,71258,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/juil./2021 06:26 AM,27/juil./2021 06:26 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104un4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,71258,Allow object-oriented value for various mapping constructs
Allow HQL-like syntax for @ColumnDefault,HHH-14751,71259,71258,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/juil./2021 05:58 AM,27/juil./2021 06:25 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Currently {{@ColumnDefault}} accepts a SQL fragment.  Similar to {{@OrderBy}}, allow a more HQL-like syntax",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),yrodiere(fenrhil),,,,,,,,0|104umw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-27 13:01:47.269,,,,"27/juil./2021 06:01 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Note that it’s {{@ColumnDefault}}, or {{<column … default=… />}} in orm.xml; {{@Column}} doesn’t have a {{default}} attribute AFAICS.

Also, critically, the HQL-like syntax would need to accept function calls.","27/juil./2021 06:25 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Yes, just like with the order-by grammar it would handle functions",,,,,,,,,,,,,,,A faire,71258,Allow object-oriented value for various mapping constructs
Allow object-oriented value for various mapping constructs,HHH-14750,71258,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,27/juil./2021 05:57 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"Some mapping constructs currently accept SQL fragments.  E.g. `@Column#defaultValue`, `@Check#checkConstraint`, ...

This is similar to `@OrderBy`, which is handled as a separate limited grammar.

Grouping task for allowing object-oriented syntax in these spots.  Look at the `OrderingParser` grammar as example",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104umo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix assertion error on rollback being reported before the assertion error that triggered the rollback,HSEARCH-4269,71257,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,27/juil./2021 03:56 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,29/juil./2021 08:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"E.g. when we get this:

{noformat}
java.lang.AssertionError: No call expected, but got: discarding of a work on document 'IndexedEntity#1'

	at org.junit.Assert.fail(Assert.java:89)
	at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.lambda$strictNoExpectationsBehavior$24(VerifyingStubBackendBehavior.java:339)
	at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.verify(CallQueue.java:44)
	at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.discardDocumentWork(VerifyingStubBackendBehavior.java:247)
	at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.discard(StubIndexIndexingPlan.java:119)
	at org.hibernate.search.mapper.pojo.work.impl.PojoTypeIndexingPlanIndexDelegate.discard(PojoTypeIndexingPlanIndexDelegate.java:96)
	at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan.discard(AbstractPojoTypeIndexingPlan.java:83)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanLocalStrategy.doDiscard(PojoIndexingPlanLocalStrategy.java:57)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanImpl.discard(PojoIndexingPlanImpl.java:149)
	at org.hibernate.search.mapper.orm.session.impl.AfterCommitIndexingPlanSynchronization.afterCompletion(AfterCommitIndexingPlanSynchronization.java:59)
	at org.hibernate.search.mapper.orm.session.impl.SynchronizationAdapter.doAfterCompletion(SynchronizationAdapter.java:92)
	at org.hibernate.search.mapper.orm.session.impl.SynchronizationAdapter.doAfterTransactionCompletion(SynchronizationAdapter.java:66)
	at org.hibernate.engine.spi.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:984)
	at org.hibernate.engine.spi.ActionQueue.afterTransactionCompletion(ActionQueue.java:514)
	at org.hibernate.internal.SessionImpl.afterTransactionCompletion(SessionImpl.java:1884)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.afterTransactionCompletion(JdbcCoordinatorImpl.java:450)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.afterCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:203)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$400(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:305)
	at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:69)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.lambda$apply$1(NativePersistenceRunner.java:33)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.applyNoTransaction(NativePersistenceRunner.java:26)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.apply(NativePersistenceRunner.java:32)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.PersistenceRunner.apply(PersistenceRunner.java:35)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.PersistenceRunner.run(PersistenceRunner.java:41)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:42)
	at org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association.multi.AbstractAutomaticIndexingMultiAssociationIT.indirectAssociationReplace_indexedEmbedded(AbstractAutomaticIndexingMultiAssociationIT.java:700)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock$1.evaluate(BackendMock.java:56)
	at org.hibernate.search.util.impl.integrationtest.common.rule.MappingSetupHelper$1.evaluate(MappingSetupHelper.java:64)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: java.lang.AssertionError: Unexpected call, see below for details.
	Last matching call was creation of a work on document 'IndexedEntity#1'
	Failed matching attempts for this call: 
Incorrect work when the creation of a work on document 'IndexedEntity#1' was expected:
{
	document={
		child={
			expected={
				containedIndexedEmbedded=[
					{
						indexedField=[1 - firstValue]
					}
					{
						indexedField=[2 - secondValue]
					}
				]
			}
			actual=<no value>
		}
	}
}
		at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.createFailure(CallQueue.java:110)
		at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.verify(CallQueue.java:100)
		at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.createDocumentWork(VerifyingStubBackendBehavior.java:239)
		at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.addWork(StubIndexIndexingPlan.java:133)
		at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.addOrUpdate(StubIndexIndexingPlan.java:74)
		at org.hibernate.search.mapper.pojo.work.impl.PojoTypeIndexingPlanIndexDelegate.addOrUpdate(PojoTypeIndexingPlanIndexDelegate.java:75)
		at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan$AbstractEntityState.delegateAddOrUpdate(AbstractPojoTypeIndexingPlan.java:326)
		at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan$AbstractEntityState.sendCommandsToDelegate(AbstractPojoTypeIndexingPlan.java:265)
		at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan.process(AbstractPojoTypeIndexingPlan.java:97)
		at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanImpl.process(PojoIndexingPlanImpl.java:124)
		at org.hibernate.search.mapper.orm.event.impl.HibernateSearchEventListener.onFlush(HibernateSearchEventListener.java:184)
		at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
		at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1372)
		at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:446)
		at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2165)
		at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1860)
		at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:443)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
		at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
		at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:61)
		... 36 more

{noformat}

We should actually be getting this:

{noformat}
java.lang.AssertionError: Unexpected call, see below for details.
	Last matching call was creation of a work on document 'IndexedEntity#1'
	Failed matching attempts for this call: 
Incorrect work when the creation of a work on document 'IndexedEntity#1' was expected:
{
	document={
		child={
			expected={
				containedIndexedEmbedded=[
					{
						indexedField=[1 - firstValue]
					}
					{
						indexedField=[2 - secondValue]
					}
				]
			}
			actual=<no value>
		}
	}
}

	at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.createFailure(CallQueue.java:110)
	at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.verify(CallQueue.java:100)
	at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.createDocumentWork(VerifyingStubBackendBehavior.java:239)
	at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.addWork(StubIndexIndexingPlan.java:133)
	at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.addOrUpdate(StubIndexIndexingPlan.java:74)
	at org.hibernate.search.mapper.pojo.work.impl.PojoTypeIndexingPlanIndexDelegate.addOrUpdate(PojoTypeIndexingPlanIndexDelegate.java:75)
	at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan$AbstractEntityState.delegateAddOrUpdate(AbstractPojoTypeIndexingPlan.java:326)
	at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan$AbstractEntityState.sendCommandsToDelegate(AbstractPojoTypeIndexingPlan.java:265)
	at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan.process(AbstractPojoTypeIndexingPlan.java:97)
	at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanImpl.process(PojoIndexingPlanImpl.java:124)
	at org.hibernate.search.mapper.orm.event.impl.HibernateSearchEventListener.onFlush(HibernateSearchEventListener.java:184)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1372)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:446)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2165)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1860)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:443)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:60)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.lambda$apply$1(NativePersistenceRunner.java:33)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.applyNoTransaction(NativePersistenceRunner.java:26)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.NativePersistenceRunner.apply(NativePersistenceRunner.java:32)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.PersistenceRunner.apply(PersistenceRunner.java:35)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.PersistenceRunner.run(PersistenceRunner.java:41)
	at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:41)
	at org.hibernate.search.integrationtest.mapper.orm.automaticindexing.association.multi.AbstractAutomaticIndexingMultiAssociationIT.indirectAssociationReplace_indexedEmbedded(AbstractAutomaticIndexingMultiAssociationIT.java:700)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.hibernate.search.util.impl.integrationtest.common.rule.BackendMock$1.evaluate(BackendMock.java:56)
	at org.hibernate.search.util.impl.integrationtest.common.rule.MappingSetupHelper$1.evaluate(MappingSetupHelper.java:64)
	at org.hibernate.search.util.impl.integrationtest.common.TestConfigurationProvider$1.evaluate(TestConfigurationProvider.java:45)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
	Suppressed: java.lang.AssertionError: No call expected, but got: discarding of a work on document 'IndexedEntity#1'
		at org.junit.Assert.fail(Assert.java:89)
		at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.lambda$strictNoExpectationsBehavior$24(VerifyingStubBackendBehavior.java:339)
		at org.hibernate.search.util.impl.integrationtest.common.rule.CallQueue.verify(CallQueue.java:44)
		at org.hibernate.search.util.impl.integrationtest.common.rule.VerifyingStubBackendBehavior.discardDocumentWork(VerifyingStubBackendBehavior.java:247)
		at org.hibernate.search.util.impl.integrationtest.common.stub.backend.index.impl.StubIndexIndexingPlan.discard(StubIndexIndexingPlan.java:119)
		at org.hibernate.search.mapper.pojo.work.impl.PojoTypeIndexingPlanIndexDelegate.discard(PojoTypeIndexingPlanIndexDelegate.java:96)
		at org.hibernate.search.mapper.pojo.work.impl.AbstractPojoTypeIndexingPlan.discard(AbstractPojoTypeIndexingPlan.java:83)
		at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanLocalStrategy.doDiscard(PojoIndexingPlanLocalStrategy.java:57)
		at org.hibernate.search.mapper.pojo.work.impl.PojoIndexingPlanImpl.discard(PojoIndexingPlanImpl.java:149)
		at org.hibernate.search.mapper.orm.session.impl.AfterCommitIndexingPlanSynchronization.afterCompletion(AfterCommitIndexingPlanSynchronization.java:59)
		at org.hibernate.search.mapper.orm.session.impl.SynchronizationAdapter.doAfterCompletion(SynchronizationAdapter.java:92)
		at org.hibernate.search.mapper.orm.session.impl.SynchronizationAdapter.doAfterTransactionCompletion(SynchronizationAdapter.java:66)
		at org.hibernate.engine.spi.ActionQueue$AfterTransactionCompletionProcessQueue.afterTransactionCompletion(ActionQueue.java:984)
		at org.hibernate.engine.spi.ActionQueue.afterTransactionCompletion(ActionQueue.java:514)
		at org.hibernate.internal.SessionImpl.afterTransactionCompletion(SessionImpl.java:1884)
		at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.afterTransactionCompletion(JdbcCoordinatorImpl.java:450)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.afterCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:203)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$400(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
		at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.rollback(JdbcResourceLocalTransactionCoordinatorImpl.java:305)
		at org.hibernate.engine.transaction.internal.TransactionImpl.rollback(TransactionImpl.java:142)
		at org.hibernate.search.util.impl.integrationtest.mapper.orm.OrmUtils.withinTransaction(OrmUtils.java:68)
		... 36 more
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-07-29T08:32:27.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2625,0|1009cw:000000xdur6h,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to MySQL JDBC driver to mysql-connector-java-8.0.23,HHH-14749,71255,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,26/juil./2021 15:45 PM,15/déc./2021 04:58 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5-backlog,,,,,,,,,,,,,0,,,,,,"This upgrade includes some bugfixes for how MySQL processes dates/times. IIRC, there is some property that can be set to fall back to the old (buggy) way of treating dates/times. This should be documented in the migration guide.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104um8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
NaturalIdLoadAccess: broken SQL if all parameters are null,HHH-14748,71254,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Wiebke Trumann,60fecf6eeb7aef0069773b10,Wiebke Trumann,60fecf6eeb7aef0069773b10,26/juil./2021 08:22 AM,26/juil./2021 08:22 AM,14/mars/2022 12:54 PM,,5.5.0,5.5.2,5.5.3,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,NaturalId,,,,,"If one creates a query using NaturalIdLoadAccess and all parameters equal to null:

{code:java}
  final NaturalIdLoadAccess<SimpleEntity> crit = session.byNaturalId(SimpleEntity.class);
        crit.using(""a"", null);
        crit.using(""b"", null);
       // Error now:
        crit.load();
{code}


... the generated SQL is like ....

{code:sql}
SELECT id, a, b FROM myEntity AND a is null AND b IS NULL
{code}

I found out this SQL is generated in NaturalIdEntityJoinWalker in about line 50",,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/juil./2021 08:22 AM;ug:6de12d46-fbdd-4a01-bcd8-16c4f3cba9ac;NaturalIdBrokenSql.zip;https://hibernate.atlassian.net/secure/attachment/49896/NaturalIdBrokenSql.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:6de12d46-fbdd-4a01-bcd8-16c4f3cba9ac(ug:6de12d46-fbdd-4a01-bcd8-16c4f3cba9ac),,,,,,,,,0|104um0:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,5.4.32,,,,,,,,,,,,,,,,,,,,,A faire,,
"Configure coordination through a separate, orthogonal set of configuration properties",HSEARCH-4268,71252,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/juil./2021 02:11 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,04/août/2021 23:40 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"As of [HSEARCH-4231] , we have (limited) support for coordination between threads/nodes, with more to come (in particular [HSEARCH-4140]).

However, configuration feels a bit awkward:

* Properties are nested under {{hibernate.search.automatic_indexing}}, which feels a bit unfortunate considering we might want mass indexing to take advantage of coordination as well one day (e.g. spread the load of reindexing the whole database across multiple nodes).
* It conflates the choice of enabling automatic indexing with the choice of the coordination strategy, which is unfortunate considering some people might want to disable automatic indexing while still performing manual indexing in a coordinated way (which would be totally fine with the current implementation).

An example:

{code:java}# Example 1: Coordination enabled
hibernate.search.automatic_indexing.strategy = outbox-polling
hibernate.search.automatic_indexing.processing.shards.static = true
hibernate.search.automatic_indexing.processing.shards.total_count = 3
hibernate.search.automatic_indexing.processing.shards.assigned = 0
## Optional
hibernate.search.automatic_indexing.processing.polling_interval = 0
hibernate.search.automatic_indexing.processing.batch_size = 0

# Example 2: Coordination enabled, dynamic sharding (not yet implemented)
hibernate.search.automatic_indexing.strategy = outbox-polling

# Example 3: Coordination enabled but processing disabled (on one particular node)
hibernate.search.automatic_indexing.strategy = outbox-polling
hibernate.search.automatic_indexing.processing.enabled = false

# Example 4: Coordination disabled (default in 6.1), in-session indexing (default in 6.1)
## Nothing to do

# Example 5: Coordination disabled (default in 6.1), outbox indexing
hibernate.search.automatic_indexing.strategy = outbox-polling
hibernate.search.automatic_indexing.processing.shards.static = true
hibernate.search.automatic_indexing.processing.shards.total_count = 1
hibernate.search.automatic_indexing.processing.shards.assigned = 0

# Example 6: Coordination disabled (default in 6.1), automatic indexing disabled
hibernate.search.automatic_indexing.strategy = none

# Example 7: Coordination enabled for manual indexing, automatic indexing disabled
## NOT POSSIBLE{code}

Let's try to improve the situation. Maybe something like this?

{code:java}# Example 1: Coordination enabled
hibernate.search.coordination.strategy = database-polling
hibernate.search.coordination.shards.static = true
hibernate.search.coordination.shards.total_count = 3
hibernate.search.coordination.shards.assigned = 0
## Optional
hibernate.search.coordination.processors.indexing.polling_interval = 0
hibernate.search.coordination.processors.indexing.batch_size = 0

# Example 2: Coordination enabled, dynamic sharding (not yet implemented)
hibernate.search.coordination.strategy = database-polling

# Example 3: Coordination enabled but processing disabled (on one particular node)
hibernate.search.coordination.strategy = database-polling
hibernate.search.coordination.processors.indexing.enabled = false

# Example 4: Coordination disabled (default in 6.1), in-session indexing (default in 6.1)
## Nothing to do

# Example 5: Coordination disabled, outbox indexing
hibernate.search.coordination.strategy = database-polling
hibernate.search.coordination.shards.static = true
hibernate.search.coordination.shards.total_count = 1
hibernate.search.coordination.shards.assigned = 0

# Example 6: Coordination disabled (default in 6.1), automatic indexing disabled
hibernate.search.automatic_indexing.enabled = false

# Example 7: Coordination enabled for manual indexing, automatic indexing disabled
hibernate.search.coordination.strategy = database-polling
hibernate.search.coordination.shards.static = true
hibernate.search.coordination.shards.total_count = 3
hibernate.search.coordination.shards.assigned = 0
hibernate.search.automatic_indexing.enabled = false
## OR (dynamic sharding, not yet implemented)
hibernate.search.coordination.strategy = database-polling
hibernate.search.automatic_indexing.enabled = false{code}

Note: {{shards.static}} and the other {{shards}} settings will become optional once we address [HSEARCH-4140] , since dynamic sharding will become the default.

The mention of an outbox is gone, but it's also not the most important thing. What's important is that we rely on the database for coordination, and we poll the database:

* for automatic indexing, we poll the outbox
* (not yet implemented, see [HSEARCH-4140]) for dynamic sharding, we poll a table that contains information about each application node in order to perform rebalancing when necessary.
* (in a future version of HSearch) for mass indexing, we poll a table used to send commands to other nodes.

Automatic indexing settings are clearly separated from coordination.

Since coordination now has its own section, it makes more sense to add more configuration properties that are related to this coordination strategy only, e.g. the schema to use for the various tables it creates, a naming strategy for these tables and their columns, some db-specific knobs, ...

When we end up introducing a Debezium-based strategy, we will simply add new coordination strategies. Those strategies will impact automatic indexing, but also potentially mass indexing, which will be able to send messages to other nodes through Kafka to trigger mass indexing there.

For example:

{code:java}hibernate.search.coordination.strategy = kafka-debezium-outbox # Still uses an event queue, but uses CDC to listen to that queue
hibernate.search.coordination.cluster.bootstrap_uris = https://kafka1.mycompany.com,https://kafka2.mycompany.com
hibernate.search.coordination.debezium.foo = bar{code}

{code:java}hibernate.search.coordination.strategy = kafka-debezium-cdc # Captures changes directly in entity tables
hibernate.search.coordination.cluster.bootstrap_uris = https://kafka1.mycompany.com,https://kafka2.mycompany.com
hibernate.search.coordination.debezium.foo = bar{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-04T23:39:59.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2623,0|1009cw:000000xdur642i,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
hibernate-jpamodelgen does not support jakarta persistence 3.0,HHH-14747,71248,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Thomas Scheffler,557058:8ecdae34-0e45-48ec-ac5c-d904b4fa1869,Thomas Scheffler,557058:8ecdae34-0e45-48ec-ac5c-d904b4fa1869,26/juil./2021 00:10 AM,26/juil./2021 03:10 AM,14/mars/2022 12:54 PM,26/juil./2021 00:48 AM,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-jpamodelgen,,,,0,,,,,,"After migrating from JPA 2.2 to Jakarta Persistence 3.0. Hibernates jpamodelgen does not work anymore. It still [only looks for annotation in the ""javax.persistence"" namespace|https://github.com/hibernate/hibernate-orm/blob/fb36fe25413b3701661472bc1c1ca602660b83ef/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/JPAMetaModelEntityProcessor.java#L46]:

I marked this a bug as Hibernate ORM 5.5 should support both JPA 2.2 and Jakarta Persistence 3.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),yagee(yagee),,,,,,,,0|104ukw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-26 07:48:14.736,,,,26/juil./2021 00:48 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;That’s because there is a new artifact called {{hibernate-jpamodelgen-jakarta}} as outlined in the blog post: [https://search.maven.org/artifact/org.hibernate/hibernate-jpamodelgen-jakarta/5.5.4.Final/jar|https://search.maven.org/artifact/org.hibernate/hibernate-jpamodelgen-jakarta/5.5.4.Final/jar|smart-link] ,"26/juil./2021 02:00 AM;557058:8ecdae34-0e45-48ec-ac5c-d904b4fa1869;I was looking here: [https://docs.jboss.org/hibernate/orm/5.5/topical/html_single/metamodelgen/MetamodelGenerator.html|https://docs.jboss.org/hibernate/orm/5.5/topical/html_single/metamodelgen/MetamodelGenerator.html|smart-link]  and here [https://docs.jboss.org/hibernate/orm/5.5/userguide/html_single/Hibernate_User_Guide.html#criteria-typedquery-entity|https://docs.jboss.org/hibernate/orm/5.5/userguide/html_single/Hibernate_User_Guide.html#criteria-typedquery-entity|smart-link] 

This information should make it into the official documentation.","26/juil./2021 03:10 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;For your information, we published this in the original announcement: [https://in.relation.to/2021/06/02/hibernate-orm-550-final-release/|https://in.relation.to/2021/06/02/hibernate-orm-550-final-release/|smart-link] 

The Jakarta stuff is all still experimental, but we would appreciate if you could provide a documentation update.",,,,,,,,,,,,,,Terminé,,
Encountered a duplicated sql alias [lo_unlink] during auto-discovery of a native-sql query,HHH-14746,71247,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Giacomo Boccardo,557058:24dc77a0-91bc-4351-bc50-2fdc84cc1b20,Giacomo Boccardo,557058:24dc77a0-91bc-4351-bc50-2fdc84cc1b20,26/juil./2021 00:07 AM,09/mars/2022 04:08 AM,14/mars/2022 12:54 PM,09/mars/2022 04:08 AM,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"The following native query


{code:sql}
<sql-query name=""foo"">
    select lo_unlink(cast(a as oid)), lo_unlink(cast(b as oid)) from table
</sql-query>
{code}

 written for PostgreSQL causes the following exception
{code:java}
Caused by: org.hibernate.loader.custom.NonUniqueDiscoveredSqlAliasException: Encountered a duplicated sql alias [lo_unlink] during auto-discovery of a native-sql query
	at org.hibernate.loader.custom.CustomLoader.validateAliases(CustomLoader.java:520)
	at org.hibernate.loader.custom.CustomLoader.autoDiscoverTypes(CustomLoader.java:497)
	at org.hibernate.loader.Loader.preprocessResultSet(Loader.java:2361)
	at org.hibernate.loader.Loader.getResultSet(Loader.java:2317)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2068)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2030)
	at org.hibernate.loader.Loader.doQuery(Loader.java:956)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:357)
	at org.hibernate.loader.Loader.doList(Loader.java:2861)
	at org.hibernate.loader.Loader.doList(Loader.java:2843)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2675)
	at org.hibernate.loader.Loader.list(Loader.java:2670)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2170)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1186)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:176)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1617)
{code}

It seems the function is considered as an alias. 

I can't see any mistake in the query and the only workaround is to break it into two different queries.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),gboccard(gboccard),,,,,,,,0|104uko:,,,,,,,,,,,,,,,,,,,,,,,,,,,,3.5.5,2022-03-09 12:08:24.608,,,,"09/mars/2022 04:08 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;The problem is that both select items receive the same ""alias"" in the result set which is invalid in this case. Change the query to {{select lo_unlink(cast(a as oid)) a, lo_unlink(cast(b as oid)) b from table}}",,,,,,,,,,,,,,,,Terminé,,
Add FunctionContributor contract,HHH-14745,71246,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,24/juil./2021 08:45 AM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,26/juil./2021 07:26 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-26T08:23:40.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104ukg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Refactor contextual information for SchemaManagementTool to be more easily extended by Hibernate Reactive,HHH-14744,71245,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,23/juil./2021 16:52 PM,30/août/2021 13:31 PM,14/mars/2022 12:54 PM,25/août/2021 07:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-14T05:24:32.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104uk8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix variable interpolation in Jenkinsfile,HSEARCH-4267,71241,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/juil./2021 03:39 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,23/juil./2021 05:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,5.8.2.Final,5.9.3.Final,6.0.7.Final,6.1.0.Alpha1,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-07-23T03:45:05.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104tnj:,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Conditional indexing with condition including an OR may lead to unnecessary entity loading,HSEARCH-4266,71239,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/juil./2021 01:26 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,13/sept./2021 03:44 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"The custom HQL is embedded in ID query like this:

{code}
		hql += "" where type("" + entityAlias + "") in (:"" + TYPES_PARAM_NAME + "") and "" + conditionalExpression.hql();
{code}

There are no parentheses around the custom HQL, so an expression containing an OR may bypass the type restriction.

For example:

* Class {{A}} is is annotated with {{@Indexed}}
* Class {{B}} extends {{A}} and is annotated with {{@Indexed(enabled = false)}}
* We trigger reindexing of {{A}} with a condition containing an {{OR}}, say {{mydate >= :foo OR myint < 2}}
* The ID loader for entity {{A}}, which theoretically should only care about {{A}}, will retrieve all IDs of:
** entities of type {{A}} that verify {{mydate >= :foo OR myint < 2}}
** entities of type {{B}} that verify {{myint < 2}}
* The entity loader will then discard entities of type {{B}} (they won't be indexed), because we have internal safeguards. But still, those entities of type {{B}} will be loaded, and that's a performance problem.

Let's add a reproducer for this problem if possible; we'll have to detect how entities IDs we loaded, maybe the ORM statistics will help.

Then let's fix the problem.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-13T03:43:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2652,0|1009cw:000000xdur3mhxzzzxezsq1i,,,,,,HSEARCH - 2021-15,HSEARCH - 2021-16,HSEARCH - 2021-17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix flaky tests with MS-SQL and Oracle,HSEARCH-4265,71238,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/juil./2021 23:43 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,27/juil./2021 08:21 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,See https://ci.hibernate.org/job/hibernate-search/job/main/81/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=7, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":7,""lastUpdated"":""2021-10-21T01:03:12.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":7,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2624,0|104tni:,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,2021-07-27 09:42:59.548,,,,27/juil./2021 02:42 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;Reopening the issue to fix the test,,,,,,,,,,,,,,,,Terminé,,
Skip overhead of cache.putFromLoad for non cached entities,HHH-14743,71237,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/juil./2021 07:22 AM,22/juil./2021 07:22 AM,14/mars/2022 12:54 PM,,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,performance,,,,,"Just noticed that in an application which has 2LC enabled, when a specific entity of type X is being loaded and X is not among the cached entities, we still trigger cache related processing.

In particular TwoPhaseLoad#initializeEntityFromEntityEntryLoadedState is reaching the following lines, which is unexpected to me:


{code:java}
Object version = Versioning.getVersion(hydratedState, persister);
            CacheEntry entry = persister.buildCacheEntry(entity, hydratedState, version, session);
            EntityDataAccess cache = persister.getCacheAccessStrategy();
            Object cacheKey = cache.generateCacheKey(id, persister, factory, session.getTenantIdentifier());
            if (session.getPersistenceContextInternal().wasInsertedDuringTransaction(persister, id)) {
                cache.update(session, cacheKey, persister.getCacheEntryStructure().structure(entry), version, version);
            } else {
                SessionEventListenerManager eventListenerManager = session.getEventListenerManager();

try {
                    eventListenerManager.cachePutStart();
                    boolean put = cache.putFromLoad(session, cacheKey, persister.getCacheEntryStructure().structure(entry), version, useMinimalPuts(session, entityEntry));
                    if (put && statistics.isStatisticsEnabled()) {
                        statistics.entityCachePut(StatsHelper.INSTANCE.getRootEntityRole(persister), cache.getRegion().getName());
                    }
                } finally {
                    eventListenerManager.cachePutEnd();
                }
{code}

None of this processing is useful in this case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104uj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Disable extra database builds (postgres, oracle) by default for builds of topic branches in forks",HSEARCH-4264,71236,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/juil./2021 07:17 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,22/juil./2021 07:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.10.Final,6.0.7.Final,6.1.0.Alpha1,,,,,,,build,,,,0,,,,,,"When developing, we don't need CI to always test extra databases; we can wait for the PR, or run the tests locally against a particular database.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-07-22T07:22:54.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104tng:,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Switch to dockerhub to retrieve Elasticsearch container images,HSEARCH-4263,71234,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/juil./2021 00:41 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/août/2021 00:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,build,,,0,,,,,,"As of late, we've seen more and more errors related to Elastic's container registry not being reachable, preventing us from retrieving a container image. Something like this:

{code}
[ERROR] Failed to execute goal io.fabric8:docker-maven-plugin:0.34.1:start (docker-start) on project hibernate-search-integrationtest-mapper-orm-realbackend: I/O Error: Unable to pull 'docker.elastic.co/elasticsearch/elasticsearch:7.10.0' from registry 'docker.elastic.co' : {""message"":""Head \""https://docker.elastic.co/v2/elasticsearch/elasticsearch/manifests/7.10.0\"": Get \""https://docker-auth.elastic.co/auth?scope=repository%3Aelasticsearch%2Felasticsearch%3Apull&service=token-service\"": dial tcp: lookup docker-auth.elastic.co: no such host""} (Internal Server Error: 500) -> [Help 1]
{code}

https://ci.hibernate.org/blue/organizations/jenkins/hibernate-search/detail/PR-2587/28/pipeline

They seem to mirror their container images to dockerhub, so let's switch to dockerhub? That will require removing the {{docker.elastic.co/}} prefix in the image name, and adding an authenticed pull of the image before we run builds on CI.

While we're at it, we could move the names/tags of container images to a separate properties file, sourced both from the POM and from the CI job, so that we only have one place where we keep that information up to date.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-08-09T00:08:21.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2633,0|1009cw:000000xdur66xi,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@NamedQuery not detected in MappedSuperclass,HHH-14742,71233,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Dwouglas Mhagnum,557058:b0d5a3fc-03e5-44c5-a43c-d062d18979e1,Dwouglas Mhagnum,557058:b0d5a3fc-03e5-44c5-a43c-d062d18979e1,20/juil./2021 14:13 PM,20/juil./2021 14:17 PM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"In a project I work on, we usually create classes to hold named queries. In order for hibernate to scan these named queries, we use the artifice of annotating the class with @MappedSuperclass, so it will find the @NamedQueries and @NamedQuery. On hibernate-core version 5.4.29 it works ok, but on 5.4.30 it doesn't.

I'm not sure, but this commit may have changed this behavior: [https://github.com/hibernate/hibernate-orm/commit/9f22dafe1784d5dc258d0ec587ff26e05d0e0f90|https://github.com/hibernate/hibernate-orm/commit/9f22dafe1784d5dc258d0ec587ff26e05d0e0f90]

obs: this mapped superclass not inherited by entities, we only use it to store the named query","JVM: openjdk-1.8.0.292.b10-4.fc34.x86_64
OS: Fedora 34
Database: Oracle",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,dwouglas(dwouglas),,,,,,,,,0|104uio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.3.21.Final,HSEARCH-4262,71232,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,20/juil./2021 07:16 AM,18/oct./2021 01:24 AM,14/mars/2022 12:54 PM,29/juil./2021 08:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,,,,,,,,,mapper-orm,,,,0,,,,,,[https://in.relation.to/2021/07/16/hibernate-orm-5321-final-out/|https://in.relation.to/2021/07/16/hibernate-orm-5321-final-out/],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T08:36:39.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2627,0|1009cw:000000xdur66y,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Schema validation fails for tinyint after upgrading mariadb-java-client,HHH-14741,71231,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,member sound,557058:2ed694c6-880e-4d4f-b88e-aaf58aa3e00e,member sound,557058:2ed694c6-880e-4d4f-b88e-aaf58aa3e00e,20/juil./2021 05:27 AM,20/juil./2021 05:27 AM,14/mars/2022 12:54 PM,,5.5.4,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Sidenote: I don't know exactly is this is an issue of hibernate or mariadb-java-client.

But the issue occurs inside *org.hibernate.tool.schema.spi.SchemaManagementException *as soon as mariadb-java-client is upgraded from 2.7.2 to *2.7.3*.

Precondition: create a mariadb or mysql table as follows:

{code}
CREATE TABLE example (
 id bigint NOT NULL AUTO_INCREMENT,
 foo tinyint DEFAULT NULL,
 PRIMARY KEY (id)
);
{code}
(the same table would be created by hibernate when using spring.jpa.hibernate.ddl-auto=create).

With entity class:
{code}
@Entity
public class Example {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	public long id;

 	@Column(columnDefinition = ""TINYINT"")
	public Integer foo;
}
{code}

Run the application attached. The application runs and terminates with error:

{code}
2021-07-20 13:54:19.107 ERROR 66260 --- [           main] j.LocalContainerEntityManagerFactoryBean : Failed to initialize JPA EntityManagerFactory: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [foo] in table [example]; found [bit (Types#TINYINT)], but expecting [tinyint (Types#INTEGER)]
2021-07-20 13:54:19.108  WARN 66260 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [foo] in table [example]; found [bit (Types#TINYINT)], but expecting [tinyint (Types#INTEGER)]
{code}

Now the interesting part: downgrade the mariadb version in `pom.xml` to:
<mariadb.version>2.7.2</mariadb.version>

Run the application again.
Result: the application runs and terminates without an error.

So all of a sudden, the `SchemaManagementException` thinks that the schema is invalid when using mariadb-java-client 2.7.3.

While I don't know if this rather an issue inside hibernate or mariadb, I also opened a similar issue for mariadb:
https://jira.mariadb.org/browse/CONJ-893 [^mariadb-test.zip] ",spring-boot-2.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/juil./2021 05:27 AM;membersound;mariadb-test.zip;https://hibernate.atlassian.net/secure/attachment/49885/mariadb-test.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,membersound(membersound),,,,,,,,,0|104uig:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
HHH-14740 Still need the nullcheck removed in HHH-14727,HHH-14740,71230,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,20/juil./2021 03:27 AM,30/juil./2021 06:12 AM,14/mars/2022 12:54 PM,20/juil./2021 06:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.5,,,,,,,,,hibernate-core,,,,0,,,,,,"My fix for HHH-14727 was wrong, need to revert it.
See https://hibernate.atlassian.net/browse/HHH-14727?focusedCommentId=108318",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-20T06:10:07.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ui8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.3,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix transient failures in org.hibernate.search.test.query.timeout.TimeoutTest,HSEARCH-4261,71229,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Impossible à reproduire,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/juil./2021 23:44 PM,22/juil./2021 08:01 AM,14/mars/2022 12:54 PM,22/juil./2021 08:01 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,tests,,,,0,,,,,,See https://ci.hibernate.org/job/hibernate-search/job/main/77/testReport/junit/org.hibernate.search.test.query.timeout/TimeoutTest(jdk-17-default)/Non_default_environments___jdk_17___testTimeout/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur66x,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/juil./2021 08:01 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Cannot reproduce the problem, even after hundreds of runs in a similar environment (JDK17).

The query is slow as hell, as designed. It always takes more than 600ms to execute, while the timeout is set to 10 microseconds. I don't see how it could *not* time out.",,,,,,,,,,,,,,,,Terminé,,
Implement ILike support in 6,HHH-14739,71228,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,19/juil./2021 10:28 AM,19/juil./2021 10:28 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=7, dataType=build, failedBuildCount=0, successfulBuildCount=7, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-05T14:35:18.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":7,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":7,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":7,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,jschatte(jschatte),,,,,,,,,0|104ui0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Update tests for hibernate-spatial to junit5 ,HHH-14738,71227,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,19/juil./2021 08:38 AM,30/oct./2021 05:05 AM,14/mars/2022 12:54 PM,30/oct./2021 05:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,Take this opportunity to overhaul the test strategy and simplify the test code,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=7, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":7,""lastUpdated"":""2021-09-21T00:57:58.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":7,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104uhs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"SQL Server Dialect is missing keywords like ""option""",HHH-14737,71226,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Stephan Wienczny,557058:02fd994a-d82d-45ba-9ba8-27d4955d9f18,Stephan Wienczny,557058:02fd994a-d82d-45ba-9ba8-27d4955d9f18,19/juil./2021 03:48 AM,19/juil./2021 03:48 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We found that the SQLServerDialect is missing keywords like ""OPTION"":

{code}
c.m.s.jdbc.internals.SQLServerStatement  : SQLServerPreparedStatement:284: calling sp_executesql: SQL:select serviceopt0_.shipment_id as shipment1_23_0_, serviceopt0_.option as option2_23_0_ from shipment_service_option serviceopt0_ where serviceopt0_.shipment_id=@P0
c.m.s.jdbc.internals.SQLServerException  : *** SQLException: com.microsoft.sqlserver.jdbc.SQLServerException: Falsche Syntax in der N䨥 des option-Schlüsselworts. Msg 156, Level 15, State 1, Falsche Syntax in der N䨥 des option-Schlüsselworts.
{code}

The ""OPTION""-keyword was reserved in SQL-92 but removed before SQL-2003. SQL-2003 is used in org.hibernate.engine.jdbc.env.spi.AnsiSqlKeywords. The base class of all dialects org.hibernate.dialect.Dialect uses AnsiSqlKeywords and its SQL-2003 keywords. The SQLServerDialect does not register the ""OPTION"" keyword (and maybe others removed between  SQL92 and SQL-2003?!?)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:18c80bd1-25b3-42d4-8dfd-8d2f9977dd3f(ug:18c80bd1-25b3-42d4-8dfd-8d2f9977dd3f),,,,,,,,,0|104uhk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
SQL Server Dialect does not support native rowversion for @Version fields ,HHH-14736,71225,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,IT Support,557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94,IT Support,557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94,IT Support,557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94,17/juil./2021 10:08 AM,07/août/2021 21:20 PM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,dialect,,,,,"There are two fundamental issues with using a SQL server Timestamp/rowversion data type for JPA.

# it is naturally a byte\[8] data type.
# newly constructed objects and updated objects have the value set by the DB and cannot be set by the JPA provider.

Both of these issues are mitigatable.

# is solvable by either: 
## under the hood converting to an acceptable type (e.g. Long) 
## ignoring the JPA specification.
# if the Dialect was aware of this it could use the returning clause

note: I thought there was a ticket for this already, but I could not find it with JQL: {{project = HHH and ( text~sqlserver or text~SQLServerDialect or text~SQLServer2012Dialect or text ~ SQLServer2005Dialect or text ~ SQLServer2008Dialect) and (text ~ Optimistic or text ~ ""@version"")}}",,,,,,,,,,,,,,,,,,,,,,,,HHH-13999,,,,,,,,,,,,{},,,,,,,,,,true,0.0,support(support),,,,,,,,,0|104uhc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18/juil./2021 09:48 AM;557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94;The relates to links are issues that I hit while working this ticket - they are neither blocked or blocking,"19/juil./2021 23:09 PM;557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94;The test cases are mostly complete, the meta model is still needing some love.

[https://github.com/pdinc-oss/hibernate-orm/tree/HHH-14736|https://github.com/pdinc-oss/hibernate-orm/tree/HHH-14736|smart-link] ","07/août/2021 21:19 PM;557058:7c7fc415-3805-43c8-9dfa-7cbe1117db94;Please provide feedback on [https://github.com/pdinc-oss/hibernate-orm/tree/HHH-14736|https://github.com/pdinc-oss/hibernate-orm/tree/HHH-14736|smart-link] . NOTE: it is not squashed at this time, {{git diff ce514fe69e}} will give a better view",,,,,,,,,,,,,,A faire,,
EntityManager.detach() does not clear StatefulPersistenceContext.noLazyCollections,HHH-14735,71224,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Weimin Yu,60f206e2413fc70069179773,Weimin Yu,60f206e2413fc70069179773,16/juil./2021 15:33 PM,19/juil./2021 15:39 PM,14/mars/2022 12:54 PM,,5.4.23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We have an entity type that has two child collections with `Fetch.Eager` and `Cascade.ALL` annotations. When detaching the parent entity by calling EntityManager.detach(), we noticed that the child collections are retained in the `StatefulPersistenceContext.nonLazyCollections` field. 

We need to load the two children eagerly, and the current behavior of detach() causes OutOfMemory error when loading used in large queries.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:3403832f-9c27-452c-8f97-172915c495b1(ug:3403832f-9c27-452c-8f97-172915c495b1),,,,,,,,,0|104uh4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/juil./2021 15:39 PM;60f206e2413fc70069179773;We’ve only encountered this problem when querying with CriteriaQuery.

`

CriteriaQuery<T> query = em.getCriteriaBuilder().createQuery(MyEntity.class);
Root<T> root = query.from(MyEntity.class);
query = query.select(root);

…

`",,,,,,,,,,,,,,,,A faire,,
Display Java version during builds,HSEARCH-4260,71223,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juil./2021 07:31 AM,20/juil./2021 00:12 AM,14/mars/2022 12:54 PM,19/juil./2021 10:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,6.0.6.Final,6.1.0.Alpha1,,,,,,build,,,,0,,,,,,"Mainly as a way to (manually) check that builds/tests were executed with the expected version, which is important when checking compatibility with newer JDKs.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, build={count=2, dataType=build, failedBuildCount=0, successfulBuildCount=2, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2021-07-19T10:35:38.000-0700"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}},""build"":{""overall"":{""count"":2,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":2,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":2,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2615,0|1009cw:000000xdur66v,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
No good reason tu use TypeCache(s) with WithInlineExpunction in ByteBuddy proxy generation,HHH-14734,71222,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/juil./2021 06:47 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 08:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,"Since we do now have explicit hooks to clear the caches, the overhead of using an inline-expunction cache in ByteBuddy is unnecessary.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-25T10:23:24.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ugw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Not useful to clear the bycodeprovider caches on  sessionFactoryClosing,HHH-14733,71221,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/juil./2021 06:46 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 08:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-25T03:19:56.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ugo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
ProxyDefinitionHelpers are immutable and can be declared  static,HHH-14732,71220,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/juil./2021 06:45 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 08:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-25T10:19:43.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ugg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Simplify SPI ProxyFactoryFactory#buildBasicProxyFactory to accept a single class or interface only,HHH-14731,71219,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/juil./2021 06:43 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 08:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,,,,,0,,,,,,"The current method {{BasicProxyFactory buildBasicProxyFactory(Class superClass, Class[] interfaces);}} should be deprecated as it seems to suggest we can pass both a class and multiple interfaces, which makes maintaining the implementation rather complex.

In practice it turns out we only ever need this for either a single class, OR a SINGLE interface. Let's make this clear in the contract so that we can focus on these use cases.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-25T06:27:32.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ug8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Use the build's Maven settings also when retrieving the Karaf distribution in OSGi tests,HSEARCH-4259,71218,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juil./2021 05:22 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,16/juil./2021 06:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,5.5.9.Final,5.6.7.Final,5.7.4.Final,5.8.3.Final,5.9.4.Final,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=20, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":20,""lastUpdated"":""2021-07-19T06:48:06.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":20,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur66r,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Backport Karaf test fixes related to Maven repos to older branches,HSEARCH-4258,71217,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juil./2021 02:25 AM,16/juil./2021 06:35 AM,14/mars/2022 12:54 PM,16/juil./2021 06:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.9.Final,5.6.7.Final,5.7.4.Final,5.8.3.Final,5.9.4.Final,,,,,tests,,,,0,,,,,,"In particular [HSEARCH-3805] and [https://hibernate.atlassian.net/browse/HSEARCH-3396|https://hibernate.atlassian.net/browse/HSEARCH-3396|smart-link].

Just so we can still build older branches in recent, clean environments.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=21, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":21,""lastUpdated"":""2020-01-17T03:05:53.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":21,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur66i,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to JUnit 4.13.2,HSEARCH-4257,71216,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juil./2021 00:56 AM,20/juil./2021 00:12 AM,14/mars/2022 12:54 PM,16/juil./2021 06:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,5.5.9.Final,5.6.7.Final,5.7.4.Final,5.8.3.Final,5.9.4.Final,6.0.6.Final,6.1.0.Alpha1,tests,,,,0,,,,,,"For newer branches, simply to be on the latest version.
For older branches, because that's needed for HSEARCH-4256.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=9, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":9,""lastUpdated"":""2021-07-16T00:46:46.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":9,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur66,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Arquillian 1.5.0 in older branches,HSEARCH-4256,71215,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juil./2021 00:55 AM,16/juil./2021 06:35 AM,14/mars/2022 12:54 PM,16/juil./2021 06:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.9.Final,5.6.7.Final,5.7.4.Final,5.8.3.Final,5.9.4.Final,,,,,tests,,,,0,,,,,,"Just to make sure we can keep building these branches, even in a new, clean infrastructure.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-07-16T00:42:03.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur65,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Failure during lazy loading of bytecode-enhancement proxy triggered by the loading of a collection with eager references to that proxy,HHH-14730,71214,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,15/juil./2021 23:59 PM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 01:10 AM,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,"Everything is in the title... it's quite a complicated scenario, so I think it's best that I just submit a PR with the reproducer, and a tentative fix. Will do soon.

Note the bug only happens when using the PADDED batch-fetch-style, which is the default in Quarkus.

Downstream report: [https://github.com/quarkusio/quarkus/issues/12923|https://github.com/quarkusio/quarkus/issues/12923]

For future reference, the stack trace looks like this if the entities are not serializable:

{code:java}java.lang.ClassCastException: class org.hibernate.orm.test.mapping.lazytoone.collectioninitializer.Company cannot be cast to class java.io.Serializable (org.hibernate.orm.test.mapping.lazytoone.collectioninitializer.Company is in unnamed module of loader org.hibernate.testing.bytecode.enhancement.BytecodeEnhancerRunner$EnhancingClassLoader @556d0826; java.io.Serializable is in module java.base of loader 'bootstrap')

	at org.hibernate.type.EntityType.resolve(EntityType.java:464)
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:240)
	at org.hibernate.engine.internal.TwoPhaseLoad$EntityResolver.lambda$static$0(TwoPhaseLoad.java:576)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntityEntryLoadedState(TwoPhaseLoad.java:221)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:155)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:126)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1200)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1008)
	at org.hibernate.loader.Loader.doQuery(Loader.java:966)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:356)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:326)
	at org.hibernate.loader.Loader.loadCollection(Loader.java:2568)
	at org.hibernate.loader.collection.PaddedBatchingCollectionInitializerBuilder$PaddedBatchingCollectionInitializer.initialize(PaddedBatchingCollectionInitializerBuilder.java:78)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2192)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:595)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:178)
	at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:163)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:162)
	at org.hibernate.collection.internal.PersistentBag.size(PersistentBag.java:371)
{code}

Or like this if the entities are serializable (the code goes a little further before failing):

{code:java}org.hibernate.TypeMismatchException: Provided id of the wrong type for class org.hibernate.orm.test.mapping.lazytoone.collectioninitializer.Company. Expected: class java.lang.Long, got class org.hibernate.orm.test.mapping.lazytoone.collectioninitializer.Company

	at org.hibernate.event.internal.DefaultLoadEventListener.checkIdClass(DefaultLoadEventListener.java:155)
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:71)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118)
	at org.hibernate.internal.SessionImpl.fireLoadNoChecks(SessionImpl.java:1215)
	at org.hibernate.internal.SessionImpl.internalLoad(SessionImpl.java:1080)
	at org.hibernate.type.EntityType.resolveIdentifier(EntityType.java:697)
	at org.hibernate.type.EntityType.resolve(EntityType.java:464)
	at org.hibernate.type.ManyToOneType.resolve(ManyToOneType.java:240)
	at org.hibernate.engine.internal.TwoPhaseLoad$EntityResolver.lambda$static$0(TwoPhaseLoad.java:576)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntityEntryLoadedState(TwoPhaseLoad.java:221)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:155)
	at org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:126)
	at org.hibernate.loader.Loader.initializeEntitiesAndCollections(Loader.java:1200)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:1008)
	at org.hibernate.loader.Loader.doQuery(Loader.java:966)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:356)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:326)
	at org.hibernate.loader.Loader.loadCollection(Loader.java:2568)
	at org.hibernate.loader.collection.PaddedBatchingCollectionInitializerBuilder$PaddedBatchingCollectionInitializer.initialize(PaddedBatchingCollectionInitializerBuilder.java:78)
	at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:710)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:76)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2192)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:595)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:591)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:178)
	at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:163)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:162)
	at org.hibernate.collection.internal.PersistentBag.size(PersistentBag.java:371)
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-07-16T04:22:37.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4101,0|104ug0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Metamodel generator awfully slow for java source target 11 and blazingly fast for source 1.8,HHH-14729,71213,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Leszek Gawron,557058:e822c455-ab9d-4756-be26-cccdfdd58d3c,Leszek Gawron,557058:e822c455-ab9d-4756-be26-cccdfdd58d3c,15/juil./2021 08:05 AM,18/juil./2021 23:48 PM,14/mars/2022 12:54 PM,18/juil./2021 23:48 PM,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,metamodel,,,,0,,,,,,"I have a project working on 1.8. About time to migrate to java 11+.
When compiling the project utilizing jpamodelgen with java 1.8 - everything is fine.
When swithing to JDK 11 and keeping 

{noformat}java {
sourceCompatibility = JavaVersion.VERSION_1_8
this.targetCompatibility = JavaVersion.VERSION_1_8
withSourcesJar()
}{noformat}

still everything is fine.

As soon as you do:

{noformat}java {
    sourceCompatibility = JavaVersion.VERSION_11
    this.targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
}{noformat}

he build time almost quadruples only due to ""Hibernate JPA 2 Static-Metamodel Generator 5.4.32.Final"" taking all the extra time. 

The build goes from 1min 30s to 5min 30s. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:0b3218b7-fd36-4ef8-8687-b6075132a721(ug:0b3218b7-fd36-4ef8-8687-b6075132a721),,,,,,,,0|104ufs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-19 06:47:47.447,,,,"18/juil./2021 23:47 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Maybe this is a problem of the Java compiler. If the only change is the target version, this is most probably not a problem of Hibernate, so you should open an issue against the OpenJDK bug system: [https://bugs.openjdk.java.net/|https://bugs.openjdk.java.net/|smart-link] ",,,,,,,,,,,,,,,,Terminé,,
Include CamelCaseToUnderscoresNamingStrategy from Spring Boot,HHH-14728,71212,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,15/juil./2021 07:41 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,15/juil./2021 13:56 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,,,,,0,,,,,,"Spring Boot includes a default naming strategy named ""SpringPhysicalNamingStrategy"", which seems rather popular and I've heard people are copying it over to non-spring projects.

We could do everyone a favour and include this into ORM, however I suggest renaming it as CamelCaseToUnderscoresNamingStrategy",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-15T13:56:35.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ufk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Minor code cleanup in StandardSQLExceptionConverter,HHH-14727,71211,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,15/juil./2021 07:24 AM,20/juil./2021 03:30 AM,14/mars/2022 12:54 PM,16/juil./2021 03:16 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,,,,,0,,,,,,"There's some pointless checks for null. Really not important, but I like to delete pointless code.",,,,,,,,,,,,,HHH-14740,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-07-20T06:10:07.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:0c84e1b9-b078-4a5c-8a35-ce82e1407208(ug:0c84e1b9-b078-4a5c-8a35-ce82e1407208),sanne(sanne),,,,,,,,0|104ufc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-20 05:48:52.304,,,,"19/juil./2021 22:48 PM;557058:bb20bd26-8970-4e1b-b85b-e27b2952f38d;I am afraid this null check was actually required. Take a look here:

[https://github.com/hibernate/hibernate-orm/blob/4454f170fac9d94adbcf71932c1a964fb0cb7046/hibernate-core/src/main/java/org/hibernate/engine/jdbc/env/internal/JdbcEnvironmentImpl.java#L326|https://github.com/hibernate/hibernate-orm/blob/4454f170fac9d94adbcf71932c1a964fb0cb7046/hibernate-core/src/main/java/org/hibernate/engine/jdbc/env/internal/JdbcEnvironmentImpl.java#L326] 

When passed {{dialect}} is {{org.hibernate.dialect.HSQLDialect}}, which does NOT override {{buildSQLExceptionConversionDelegate}} method from the superclass, then actual {{null}} will be passed to {{StandardSQLExceptionConverter}}. This will result in NPE later on:

{code:java}	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:35)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113){code}",20/juil./2021 03:28 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Many thanks for letting me know [~accountid:557058:bb20bd26-8970-4e1b-b85b-e27b2952f38d] \! Created HHH-14740,,,,,,,,,,,,,,,Terminé,,
Criteria query renders a parameter instead of a literal in GROUP BY clause,HHH-14726,71208,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Out of Date,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Nikolay Zinchenko,557058:4f83302b-5132-4e61-b4e2-ccb5d1c03c36,Nikolay Zinchenko,557058:4f83302b-5132-4e61-b4e2-ccb5d1c03c36,14/juil./2021 08:43 AM,18/juil./2021 23:51 PM,14/mars/2022 12:54 PM,18/juil./2021 23:51 PM,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Our stack is Spring Boot, Hibernate and Oracle SQL server.

There is a table like this in the database (non-relevant parts are ommited):

{code:sql}CREATE TABLE USER_ACTION_LOG (
	""ID"" NUMBER(19,0) NOT NULL PRIMARY KEY, 
	""EVENT_TIME"" TIMESTAMP (6), 
	""CLIENT_USER"" NUMBER(19,0)){code}



I build a query with criteria builder:

{code:java}    CriteriaBuilder builder = entityManager.getCriteriaBuilder();
    CriteriaQuery<UsersStatisticsDto> query = builder.createQuery(UsersStatisticsDto.class);
    Root<UserActionLogEntity> root = query.from(UserActionLogEntity.class);
    
    Expression<LocalDateTime> truncatedPeriod = builder.function(""trunc"", LocalDateTime.class, root.get(UserActionLogEntity_.eventTime), builder.literal(""iw""));
    
    query.select(builder.construct(UsersStatisticsDto.class, 
        truncatedPeriod,
        builder.count(root.get(UserActionLogEntity_.clientUser))
    ));
    
    query.groupBy(truncatedPeriod);
    query.orderBy(builder.asc(truncatedPeriod));
     
    TypedQuery<UsersStatisticsDto> typedQuery = entityManager.createQuery(query);
{code}

expecting to get such SQL as a result

{code:sql} select
    trunc(useraction0_.event_time, 'iw') as col_0_0_,
    count(useraction0_.client_user) as col_1_0
from 
    user_action_log useraction0_
group by
    trunc(useraction0_.event_time, 'iw')
order by
    trunc(useraction0_.event_time, 'iw') asc{code}

 Both SELECT and GROUP BY clauses appear as expected. The ORDER BY clause looks like

{code:sql}order by 
    trunc(useraction0_.event_time, ?) asc{code}

E.g. a parameter is rendered into the SQL instead of a literal. As a result, Oracle is unable to execute the query, throwing ""ORA-00979: not a GROUP BY expression"" error.

I believe that behavior of the ORDER BY renderer is incorrect. We cannot replace literal with parameter because they have different semantics. And this case clearly demonstrates the difference.

I haven't checked alpha versions of Hibernate, but for the stable ones the issue is reproducible for versions up to 5.5.3.Final.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:001fd677-2363-4d39-a318-fef4f343be6d(ug:001fd677-2363-4d39-a318-fef4f343be6d),,,,,,,,0|104ueo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-19 06:51:33.402,,,,"18/juil./2021 23:51 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;You can set the {{hibernate.criteria.literal_handling_mode}} setting to {{INLINE}} as per [https://docs.jboss.org/hibernate/orm/5.5/userguide/html_single/Hibernate_User_Guide.html#configurations-query|https://docs.jboss.org/hibernate/orm/5.5/userguide/html_single/Hibernate_User_Guide.html#configurations-query|smart-link] 

In Hibernate 6 this is fixed, but I don’t think we can fix this for 5.5",,,,,,,,,,,,,,,,Terminé,,
Using a InputStream with BlobProxy and Envers results in  java.sql.SQLException: could not reset reader,HHH-14725,71207,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Jens Pelzetter,5c630e5f458cfb570cce4abc,Jens Pelzetter,5c630e5f458cfb570cce4abc,12/juil./2021 11:00 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,hibernate-core,hibernate-envers,,,0,,,,,,"With `import org.hibernate.engine.jdbc.BlobProxy` it is possible to use an `InputStream` to store binary data in an entity. But if such an entity is marked as audited, and the `Blob` field is audited, this results in an exception (only final parts of the stack trace): 

```
Caused by: org.hibernate.HibernateException: Unable to access blob stream
        at org.hibernate.type.descriptor.java.BlobTypeDescriptor.unwrap(BlobTypeDescriptor.java:138)
        at org.hibernate.type.descriptor.java.BlobTypeDescriptor.unwrap(BlobTypeDescriptor.java:33)
        at org.hibernate.type.descriptor.sql.BlobTypeDescriptor$5$1.doBind(BlobTypeDescriptor.java:151)
        at org.hibernate.type.descriptor.sql.BlobTypeDescriptor$2$1.doBind(BlobTypeDescriptor.java:86)
        at org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:73)
        at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:276)
        at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:271)
        at org.hibernate.type.AbstractSingleColumnStandardBasicType.nullSafeSet(AbstractSingleColumnStandardBasicType.java:39)
        at org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:3071)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3370)
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3906)
        at org.hibernate.action.internal.EntityInsertAction.execute(EntityInsertAction.java:107)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
        at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
        at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
        at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
        at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
        at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
        at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1391)
        ... 46 more
Caused by: java.sql.SQLException: could not reset reader
        at org.hibernate.engine.jdbc.BlobProxy.resetIfNeeded(BlobProxy.java:74)
        at org.hibernate.engine.jdbc.BlobProxy.getUnderlyingStream(BlobProxy.java:63)
        at org.hibernate.type.descriptor.java.BlobTypeDescriptor.unwrap(BlobTypeDescriptor.java:113)
        ... 65 more
```

I created a test case here: https://github.com/jpdigital/hibernate-testcase-blob-envers-inputstream/tree/main/orm/hibernate-orm-5

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-20T01:27:10.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),jens.pelzetter(jens.pelzetter),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4496,0|104ueg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-19 04:24:40.317,,,,"18/déc./2021 20:24 PM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;So the problem here is that the {{BlobProxy}} doesn’t allow a reset unless you’ve explicitly specified a mark on the stream, see line #3 below:

{noformat}final InputStream stream = new BufferedInputStream( Files.newInputStream( path ) );
assertThat( stream.markSupported(), is( true ) );
stream.mark( (int) Files.size( path ) + 1 ); // this is key{noformat}

In my opinion, this is technically a bug in the {{BlobProxy}} implementation where it should automatically register the mark against the stream if mark is supported so that the reset works as expected.","19/déc./2021 01:27 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;So an unfortunate problem with the PostgreSQL driver is that it automatically closes the underlying stream associated with the {{BlobProxy}} once the value has been read by the driver.  This means that when Envers goes to read the value during the insertion to the audit table; a {{NullPointerException}} will be thrown since the stream has been closed.  It would also appear that Sybase drivers behave in the same way.

So even if we were to adjust the behavior of {{BlobProxy}} to automatically create the mark position so that the stream could be reset without external help; the behavior would still not be portable across all dialects sadly.",19/déc./2021 01:43 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;So rather than passing an {{InputStream}} if you pass the raw {{byte[]}} the underlying stream doesn’t get closed prematurely and allows the {{BlobProxy}} to work with PostgreSQL.  Going to adjust the test case to use this and see whether that works across all dialects.,"19/déc./2021 01:50 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;In fact, using the raw {{byte[]}} even without any changes to {{BlobProxy}} will work as expected.  It’s going to be problematic only when passing the {{InputStream}} which is not recommended again due to the inconsistent behaviors across dialects.",,,,,,,,,,,,,A faire,,
Metamodel generates invalid model classes for converters and user types,HHH-14724,71206,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Thomas Heigl,557058:097cbc2d-8439-4595-a685-27d2d47a9418,Thomas Heigl,557058:097cbc2d-8439-4595-a685-27d2d47a9418,09/juil./2021 10:31 AM,30/juil./2021 06:12 AM,14/mars/2022 12:54 PM,29/juil./2021 04:00 AM,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.5,,,,,,,,,hibernate-jpamodelgen,,,,0,,,,,,"My project does not compile after upgrading from 5.4.32 to 5.5.3. 

For entities with @Convert or @Type annotations *and* a validator annotation, invalid imports are generated for the model class:

{code:java}
import @javax.validation.constraints.NotNull java.util.List;
{code}

This is a minimal example to reproduce the issue:

{code:java}
@Entity
public class MyEntity {
	@NotNull
	@Convert(converter = StringListConverter.class)
	private List<String> userAgents = new ArrayList<>();
}
{code}

{code:java}
@Converter
public class StringListConverter implements AttributeConverter<List<String>, String> {

	private static final String VALUE_SEPARATOR = "","";

	@Override
	public String convertToDatabaseColumn(List<String> attribute) {
		if (attribute == null || attribute.isEmpty()) {
			return null;
		}
		return String.join(VALUE_SEPARATOR, attribute);
	}

	@Override
	public List<String> convertToEntityAttribute(String dbData) {
		if (dbData == null || dbData.isEmpty()) {
			return null;
		}
		return Arrays.stream(dbData.split(VALUE_SEPARATOR)).collect(Collectors.toList());
	}
}
{code}

Is there a test-case example for the metamodel generator? If so, I can provide a runnable reproducer as well.
",Java 11,,,,,,,,,,,,,,,,,,,,,,,,,,,,17/juil./2021 03:13 AM;thomasheigl;image-20210717-101301.png;https://hibernate.atlassian.net/secure/attachment/49884/image-20210717-101301.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T03:59:44.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,christian.beikov(christian.beikov),thomasheigl(thomasheigl),,,,,,,,0|104ue8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,2021-07-19 10:52:06.298,,,,11/juil./2021 03:04 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;Test-case PR: [https://github.com/hibernate/hibernate-orm/pull/4096|https://github.com/hibernate/hibernate-orm/pull/4096|smart-link] ,"17/juil./2021 02:46 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;Does anyone have an idea why the validator annotations are included in the import statements? If someone can point me in the right direction, I can try to fix this.",17/juil./2021 02:50 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;The only related change to the model generator seems to be in [https://github.com/hibernate/hibernate-orm/pull/3254|https://github.com/hibernate/hibernate-orm/pull/3254|smart-link] ,"17/juil./2021 03:13 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;I can confirm that this is caused by [https://hibernate.atlassian.net/browse/HHH-12338|https://hibernate.atlassian.net/browse/HHH-12338|smart-link]

The declared type is inferred incorrectly:

!image-20210717-101301.png|width=1047,height=106!","19/juil./2021 03:52 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Great, do you think you can provide a PR that fixes this?","19/juil./2021 06:54 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;I debugged it for about an hour yesterday, but I didn’t find the correct place or helper method for removing the annotation metadata from the type string. Maybe Vlad Mihalcea has an idea how to fix this?","22/juil./2021 02:42 AM;557058:097cbc2d-8439-4595-a685-27d2d47a9418;I pushed a tentative fix to my original PR. It works, but it isn’t perfect, because it relies on string manipulation to strip annotation metadata from the type string.

Could someone please approve the test workflow for my PR on Github? ",,,,,,,,,,Terminé,,
Hibernate query.getResultList takes 10 x times than the actual execution of query in the DB,HHH-14723,71205,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Aucune correction envisagée,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,elan thiraiyan,60e85efa5cdb680071f630f7,elan thiraiyan,60e85efa5cdb680071f630f7,09/juil./2021 08:19 AM,18/juil./2021 23:57 PM,14/mars/2022 12:54 PM,18/juil./2021 23:57 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,Hibernate,joins,JPA,query,,"Description:

I have a table and is without any joins or dependencies, while fetching the records using JPA takes more time using query.getResultList(). 

@Entity
@Table(name = ""table_A"")
public class A  {

@Id
@Column
....
}

We are using spring-data-jpa:2.3.7 and the below method to fetch the records:

createQuery(predicate).select(path).fetch();

What I have tried till now:

* Ran jprofiler and confirmed that org.hibernate.query.Query.getResultList takes 45% of the time to fetch even a single record.
* Enabled hibernate traces and also checked the bind parameters to see if the mapping is correct.
* Ran the generated hibernate query from log file against database and confirmed that the query executes in shorter time. Note: the generated query is straightforward and doesn't have any joins.
* Tried disabling cache, cleared entity manager explicitly also tried setting fetchtype to commit.
* But, when I tried using jdbc template with direct query in the code instead of query.getResultList() way, I see the execution time improved a lot and the performance is very much similar to direct execution of query in db. The method which was taking 45% of time earlier to get the results was now taking lesser than 10% of time. 


We have  around 20k records which  needs to be fetched using query.getResultList  and  as we proceed temporarily with spring jdbc template, we are still looking for the reason behind the slowness in the performance of query.getresultList.  

Could you please help to fix the slowness in the hibernate query.getResultList, also please let me know if there are any other approaches other than the one I have mentioned above which I can try to improve the performance.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:08bbea5d-aa47-42ac-aea9-7cf986652558(ug:08bbea5d-aa47-42ac-aea9-7cf986652558),,,,,,,,0|104ue0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-19 06:57:31.719,,,,"18/juil./2021 23:57 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;If you want support for your specific problem, you should ask e.g. Red Hat for consulting or some other freelancer that analyzes the issue for you.

It's generally impossible to help you with performance related issues without seeing your DDL structure, knowing which indexes you have, data or the statistics of the database. If you have a specific problem with a Hibernate code section that leads to the performance problem, you can open an issue and we can try to fix that.",,,,,,,,,,,,,,,,Terminé,,
InformationExtractorJdbcDatabaseMetaDataImpl#getCurrentSchema() method returns currentCatalog if schema == null,HHH-14722,71204,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,09/juil./2021 05:46 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,18/juil./2021 13:06 PM,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-18T13:05:57.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104uds:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,Undecided,,,,,,,,,,,,,,,,,,Terminé,,
ResultStream prematurely closes connection unless in a transaction,HHH-14721,71202,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Daniel Svensson,5dee0f40d3b8550edca74d7c,Daniel Svensson,5dee0f40d3b8550edca74d7c,09/juil./2021 02:41 AM,09/juil./2021 03:12 AM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The following code will break with:

{code:java}08:53:22.461 WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 0, SQLState: 55000
08:53:22.462 ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions This ResultSet is closed.{code}

if executed without wrapping the entity manager within a transaction:

{code:java}emf.withEntityManager { em ->
	em.beginEntityTransaction { // need transaction to avoid closing the result set after one forEach iteration
		em.createQuery(""SELECT ...."", Foo::class.java)
			.setHint(QueryHints.HINT_FETCH_SIZE, 200)
			.resultStream
			.forEach { foo ->
				.....
			}
	}
}{code}

All versions between 5.4.11 and 5.5.2 works.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:180976d6-1174-49d9-b925-7de9401d1739(ug:180976d6-1174-49d9-b925-7de9401d1739),,,,,,,,,0|104udc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,,,,,,,,,A faire,,
Aliases generated for mixed-case column names that end in a number are not all lower-case,HHH-14720,71201,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,08/juil./2021 14:45 PM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,15/juil./2021 13:48 PM,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,"Aliases generated for mixed-case column names ending in a number (e.g., aColumn1) are not all lower-case.

This is needed to workaround a PostgreSQL Vert.x issue that requires lower-case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-15T13:48:24.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104ud4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Hibernate has a dependency on apache-derby:10.11.1.1 that is vulnerable to CVE-2015-1832 with a CVSS of 9.1 and CVE-2018-1313 with a CVSS of 5.3,HHH-14719,71200,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,08/juil./2021 14:12 PM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,08/juil./2021 17:30 PM,5.0.12,5.1.17,5.2.18,5.3.20,5.4.32,5.5.3,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,6.0.0.Alpha9,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-08T17:29:48.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sebastian(sebastian),steve(steve),,,,,,,,0|104ucw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-09 00:28:12.35,,,,"08/juil./2021 17:28 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;To be clear… Hibernate has a dependency on Derby *for testing*.  But still, worthwhile to upgrade",,,,,,,,,,,,,,,,Terminé,,
Drop deprecated generator implementations,HHH-14718,71199,70855,Sous-tâche,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/juil./2021 12:39 PM,09/déc./2021 14:24 PM,14/mars/2022 12:54 PM,09/déc./2021 14:24 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta3,,,,,,,,,,,,,0,,,,,,"* `org.hibernate.id.MultipleHiLoPerTableGenerator`
* `org.hibernate.id.SequenceGenerator`
* `org.hibernate.id.SequenceHiLoGenerator`
* `org.hibernate.id.SequenceIdentityGenerator`",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=9, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":9,""lastUpdated"":""2021-12-09T05:45:44.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":9,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104uco:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,21/juil./2021 19:17 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;This work is mostly done on my topic branch - [https://github.com/sebersole/hibernate-orm/tree/topic/6-id-gen|https://github.com/sebersole/hibernate-orm/tree/topic/6-id-gen|smart-link] ,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
Properties in Components that are more than one level deep can't be accessed via getPropertyIndexOrNull,HHH-14717,71198,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Seth Wilcox,557058:1c0720b1-fc0d-413a-89bf-ed151fff9195,Seth Wilcox,557058:1c0720b1-fc0d-413a-89bf-ed151fff9195,08/juil./2021 08:00 AM,08/juil./2021 08:04 AM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Using the attached HMB as en example, when the code in org.hibernate.tuple.entity.EntityMetamodel.mapPropertyToIndex(Property, int) runs to build the propertyName to index, the code only inspects first level components, so if there is a component in a component, those properties will not be found.  Instead of being a single loop, the code needs to be moved to be recursive, in order to allow multiple levels of componnet nesting.

 This, at least in my case, doesn't allow for column reference to be in a component, that is in a component.  (the reference to histoData.dependingData.rootObjId can't be found, as the map build out doesn't look through recursivly and only decodes to histoData.dependingData) 

[^example.hbm]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,08/juil./2021 07:58 AM;swilcox;example.hbm;https://hibernate.atlassian.net/secure/attachment/49883/example.hbm,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,swilcox(swilcox),,,,,,,,,0|104ucg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Wrong binding for positional binding when the parameter is on a oneToOne relatiionship,HHH-14716,71197,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Tony Seng,5f771215c594410077288632,Tony Seng,5f771215c594410077288632,08/juil./2021 06:20 AM,08/juil./2021 06:20 AM,14/mars/2022 12:54 PM,,5.4.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The query parameter ""s.subject.contactInfo.user"" is a OneToOne relationship. 

{code:java}
@Query(""""""
    select distinct u
    from DbScreening s 
      inner join s.referent u
    where s.subject.contactInfo.user = ?1 and  upper(u.email) = upper(?2)"""""")
  fun findViewContactByScreeningSubjectAndReferentEmail(subject: DbUser, referentEmail: String): List<DbUser>
{code}

{code:java}
@OneToOne(fetch = FetchType.LAZY, cascade = [CascadeType.ALL], mappedBy = ""contactInfo"")
    var user: DbUser? = null,
{code}

{code:java}
2021-07-07 15:39:35.881 TRACE 67446 --- [enerContainer-2] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [OTHER] - [91e3def6-41a2-45db-a337-052714a0be26]
2021-07-07 15:39:35.881 TRACE 67446 --- [enerContainer-2] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [tony.seng22+dentist2@gmail.com]
2021-07-07 15:39:35.881  WARN 67446 --- [enerContainer-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 0, SQLState: 22023
2021-07-07 15:39:35.882 ERROR 67446 --- [enerContainer-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : No value specified for parameter 2.
2021-07-07 15:39:35.890 ERROR 67446 --- [enerContainer-2] c.s.c.s.i.s.mail.ReceivedEmailListener   : Processing receiving email failed: could not extract ResultSet; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not extract ResultSet

org.springframework.dao.DataIntegrityViolationException: could not extract ResultSet; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not extract ResultSet
        at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:302) ~[spring-orm-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255) ~[spring-orm-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:531) ~[spring-orm-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:242) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:154) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:149) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.data.repository.core.support.MethodInvocationValidator.invoke(MethodInvocationValidator.java:99) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at com.sun.proxy.$Proxy219.findViewContactByScreeningSubjectAndReferentEmail(Unknown Source) ~[na:na]
        at com.smilemate.clinical.spring.internal.service.mail.contact.ScreeningReferentContactSeeker.seek(ScreeningReferentContactSeeker.kt:25) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.contact.ContactDirectory.search(ContactDirectory.kt:35) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.contact.ContactDirectory.findContact(ContactDirectory.kt:27) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.EmailThreadAddressGenerator.findUserContactFullname(EmailThreadAddressGenerator.kt:22) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.EmailThreadAddressGenerator.getThreadAddress(EmailThreadAddressGenerator.kt:17) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.EmailThreadRouter.forward(EmailThreadRouter.kt:98) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.EmailThreadRouter.saveAndForward(EmailThreadRouter.kt:77) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.EmailThreadRouter.notifyReceivedEmail(EmailThreadRouter.kt:42) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.ReceivedEmailListener.queueListener(ReceivedEmailListener.kt:36) ~[classes/:na]
        at com.smilemate.clinical.spring.internal.service.mail.ReceivedEmailListener$$FastClassBySpringCGLIB$$9932efee.invoke(<generated>) ~[classes/:na]
        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at com.smilemate.clinical.spring.internal.service.mail.ReceivedEmailListener$$EnhancerBySpringCGLIB$$8a03ac8d.queueListener(<generated>) ~[classes/:na]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
        at java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]
        at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171) ~[spring-messaging-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120) ~[spring-messaging-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMatch(AbstractMethodMessageHandler.java:565) ~[spring-messaging-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessageInternal(AbstractMethodMessageHandler.java:520) ~[spring-messaging-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler.handleMessage(AbstractMethodMessageHandler.java:454) ~[spring-messaging-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.cloud.aws.messaging.listener.SimpleMessageListenerContainer.executeMessage(SimpleMessageListenerContainer.java:228) ~[spring-cloud-aws-messaging-2.2.5.RELEASE.jar:2.2.5.RELEASE]
        at org.springframework.cloud.aws.messaging.listener.SimpleMessageListenerContainer$MessageExecutor.run(SimpleMessageListenerContainer.java:418) ~[spring-cloud-aws-messaging-2.2.5.RELEASE.jar:2.2.5.RELEASE]
        at org.springframework.cloud.aws.messaging.listener.SimpleMessageListenerContainer$SignalExecutingRunnable.run(SimpleMessageListenerContainer.java:310) ~[spring-cloud-aws-messaging-2.2.5.RELEASE.jar:2.2.5.RELEASE]
        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) ~[na:na]
        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) ~[na:na]
        at java.base/java.lang.Thread.run(Thread.java:832) ~[na:na]
Caused by: org.hibernate.exception.DataException: could not extract ResultSet
        at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:115) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:67) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.getResultSet(Loader.java:2304) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2057) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2019) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:349) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.doList(Loader.java:2850) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.doList(Loader.java:2832) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2664) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.Loader.list(Loader.java:2659) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:506) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:400) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:219) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1414) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1625) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1593) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.hibernate.query.Query.getResultList(Query.java:165) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        at org.springframework.data.jpa.repository.query.JpaQueryExecution$CollectionExecution.doExecute(JpaQueryExecution.java:126) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:88) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:154) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:142) ~[spring-data-jpa-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor$QueryMethodInvoker.invoke(QueryExecutorMethodInterceptor.java:195) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:152) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:130) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80) ~[spring-data-commons-2.3.6.RELEASE.jar:2.3.6.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:367) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.12.RELEASE.jar:5.2.12.RELEASE]
        ... 44 common frames omitted
Caused by: org.postgresql.util.PSQLException: No value specified for parameter 2.
        at org.postgresql.core.v3.SimpleParameterList.checkAllParametersSet(SimpleParameterList.java:275) ~[postgresql-42.2.18.jar:42.2.18]
        at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:307) ~[postgresql-42.2.18.jar:42.2.18]
        at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:473) ~[postgresql-42.2.18.jar:42.2.18]
        at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:393) ~[postgresql-42.2.18.jar:42.2.18]
        at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:164) ~[postgresql-42.2.18.jar:42.2.18]
        at org.postgresql.jdbc.PgPreparedStatement.executeQuery(PgPreparedStatement.java:114) ~[postgresql-42.2.18.jar:42.2.18]
        at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52) ~[HikariCP-3.4.5.jar:na]
        at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java) ~[HikariCP-3.4.5.jar:na]
        at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:57) ~[hibernate-core-5.4.25.Final.jar:5.4.25.Final]
        ... 74 common frames omitted
{code}

OneToOneType.java
{code:java}
   package org.hibernate.type;
    
    @Override
	public int getColumnSpan(Mapping session) throws MappingException {
		return 0;
	}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0a2ef57f-d1f8-4c00-ae7b-5d8def26c27f(ug:0a2ef57f-d1f8-4c00-ae7b-5d8def26c27f),,,,,,,,,0|104uc8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate has a dependency to maven-core:3.0.5 that is vulnerable to CVE-2021-26291 with a CVSS of 9.1,HHH-14715,71196,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,Sebastian Nohn,557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322,08/juil./2021 02:33 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,08/juil./2021 17:31 PM,5.0.12,5.1.17,5.2.18,5.3.20,5.4.32,5.5.3,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,6.0.0.Alpha9,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-08T17:31:24.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sebastian(sebastian),,,,,,,,,0|104uc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,08/juil./2021 02:34 AM;557058:8fa7960a-d5b0-4731-a0fd-f11ee9044322;Pull Request: [https://github.com/hibernate/hibernate-orm/pull/4087|https://github.com/hibernate/hibernate-orm/pull/4087|smart-link] ,,,,,,,,,,,,,,,,Terminé,,
ArrayIndexOutOfBoundsException in org.hibernate.internal.util.collections.IdentityMap.entryArray,HHH-14714,71194,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ancien utilisateur,70121:b2e61baf-7543-4a74-a438-a51b22953a94,Ancien utilisateur,70121:b2e61baf-7543-4a74-a438-a51b22953a94,07/juil./2021 02:38 AM,07/juil./2021 02:40 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"We've come across an ArrayIndexOutOfBoundsException in our project for which I am not able to provide with a test case to reproduce the issue because it looks like a concurrency issue. 
It seems like the underlying map size has increased while the entry array is under construction.

!Screenshot 2021-07-07 at 11.34.02.png|width=41.66666666666667%!

 

Stacktrace for the exception:

{code:java}java.lang.ArrayIndexOutOfBoundsException: 2276
	at org.hibernate.internal.util.collections.IdentityMap.entryArray(IdentityMap.java:162) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.internal.util.collections.IdentityMap.concurrentEntries(IdentityMap.java:58) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.engine.internal.StatefulPersistenceContext.forEachCollectionEntry(StatefulPersistenceContext.java:1135) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:194) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:86) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:50) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:99) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1327) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1407) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1636) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1604) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1652) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getSingleResult(CriteriaQueryTypeQueryAdapter.java:111) ~[hibernate-core-5.4.32.Final.jar!/:5.4.32.Final]
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:196) ~[spring-data-jpa-2.5.2.jar!/:2.5.2]
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:88) ~[spring-data-jpa-2.5.2.jar!/:2.5.2]
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:155) ~[spring-data-jpa-2.5.2.jar!/:2.5.2]
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:143) ~[spring-data-jpa-2.5.2.jar!/:2.5.2]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:137) ~[spring-data-commons-2.5.2.jar!/:2.5.2]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:121) ~[spring-data-commons-2.5.2.jar!/:2.5.2]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:159) ~[spring-data-commons-2.5.2.jar!/:2.5.2]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:138) ~[spring-data-commons-2.5.2.jar!/:2.5.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80) ~[spring-data-commons-2.5.2.jar!/:2.5.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123) ~[spring-tx-5.3.8.jar!/:5.3.8]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388) ~[spring-tx-5.3.8.jar!/:5.3.8]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-5.3.8.jar!/:5.3.8]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ~[spring-tx-5.3.8.jar!/:5.3.8]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:145) ~[spring-data-jpa-2.5.2.jar!/:2.5.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.8.jar!/:5.3.8]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:215) ~[spring-aop-5.3.8.jar!/:5.3.8]{code}","Hibernate libraries: hibernate-core 5.4.32 which comes via spring-boot-starter-data-jpa 2.5.2
DB : Oracle 12c
OS: Red Hat Enterprise Linux Server release 7.9
JVM : OpenJDK Runtime Environment (build 1.8.0_282-b08)",,,,,,,,,,,,,,,,,,,,,,,,,,,,07/juil./2021 02:34 AM;ug:2c73640c-4783-41da-8fad-ae58bbf567c6;Screenshot 2021-07-07 at 11.34.02.png;https://hibernate.atlassian.net/secure/attachment/49882/Screenshot+2021-07-07+at+11.34.02.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:2c73640c-4783-41da-8fad-ae58bbf567c6(ug:2c73640c-4783-41da-8fad-ae58bbf567c6),,,,,,,,,0|104ubk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Invalidate cache (2nd Cache Hibernate) if add or remove column in entity. (reddison),HHH-14713,71193,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Doublon,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Erik Miller,602ea8f039ed51006a5d92b9,Erik Miller,602ea8f039ed51006a5d92b9,07/juil./2021 01:20 AM,08/juil./2021 07:51 AM,14/mars/2022 12:54 PM,08/juil./2021 07:50 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-hikaricp,,,0,2L-Cache,cache,Hibernate,redisson,,"https://stackoverflow.com/questions/68236818/invalidate-cache-2ld-cache-hibernate-if-add-or-remove-column-in-entity-reddi

https://github.com/redisson/redisson/issues/3668","Operating System: Debian 10
Java Version: openjdk 11.0.11 2021-04-20
hibernate-core: 5.5.2.Final
hibernate-hikaricp: 5.5.2.Final
redisson-hibernate-53: 3.13.4
Database: MySQL (mariadb)

2nd Cache: Redisson (Redis)",,,,,,,,,,,,,,,HHH-14710,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:0cfb7481-abd4-482e-bc34-8e3520f325a6(ug:0cfb7481-abd4-482e-bc34-8e3520f325a6),,,,,,,,0|104ubc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-08 14:50:48.419,,,,08/juil./2021 07:50 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Duplicate of HHH-14710,,,,,,,,,,,,,,,,Terminé,,
Hibernate custom Scanner problem in Wildfly,HHH-14712,71192,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,reza mohseni,557058:daf8beba-8228-4e43-ad82-9450b476d415,reza mohseni,557058:daf8beba-8228-4e43-ad82-9450b476d415,06/juil./2021 23:56 PM,07/juil./2021 01:32 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"In a web application with Hibernate 5.3 on the Wildfly 20, 
when a custom [Scanner|https://docs.jboss.org/hibernate/orm/5.3/javadocs/org/hibernate/boot/archive/scan/spi/Scanner.html] has been set with “{{hibernate.archive.scanner}}“  persistence.xml property, 
in the course of hibernate bootstrap process, a {{ClassCastException}} is thrown.

Based on tracings Hibernate bootstrap, the error occurs at [ScanningCoordinator|https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/boot/model/process/internal/ScanningCoordinator.html]. 
when scanner is set with its class name, [ScanningCoordinator|https://docs.jboss.org/hibernate/orm/5.2/javadocs/org/hibernate/boot/model/process/internal/ScanningCoordinator.html] loads the  class with a temp ClassLoader (if any exists).
in this way, in the following conditions  the created scanner object brings about Exception and it is useless : 

*   Scanner is set with its class name in persistence.xml
* In a container environment bootstrap (Wildfly)
* BootstrapContext has a temp class loader 

In brief in the above conditions , I think , this is a bug of ScanningCoordinator because : 

* constructs an object with a class that is loaded with a temp class loader
* assign that object to a variable of itself that is loaded with another class loader  

I don’t know what is the reason behind of this behaviour of ScanningCoordinator. 
It is more logical to load Scanner class with ClassLoaderService than with temp class loader.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0e656136-758f-4e02-b985-8ae507b9be61(ug:0e656136-758f-4e02-b985-8ae507b9be61),,,,,,,,,0|104ub4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"createSQLQuery ignores UNSIGNED type, causing out of range",HHH-14711,71191,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,SuperF,557058:c176b3b7-de9d-453c-ae4b-42c9931959f0,SuperF,557058:c176b3b7-de9d-453c-ae4b-42c9931959f0,06/juil./2021 04:00 AM,19/sept./2021 03:12 AM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate is unable to deal with certain native SQL queries, even though they are not a problem for JDBC. Hibernate seems to incorrectly determine the correct result types of certain columns, causing it to throw an SQLException for certain values.

In MariaDB (and MySQL) a SMALLINT has:

* Signed range: -32768 to 32767
* Unsigned range: 0 to 65535

In Java a short has a range of:

* a minimum value of -32,768 and a maximum value of 32,767 (inclusive)

When a simple select query using createSQLQuery or createNativeQuery is used, and the result contains a smallint that is within the unsigned range, but outside the signed range, a DataException is thrown.

For example:
Table:

{code:sql}CREATE TABLE `product` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `rate` smallint(6) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

insert into `product` (`rate`) values('1');
insert into `product` (`rate`) values('30000');
insert into `product` (`rate`) values('40000');{code}

Hibernate settings:
""javax.persistence.jdbc.driver"" set to ""org.mariadb.jdbc.Driver""
Hibernate resolves the dialect to ""org.hibernate.dialect.MariaDB103Dialect"", which is the correct dialect.

Test code

{code:java}EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(""default"");
EntityManager entityManager = entityManagerFactory.createEntityManager();
entityManager.getTransaction().begin();

// This line throws an exception
entityManager.createNativeQuery(""select * from product"").getResultList();

entityManager.getTransaction().commit();
entityManager.close();{code}

Exception:

{noformat}12:29:20.357 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
12:29:20.390 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 5.5.3.Final
12:29:20.496 [main] INFO  o.h.annotations.common.Version - HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
12:29:20.955 [main] WARN  o.hibernate.orm.connections.pooling - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
12:29:20.959 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: using driver [org.mariadb.jdbc.Driver] at URL [jdbc:mariadb://localhost:3306/hbmtest]
12:29:20.959 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001001: Connection properties: {password=****, user=root}
12:29:20.959 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001003: Autocommit mode: false
12:29:20.961 [main] INFO  o.h.e.j.c.i.DriverManagerConnectionProviderImpl - HHH000115: Hibernate connection pool size: 20 (min=1)
12:29:21.021 [main] INFO  org.hibernate.dialect.Dialect - HHH000400: Using dialect: org.hibernate.dialect.MariaDB103Dialect
12:29:21.144 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
Hibernate: 
    select
        * 
    from
        product
12:29:21.219 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1264, SQLState: 22003
12:29:21.219 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Out of range value for column 'rate' : value 40000 is not in class java.lang.Short range
Exception in thread ""main"" javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not execute query
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1626)
	at org.hibernate.query.Query.getResultList(Query.java:165)
	at Main.main(Main.java:19)
Caused by: org.hibernate.exception.DataException: could not execute query
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:115)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)
	at org.hibernate.loader.Loader.doList(Loader.java:2858)
	at org.hibernate.loader.Loader.doList(Loader.java:2837)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2669)
	at org.hibernate.loader.Loader.list(Loader.java:2664)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2170)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1178)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:176)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1617)
	... 2 more
Caused by: java.sql.SQLException: Out of range value for column 'rate' : value 40000 is not in class java.lang.Short range
	at org.mariadb.jdbc.internal.com.read.resultset.rowprotocol.RowProtocol.rangeCheck(RowProtocol.java:283)
	at org.mariadb.jdbc.internal.com.read.resultset.rowprotocol.TextRowProtocol.getInternalShort(TextRowProtocol.java:1011)
	at org.mariadb.jdbc.internal.com.read.resultset.SelectResultSet.getShort(SelectResultSet.java:1486)
	at org.mariadb.jdbc.internal.com.read.resultset.SelectResultSet.getShort(SelectResultSet.java:1491)
	at org.hibernate.type.descriptor.sql.SmallIntTypeDescriptor$2.doExtract(SmallIntTypeDescriptor.java:62)
	at org.hibernate.type.descriptor.sql.BasicExtractor.extract(BasicExtractor.java:47)
	at org.hibernate.type.AbstractStandardBasicType.nullSafeGet(AbstractStandardBasicType.java:257)
	at org.hibernate.type.AbstractStandardBasicType.nullSafeGet(AbstractStandardBasicType.java:253)
	at org.hibernate.type.AbstractStandardBasicType.nullSafeGet(AbstractStandardBasicType.java:249)
	at org.hibernate.loader.custom.ScalarResultColumnProcessor.extract(ScalarResultColumnProcessor.java:54)
	at org.hibernate.loader.custom.ResultRowProcessor.buildResultRow(ResultRowProcessor.java:83)
	at org.hibernate.loader.custom.ResultRowProcessor.buildResultRow(ResultRowProcessor.java:60)
	at org.hibernate.loader.custom.CustomLoader.getResultColumnOrRow(CustomLoader.java:412)
	at org.hibernate.loader.Loader.getRowFromResultSet(Loader.java:777)
	at org.hibernate.loader.Loader.getRowsFromResultSet(Loader.java:1046)
	at org.hibernate.loader.Loader.processResultSet(Loader.java:997)
	at org.hibernate.loader.Loader.doQuery(Loader.java:966)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:356)
	at org.hibernate.loader.Loader.doList(Loader.java:2855)
	... 10 more

Process finished with exit code 1{noformat}

The Java code will run without exception using:

{code:sql}insert into `product` (`rate`) values('30000');{code}

But will throw an exception using:

{code:sql}insert into `product` (`rate`) values('40000');{code}

So Hibernate ignores the ""UNSIGNED"" flag, causing Hibernate to use a Java short as type, which causes an out of range when the table data contains values like 40000. Instead of a short, an int type should be used when the UNSIGNED flag is present.","org.hibernate:hibernate-core:5.5.3.Final
org.mariadb.jdbc:mariadb-java-client:2.7.3
Java 11
MariaDB 10.5.8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,j(j),,,,,,,,,0|104uaw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate second level cache no fallback to db if hibernate assemble of object fails,HHH-14710,71190,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Pardeep Singh,5acb42141f4cab2b63543ae6,Pardeep Singh,5acb42141f4cab2b63543ae6,06/juil./2021 03:41 AM,20/oct./2021 09:07 AM,14/mars/2022 12:54 PM,,4.3.11,5.4.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"Hi Team,

we are facing a problem while using hibnerate second level cache. we are using redis to save the cache. This issue is not related to serialization rather it’s related to how hibernate creates the cache entry and creates object back from cache entry (dissemble-assemble logic from cache to object).

Suppose, we have an entity that is getting cached into redis. It works perfectly fine until we add a new field in the entity. After adding the new field it fails with a cast exception. Hibernate uses StandardCacheEntryImpl which holds the dissembled state of the object, it assembles it back from cache entry with class CacheEntityLoaderHelper. But as the field sequence has been changed because of the new field, it fails with cast exceptions. 

Shouldn't it load it from the db in that case? It throws the exception back. There can be a parameter that can control this, if entity load from cache fails, it should load from DB. There can be some warning in the logs.

DefaultLoadEventListener class has this code

!image-2021-07-06-16-02-11-931.png|width=200,height=183!

 

If the code fails at line 302, it throws the exception back while if entity is null, it loads from db. In case of exception during assembling also, it can load from DB.



Steps to reproduce:

# Cache an entity in hibernate 2nd level cache.
# Stop the application, in existing entity add a new field or modify the type of existing field.
# Now let hibernate load it from the cache.

Stack Trace:


{noformat}java.lang.ClassCastException: java.lang.String cannot be cast to java.util.Date
	at org.hibernate.type.descriptor.java.JdbcTimestampTypeDescriptor$TimestampMutabilityPlan.deepCopyNotNull(JdbcTimestampTypeDescriptor.java:28) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.type.descriptor.java.MutableMutabilityPlan.deepCopy(MutableMutabilityPlan.java:35) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.type.descriptor.java.MutableMutabilityPlan.assemble(MutableMutabilityPlan.java:30) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.type.AbstractStandardBasicType.assemble(AbstractStandardBasicType.java:319) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.type.TypeHelper.assemble(TypeHelper.java:101) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.cache.spi.entry.StandardCacheEntryImpl.assemble(StandardCacheEntryImpl.java:135) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.loader.entity.CacheEntityLoaderHelper.convertCacheEntryToEntity(CacheEntityLoaderHelper.java:311) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.loader.entity.CacheEntityLoaderHelper.processCachedEntry(CacheEntityLoaderHelper.java:177) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.loader.entity.CacheEntityLoaderHelper.loadFromSecondLevelCache(CacheEntityLoaderHelper.java:150) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:521) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.load(DefaultLoadEventListener.java:208) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:332) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.doOnLoad(DefaultLoadEventListener.java:108) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.internal.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:74) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:118) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl.fireLoadNoChecks(SessionImpl.java:1168) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl.fireLoad(SessionImpl.java:1157) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl.access$2000(SessionImpl.java:197) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.doLoad(SessionImpl.java:2795) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.lambda$load$1(SessionImpl.java:2776) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.perform(SessionImpl.java:2732) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl$IdentifierLoadAccessImpl.load(SessionImpl.java:2776) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl.find(SessionImpl.java:3326) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at org.hibernate.internal.SessionImpl.find(SessionImpl.java:3298) ~[hibernate-core-5.4.10.Final.jar:5.4.10.Final]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:368) ~[spring-orm-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at com.sun.proxy.$Proxy109.find(Unknown Source) ~[na:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:314) ~[spring-orm-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at com.sun.proxy.$Proxy109.find(Unknown Source) ~[na:na]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.findById(SimpleJpaRepository.java:281) ~[spring-data-jpa-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:371) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:204) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:657) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:621) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:605) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:80) ~[spring-data-commons-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:99) ~[spring-tx-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139) ~[spring-tx-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178) ~[spring-data-jpa-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212) ~[spring-aop-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at com.sun.proxy.$Proxy113.findById(Unknown Source) ~[na:na]
	at com.pj.redisdemo.web.EmployeeController.findById(EmployeeController.java:33) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_172]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_172]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_172]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_172]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) ~[spring-webmvc-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108) ~[spring-boot-actuator-2.2.4.RELEASE.jar:2.2.4.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.3.RELEASE.jar:5.2.3.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1598) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_172]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_172]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.30.jar:9.0.30]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_172]{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,06/juil./2021 03:32 AM;ug:1a425c8d-3f15-4fe8-9a68-91f2c343188a;image-2021-07-06-16-02-11-931.png;https://hibernate.atlassian.net/secure/attachment/49881/image-2021-07-06-16-02-11-931.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,jlfeld1(jlfeld1),ug:1a425c8d-3f15-4fe8-9a68-91f2c343188a(ug:1a425c8d-3f15-4fe8-9a68-91f2c343188a),,,,,,,,0|104uao:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-10-20 16:07:38.996,,,,"20/oct./2021 09:07 AM;557058:b79909ce-5360-4d38-8e41-9a6cc6bc92d3;This is unfortunate.  I’m also using redis as a cache provider.  

I get a very similar error of

{quote}org.hibernate.TypeMismatchException: Provided id of the wrong type for class \[MyClass] Expected: class java.lang.Integer, got class java.lang.String
at org.hibernate.event.internal.DefaultLoadEventListener.checkIdClass(DefaultLoadEventListener.java:155) ~\[hibernate-core-5.4.32.Final.jar:5.4.32.Final]{quote}

I’ve tried maintaining and updating a {{serialVersionUID}} but that seems to have no effect.  I see no _good_ way around this.

I disagree that it’s minor as it essentially breaks shared L2 cache for applications under active development",,,,,,,,,,,,,,,,A faire,,
Upgrade to Gradle 6.7.1 and move to Gradle's built-in way of testing Java modules,HHH-14709,71189,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/juil./2021 01:27 AM,20/août/2021 06:09 AM,14/mars/2022 12:54 PM,20/août/2021 06:09 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.22,5.5.4,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-09T03:42:08.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104uag:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Envers - EntityExistsException for List of Embeddables without OrderColumn,HHH-14708,71188,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Maximilian Haye,5a7ae01bed416e64f4f78b04,Maximilian Haye,5a7ae01bed416e64f4f78b04,05/juil./2021 06:56 AM,06/juil./2021 04:02 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,,,,,,"When trying to persist or merge an entity containing a list field of {{@Embeddable}} s and that field is not annotated with {{@OrderColumn}} (but, for example, with {{@OrderBy}}), the commit fails with the below exception:

{code:java}javax.persistence.RollbackException: Error while committing the transaction
	at org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:81)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)
	at org.example.EnversListTest.lambda$Should_Work$0(EnversListTest.java:42)
  ...
Caused by: javax.persistence.EntityExistsException: A different object with the same identifier value was already associated with the session : [MyEntity_list_AUD#{SETORDINAL=1, REV=DefaultRevisionEntity(id = 1, revisionDate = 05.07.2021, 15:40:55), MyEntity_id=1, REVTYPE=ADD}]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:123)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:181)
	at org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:60)
	...{code}

When using a Set or adding an {{@OrderColumn}}, it works as expected. But since Hibernate Core works fine without these, shouldn't Envers as well?

I've created a more-or-less minimal test project to reproduce this issue: [https://github.com/MHajoha/envers-list-bug-repro|https://github.com/MHajoha/envers-list-bug-repro]

It seems that the identifier generated by Envers for the audit entity doesn’t contain enough information and is equal between the different audiit events. (In my example, the composite ID only consists of REV, REVTYPE and MyEntity_id) When adding {{@OrderColumn}}, that column is added to the composite-id. 

A solution that would work for us is to add the column referenced by the {{@OrderBy}} annotation to the composite-id. Perhaps it may also be possible to allow the user to specify additional properties to be added?

Another solution, sorta proposed in [https://hibernate.atlassian.net/browse/HHH-8171?focusedCommentId=50767|https://hibernate.atlassian.net/browse/HHH-8171?focusedCommentId=50767|smart-link], might be to add all non-null properties of the component.

[This StackOverflow question|https://stackoverflow.com/q/46703238] also seems to be caused by the same issue.","OpenJDK 11.0.11
Hibernate 5.5.3.Final & 5.4.32.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,crancran(crancran),ug:705dadfc-0ac2-4e48-8a31-9c3cab367b42(ug:705dadfc-0ac2-4e48-8a31-9c3cab367b42),,,,,,,,0|104ua8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Byte Buddy 1.11.8,HHH-14707,71187,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/juil./2021 05:46 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,16/juil./2021 02:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,"Mainly to benefit from the ASM upgrade: it enables support for JDK 18 without the {{net.bytebuddy.experimental}} flag, and is actually required in some of our tests involving Mockito (even with the {{net.bytebuddy.experimental}} flag).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-16T02:19:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4082,0|104ua0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"05/juil./2021 05:49 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Targeting ORM 6.0 instead of 5.5, since it appears we are currently on Byte Buddy 1.10 and I don’t want to do more than a micro change in a micro release (5.5.x).","05/juil./2021 06:28 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;… scratch that, targeting 5.5 because it’s absolutely necessary to test JDK 18 in ORM 5.5: the {{net.bytebuddy.experimental}} flag does not work for everything, in particular not for Mockito’s inline mocks.",,,,,,,,,,,,,,,Terminé,,
Test Hibernate Search against JDK 18,HSEARCH-4255,71184,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/juil./2021 04:52 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,05/juil./2021 06:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,build,tests,,,0,,,,,,[https://jdk.java.net/18/|https://jdk.java.net/18/],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-05T06:32:26.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2610,0|104mtz:zchx,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve error message on incompatible types due to mismatched classloader,HHH-14706,71183,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,05/juil./2021 03:34 AM,19/juil./2021 02:15 AM,14/mars/2022 12:54 PM,05/juil./2021 05:31 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,,,,,0,,,,,,"I aim to improve error messages like the following:

{{java.lang.IllegalArgumentException: Type specified for TypedQuery [com.example.Fruit] is incompatible with query return type [class com.example.Fruit]
	at org.hibernate.internal.AbstractSharedSessionContract.resultClassChecking(AbstractSharedSessionContract.java:878)}}

Which is obviously puzzling, and most users don't understand this is a hint to classloader issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-05T05:31:38.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104u9c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Hibernate Freezes on initialization with Malformed Entity Class,HHH-14705,71180,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,financial_services,5ae023d4bda65b2df517179d,financial_services,5ae023d4bda65b2df517179d,30/juin/2021 06:27 AM,30/juin/2021 06:27 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate Froze on initialization with entity class having duplicate column name.

Jun 30, 2021 6:50:33 PM org.hibernate.jpa.internal.util.LogHelper logPersistenceUnitInformation
INFO: HHH000204: Processing PersistenceUnitInfo [name: upi]
Jun 30, 2021 6:50:33 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 5.5.3.Final
Jun 30, 2021 6:50:33 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager <clinit>
INFO: HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
Jun 30, 2021 6:50:33 PM org.hibernate.engine.jdbc.connections.internal.ConnectionProviderInitiator initiateService
INFO: HHH000130: Instantiating explicit connection provider: org.hibernate.hikaricp.internal.HikariCPConnectionProvider
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Jun 30, 2021 6:50:34 PM com.microsoft.sqlserver.jdbc.TDSChannel enableSSL
WARNING: TLSv1 was negotiated. Please update server and client to use TLSv1.2 at minimum.
Jun 30, 2021 6:50:35 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.SQLServer2012Dialect

 !image-2021-06-30-18-55-57-866.png|thumbnail! ","Hibernate Core 5.5.3, Windows 10, OpenJDK 11, MSSQL-2012/2017",,,,,,,,,,,,,,,,,,,,,,,,,,,,30/juin/2021 06:26 AM;ug:16d49a87-5552-4743-87c0-1491a3d1a16d;image-2021-06-30-18-55-57-866.png;https://hibernate.atlassian.net/secure/attachment/49880/image-2021-06-30-18-55-57-866.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:16d49a87-5552-4743-87c0-1491a3d1a16d(ug:16d49a87-5552-4743-87c0-1491a3d1a16d),,,,,,,,,0|104u8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Union + OneToOne is broken in Hibernate 6,HHH-14704,71178,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,29/juin/2021 21:49 PM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,01/juil./2021 23:41 PM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,hibernate-core,,,,0,,,,,,"Using version 6.0.0.Alpha8:
A HQL query using ""Union"" on two tables with a one-way OneToOne relationship hits an error.

Steps to reproduce:

Create two entities with a one-way OneToOne relations, such as:

{code:java}
@Data
@Entity
public class TableA implements Serializable {

  @Id
  private String entryid;
  
  private String data;
  
  @OneToOne
  @JoinColumn(name=""entryid"")
  private TableB tableB;

}
@Data
@Entity
public class TableB implements Serializable {

  @Id
  private String entryid;
  
  private String data;

}
{code}

Then run a query of the data using a UNION, such as:

{code:java}
    String queryString = ""FROM TableA a WHERE (a.data='datum1') UNION FROM TableA a WHERE (a.data='datum2')"";
    Session session = sessionFactory.openSession();
    List<Object> list = session.createQuery(queryString).list();
    session.close();
{code}

This produces this following error:

{noformat}
2021-06-29 12:38:47.175 ERROR 22632 --- [nio-8084-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: Could not resolve table reference `TableB` relative to TableGroup `StandardTableGroup(com.example.demo.TableA(a))` related with NavigablePath `com.example.demo.TableA(a).tableB.{id}`] with root cause

java.lang.IllegalStateException: Could not resolve binding for table `TableB`
        at org.hibernate.sql.ast.tree.from.AbstractColumnReferenceQualifier.resolveTableReference(AbstractColumnReferenceQualifier.java:33) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.metamodel.mapping.internal.BasicEntityIdentifierMappingImpl.resolveSqlSelection(BasicEntityIdentifierMappingImpl.java:205) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.metamodel.mapping.internal.BasicEntityIdentifierMappingImpl.applySqlSelections(BasicEntityIdentifierMappingImpl.java:194) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.persister.entity.AbstractEntityPersister.applySqlSelections(AbstractEntityPersister.java:1278) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.metamodel.mapping.EntityValuedModelPart.applySqlSelections(EntityValuedModelPart.java:61) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.persister.entity.AbstractEntityPersister.applySqlSelections(AbstractEntityPersister.java:1300) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.sql.ast.tree.from.TableGroup.applySqlSelections(TableGroup.java:71) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.lambda$visitSelection$19(BaseSqmToSqlAstConverter.java:1601) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
        at java.util.Collections$SingletonMap.forEach(Collections.java:4910) ~[na:1.8.0_144]
        at org.hibernate.query.sqm.sql.BaseSqmToSqlAstConverter.visitSelection(BaseSqmToSqlAstConverter.java:1601) ~[hibernate-core-6.0.0.Alpha8.jar:6.0.0.Alpha8]
...
{noformat}

This query is expected to run without error, just as when UNION is not used the query runs without error.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-01T23:14:22.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104u88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@ElementCollection + nested @Embeddable -> @Enumerated ignored,HHH-14703,71177,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Michał Sobkiewicz,557058:aa9eb065-79f5-4e57-a898-bf49b05b95c3,Michał Sobkiewicz,557058:aa9eb065-79f5-4e57-a898-bf49b05b95c3,28/juin/2021 10:15 AM,28/juin/2021 10:49 AM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,perceptron8(perceptron8),,,,,,,,,0|104u80:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"28/juin/2021 10:39 AM;557058:aa9eb065-79f5-4e57-a898-bf49b05b95c3;Please review, clone [https://github.com/perceptron8/embeddables|https://github.com/perceptron8/embeddables|smart-link] and run {{mvn test}} to replicate.

Something similar to the following should be logged:

{noformat}create table Person (id bigint not null, primary key (id))
create table Person_identityDocumentsUsages (Person_id bigint not null, description varchar(255), type varchar(255), end date, start date){noformat}

However, when you remove {{@Access(AccessType.FIELD)}} at {{IdentityDocument}}, {{@Enumerated}} at {{type}} is going to be ignored.

{noformat}create table Person (id bigint not null, primary key (id))
create table Person_identityDocumentsUsages (Person_id bigint not null, description varchar(255), type integer, end date, start date){noformat}

As you can see, {{type}} is being mapped to {{integer}} instead of {{varchar}}.

I believe that this may be a bug in {{org.hibernate.cfg.AnnotationBinder}}. For some reason it tries to read annotations at {{getType()}} method instead of {{type}} field (at the same time {{accessType}} is {{org.hibernate.cfg.AccessType.DEFAULT}} instead of {{org.hibernate.cfg.AccessType.FIELD}}). As this annotations list is empty, Hibernate uses ordinal based mapping which would be default without {{@Enumerated(STRING)}}.","28/juin/2021 10:49 AM;557058:aa9eb065-79f5-4e57-a898-bf49b05b95c3;As I recall, ORM works properly if nesting is “less complex”. For instance:
- {{@ElementCollection List<IdentityDocument>}} is fine (collection of plain embeddables),
- {{@Embedded IdentityDocumentUsage}} is also fine (embedded twice, but 1-1 instead of 1-n).

Please let me know if I can help you somehow.
",,,,,,,,,,,,,,,A faire,,
NPE in JPA Criteria when use selectCase that return an enumerated,HHH-14702,71176,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Dario Scoppelletti,557058:7007d569-c628-4334-aabb-83e2423d0ab7,Dario Scoppelletti,557058:7007d569-c628-4334-aabb-83e2423d0ab7,28/juin/2021 08:53 AM,28/juin/2021 08:53 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-entitymanager,,,,0,,,,,,"@Entity
public class JPASubscription {

     // ...

      private Date startDate;

      // ...

     @Temporal(TemporalType.TIMESTAMP)
     @Column(name = ""start_date"", nullable = false, updatable = false)
      public Date getStartDate() {
             return startDate;
      }

     public setStartDate(Date value) {
         startDate = value;
     }
}

public enum SubscriptionListStatus {
    Booked,
    Active
}

public class Result {

    private SubscriptionListStatus status;

    public Result(SubscriptionListStatus status) {
        this.status = status;
    }

    public SubscriptionListStatus getStatus() {
        return status;
    }

    public void setStatus(SubscriptionListStatus value) {
        status = value;
    }
}

@SpringBootTest
public JPACriteriaTest {

    @Autowired
    private EntityManager entityMgr; 

   @Test
    public void selectCase() {
        CriteriaBuilder builder;
        Root<JPASubscription> subscription;
        Expression<SubscriptionListStatus> status;
        TypedQuery<Result> query;
        CriteriaQuery<Result> criteria;

        builder = entityMgr.getCriteriaBuilder();
        criteria = builder.createQuery(Result.class);
        subscription = criteria.from(JPASubscription.class);

        status = builder.selectCase()
                .when(builder.greaterThan(subscription.get(""startDate""),
                        builder.currentTimestamp()),
                        SubscriptionListStatus.Booked)
                .otherwise(SubscriptionListStatus.Active)
                .as(SubscriptionListStatus.class);

        criteria.multiselect(status);
        query = entityMgr.createQuery(criteria);
        List<Result> list = query.getResultList();
    }

java.lang.NullPointerException
	at org.hibernate.hql.internal.NameGenerator.generateColumnNames(NameGenerator.java:27)
	at org.hibernate.hql.internal.ast.util.SessionFactoryHelper.generateColumnNames(SessionFactoryHelper.java:434)
	at org.hibernate.hql.internal.ast.tree.SelectClause.initializeColumnNames(SelectClause.java:268)
	at org.hibernate.hql.internal.ast.tree.SelectClause.finishInitialization(SelectClause.java:258)
	at org.hibernate.hql.internal.ast.tree.SelectClause.initializeExplicitSelectClause(SelectClause.java:253)
	at org.hibernate.hql.internal.ast.HqlSqlWalker.useSelectClause(HqlSqlWalker.java:1028)
	at org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:796)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:694)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:330)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:278)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:276)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:192)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:144)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:113)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:73)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:162)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:613)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:725)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:788)
	at org.hibernate.query.criteria.internal.CriteriaQueryImpl$1.buildCompiledQuery(CriteriaQueryImpl.java:314)
	at org.hibernate.query.criteria.internal.compile.CriteriaCompiler.compile(CriteriaCompiler.java:165)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:751)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:114)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:362)
	at com.sun.proxy.$Proxy109.createQuery(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:311)
	at com.sun.proxy.$Proxy109.createQuery(Unknown Source)
","macOS 11.4, Java 1.8.0_292, Spring Boot 2.5.1, H2 1.4.200",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0191f8c4-0392-4772-b180-606b70a980fd(ug:0191f8c4-0392-4772-b180-606b70a980fd),,,,,,,,,0|104u7s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Sequences : inaccurate log message if property 'hibernate.id.sequence.increment_size_mismatch_strategy' = FIX,HHH-14701,71175,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Guillaume Husta,557058:cbec9c12-88b7-4f64-a46e-fb457321c3dc,Guillaume Husta,557058:cbec9c12-88b7-4f64-a46e-fb457321c3dc,28/juin/2021 04:02 AM,28/juin/2021 04:02 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When the property '_*hibernate.id.sequence.increment_size_mismatch_strategy*_' is set to _*FIX*_,
if a sequence mapping mismatches, the log message is inaccurate.

For example, if a sequence is defined with increment size of 5 in DDL,

{code}
CREATE SEQUENCE my_id_seq INCREMENT BY 5;
{code}

and the mapping is defined with allocationSize=50,

{code:java}
@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = ""mySequenceGenerator"")
@SequenceGenerator(name = ""mySequenceGenerator"", sequenceName = ""my_id_seq"", allocationSize = 50)
private Long id;
{code}

the log message will be :

{code}
HHH000497: The increment size of the [MY_ID_SEQ] sequence is set to [5] in the entity mapping while the associated database sequence increment size is [5]. The database sequence increment size will take precedence to avoid identifier allocation conflicts.
{code}

whereas it should be :

{code}
HHH000497: The increment size of the [MY_ID_SEQ] sequence is set to [50] in the entity mapping while the associated database sequence increment size is [5]. The database sequence increment size will take precedence to avoid identifier allocation conflicts.
{code}

h3. First analysis

The log message is defined by : 
{code:java}
org.hibernate.internal.CoreMessageLogger#sequenceIncrementSizeMismatch
{code}

The problem is in the method : 
{code:java}
org.hibernate.id.enhanced.SequenceStyleGenerator#configure
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ghusta(ghusta),,,,,,,,,0|104u7k:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
AWS request signing producing an incorrect signature in very specific cases involving non-ascii characters,HSEARCH-4254,71174,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Lorenzo,60531b4a90f288007001a1ba,Lorenzo,60531b4a90f288007001a1ba,28/juin/2021 03:02 AM,20/juil./2021 00:12 AM,14/mars/2022 12:54 PM,15/juil./2021 04:46 AM,6.0.5.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.6.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,"_[Follow-up on HSEARCH-4239 - I am copying-pasting my latest comment here]_
I just pulled 6.0.5Final and tried a reindex on AWS.

Seems to me that the situation improved: the lighter entities now get indexed without any exception. Whenever the mass indexer gets to bigger documents though (eg. file contents), it is still throwing a fair amount of exceptions on credentials.

I know these are just vague feedbacks, but I hope they can help you in some way.

This is my MassIndexer configuration:

{code:java}
searchSession
.massIndexer( classToIndex )
.batchSizeToLoadObjects( 100 )
.threadsToLoadObjects( 5 )
.idFetchSize( Integer.MIN_VALUE )
.transactionTimeout( 1800 )
.monitor( monitor )
.failureHandler( failureHandler )
.start();
{code}
","Hibernate 5.4.28.Final, Java 8, Linux Debian",,,,,,,,,,,,,,,,,,HSEARCH-4239,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-07-15T04:44:04.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:46a355aa-8dd2-4762-a06d-c2e397c164a4(ug:46a355aa-8dd2-4762-a06d-c2e397c164a4),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2613,0|1009cw:000000xdur3mhxzzzx1o,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,2021-07-05 08:47:36.675,,,,"30/juin/2021 06:55 AM;60531b4a90f288007001a1ba;Hi again,

On a totally unrelated activity I am carrying on using the S3 java SDK, I encountered the same exact behaviour (sporadic 

{noformat}""The request signature we calculated does not match the signature you provided.""{noformat}

errors)

It all boiled down on trying to pass to S3 some accented characters within the object metas - encoding the data, the request worked fine.

I immediately thought about this problem and the behaviour seems to match. Maybe it is not related in any way, but maybe it could be an encoding issue when _bulk indexing documents on AWS?

Will try to replicate the issue on AWS ES cluster asap.","05/juil./2021 01:47 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Copying my commend from HSEARCH-4239:

I’m afraid that’s not enough information. I added tests with (very) large documents, in particular one where each document is the whole text of “Great Expectations”, and I did experience similar problems, but I found the cause (at least in that case) and managed to fix it. See [https://github.com/hibernate/hibernate-search/blob/32cc18a8a89995d9ab4deb9174253a368544907f/integrationtest/backend/tck/src/main/java/org/hibernate/search/integrationtest/backend/tck/work/IndexIndexerLargeDocumentsIT.java#L46|https://github.com/hibernate/hibernate-search/blob/32cc18a8a89995d9ab4deb9174253a368544907f/integrationtest/backend/tck/src/main/java/org/hibernate/search/integrationtest/backend/tck/work/IndexIndexerLargeDocumentsIT.java#L46]   .

Please make sure you upgraded to the latest version of both {{hibernate-backend-elasticsearch-aws}} and *also* {{hibernate-backend-elasticsearch}}, because one of the bugs was in {{hibernate-backend-elasticsearch}} (though it affected only the AWS integration). In general you should always use the same version for all Hibernate Search modules, but who knows…

If the problem remains:

* What are the stack traces exactly, this time? Including all frames and all causes.
* Are you using custom configuration for the HTTP client ({{ElasticsearchHttpClientConfigurer}})?
* Are there any enterprise firewalls between you and AWS that could alter the requests, e.g. by changing or dropping signed headers or slightly altering the content of the request (encoding errors, adding a line break at the end, …)?
* If all else fails, I will need you to pinpoint the exact requests that are failing (by [enabling logs|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#troubleshooting-logging-elasticsearch-request]), and give me the exact content of the first failing request.","06/juil./2021 08:51 AM;60531b4a90f288007001a1ba;* All modules are indeed updated to 6.0.5Final
* No custom config for the HTTP client
* I have the same exact problem using two different AWS ES clusters, one within my company VPN and one that’s on my personal AWS account and is public (the application and dataset is the same though)

The stacktrace I get from the {{MassIndexingFailureHandler }}is the following:

{noformat} HSEARCH400007: Elasticsearch request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request: POST /_bulk with parameters {}
Response: 403 'Forbidden' from 'https://xxx.eu-central-1.es.amazonaws.com' with body 
{
  ""message"": ""The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.""
}

	at org.hibernate.search.backend.elasticsearch.orchestration.impl.ElasticsearchDefaultWorkSequenceBuilder$BulkedWorkExecutionState.onBulkWorkComplete(ElasticsearchDefaultWorkSequenceBuilder.java:239)
	at org.hibernate.search.util.common.impl.Futures.lambda$handler$3(Futures.java:97)
	at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)
	at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)
	at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)
	at org.hibernate.search.backend.elasticsearch.client.impl.ElasticsearchClientImpl$1.onFailure(ElasticsearchClientImpl.java:127)
	at org.elasticsearch.client.RestClient$FailureTrackingResponseListener.onDefinitiveFailure(RestClient.java:633)
	at org.elasticsearch.client.RestClient$1.completed(RestClient.java:378)
	at org.elasticsearch.client.RestClient$1.completed(RestClient.java:362)
	at org.apache.http.concurrent.BasicFuture.completed(BasicFuture.java:123)
	at org.apache.http.impl.nio.client.DefaultClientExchangeHandlerImpl.responseCompleted(DefaultClientExchangeHandlerImpl.java:173)
	at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.processResponse(HttpAsyncRequestExecutor.java:448)
	at org.apache.http.nio.protocol.HttpAsyncRequestExecutor.inputReady(HttpAsyncRequestExecutor.java:338)
	at org.apache.http.impl.nio.client.LoggingAsyncRequestExecutor.inputReady(LoggingAsyncRequestExecutor.java:87)
	at org.apache.http.impl.nio.DefaultNHttpClientConnection.consumeInput(DefaultNHttpClientConnection.java:265)
	at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:73)
	at org.apache.http.impl.nio.client.InternalIODispatch.onInputReady(InternalIODispatch.java:37)
	at org.apache.http.impl.nio.reactor.AbstractIODispatch.inputReady(AbstractIODispatch.java:121)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.readable(BaseIOReactor.java:162)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvent(AbstractIOReactor.java:337)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.processEvents(AbstractIOReactor.java:315)
	at org.apache.http.impl.nio.reactor.AbstractIOReactor.execute(AbstractIOReactor.java:276)
	at org.apache.http.impl.nio.reactor.BaseIOReactor.execute(BaseIOReactor.java:104)
	at org.apache.http.impl.nio.reactor.AbstractMultiworkerIOReactor$Worker.run(AbstractMultiworkerIOReactor.java:591)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400007: Elasticsearch request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request: POST /_bulk with parameters {}
Response: 403 'Forbidden' from 'https://xxx.eu-central-1.es.amazonaws.com' with body 
{
  ""message"": ""The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.""
}

	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractNonBulkableWork.handleResult(AbstractNonBulkableWork.java:84)
	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractNonBulkableWork.lambda$execute$3(AbstractNonBulkableWork.java:66)
	at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)
	at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)
	... 22 more
Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400090: Elasticsearch response indicates a failure.
	at org.hibernate.search.backend.elasticsearch.work.impl.DefaultElasticsearchRequestSuccessAssessor.checkSuccess(DefaultElasticsearchRequestSuccessAssessor.java:103)
	at org.hibernate.search.backend.elasticsearch.work.impl.DefaultElasticsearchRequestSuccessAssessor.checkSuccess(DefaultElasticsearchRequestSuccessAssessor.java:86)
	at org.hibernate.search.backend.elasticsearch.work.impl.AbstractNonBulkableWork.handleResult(AbstractNonBulkableWork.java:79)
	... 25 more
{noformat}

And finally here’s a request outputting the error (I just replaced sensible data with ‘xxx’): 

{noformat}17:35:54.622 | DEBUG (ElasticsearchClientImpl.java:252) - HSEARCH400082: Executed Elasticsearch HTTP POST request to 'https://xxx.eu-central-1.es.amazonaws.com' with path '/_bulk', query parameters {} and 20 objects in payload in 3917ms. Response had status 403 'Forbidden'. Request body: <
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""4209""
  }
}
{
  ""activityDate"": ""2008-12-22T09:56:53.000000000Z"",
  ""comments"": {
    ""parentContentId"": 4209,
    ""comment"": ""\u003cp\u003e:D anche a me piacciono le classifiche!!\u003c/p\u003e"",
    ""userID"": ""xxx"",
    ""id"": 6418
  },
  ""contentType"": ""link"",
  ""creationDate"": ""2008-12-21T17:19:16.000000000Z"",
  ""description"": ""\u003cp\u003eLe classifiche di fine anno mi sono sempre piaciute\u003c/p\u003e\r\n\u003cp\u003eCerto a volte sono discutibili e possono essere soggette a letture differenti ... ma danno comunque un interessante spaccato di ciò che ogni giorno andiamo a ricercare nella rete\u003c/p\u003e\r\n\u003cp\u003eQuella in allegato è di yahoo italia ma in fondo c\u0027è anche il link per il resto del mondo (è un gioco divertente andare a fare i confronti cross-country!!!)\u003c/p\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e"",
  ""groups"": 149,
  ""permalink"": ""le-ricerche-piu-frequenti-del-web-classifica-2008"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-12-21T17:19:16.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""ricerca"",
    ""query"",
    ""classifica"",
    ""Yahoo""
  ],
  ""tags_keyword"": [
    ""ricerca"",
    ""query"",
    ""classifica"",
    ""Yahoo""
  ],
  ""tags_standard"": [
    ""ricerca"",
    ""query"",
    ""classifica"",
    ""Yahoo""
  ],
  ""tags_standard_keyword"": [
    ""ricerca"",
    ""query"",
    ""classifica"",
    ""Yahoo""
  ],
  ""title"": ""Le ricerche più frequenti del web: classifica 2008"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""4254""
  }
}
{
  ""activityDate"": ""2008-12-29T20:16:15.000000000Z"",
  ""comments"": {
    ""parentContentId"": 4254,
    ""comment"": ""\u003cp\u003eLOL ho preso una stellina! eppure \u0026egrave; un messaggio profondo \u003cimg alt\u003d\""\"" src\u003d\""/xxx/img/smiley/msn/teeth_smile.gif\""\u003e\u003c/p\u003e"",
    ""userID"": ""xxx"",
    ""id"": 6467
  },
  ""contentType"": ""standard"",
  ""creationDate"": ""2008-12-29T19:36:53.000000000Z"",
  ""description"": ""\u003cp\u003eOh un tipo di content MESSAGGIO....mmmm che messaggio scrivo?\u003c/p\u003e\r\n\u003cp\u003e\u003cb\u003e\u003cem\u003eOut of suffering have emerged the strongest souls\u003c/em\u003e; the most massive characters are seared with scars\u003c/b\u003e\u003c/p\u003e"",
  ""favouriteBy"": ""xxx"",
  ""groups"": 149,
  ""permalink"": ""frase-del-giorno"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-12-29T19:36:53.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""title"": ""Frase del giorno"",
  ""updateDate"": ""2008-12-30T15:22:11.000000000Z"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""3813""
  }
}
{
  ""contentType"": ""link"",
  ""creationDate"": ""2008-11-10T08:45:23.000000000Z"",
  ""description"": ""\u003cp\u003ema non è il \u0026quot;post vista\u0026quot;, bensì una nuova release mobile che sarà disponibile nel 2009...\u003c/p\u003e"",
  ""groups"": 149,
  ""permalink"": ""windows-6-5"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-11-10T08:45:23.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""Microsoft+Windows"",
    ""operating+system""
  ],
  ""tags_keyword"": [
    ""Microsoft+Windows"",
    ""operating+system""
  ],
  ""tags_standard"": [
    ""Microsoft+Windows"",
    ""operating+system""
  ],
  ""tags_standard_keyword"": [
    ""Microsoft+Windows"",
    ""operating+system""
  ],
  ""title"": ""Windows 6.5!!!"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""4272""
  }
}
{
  ""activityDate"": ""2009-01-01T11:38:12.000000000Z"",
  ""comments"": [
    {
      ""parentContentId"": 4272,
      ""comment"": ""\u003cp\u003eVulnerabilit\u0026agrave;? Sar\u0026agrave; per aver bevuto troppo ieri sera!!! :-)\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 6500
    },
    {
      ""parentContentId"": 4272,
      ""comment"": ""\u003cp\u003eaho!\u003c/p\u003e\n\u003cp\u003eBuongiorno e Buon Anno!\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 6498
    },
    {
      ""parentContentId"": 4272,
      ""comment"": ""\u003cp\u003eAHHHHHHHHHHHHHHHHHHH aiuuutooooo!!!! Iniziamo bene er primo dell\u0027anno :D meno male che me dai na mano pure te LOL\u003c/p\u003e\n\u003cp\u003eQueste le versioni che non hanno il bug:\u003c/p\u003e\n\u003ctable class\u003d\""dataTable\"" id\u003d\""EWD\"" cellpadding\u003d\""0\"" cellspacing\u003d\""0\""\u003e\n    \u003ctbody\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 7.0 Service Pack 4\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 Service Pack 3\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 x64 Edition Service Pack 3\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 with SP3 for Itanium-based Systems\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2008\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2008 x64 Edition\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2008 for Itanium-based Systems\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eQuestele versioni che lo hanno:\u003c/p\u003e\n\u003ctable class\u003d\""dataTable\"" id\u003d\""EWD\"" cellpadding\u003d\""0\"" cellspacing\u003d\""0\""\u003e\n    \u003ctbody\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2000 Service Pack 4\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2000 Itanium-based Edition Service Pack 4\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 Service Pack 2\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 x64 Edition Service Pack 2\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 with SP2 for Itanium-based Systems\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 Express Edition Service Pack 2\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2005 Express Edition with Advanced Services Service Pack 2\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2000 Desktop Engine (MSDE 2000) Service Pack 4\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""record\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eMicrosoft SQL Server 2000 Desktop Engine (WMSDE)\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr class\u003d\""evenRecord\"" valign\u003d\""top\""\u003e\n            \u003ctd style\u003d\""border-right: 1px solid rgb(204, 204, 204);\""\u003e\n            \u003cp class\u003d\""lastInCell\""\u003eWindows Internal Database (WYukon) Service Pack 2\u003c/p\u003e\n            \u003c/td\u003e\n        \u003c/tr\u003e\n    \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e5 stelline...ah ma non hai le stelline :D\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 6497
    }
  ],
  ""contentType"": ""link"",
  ""creationDate"": ""2009-01-01T09:37:49.000000000Z"",
  ""description"": ""\u003cp\u003eRiguarda una stored procedure, che permetterebbe di eseguire codice arbitrario.\u003c/p\u003e\r\n\u003cp\u003eNon parla pero\u0027 di sql server 2008, solo 2000/2005!\u003c/p\u003e"",
  ""favouriteBy"": ""xxx"",
  ""groups"": 149,
  ""permalink"": ""bug-in-sql-server"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2009-01-01T09:37:49.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": ""sql+server"",
  ""tags_keyword"": ""sql+server"",
  ""tags_standard"": ""sql+server"",
  ""tags_standard_keyword"": ""sql+server"",
  ""title"": ""Bug in Sql Server"",
  ""updateDate"": ""2009-01-01T10:22:53.000000000Z"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""3822""
  }
}
{
  ""activityDate"": ""2008-11-28T17:58:17.000000000Z"",
  ""comments"": {
    ""parentContentId"": 3822,
    ""comment"": ""\u003cp\u003eIDEA era il mio IDE preferito prima di Eclipse 3.\u003c/p\u003e\n\u003cp\u003eTutte le cose + belle di Eclipse sono state inventate da IntelliJ: il refactoring massivo, le lampadine, i template, i suggerimenti etc.\u003c/p\u003e\n\u003cp\u003eE\u0027 forse dalla versione 4 che non lo uso più ma mi sto pentendo. Per esempio il mese scorso cercavo un valido supporto per i resource bundle in Eclipse e non l\u0027ho trovato. In IDEA 8 sembra esserci invece.\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e"",
    ""userID"": ""xxx"",
    ""id"": 5962
  },
  ""contentType"": ""link"",
  ""creationDate"": ""2008-11-11T08:07:15.000000000Z"",
  ""description"": ""\u003cp\u003eReleased the latest version of a great java IDE\u003c/p\u003e"",
  ""groups"": 149,
  ""permalink"": ""intellijidea-8-released"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-11-11T08:07:15.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""java"",
    ""IntelliJ+IDEA"",
    ""ide""
  ],
  ""tags_keyword"": [
    ""java"",
    ""IntelliJ+IDEA"",
    ""ide""
  ],
  ""tags_standard"": [
    ""java"",
    ""IntelliJ+IDEA"",
    ""ide""
  ],
  ""tags_standard_keyword"": [
    ""java"",
    ""IntelliJ+IDEA"",
    ""ide""
  ],
  ""title"": ""IntelliJIDEA 8 Released"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""3831""
  }
}
{
  ""contentType"": ""link"",
  ""creationDate"": ""2008-11-12T07:50:08.000000000Z"",
  ""description"": ""\u003cp\u003e\u0026#160;\u0026quot;Besoin d\u0027un développeur, d\u0027un graphiste, d\u0027un webmaster? Déposez gratuitement votre projet (appel d\u0027offre) et comparez les devis reçus. La négociation par messagerie privée est facile et rapide. La mise en concurrence permet d\u0027obtenir le meilleur prix. Tout le monde peut déposer son projet sur Codeur: c\u0027est gratuit, confidentiel et sans engagement.\u0026quot;\u003c/p\u003e"",
  ""favouriteBy"": ""xxx"",
  ""groups"": 149,
  ""permalink"": ""codeur-internet-travaille-pour-vous"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-11-12T07:50:08.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""freelance"",
    ""marketplace""
  ],
  ""tags_keyword"": [
    ""freelance"",
    ""marketplace""
  ],
  ""tags_standard"": [
    ""freelance"",
    ""marketplace""
  ],
  ""tags_standard_keyword"": [
    ""freelance"",
    ""marketplace""
  ],
  ""title"": ""Codeur - Internet travaille pour vous"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""2724""
  }
}
{
  ""activityDate"": ""2008-07-07T08:06:13.000000000Z"",
  ""comments"": [
    {
      ""parentContentId"": 2724,
      ""comment"": ""\u003cp\u003ein my modest opinion it\u0027s a theorical problem, in facts all programmers use parameters,or at least make replacement of special characters!\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 3864
    },
    {
      ""parentContentId"": 2724,
      ""comment"": ""\u003cp\u003eGreat! learning how to inject a database it\u0027s very useful and both dba and programmers should avoid such mistakes :D\u003c/p\u003e\n\u003cp\u003eGood post ;-)\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 3838
    }
  ],
  ""contentType"": ""standard"",
  ""creationDate"": ""2008-07-04T07:09:36.000000000Z"",
  ""description"": ""\u003cp\u003eA sql injection tutorial focused on Oracle DB - inspired by Belthazor78\u0027s \u003ca target\u003d\""_blank\"" href\u003d\""http://xxx.xxx.it/blog/belthazor78/2008/06/26/microsoft-dichiara-guerra-ai-sql-injection/\""\u003epost\u003c/a\u003e\u003c/p\u003e\r\n\u003cp\u003eAlso available \u003ca target\u003d\""_blank\"" href\u003d\""http://st-curriculum.oracle.com/tutorial/SQLInjection/index.htm\""\u003eonline\u003c/a\u003e\u003c/p\u003e"",
  ""files"": {
    ""parentContentId"": 2724,
    ""name"": ""tutorial.zip"",
    ""type"": ""document"",
    ""id"": 2724
  },
  ""groups"": 149,
  ""permalink"": ""oracle-sql-injection-tutorial"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-07-04T07:09:36.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""sql+injection"",
    ""oracle""
  ],
  ""tags_keyword"": [
    ""sql+injection"",
    ""oracle""
  ],
  ""tags_standard"": [
    ""sql+injection"",
    ""oracle""
  ],
  ""tags_standard_keyword"": [
    ""sql+injection"",
    ""oracle""
  ],
  ""title"": ""Oracle SQL injection tutorial"",
  ""updateDate"": ""2008-07-04T07:14:30.000000000Z"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""2733""
  }
}
{
  ""activityDate"": ""2008-07-14T08:00:35.000000000Z"",
  ""comments"": [
    {
      ""parentContentId"": 2733,
      ""comment"": ""\u003cp\u003eAHAH fichissimo!!\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 4034
    },
    {
      ""parentContentId"": 2733,
      ""comment"": ""\u003cp\u003eHAHHAHAHHAHHA \u003cimg alt\u003d\""\"" src\u003d\""/xxx/img/smiley/msn/teeth_smile.gif\""\u003e\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 4007
    },
    {
      ""parentContentId"": 2733,
      ""comment"": ""\u003cp\u003e:-) Forte !\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 3983
    }
  ],
  ""contentType"": ""link"",
  ""creationDate"": ""2008-07-05T14:15:20.000000000Z"",
  ""description"": ""\u003cp\u003eNon posso che inchinarmi alla bravura ed alla grazia di questo meraviglioso creatore di flame\u003c/p\u003e\r\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\r\n\u003cp\u003eHint: se non siete loggati a Facebook non potrete capire :D\u003c/p\u003e"",
  ""groups"": 149,
  ""permalink"": ""the-greatest-troll-in-the-world"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-07-05T14:15:20.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""flame"",
    ""trolling"",
    ""facebook""
  ],
  ""tags_keyword"": [
    ""flame"",
    ""trolling"",
    ""facebook""
  ],
  ""tags_standard"": [
    ""flame"",
    ""trolling"",
    ""facebook""
  ],
  ""tags_standard_keyword"": [
    ""flame"",
    ""trolling"",
    ""facebook""
  ],
  ""title"": ""The greatest Troll in the world"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""3066""
  }
}
{
  ""activityDate"": ""2008-08-10T15:54:38.000000000Z"",
  ""comments"": [
    {
      ""parentContentId"": 3066,
      ""comment"": ""\u003cp\u003eChe tristezza... per qualcuno la morte vale pi\u0026ugrave; della vita di una persona che con le sue capacit\u0026agrave; \u0026egrave; stata vanto per l\u0027Italia.\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 4449
    },
    {
      ""parentContentId"": 3066,
      ""comment"": ""\u003cp\u003ee la cosa che mi ha fatto pi\u0026ugrave; pena sai qual\u0027\u0026egrave; stata? vedere masse di speculatori pronti a fare chizzare il titolo Pininfarina spa, fino alla sospensione.....\u0026nbsp;\u0026nbsp; nemmeno la morte ferma il soldo..\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 4426
    },
    {
      ""parentContentId"": 3066,
      ""comment"": ""\u003cp\u003e...eh si avevo letto la notizia...pare che un automobilista di 78 anni (ripeto 78 anni e poraccio lui con riflessi zero) non gli abbia dato la precedenza...bh\u0026agrave;\u003c/p\u003e"",
      ""userID"": ""xxx"",
      ""id"": 4425
    }
  ],
  ""contentType"": ""link"",
  ""creationDate"": ""2008-08-07T11:24:26.000000000Z"",
  ""description"": ""\u003cp\u003eNotiziaccia di stamattina... Muore uno dei pi\u0026ugrave; importanti torinesi a causa di un incidente in moto a Trofarello.\u003c/p\u003e"",
  ""groups"": 149,
  ""permalink"": ""e-morto-andrea-pininfarina"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2008-08-07T11:24:26.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""morte"",
    ""Andrea+Pininfarina""
  ],
  ""tags_keyword"": [
    ""morte"",
    ""Andrea+Pininfarina""
  ],
  ""tags_standard"": [
    ""morte"",
    ""Andrea+Pininfarina""
  ],
  ""tags_standard_keyword"": [
    ""morte"",
    ""Andrea+Pininfarina""
  ],
  ""title"": ""E\u0027 morto Andrea Pininfarina"",
  ""updateDate"": ""2008-08-07T11:24:50.000000000Z"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
{
  ""index"": {
    ""_index"": ""xxx-write"",
    ""_id"": ""562""
  }
}
{
  ""contentType"": ""standard"",
  ""creationDate"": ""2007-10-16T09:40:10.000000000Z"",
  ""description"": ""\u003cp\u003eUn articolo sempliciotto, che per\u0026ograve; sintetizza lo stato dell\u0027arte del corporate blogging italiano confrontandolo con la realt\u0026agrave; internazionale. I casi citati sono sempre gli stessi (IWBank come blog del management, quellichebravo.it o Mandarina Duck per il B2C, etcetera) ed\u0026nbsp;a questo punto bisognerebbe capire se il fenomeno in Italia si \u0026egrave; arenato, o il problema \u0026egrave; pi\u0026ugrave; ampio, di carattere internazionale... Che sia troppo difficile da gestire?\u003c/p\u003e"",
  ""files"": {
    ""parentContentId"": 562,
    ""name"": ""Il blog si mette in giacca e cravatta.pdf"",
    ""type"": ""document"",
    ""id"": 562
  },
  ""groups"": 149,
  ""permalink"": ""il-blog-si-mette-in-giacca-e-cravatta"",
  ""permission"": ""PROTECTED"",
  ""publicationDate"": ""2007-10-16T09:40:10.000000000Z"",
  ""like"": 0,
  ""status"": ""PUBLISHED"",
  ""tags"": [
    ""web+2.0"",
    ""enterprise+2.0"",
    ""marketing"",
    ""blog""
  ],
  ""tags_keyword"": [
    ""web+2.0"",
    ""enterprise+2.0"",
    ""marketing"",
    ""blog""
  ],
  ""tags_standard"": [
    ""web+2.0"",
    ""enterprise+2.0"",
    ""marketing"",
    ""blog""
  ],
  ""tags_standard_keyword"": [
    ""web+2.0"",
    ""enterprise+2.0"",
    ""marketing"",
    ""blog""
  ],
  ""title"": ""Il blog si mette in giacca e cravatta"",
  ""updateDate"": ""2007-10-16T09:40:11.000000000Z"",
  ""user_keyword"": ""xxx"",
  ""user"": ""xxx"",
  ""_entity_type"": ""xxx""
}
>. Response body: <
{
  ""message"": ""The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.""
}
>{noformat}","13/juil./2021 04:40 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello [~accountid:60531b4a90f288007001a1ba] . Thanks for the information\! I finally managed to reproduce the problem and I have a fix: [https://github.com/hibernate/hibernate-search/pull/2614|https://github.com/hibernate/hibernate-search/pull/2614|smart-link] 

Before I release something with the patch, let’s make sure we actually fixed your problem. Could you please try to run your mass indexing with this patch? To do so:

* checkout the repository: {{git clone https://github.com/yrodiere/hibernate-search.git}}
* checkout the branch : {{git checkout HSEARCH-4254-6.0}}
* build Hibernate Search locally: {{./mvnw clean install -DskipTests}}
* Set the version of Hibernate Search in your application to {{6.0.6-SNAPSHOT}}
* Then try to run mass indexing.","16/juil./2021 08:15 AM;60531b4a90f288007001a1ba;Hello Yoann, sorry for the delay. 

Just built {{6.0.6-SNAPSHOT}} and reindexed on AWS ES - the invalid signature problem did *not* arise anymore. 

Thank you for your support and keep up the good work\! Over and out 🙂 ",16/juil./2021 08:57 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;That’s great news. Thanks for checking\!,,,,,,,,,,,Terminé,,
"When the database reserved keywords as column names, the DDL script is not quoted",HHH-14700,71173,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,tbcheng,60d6fcc0b215610069451589,tbcheng,60d6fcc0b215610069451589,26/juin/2021 03:43 AM,26/juin/2021 03:43 AM,14/mars/2022 12:54 PM,,5.5.3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"A defect that has existed for more than 15 years was discovered. When column names use database reserved words, such as when `groups` is used as column names under mysql8, the generated SQL script cannot be executed in the database because the column names are not quoted

When the following configuration is set to true, it will cause new problems
`hibernate.globally_quoted_identifiers =true `
All quotes are too rude, my application will have another problem

The source of the error is the following two lines, it should be `!quoted`

https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/mapping/Column.java#L97

https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/mapping/Column.java#L105","JDK8,  mac ,MySQL8",,,3600,3600,,0 %,3600,3600,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,29/juin/2021 00:00 AM,,,,true,0.0,ug:1280ca4b-456b-40d3-9380-6d1bcceba31a(ug:1280ca4b-456b-40d3-9380-6d1bcceba31a),,,,,,,,,0|104u74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,,,,,,,,,A faire,,
Add documentation about treat operator and implicit subtype casting to user guide,HHH-14699,71171,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,25/juin/2021 02:09 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,documentation,,,,0,,,,,,I just realized that the user guide has no section about the JPA treat operator and also no mention of the support for the implicit subtype casting when de-referencing properties in HQL from an identification variable of a parent entity type.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104u6o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Unique constraint not generated for unidirectional @OneToOne (MySQL),HHH-14698,71167,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,swerner,60d3c6985c64b10071801939,swerner,60d3c6985c64b10071801939,23/juin/2021 17:16 PM,23/juin/2021 17:16 PM,14/mars/2022 12:54 PM,,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Given the entity model:
{code:java}
@Entity
public class ObjectA {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    // Unidirectional one to one
    @OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)
    private ObjectB objectB;

}

@Entity
public class ObjectB {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

}
{code}

The following sql is generated:
{code:sql}
create table ObjectA (id integer not null auto_increment, objectB_id integer, primary key (id)) engine=InnoDB;
create table ObjectB (id integer not null auto_increment, primary key (id)) engine=InnoDB;
alter table ObjectA add constraint FKrml00nn6w7t3136j9bp9r0w7l foreign key (objectB_id) references ObjectB (id);
{code}


When the relationship is set to `optional = false`, then the unique constraint is generated:
{code:sql}
alter table ObjectA add constraint UK_idqwf5b2ct3itkigenbn5cucf unique (objectB_id);
{code}

I believe in either case, the unique constraint should be generated on objectB_id, at least for MySQL. Even though column objectB_id is nullable, MySQL allows multiple null values with a unique constraint. I guess one could argue it's not best practice, and a join table should be used w/o nulls, but works better with laziness where I can avoid the join/select to determine if it's populated.",MySQL,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:465f9f95-9110-45b9-88a9-4bdca84e0960(ug:465f9f95-9110-45b9-88a9-4bdca84e0960),,,,,,,,,0|104u5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
TimePropertyTest fails on MySQL 8.0 with a ComparisonFailure,HHH-14697,71166,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Ranabir Chakraborty,60d389e85c64b100717da393,Ranabir Chakraborty,60d389e85c64b100717da393,Ranabir Chakraborty,60d389e85c64b100717da393,23/juin/2021 12:30 PM,16/juil./2021 08:55 AM,14/mars/2022 12:54 PM,09/juil./2021 11:21 AM,5.3.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,,,,,,,,,,,,,0,,,,,,"Running org.hibernate.test.temporal.TimePropertyTest.testTimeAsDate from Hibernate ORM test suite of version 5.3.20 on MySQL 8.0 database results in a ComparisonFailure:

{code:java}
junit.framework.ComparisonFailure: expected:<08:55:5[1]> but was:<08:55:5[2]>
	at junit.framework.Assert.assertEquals(Assert.java:100)
	at junit.framework.Assert.assertEquals(Assert.java:107)
	at org.hibernate.test.temporal.TimePropertyTest.testTimeAsDate(TimePropertyTest.java:59)
{code}

Note: From my tiny experience with DBs I would say it could possibly caused by rounding milliseconds value. The issue is not present in the latest ORM version (5.5.0)
Given that, I'm filing this JIRA as a known issue for QE Hibernate ORM 5.3.20 testing.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-09T10:15:17.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),ug:6502073e-0606-4b48-86f0-462347a4bbec(ug:6502073e-0606-4b48-86f0-462347a4bbec),,,,,,,,0|104u5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-09 18:19:15.601,,,,"09/juil./2021 11:19 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in 5.3 branch.

This has already been fixed in main and 5.4 branches by HHH-14031. That issue involved upgrading H2, which was not done here.",,,,,,,,,,,,,,,,Terminé,,
LastEllementCollection,HHH-14696,71162,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,jonas lima,557058:7c9ea12a-6dac-4470-ac5c-1853ca2357ae,jonas lima,557058:7c9ea12a-6dac-4470-ac5c-1853ca2357ae,23/juin/2021 07:19 AM,23/juin/2021 08:14 AM,14/mars/2022 12:54 PM,,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"Create a new annotation to fetch the last element in a collection.

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,jonas.lima(jonas.lima),,,,,,,,,0|104u4o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,23/juin/2021 07:20 AM;557058:7c9ea12a-6dac-4470-ac5c-1853ca2357ae;can I develop it?,,,,,,,,,,,,,,,,A faire,,
JSON-format Elasticsearch mapping templates on the application side,HSEARCH-4253,71160,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/juin/2021 23:57 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,12/oct./2021 03:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"Offer something similar to what we offer for custom index settings, but this time for the mapping: an Elasticsearch mapping defined in a JSON document that will override what Hibernate Search generates, and will be used for schema management operations.

This would be useful when users need to customize exotic features such as [in this instance|https://stackoverflow.com/a/67574009/6692043], because this would spare us the pain of creating one Hibernate Search option for each exotic feature (e.g. HSEARCH-4234)

*Non-goals*:

* Advanced conflict detection or resolution. If a property is defined by both Hibernate Search and the custom document provided by the user, we will pick a very simple conflict resolution strategy. Maybe just use the user-provided version (and its attributes), ignore the Hibernate Search-generated attributes, and pick sub-properties from both sides?
* Parsing and interpretation of the user-provided Elasticsearch mapping. We will not adapt Hibernate Search's behavior based on the user-provided mapping; that has to be customized separately through bridges.

Note: ideally we would simply offer a way to declare [Elasticsearch templates|https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html] and create those before creating indexes, but there are a few problems with that. First, templates do not override index mappings (e.g. the ones generated by Hibernate Search): it's the other way around. Second, mapping updates would get a bit unpredictable, as updating a template will not update the indexes to which it applies (templates are applied on index creation, and that's it).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-10-14T03:22:08.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2665,0|1009cw:000000xdur3mhxzzzxezsq3,,,,,,HSEARCH - 2021-15,HSEARCH - 2021-16,HSEARCH - 2021-17,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
ByteBuddy proxies don't call instance methods inside constructor,HHH-14695,71159,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Paul Robinson,70121:4840b06d-2292-46f6-9741-2690761b4131,Paul Robinson,70121:4840b06d-2292-46f6-9741-2690761b4131,22/juin/2021 10:07 AM,22/juin/2021 10:07 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,ByteBuddy,javassist,Proxy,,,"When using ByteBuddy to create proxies, the interceptor is not in place until after the constructor has finished. This means any calls to instance methods in the constructor will be intercepted by ProxyConfiguration.InterceptorDispatcher, and when it sees there is no interceptor, it simply returns and does nothing.

In other words: calls to instance methods from within a constructor have no effect.

There is no reference to this being a limitation on entity classes in the user guide here:
https://docs.jboss.org/hibernate/orm/5.5/userguide/html_single/Hibernate_User_Guide.html#entity

If you use Javassist instead, then the handler is in place by the time an entity's constructor is entered, so instance methods work properly during the constructor.

Here's some code to show the problem. I've copied from the Hibernate source code to set things up, and removed anything that did not appear to matter to make it as simple as possible. In this sample code, an interceptor is never set up - and this is what happens normally in ByteBuddyProxyFactory.getProxy(...) which constructs the proxy and then installs the interceptor.


{code:java}
import static net.bytebuddy.matcher.ElementMatchers.isFinalizer;
import static net.bytebuddy.matcher.ElementMatchers.isVirtual;
import static net.bytebuddy.matcher.ElementMatchers.not;

import org.hibernate.proxy.ProxyConfiguration;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.description.modifier.Visibility;
import net.bytebuddy.implementation.MethodDelegation;

public class ByteBuddyProblemDemonstrator
{
    public static void main(String[]args) throws Exception
    {
        Class<? extends Target> cls = new ByteBuddy()
                .subclass(Target.class)
                .name(""TargetProxy"")
                .defineField( ProxyConfiguration.INTERCEPTOR_FIELD_NAME, ProxyConfiguration.Interceptor.class, Visibility.PRIVATE )
                .method(isVirtual().and(not(isFinalizer())))
                .intercept(MethodDelegation.to(ProxyConfiguration.InterceptorDispatcher.class))
                .make()
                .load(Target.class.getClassLoader())
                .getLoaded();

        Target proxy = cls.newInstance();
        System.out.println(""Proxy class = "" + proxy.getClass());
        System.out.println(""Proxy type = "" + proxy.getType());
        if (Target.TYPE.equals(proxy.getType()))
            System.out.println(""Proxy type = "" + proxy.getType() + "" (as expected)"");
        else
            System.out.println(""Proxy type is wrong - expected "" + Target.TYPE + "" but found "" + proxy.getType());
    }

    public static class BaseTarget
    {
        private String type;

        public BaseTarget(String type)
        {
            setType(type);
        }

        public String getType()
        {
            return type;
        }

        public void setType(String type)
        {
            this.type = type;
        }
    }

    public static class Target extends BaseTarget
    {
        public static final String TYPE = ""TARGET"";

        public Target()
        {
            super(TYPE);
        }
    }
}
{code}

Example output:
Proxy class = class TargetProxy
Proxy type = null
Proxy type is wrong - expected TARGET but found null

Expected output:
Proxy class = class TargetProxy
Proxy type = TARGET (as expected)","Hibernate ORM, Ubuntu 20.04, MariaDB, Java 8-openjdk-amd64",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:030387c8-51e2-4cb0-b1f5-ff317ed41e20(ug:030387c8-51e2-4cb0-b1f5-ff317ed41e20),,,,,,,,,0|104u48:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,A faire,,
HibernateProxy class leaked on each entity manager factory closure,HHH-14694,71158,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Ancien utilisateur,557058:dde519e7-180d-44ff-847c-c33e8b81dfed,Ancien utilisateur,557058:dde519e7-180d-44ff-847c-c33e8b81dfed,22/juin/2021 09:43 AM,27/juil./2021 08:38 AM,14/mars/2022 12:54 PM,,5.3.20,5.4.3,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-entitymanager,,,,0,,,,,,"Over time, observing accumulation of classes like the below:

{noformat}support.hibernate.entity.Employee$HibernateProxy$T803qhHQ
support.hibernate.entity.Employee$HibernateProxy$LQ0JsAV4
support.hibernate.entity.Employee$HibernateProxy$UhO3Ayxr
support.hibernate.entity.Employee$HibernateProxy$BWvXgQxT
support.hibernate.entity.Employee$HibernateProxy$6G9ITkD8
support.hibernate.entity.Employee$HibernateProxy$aBP4VxcN
support.hibernate.entity.Employee$HibernateProxy$TCcTZDem
support.hibernate.entity.Employee$HibernateProxy$jNTPyjzl
support.hibernate.entity.Employee$HibernateProxy$oIh473NM
support.hibernate.entity.Employee$HibernateProxy$nfy1hWEj
support.hibernate.entity.Employee$HibernateProxy$7rVjCGhx
support.hibernate.entity.Employee$HibernateProxy$GNo7jWS2
support.hibernate.entity.Employee$HibernateProxy$fwdKN4lG
support.hibernate.entity.Employee$HibernateProxy$O0rvl4wE
support.hibernate.entity.Employee$HibernateProxy$T2L1yOwf
support.hibernate.entity.Employee$HibernateProxy$om1a4e8N
support.hibernate.entity.Employee$HibernateProxy$YFFB8MLE
...{noformat}

These seem to be created with every factory instance and never reaped even though the factory is closed. Eventually, an OutOfMemory (metaspace) failure will occur (if an application runs long enough).

Issue can be seen in the latest 5.3, 5.4 and 5.5 branches.

To run the testcase, use {{mvn clean test}} and while the test pauses prior to exit, extract a heap dump. After opening the heap in Eclipse Memory Analysis Tool (MAT), open the In Eclipse Memory Analysis Tool (MAT), open the heap and click the ""Histogram"" button (looks like a ""bar graph""). Type HibernateProxy in the filter box (below ""Class Name"") and hit enter, MAT will prepend and append "".*"" and 50 leaked classes (one per-entity, per-factory) will be listed (may need to expand the list to see all 50).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,22/juin/2021 09:39 AM;rk:48cce108-8c15-4d42-bb37-957c689ecc3c;testcase.zip;https://hibernate.atlassian.net/secure/attachment/49879/testcase.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,rk:48cce108-8c15-4d42-bb37-957c689ecc3c(rk:48cce108-8c15-4d42-bb37-957c689ecc3c),sanne(sanne),smarlow@redhat.com(smarlow@redhat.com),,,,,,,0|104u40:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-22 17:22:26.778,,,,"22/juin/2021 10:22 AM;557058:db1a3420-e3e5-4207-9989-5d434a8152e9;I’m curious if the MAT shows that the HibernateProxy instances are strongly referenced or not.  I’ll try to run this test and check.

I ran the test case and do not see any instances of HibernateProxy  but I think the underlying question is whether the HibernateProxy class definition is leaked.","27/juil./2021 08:38 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Forgot to update on the progress:

Some related issues are now resolved: [https://hibernate.atlassian.net/browse/HHH-14734|https://hibernate.atlassian.net/browse/HHH-14734|smart-link] , [https://hibernate.atlassian.net/browse/HHH-14733|https://hibernate.atlassian.net/browse/HHH-14733|smart-link], [https://hibernate.atlassian.net/browse/HHH-14732|https://hibernate.atlassian.net/browse/HHH-14732|smart-link], [https://hibernate.atlassian.net/browse/HHH-14731|https://hibernate.atlassian.net/browse/HHH-14731|smart-link] 

The main issue (this one) still needs to be addressed though.",,,,,,,,,,,,,,,A faire,,
Introduce hibernate-community-dialects module,HHH-14693,71157,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,22/juin/2021 08:20 AM,28/févr./2022 05:51 AM,14/mars/2022 12:54 PM,06/juil./2021 01:14 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,,,,,0,,,,,,"Coming from the GH discussion (https://github.com/hibernate/hibernate-orm/discussions/3783), the task is to create a module called `hibernate-community-dialects` which should contain community contributed dialects that are not continuously tested. In addition to that, there should be a writeup explaining what a provider of a dialect has to do, in order for it to be considered for hibernate-core, which in short is:

* Commitment from the vendor of the database by assigning an employee to fix test suite issues and maintain the dialect
* Provide a Jenkins worker node for automated testing",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-06T01:14:21.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104u3s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Merge loading strategies in mass indexer even when there are conditional expressions,HSEARCH-4252,71156,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),,,,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,22/juin/2021 08:13 AM,20/sept./2021 01:53 AM,14/mars/2022 12:54 PM,,6.0.4.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,mapper-orm,,,,0,,,,,,"We decided that the contribution for the issue [HSEARCH-499|https://hibernate.atlassian.net/browse/HSEARCH-499] is not supposed to merge strategies with conditional expressions. Meaning that we're going to create a single-item items group for any entities on which a given condition can be applied.
The Hibernate Search team discussed a bit the topic. Maybe it is possible to implement a finer solution.
See [Zulip chat|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-499/near/243488226].
With this we want to explore any ideas to provide a finer solution to that.",,,,,,,,,,,,,,,,,,,HSEARCH-499,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,,0|104u3q:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add method Configuration.addInputStream(InputStreamAccess),HHH-14692,71155,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Paul Robinson,70121:4840b06d-2292-46f6-9741-2690761b4131,Paul Robinson,70121:4840b06d-2292-46f6-9741-2690761b4131,22/juin/2021 05:16 AM,22/juin/2021 05:16 AM,14/mars/2022 12:54 PM,,5.2.18,5.3.20,5.4.32,5.5.2,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,configuration,,,,,"org.hibernate.cfg.Configuration has a method:

{code:java}
 public Configuration addInputStream(InputStream xmlInputStream) throws MappingException
{code}

which is implemented (correctly) by calling 

{code:java}
metadataSources.addInputStream( xmlInputStream );
{code}

Configuration could or should also have a method:

{code:java}
public Configuration addInputStream(InputStreamAccess xmlInputStreamAccess) throws MappingException
{code}

which is similarly implemented by delegating to MetadataSources.addInputStream( InputStreamAccess );",Hibernate core 5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:030387c8-51e2-4cb0-b1f5-ff317ed41e20(ug:030387c8-51e2-4cb0-b1f5-ff317ed41e20),,,,,,,,,0|104u3c:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,Backport?,,,,,,,,,,,,,,,,,,,A faire,,
Small optimisation for updating Query Cache Statistics,HHH-14691,71154,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/juin/2021 03:27 AM,22/juin/2021 08:27 AM,14/mars/2022 12:54 PM,22/juin/2021 05:16 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.3,,,,,,,,,,,,,0,,,,,,Accessing the Query Region Statistics requires two hashmap lookups even when they are disabled for the current region. This can be done slightly better.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-22T03:16:22.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104u34:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid fully resetting StatisticsImpl just after its constructor,HHH-14690,71153,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,22/juin/2021 03:24 AM,22/juin/2021 08:27 AM,14/mars/2022 12:54 PM,22/juin/2021 05:16 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.3,,,,,,,,,,,,,0,,,,,,"Statistics#clear() was being invoked just after constructor, for the sole purpose of resetting the `startTime` of the data being collected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-21T03:37:19.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104u2w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Clarify in the docs that Spring Boot requires that you prefix Hibernate Search properties with ""spring.jpa.properties.""",HSEARCH-4251,71148,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/juin/2021 23:44 PM,23/juin/2021 01:25 AM,14/mars/2022 12:54 PM,22/juin/2021 07:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.5.Final,6.1.0.Alpha1,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-22T07:56:53.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2605,0|104mtz:zchr,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add document section to elaborate which components are supported by bean container,HHH-14689,71147,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,21/juin/2021 21:38 PM,21/juin/2021 21:38 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"AFAIK AttributeConverter is supported already, and I'm trying submitting PR to support IdentifierGenerator.
 I hope somebody else will take over this since I'm not an english native speaker.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,quaff(quaff),,,,,,,,,0|104u1s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Get IdentifierGenerator from BeanContainer if not registered,HHH-14688,71146,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,周雁鸣,557058:f5893613-0515-4c55-9c09-41bb35238397,21/juin/2021 21:22 PM,07/déc./2021 07:21 AM,14/mars/2022 12:54 PM,02/juil./2021 12:33 PM,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.4,,,,,,,,,hibernate-core,,,,0,,,,,,It's very useful to create IdentifierGenerator by container such as spring.,,,,,,,,,,,,,HHH-14958,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-02T12:04:55.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,quaff(quaff),,,,,,,,,0|104u1k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Deprecate ElasticsearcAwsCredentialsProvider and make it extend a new ElasticsearchAwsCredentialsProvider,HSEARCH-4250,71145,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/juin/2021 02:10 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,05/juil./2021 03:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,There's a typo in the class name {{ElasticsearcAwsCredentialsProvider}}.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-05T03:36:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2607,0|104mtz:zchv,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test AWS Elasticsearch Service 7.10,HSEARCH-4249,71143,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,21/juin/2021 01:27 AM,23/juin/2021 01:25 AM,14/mars/2022 12:54 PM,21/juin/2021 04:03 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.5.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-21T04:01:06.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2603,0|104mtz:zchi,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Cannot refer in JoinColumn to a field introduced by another JoinColumn,HHH-14687,71142,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Victor Noël,5eb0793ec5c6230baa257e72,Victor Noël,5eb0793ec5c6230baa257e72,21/juin/2021 01:23 AM,21/juin/2021 01:25 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I'm trying to represent the relations below, but hibernate fails with an error:

{noformat}org.hibernate.MappingException: Unable to find column with logical name a_id in table B
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getPhysicalColumnName(InFlightMetadataCollectorImpl.java:1015)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getPhysicalColumnName(InFlightMetadataCollectorImpl.java:984)
	at org.hibernate.cfg.BinderHelper.findPropertiesByColumns(BinderHelper.java:392)
	at org.hibernate.cfg.BinderHelper.createSyntheticPropertyReference(BinderHelper.java:273)
	at org.hibernate.cfg.ToOneFkSecondPass.doSecondPass(ToOneFkSecondPass.java:104)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processEndOfQueue(InFlightMetadataCollectorImpl.java:1823)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processFkSecondPassesInOrder(InFlightMetadataCollectorImpl.java:1767)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1655)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:295)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:86)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:479)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:85)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:689){noformat}



{code:java}@Entity
@Table(name = ""A"")
public final class A {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
}

@Entity
@Table(name = ""B"", uniqueConstraints = {@UniqueConstraint(columnNames = {""a_id"", ""uniqueName""})})
public final class B {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Basic
  private String uniqueName;

  @ManyToOne
  @JoinColumn(name=""a_id"", referencedColumName=""id"")
  private A a;
}

@Entity
@Table(name = ""C"", uniqueConstraints = {@UniqueConstraint(columnNames = {""a_id"", ""uniqueName""})})
public final class C {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Basic
  private String uniqueName;

  @ManyToOne
  @JoinColumn(name=""a_id"", referencedColumName=""id"")
  private A a;

  @ManyToOne
  @JoinColumns(
    value = {
      @JoinColumn(name = ""uniqueName"", referencedColumnName = ""uniqueName"", insertable = false, updatable = false),
      @JoinColumn(name = ""a_id"", referencedColumnName = ""a_id"", insertable = false, updatable = false)
    },
    foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT)
  )
  private B b;
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2de4d5c6-6b16-46ec-90cb-f4916cc89564(ug:2de4d5c6-6b16-46ec-90cb-f4916cc89564),,,,,,,,,0|104u14:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Allow db reads during entity event handlers,HHH-14686,71141,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,20/juin/2021 13:22 PM,20/juin/2021 14:23 PM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"I make a db read during a collection event callback that triggers autoflush so it clears the action queue list being processed. This results in a *ConcurrentModificationException* when returning to the for loop trying to get the next element in list:

{code:java}clear:179, ExecutableList (org.hibernate.engine.spi) <-- action list being cleared
clearFromFlushNeededCheck:796, ActionQueue (org.hibernate.engine.spi)
onAutoFlush:70, DefaultAutoFlushEventListener (org.hibernate.event.internal)
accept:-1, 65056572 (org.hibernate.internal.SessionImpl$$Lambda$1137)
fireEventOnEachListener:93, EventListenerGroupImpl (org.hibernate.event.service.internal)
autoFlushIfRequired:1327, SessionImpl (org.hibernate.internal)
...
<my handler reading from db>
...
fireLazyEventOnEachListener:82, EventListenerGroupImpl (org.hibernate.event.service.internal)
postUpdate:119, CollectionUpdateAction (org.hibernate.action.internal)
execute:94, CollectionUpdateAction (org.hibernate.action.internal)
executeActions:604, ActionQueue (org.hibernate.engine.spi) <-- action list being processed{code}

The autoflush that clears the action list is not needed (code says ""Don't need to execute flush""), so I guess a mechanism could be made to prevent this error.

Related: [https://hibernate.atlassian.net/browse/HHH-7537|https://hibernate.atlassian.net/browse/HHH-7537] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),,,,,,,,,0|104u0w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Remove locks from ProgressiveCharBufferWriter ,HSEARCH-4248,71140,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,18/juin/2021 08:04 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,19/juil./2021 10:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"{{ProgressiveCharBufferWriter}} extends {{Writer}} and does not overwrite some {{write}} methods. The implementation in Writer relies on synchronized blocks, which do not make sense in our case since our writer is not thread-safe.

Offending methods:

* {{java.io.Writer#write(int)}}
* {{java.io.Writer#write(java.lang.String, int, int)}}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-19T10:40:57.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2620,0|1009cw:000000xdur3mhxzzzx1p,,,,,,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@JoinColumnsOrFormulas cannot be used to specify @ForeignKey,HHH-14685,71139,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Victor Noël,5eb0793ec5c6230baa257e72,Victor Noël,5eb0793ec5c6230baa257e72,18/juin/2021 07:48 AM,21/juin/2021 10:39 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hibernate provides {{@JoinColumnsOrFormulas}} as a dropin replacement for {{@JoinColumns}} when there is the need to also use {{@JoinFormula}} on top of specifying columns.

Unfortunately, contrary to {{@JoinColumns}}, it's not possible to specify a foreign key annotation with it.

My particular use case is to use it with {{@ForeignKey(ConstraintMode.NO_CONSTRAINT)}} in order to prevent the use of a foreign key constraint.

h4. Solution I tried

* Here I need to use {{@JoinFormula}} because I would like to express an extra where clause on my {{@ManyToOne}} relation, so if using {{@Where}} with it would work (it does not: [https://hibernate.atlassian.net/browse/HHH-4335|https://hibernate.atlassian.net/browse/HHH-4335|smart-link]) then I could rely on {{@JoinColumns}}
* using {{@AssociationOverride}} didn’t work either because it requires to specify the {{@JoinColumn}} at the same time.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:2de4d5c6-6b16-46ec-90cb-f4916cc89564(ug:2de4d5c6-6b16-46ec-90cb-f4916cc89564),,,,,,,,0|104u0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-21 15:35:01.172,,,,21/juin/2021 08:35 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;There is a legacy annotation called {{org.hibernate.annotations.ForeignKey}} which you can use with the special name {{none}} to achieve what you want. This is a workaround though. I agree that {{@JoinColumnsOrFormulas}}should add support for a foreign key.,"21/juin/2021 08:39 AM;5eb0793ec5c6230baa257e72;I tried it and it didn’t work unfortunately. But since I tried a lot of things, I will try again and get back to you then\!","21/juin/2021 09:00 AM;5eb0793ec5c6230baa257e72;This is what I have (simplified for the example, but the relations are the right ones) and hibernate tries to generate (via {{org.hibernate.tool.hbm2ddl.SchemaUpdate}}) a constraint on the table for {{(uniqueName, a_id, isDeleted)}}



{code:java}@Entity
@Table(name = ""A"")
public final class A {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
}

@Entity
@Table(name = ""B"", uniqueConstraints = {@UniqueConstraint(columnNames = {""a_id"", ""uniqueName""})})
public final class B {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Basic
  private String uniqueName;
  
  @Basic
  private boolean isDeleted;

  @ManyToOne
  @JoinColumn(name=""a_id"", referencedColumName=""id"")
  private A a;
}

@Entity
@Table(name = ""C"", uniqueConstraints = {@UniqueConstraint(columnNames = {""a_id"", ""uniqueName""})})
public final class C {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Basic
  private String uniqueName;

  @ManyToOne
  @JoinColumn(name=""a_id"", referencedColumName=""id"")
  private A a;

  @ManyToOne
  @JoinColumnsOrFormulas({
    @JoinColumnOrFormula(
      column = @JoinColumn(name = ""uniqueName"", referencedColumnName = ""uniqueName"", insertable = false, updatable = false)
    ),
    @JoinColumnOrFormula(
      column = @JoinColumn(name = ""a_id"", referencedColumnName = ""a_id"", insertable = false, updatable = false)
    ),
    @JoinColumnOrFormula(
      formula = @JoinFormula(value = ""isDeleted = false"", referencedColumnName = ""isDeleted"")
    )
  })
  @ForeignKey(name = ""none"")
  private B b;
}{code}","21/juin/2021 09:08 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;This should work. You can debug into {{org.hibernate.cfg.AnnotationBinder#bindForeignKeyNameAndDefinition}} and see what is happening. If you think this is a bug, please attach a test case that reproduces this, or even better, open a PR with a test case integrated into our test suite.","21/juin/2021 09:19 AM;5eb0793ec5c6230baa257e72;OK, apparently the annotation is found, the value is set to the {{foreignKeyName}} but never accessed next.

Could you share the link to a typical test case I can use as example to create a new one? I have no idea where to start 🙂 ",21/juin/2021 10:39 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;You can use the following test case template: [https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java|https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java|smart-link] ,,,,,,,,,,,A faire,,
@CreationTimestamp and @UpdateTimestamp do not always have the same value when persisting a new entity,HHH-14684,71138,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Dmitry Popov,557058:fab4daa2-698a-4bd2-bd48-931dad8ccd44,Dmitry Popov,557058:fab4daa2-698a-4bd2-bd48-931dad8ccd44,18/juin/2021 04:12 AM,18/juin/2021 04:12 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"h3. Fields declaration

Fields declared in the `@Entity` class:

{code:java}
    @CreationTimestamp
    private ZonedDateTime creationTime;

   @UpdateTimestamp
    private ZonedDateTime updateTime;
{code}

h3. Steps
* After a new Entity is created via Spring's JPA Repository `MyEntityRepository#save`.
* Load the Entity.
* Compare `creationTime` and `updateTime`.
* The values are _not always_ the same, from time to time there is several millisecond difference. It leads to flaky test failure like this:
{code:java}
expected: 2021-06-18T12:20:36.492604+02:00[Europe/Berlin] (java.time.ZonedDateTime) but was : 2021-06-18T12:20:36.492092+02:00[Europe/Berlin] (java.time.ZonedDateTime) 
{code}

h3. Suggested solution
When creating the entity, set the @CreationTimestamp and @UpdateTimestamp columns to exactly the same value. Therefore, it would be reliable to define whether the entity has been changed after creationl

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:3508fbfe-e4bf-46cf-a92d-c5cfd355a8d6(ug:3508fbfe-e4bf-46cf-a92d-c5cfd355a8d6),,,,,,,,,0|104u0g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Byteman 4.0.16,HSEARCH-4247,71137,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/juin/2021 00:13 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,17/juin/2021 00:54 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,,,,,,,,build,tests,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-17T00:54:43.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2600,0|104mtz:zch,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
PGGeometryTypeDescriptor returns unknown sql type 5432,HHH-14683,71136,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Doublon,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Michael Wälischmiller,5ff0890d4d2179006e91c2ca,Michael Wälischmiller,5ff0890d4d2179006e91c2ca,16/juin/2021 08:42 AM,23/juin/2021 01:02 AM,14/mars/2022 12:54 PM,23/juin/2021 01:02 AM,5.4.31,5.4.32,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-spatial,,,,0,dialect,,,,,"Accessing postgis GEOGRAPHY(POINT) type fails when upgrading to hibernate-spatial 5.4.31 with exception:

{code:java}
Caused by: org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [geolocation] in table [poi]; found [geography (Types#OTHER)], but expecting [geometry (Types#UNKNOWN(5432))]
{code}


This happens because of class _org.hibernate.spatial.dialect.postgis.PGGeometryTypeDescriptor_ returning value 5432 in _getSqlType_ method. 

{code:java}
	@Override
	public int getSqlType() {
		return 5432;
	}
{code}


The change was introduced by this commit:
https://github.com/hibernate/hibernate-orm/commit/5d3fa320bd9b9bc2af4645ae408322a87a48e3e5

",,,,,,,,,,,,,,,,HHH-14654,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,maeseka(maeseka),ug:24bf634e-046c-4e93-9292-b148fa79cdc1(ug:24bf634e-046c-4e93-9292-b148fa79cdc1),,,,,,,,0|104u08:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,5.4.30,2021-06-17 09:39:50.728,,,,"17/juin/2021 02:39 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;For a temporary workaround, see [https://hibernate.atlassian.net/browse/HHH-14654|https://hibernate.atlassian.net/browse/HHH-14654|smart-link] ",17/juin/2021 02:52 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;I’m lowering the priority as there is a workaround,,,,,,,,,,,,,,,Terminé,,
Upgrade jboss-logging 3.4.2.Final,HSEARCH-4246,71134,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juin/2021 03:01 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,16/juin/2021 04:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,engine,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-16T04:40:27.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2593,0|104mtz:zcg,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Explicit creation of DSL factories (SearchPredicateFactory, etc.) that accept relative paths",HSEARCH-4245,71133,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juin/2021 02:52 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,17/juin/2021 07:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,engine,query,,,0,,,,,,"In some cases, one may want to pass relative paths to the Search DSL, instead of absolute paths like we always expect.

This can be useful when calling reusable methods that can apply the same predicate on different object fields that have same structure (same sub-fields).

Suggested API: by calling a {{withRoot(String)}} method on a factory, you can create a new factory which interprets paths as relative to the object field that was passed as argument to the {{withRoot}} method.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-17T08:03:13.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2592,0|104mtz:zcf,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Migration guide from 6.0 to 6.1,HSEARCH-4244,71132,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/juin/2021 02:27 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,17/juin/2021 07:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,documentation,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-17T07:55:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2597,0|1009cw:000000xdur3mhxzzzx2b,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
H2 supports COMMENT ON,HHH-14682,71131,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Dariush Moshiri,61c75702a54af90069ec214a,Knut Wannheden,5c405861b4d5d75a3b52ed44,Knut Wannheden,5c405861b4d5d75a3b52ed44,15/juin/2021 06:28 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,03/janv./2022 03:12 AM,5.5.2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,metamodel,,,,0,,,,,,The H2 dialect supports the {{COMMENT ON}} statement (see https://www.h2database.com/html/commands.html#comment) and `H2Dialect` should therefore override `supportsCommentOn()` to return `true`.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-03T03:12:49.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:1b92e4fb-11c9-4db5-a497-623b65234f1d(ug:1b92e4fb-11c9-4db5-a497-623b65234f1d),knut.wannheden(knut.wannheden),,,,,,,,0|104tzs:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"""order_inserts = true"" causes FK Violation when using hierarchy of Single_Table inherited Entities",HHH-14681,71130,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Dmytro Iarko,5c4a267429af5e218af2adb1,Dmytro Iarko,5c4a267429af5e218af2adb1,15/juin/2021 01:29 AM,15/juin/2021 01:34 AM,14/mars/2022 12:54 PM,,5.4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"In my case order-inserts=true causes FK constraint violation when it works fine if set to false.

I use single table inheritance strategy. And my class have a OneToOne mapping to another class, also with single table inheritance strategy.
It's like Parent1 with OneToOne to Child1, and Parent2 with OneToOne with Child2. Where Child entity has a foreign key on Parent primary key.
In case of inserts, Parent* records must be inserted first in the database, then Child*.

The attached example reproduces the case when sequence of inserts is changed and it produces foreign key violation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,15/juin/2021 01:34 AM;ug:58085038-9f6f-4470-8ad7-13b00011ca44;hibernate-orm-5.zip;https://hibernate.atlassian.net/secure/attachment/49878/hibernate-orm-5.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:58085038-9f6f-4470-8ad7-13b00011ca44(ug:58085038-9f6f-4470-8ad7-13b00011ca44),,,,,,,,,0|104tzk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.5.2.Final,HSEARCH-4243,71129,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/juin/2021 23:55 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,16/juin/2021 04:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-16T04:40:27.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2593,0|1009cw:000000xdur3mhxzzzx2a,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Entity Graph generates incorrect query when overriding findById,HHH-14680,71128,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Jesse Strode,5cefe082c073290fc27a8780,Jesse Strode,5cefe082c073290fc27a8780,14/juin/2021 07:06 AM,01/déc./2021 05:36 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,,,"Apologies if this isn't a hibernate issue but its my best guess of where the issue may be.

An incorrect query is generated when overriding and providing an entity graph to Spring Data JPA's `findById`. Not enough tables are joined. The issue does not exist when overriding `findAll` or doing a more custom query that matches `findById` such as: `Optional<A1> findOneById (Long id);`.

This is the basic relationship structure that I found exposes this:

A2 m-m A1 m-m B1 

Entities with ManyToMany relationships. But instead of ManyToMany relationships, we actually use relation objects with their own IDs and tables using OneToMany/ManyToOne so it actually looks like this:

A2 o-m A12 m-o A1 o-m AB m-o B1 o-m B12 m-o B2 


When using `@EntityGraph( attributePaths = { ... } )` to define a series of relationships that traverse back on on the starting entity to a new relationship from the starting entity.

Using the relations I defined, starting at A1:

A1 -> AB -> B1 -> AB -> A1 -> A12 -> A2

The entity graph used looks like:

```
@EntityGraph(
      attributePaths = {
        ""b1s"",
        ""b1s.b1"",
        ""b1s.b1.a1s"",
        ""b1s.b1.a1s.a1"",
        ""b1s.b1.a1s.a1.a2s"",
        ""b1s.b1.a1s.a1.a2s.a2""
      })
```
  
When used with findById
```
  @Override
  @EntityGraph(
      attributePaths = {
        ""b1s"",
        ""b1s.b1"",
        ""b1s.b1.a1s"",
        ""b1s.b1.a1s.a1"",
        ""b1s.b1.a1s.a1.a2s"",
        ""b1s.b1.a1s.a1.a2s.a2""
      })
  Optional<A1> findById(Long id);
```
The tables are joined: 
```
from a1 a1x0_
         left outer join ab b1s1_ on a1x0_.id = b1s1_.a1_id
         left outer join b1 b1x2_ on b1s1_.b1_id = b1x2_.id
         left outer join ab a1s3_ on b1x2_.id = a1s3_.b1_id
where a1x0_.id =?
```

but when used with `findAll`
```
  @Override
  @EntityGraph(
      attributePaths = {
        ""b1s"",
        ""b1s.b1"",
        ""b1s.b1.a1s"",
        ""b1s.b1.a1s.a1"",
        ""b1s.b1.a1s.a1.a2s"",
        ""b1s.b1.a1s.a1.a2s.a2""
      })
  List<A1> findAll();
```

the expected tables are successfully joined: 
```
from a1 a1x0_
         left outer join ab b1s1_ on a1x0_.id = b1s1_.a1_id
         left outer join b1 b1x2_ on b1s1_.b1_id = b1x2_.id
         left outer join ab a1s3_ on b1x2_.id = a1s3_.b1_id
         left outer join a1 a1x4_ on a1s3_.a1_id = a1x4_.id
         left outer join a12 a2s5_ on a1x4_.id = a2s5_.a1_id
         left outer join a2 a2x6_ on a2s5_.a2_id = a2x6_.id
```

a sample project can be found here: 
https://github.com/entimaniac/entity-graph-query-generation


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:17597fca-578a-4d44-ad2a-b59596057745(ug:17597fca-578a-4d44-ad2a-b59596057745),ug:3f8f3e26-1ceb-433d-9cd9-9075ad8ca37b(ug:3f8f3e26-1ceb-433d-9cd9-9075ad8ca37b),,,,,,,,0|104tzc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-01 13:36:02.81,,,,"01/déc./2021 05:36 AM;607015002b469c007064233b;Noticed the same. Using the same workaround with a custom query for now. Although we thought that this might be be design, because \{\{findById}} somehow follows a different logic. But it would definitely be good if it would work.",,,,,,,,,,,,,,,,A faire,,
Test more databases,HSEARCH-4242,71127,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/juin/2021 02:15 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,21/juil./2021 08:00 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,"See what we support in ORM.

In particular:

* DB2
* Oracle
* SQL Server
* ...

Important: we will have to move to containers in order to test all that.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-21T07:19:15.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2617,0|1009cw:000000xdur3mhxzzzx1m,,,,,,HSEARCH - 2021-13,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,"17/juin/2021 00:31 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:097eae70-1c75-4c16-ab75-ab9600f8e584] A few pointers:

* The commands used to run databases in Docker in the Hibernate ORM project: [https://github.com/hibernate/hibernate-orm/blob/main/docker_db.sh|https://github.com/hibernate/hibernate-orm/blob/main/docker_db.sh|smart-link] 
* Before running tests, you will need to pull the appropriate container image *while being logged into dockerhub*, otherwise you will hit download limits. That’s done like this: [https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L584-L589|https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L584-L589] 
* The list of databases tested in the Hibernate Search Jenkins job is controlled here: [https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L199,L207|https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L199,L207] . You will have to add more entries there.
* The actual code that triggers the build against a given database is here: [https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L564,L574|https://github.com/hibernate/hibernate-search/blob/main/Jenkinsfile#L564,L574] . You will have to add the code that pulls the container image there (just before helper.withMavenWorkspace).",,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.4.32.Final,HSEARCH-4241,71126,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,14/juin/2021 00:10 AM,23/juin/2021 01:25 AM,14/mars/2022 12:54 PM,16/juin/2021 04:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.10.Final,6.0.5.Final,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-16T04:40:34.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2594,0|1009cw:000000xdur3mhxzzzx27,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Compatibility with Jakarta EE 9.1 (Jakarta Persistence 3),HSEARCH-4240,71125,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/juin/2021 23:59 PM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,28/sept./2021 04:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"Hibernate ORM 5.5 is out and it supports Jakarta EE through separate artifacts, which have been transformed to use the Jakarta EE API instead of the Java EE API (they are almost identical, except they exist in different packages).

We should do the same for Hibernate Search:

* Create new ""-jakarta"" variants (a new module) for artifacts that rely on Jakarta EE instead of Java EE. These modules will simply take the code of the original artifact and replace Java EE dependency with a Jakarta EE dependency through bytecode transformation.
* Create test modules for these modules. Ideally we should just transform existing tests and avoid copy/pasting them.

I believe this mainly affects the ORM mapper and the JSR-352 integration, but any module relying on a Java EE spec might need its own ""variation"" to support Jakarta EE.

There are examples of how to do the transformation in Hibernate ORM, but unfortunately it's using Gradle plugins. We will have to find out how to do this with Maven.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-29T05:20:45.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2661,0|1009cw:000000xdur3mhxzzzxezsq4dd,,,,,,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,"17/juin/2021 05:51 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;A Maven plugin that can be used to do the bytecode transformation: [https://github.com/eclipse/transformer|https://github.com/eclipse/transformer|smart-link] 

According to Steve it’s similar to how the transformation is done in ORM 5.5.0, and requires a lot of setup. But at least it should work 🙂 

Also, Scott Marlow contributed a bit to that project, so he might be able to help if we encounter problems.",29/sept./2021 05:21 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;See also follow-up PR [https://github.com/hibernate/hibernate-search/pull/2664|https://github.com/hibernate/hibernate-search/pull/2664|smart-link] ,,,,,,,,,,,,,,,Terminé,,
Deprecate ResultSetWrapper and friends,HHH-14679,71124,,Deprecation,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/juin/2021 08:53 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,14/juin/2021 08:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-14T08:25:01.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4050,0|104tz4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop ResultSetWrapper and friends,HHH-14678,71123,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,11/juin/2021 08:51 AM,11/juin/2021 10:04 AM,14/mars/2022 12:54 PM,11/juin/2021 10:04 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,,,,,0,,,,,,"ResultSetWrapper, ColumnNameCache, etc were all added to work around performance issues on certain drivers due to Hibernate's strategy of reading ResultSet values by name.  

This entire strategy is changed in 6 which now reads by position, rendering these classes unnecessary.",,,,,,,,,,,,,,,,,,,HHH-14679,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-11T10:02:47.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104tyw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Multiple Roottreat's with ""order by"" and case when on more than one treat on an inheritancetype.joined Entity",HHH-14677,71121,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,,,,Horst Leitenmueller,557058:e329a1ac-23f0-4802-8bbd-c77a9fe5f155,Horst Leitenmueller,557058:e329a1ac-23f0-4802-8bbd-c77a9fe5f155,11/juin/2021 06:21 AM,11/juin/2021 06:32 AM,14/mars/2022 12:54 PM,,5.3.20,5.4.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"My Problem I found no other possibility to load a Inheritance Object ContactNode with Childs and order by on the Childs/ChildAssociations

without using treat, but with this a SQL Query is generated which loads nothing; this is a real show stopper...

What I want is to load the ContactNode and sort for the ""NAME"" either for companyName OR LastName of the ContactPerson

@Inheritance(strategy = InheritanceType._JOINED_)

{noformat}      [A] ContactNode ------- [1] Company
              |
      ------------------
      |                |
 ContactCompany      Contact  ------- [1] Person        
    -companyName                            -lastname{noformat}



{code:java}CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<T> cq = (CriteriaQuery<T>) cb.createQuery(ContactNodeElem.class);

Root<ContactNodeElem> root = cq.from(ContactNodeElem.class);
contactRoot = cb.treat(root, ContactElem.class);
contactCompanyRoot = cb.treat(root, ContactCompanyElem.class);


Expression<Object> caseNameExpression = cb.selectCase()
        .when(cb.isNotNull(personJoin.get(PersonElem_.LAST_NAME)), personJoin.get(PersonElem_.LAST_NAME))
 !!===>>//.when(cb.isNotNull(contactCompanyRoot.get(ContactCompanyElem_.COMPANY_NAME)), contactCompanyRoot.get(ContactCompanyElem_.COMPANY_NAME))
        .otherwise("""");

List<Order> orderList = new LinkedList<>();
orderList.add(cb.asc(caseNameExpression));

cq.orderBy(orderList);
TypedQuery<T> query = em.createQuery(cq);{code}

Problem ist the POS \!\! If I add the second treatedroot element the generated query changes from LEFT JOIN to INNER JOIN which causes the problem to load nothing 

without:

{code:sql}SELECT
contactnod0_.*,
CASE WHEN contactnod0_1_.id is not null THEN 1 WHEN contactnod0_2_.id is not null THEN 2 WHEN contactnod0_.id is not null THEN 0 END as clazz_
FROM contact_node contactnod0_
LEFT OUTER JOIN contact_company contactnod0_1_ ON contactnod0_.id=contactnod0_1_.id
LEFT OUTER JOIN contact contactnod0_2_ ON contactnod0_.id=contactnod0_2_.id
INNER JOIN company companyele1_ ON contactnod0_.company_id_fk=companyele1_.id
LEFT OUTER JOIN person_data personelem2_ ON contactnod0_2_.person_data_id_fk=personelem2_.id
WHERE companyele1_.id IN (1)
ORDER BY 
	case 
		WHEN personelem2_.lastName is not null THEN personelem2_.lastName 
		else '' 
	end asc{code}

you can see *LEFT OUTER JOIN contact_company* contactnod0_1_ ON 

but with the contactCompanyRoot 

{code:sql}SELECT
contactnod0_.*,
CASE WHEN contactnod0_1_.id is not null THEN 1 WHEN contactnod0_2_.id is not null THEN 2 WHEN contactnod0_.id is not null THEN 0 END as clazz_
FROM contact_node contactnod0_
INNER JOIN contact_company contactnod0_1_ ON contactnod0_.id=contactnod0_1_.id
LEFT OUTER JOIN contact contactnod0_2_ ON contactnod0_.id=contactnod0_2_.id
INNER JOIN company companyele1_ ON contactnod0_.company_id_fk=companyele1_.id
LEFT OUTER JOIN person_data personelem2_ ON contactnod0_2_.person_data_id_fk=personelem2_.id
WHERE companyele1_.id in (1)
ORDER BY 
	CASE 
		WHEN personelem2_.lastName is not null THEN personelem2_.lastName 
		WHEN contactnod0_1_.companyName is not null THEN contactnod0_1_.companyName 
		ELSE '' 
	END asc{code}

I found no chance with Criteria API to get it working

I implemented the DOG / Greyhound /  test according to my problem which shows this behaviour",env: hibernate 5.3.15.Final / also with 5.4.24 inside test-case-tempalte-hibernat-orm5 ,,,,,,,,,,,,,,,,,,,,,,,,,,,,11/juin/2021 06:29 AM;ug:7904f9a1-16e1-43b8-b3fa-068a8d97c9ac;JPAUnitTestCase.java;https://hibernate.atlassian.net/secure/attachment/49877/JPAUnitTestCase.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:7904f9a1-16e1-43b8-b3fa-068a8d97c9ac(ug:7904f9a1-16e1-43b8-b3fa-068a8d97c9ac),,,,,,,,,0|104tyg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Credentials error while mass indexing on AWS ES with static credentials: ""The request signature we calculated does not match the signature you provided.""",HSEARCH-4239,71120,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Lorenzo,60531b4a90f288007001a1ba,Lorenzo,60531b4a90f288007001a1ba,11/juin/2021 06:11 AM,05/juil./2021 01:48 AM,14/mars/2022 12:54 PM,21/juin/2021 04:03 AM,6.0.3.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.5.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,"Hello everyone,
I have an application that uses Hibernate search 6.0.3Final with an ES backend.
Until today, I used a local elasticsearch node and everything worked as expected.
Today I tried plugging in an AWS managed cluster, using static authentication, eg.

{code:java}hibernate.search.backend.hosts=mydomain.es.amazonaws.com
hibernate.search.backend.aws.signing.enabled=true
hibernate.search.backend.aws.region=myregion
hibernate.search.backend.aws.credentials.type=static
hibernate.search.backend.aws.credentials.access_key_id=myaccess
hibernate.search.backend.aws.credentials.secret_access_mysecret{code}

The app manages to connect to the cluster fine, but whenever I try to reindex my data using the MassIndexer, I am getting a bunch of 

{code:java}HSEARCH400588: Call to the bulk REST API failed: HSEARCH400007: Elasticsearch request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request: POST /_bulk with parameters {}
Response: 403 'Forbidden' from 'https://mydomain.es.amazonaws.com' with body
{
  ""message"": ""The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.""
}{code}

AWS credentials are fine (the app managed to connect, create mappings and index some data).
The machine is configured to use a different IAM user, if it could be of any help.","Hibernate 5.4.28.Final, Java 8, Linux Debian",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-21T04:01:06.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:46a355aa-8dd2-4762-a06d-c2e397c164a4(ug:46a355aa-8dd2-4762-a06d-c2e397c164a4),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2603,0|104mtz:zcd,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,2021-06-11 13:18:42.89,,,,"11/juin/2021 06:18 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;All I can say is:

* Hibernate Search uses the AWS SDK to build the signature, nothing fancy.
* We run all our Elasticsearch integration tests against vanilla Elasticsearch *and* AWS Elasticsearch Service, both with dynamic credentials and with static credentials.

I know from experience that debugging this kind of signature errors on AWS is a pain, though…

If I had to guess, there must be something with the request that triggers an exotic path in the signature code, leading to an invalid signature.

I know that the Apache HTTP client sometimes sends information differently depending on the length of the request, so that might be the problem? Though that would be surprising, since we have both very long and very short documents in our integration tests.

If you can provide a reproducer I can have a look, but without that you’re unlikely to get help here…","11/juin/2021 07:49 AM;60531b4a90f288007001a1ba;Hi Yohann, thank you for your prompt response.

All I can say is that I use the AWS SDK extensively within my application (for other services) and never experienced this kind of problem. I am going to try dynamic credentials and see if I get the same output ASAP.

Do you reckon it can be in some way related to a request throughput that is higher than what the ES cluster can process? (I’m thinking about expiring requests, or something like that, due to the fact that some seem to go through)

I will look into providing a reproducer, but I really hope it will not be necessary\! I’ll let you know.","11/juin/2021 08:04 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;{quote}Do you reckon it can be in some way related to a request throughput that is higher than what the ES cluster can process? (I’m thinking about expiring requests, or something like that, due to the fact that some seem to go through){quote}

Possibly. I believe the signature includes a date, which I suppose is used by AWS to reject requests that are too old. I would expect them to say so in the error message, but experience has shown that they don’t tell you much when things are wrong… In fact that’s the reason we moved from a lightweight custom library to the full AWS SDK for signing: it was just impossible to debug.

But it could be anything honestly. Hibernate Search delegates to the Apache HTTP client to build requests, and to the AWS SDK to build signatures. The problem could be in either of these technologies, their input, their configuration, or their interaction. Hard to say 😕

{quote}I will look into providing a reproducer, but I really hope it will not be necessary\! I’ll let you know.{quote}

Thanks\!","15/juin/2021 00:14 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Good news (I guess): we’re starting to see this error on our CI as well. See for example [https://ci.hibernate.org/view/Search/job/hibernate-search/job/main/56/testReport/junit/org.hibernate.search.integrationtest.showcase.library/LibraryShowcaseMassIndexingIT(elasticsearch-aws-6_8-default-elasticsearch)/Non_default_environments___elasticsearch_aws_6_8___testMassIndexingMonitor/|https://ci.hibernate.org/view/Search/job/hibernate-search/job/main/56/testReport/junit/org.hibernate.search.integrationtest.showcase.library/LibraryShowcaseMassIndexingIT(elasticsearch-aws-6_8-default-elasticsearch)/Non_default_environments___elasticsearch_aws_6_8___testMassIndexingMonitor/]

Now, there are several things to take into account:

* These errors never happened on our CI before.
* These errors started happening out of the blue, without us changing anything to the AWS of HTTP client code, or updating related dependencies.
* The only remotely related change in our code was in how the mass indexer handles exceptions, so I could hypothetically imagine that the failures were there but we were not reporting them correctly, which would explain why we’ve never seen them on CI. But knowing the code, this specific kind of failure should not have been affected by recent changes…

With that in mind, I suspect there has been (subtle) changes in how AWS creates the signatures. Probably some bugfix for an edge case that is not encountered frequently.

I will try to reproduce the problem, then I will see if upgrading the dependency to the AWS SDK helps.

In the meantime, could you please tell us:

# Which version of AWS Elasticsearch Service you are using
# How the errors are reported when they happen: does the mass indexer ultimately throw an exception when it’s done? Are there logs somewhere that include the message {{Entities that could not be indexed correctly}}?
# Were you ever able to use the mass indexer on AWS without seeing these problems? When, which versions of HSearch and ES?","15/juin/2021 04:15 AM;60531b4a90f288007001a1ba;Hello Yohann, well, at least I’m not just unlucky I guess\!

FYI I tried switching auth methods (static/default), regenerating credentials, fiddling with mass indexer upload rates with no avail.

Regarding your questions:

* I am using a newly created cluster with ES 7.10
* The error is logged via a a MassIndexingFailureHandler I plugged into my MassIndexer instance. I just logged the context.throwable() and found this cause. Errors are repeated troughout the whole process (I’d estimate ~10% of errors from the bulk calls from the final result). Failing operation is: “Found failing operation: Indexing instance of entity '<myentity>' during mass indexing”
* I was never able to index on AWS without those errors. As I wrote in the original ticket though, I tried my first bulk indexing on AWS ES last Friday. Local indexing works just fine. ","21/juin/2021 01:10 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello [~accountid:60531b4a90f288007001a1ba] ,

Good news, I managed to isolate and fix the bug. It was caused by a write to an invalid offset in a buffer, in the code that feeds the request content to AWS SDK’s signer. It only happened with content of a specific size, which is why we didn’t identify the problem sooner.

Turns out you were a bit unlucky after all 🙂 

In any case, we will backport the fix to 6.0 and release soon.","21/juin/2021 08:43 AM;60531b4a90f288007001a1ba;Oh well, that’s good news for me anyway, heh.

Keep up the good work\!","23/juin/2021 09:36 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Fixed in 6.0.5.Final, released today: [https://in.relation.to/2021/06/23/hibernate-search-6-0-5-Final/|https://in.relation.to/2021/06/23/hibernate-search-6-0-5-Final/|smart-link] ","24/juin/2021 08:56 AM;60531b4a90f288007001a1ba;I just pulled 6.0.5Final and tried a reindex on AWS.

Seems to me that the situation improved: the lighter entities now get indexed without any exception. Whenever the mass indexer gets to bigger documents though (eg. file contents), it is still throwing a fair amount of exceptions on credentials.

I know these are just vague feedbacks, but I hope they can help you in some way.

This is my MassIndexer configuration:

{noformat}searchSession
.massIndexer( classToIndex )
.batchSizeToLoadObjects( 100 )
.threadsToLoadObjects( 5 )
.idFetchSize( Integer.MIN_VALUE )
.transactionTimeout( 1800 )
.monitor( monitor )
.failureHandler( failureHandler )
.start();{noformat}

Let me know if I can be of any help.","04/juil./2021 23:56 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I’m afraid that’s not enough information. I added tests with (very) large documents, in particular one where each document is the whole text of “Great Expectations”, and I did experience similar problems, but I found the cause (at least in that case) and managed to fixe it. See [https://github.com/hibernate/hibernate-search/blob/32cc18a8a89995d9ab4deb9174253a368544907f/integrationtest/backend/tck/src/main/java/org/hibernate/search/integrationtest/backend/tck/work/IndexIndexerLargeDocumentsIT.java#L46|https://github.com/hibernate/hibernate-search/blob/32cc18a8a89995d9ab4deb9174253a368544907f/integrationtest/backend/tck/src/main/java/org/hibernate/search/integrationtest/backend/tck/work/IndexIndexerLargeDocumentsIT.java#L46]  .

Please make sure you upgraded to the latest version of both {{hibernate-backend-elasticsearch-aws}} and *also* {{hibernate-backend-elasticsearch}}, because one of the bugs was in {{hibernate-backend-elasticsearch}} (though it affected only the AWS integration). In general you should always use the same version for all Hibernate Search modules, but who knows…

If the problem remains:

* What are the stack traces exactly, this time? Including all frames and all causes.
* Are you using custom configuration for the HTTP client ({{ElasticsearchHttpClientConfigurer}})?
* Are there any enterprise firewalls between you and AWS that could alter the requests, e.g. by changing or dropping signed headers or slightly altering the content of the request (encoding errors, adding a line break at the end, …)?
* If all else fails, I will need you to pinpoint the exact requests that are failing (by [enabling logs|https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#troubleshooting-logging-elasticsearch-request]), and give me the exact content of the first failing request.",05/juil./2021 01:48 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I see you created HSEARCH-4254. Let’s continue the discussion there.,,,,,,Terminé,,
PostgreSQLSkipAutoCommitTest ends up with a NPE on PostgreSQL Plus 13.1 ,HHH-14676,71119,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,11/juin/2021 04:55 AM,11/juin/2021 04:58 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"_org.hibernate.test.resource.transaction.jdbc.autocommit.PostgreSQLSkipAutoCommitTest_ case does not pass on PostgreSQL Plus 13.1 due to the fact that datasource class name [is hardcoded|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/test/java/org/hibernate/test/resource/transaction/jdbc/autocommit/PostgreSQLSkipAutoCommitTest.java#L26] for common PostgreSQL database.

After the PostgreSQL Plus driver was added on local classpath and the DS class name value was changed from _org.postgresql.ds.PGSimpleDataSource_ to _com.edb.ds.PGSimpleDataSource_ - the test run was successful. 

Perhaps, some update or fix might be considered.","oracle-java-1.8
postgresplus 13.1
hibernate.dialect org.hibernate.dialect.PostgresPlusDialect
EnterpriseDB JDBC Driver 42.2.12.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104ty0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
org.hibernate.testing.junit4.BaseCoreFunctionalTestCase#cleanupTestData fails on PostgreSQL Plus 13.1 with PSQLException,HHH-14675,71118,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,11/juin/2021 04:25 AM,11/juin/2021 04:52 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"Executing the SQL expression: 

{noformat}
Hibernate: delete from ALL_TABLES. 
{noformat}

results in PSQLException which is thrown in the _org.hibernate.testing.junit4.BaseCoreFunctionalTestCase#cleanupTestData_ method after each _org.hibernate.test.annotations.query.QueryAndSQLTest_ test is completed:

{noformat}
Caused by: com.edb.util.PSQLException: ERROR: cannot delete from view ""all_tables""
  Detail: Views containing WITH are not automatically updatable.
  Hint: To enable deleting from the view, provide an INSTEAD OF DELETE trigger or an unconditional ON DELETE DO INSTEAD rule.
{noformat}

Perhaps, the SQL expression that creates _all_tables_ view could be slightly reworked/updated.
","oracle-java-1.8
postgresplus 13.1
hibernate.dialect org.hibernate.dialect.PostgresPlusDialect
EnterpriseDB JDBC Driver 42.2.12.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104txs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
PostgreSQLStoredProcedureTest ends up on PostgreSQL Plus 13.1 with a different exception than expected,HHH-14674,71117,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,11/juin/2021 03:54 AM,11/juin/2021 03:57 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"Running _org.hibernate.test.procedure.PostgreSQLStoredProcedureTest.testFunctionWithJDBCByName_ on PostgreSQL Plus 13.1 results in a ComparisonFailure:

{noformat}
java.lang.AssertionError: expected:<class java.sql.SQLFeatureNotSupportedException> but was:<class com.edb.util.PSQLException>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:120)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at org.hibernate.test.procedure.PostgreSQLStoredProcedureTest.lambda$testFunctionWithJDBCByName$16(PostgreSQLStoredProcedureTest.java:299)
	at org.hibernate.testing.transaction.TransactionUtil.doInJPA(TransactionUtil.java:255)
	at org.hibernate.testing.transaction.TransactionUtil.doInJPA(TransactionUtil.java:296)
	at org.hibernate.test.procedure.PostgreSQLStoredProcedureTest.testFunctionWithJDBCByName(PostgreSQLStoredProcedureTest.java:278)
{noformat}","oracle-java-1.8
postgresplus 13.1
hibernate.dialect org.hibernate.dialect.PostgresPlusDialect
EnterpriseDB JDBC Driver 42.2.12.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104txk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
 org.hibernate.test.annotations.dataTypes.BasicOperationsTest fails on PostgreSQL Plus 13.1 with a ComparisonFailure,HHH-14673,71116,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,11/juin/2021 03:45 AM,11/juin/2021 03:47 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"Running _org.hibernate.test.annotations.dataTypes.BasicOperationsTest.testCreateAndDelete_ on PostgreSQL Plus 13.1 results in a ComparisonFailure:

{noformat}
org.junit.ComparisonFailure: ID expected:<[DATE]> but was:<[TIMESTAMP]>
    at org.junit.Assert.assertEquals(Assert.java:115)
    at org.hibernate.test.annotations.dataTypes.BasicOperationsTest$ValidateSomeEntityColumns.validateColumn(BasicOperationsTest.java:120)
    at org.hibernate.test.annotations.dataTypes.BasicOperationsTest$ValidateSomeEntityColumns.execute(BasicOperationsTest.java:97)
{noformat}

whilst on a PostgreSQL 13.2 this issue is not present (_java.util.Date_ is correctly mapped as _java.sql.Date_). There could be some difference in database drivers or dialects - unfortunately, there is a lack of knowledge from my side in order to define the possible reason.
","oracle-java-1.8
postgresplus 13.1
hibernate.dialect org.hibernate.dialect.PostgresPlusDialect
EnterpriseDB JDBC Driver 42.2.12.3",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104txc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Allow specifying CHAR-based storage for UUID mappings,HHH-14672,71112,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,10/juin/2021 15:35 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"Yes, users can use explicitly specify `UUIDCharType` for the type-mapping but that overrides the specialized handling for PGSQL.

Much of the discussion at https://github.com/eclipse-ee4j/jpa-api/issues/152 is relevant here.  

{code:java}
@Entity
class Person {
    @Id
    UUID id;

    ...
}
{code}

Here we have a ""fallback"" case.  IMO the fallback case should:

1) Look for a setting, and use it if found
2) Ask the dialect.  `Dialect` would say to use BINARY, but PGSQL dialect would say to use its UUID type

Again, this is a fallback.  If the user wants CHAR they would just pass CHAR as the setting(1).

I also think it makes sense to allow this to be affected per-attribute.  E.g.

{code:java}
@Entity
class Person {
    @Id
    @Uuid( CHAR )
    UUID id;

    ...
}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),steve(steve),,,,,,,,0|104twg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-11 19:46:29.393,,,,11/juin/2021 12:46 PM;557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64;Here is a typical stackoverflow page: [https://stackoverflow.com/questions/50003906/storing-uuid-as-string-in-mysql-using-jpa|https://stackoverflow.com/questions/50003906/storing-uuid-as-string-in-mysql-using-jpa|smart-link] ,,,,,,,,,,,,,,,,A faire,,
Failing to save objects to db with @GeneratedValue(IDENTITY) and bidirectional @OneToMany,HHH-14671,71111,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ancien utilisateur,557058:a7632d29-3694-42b2-9b4d-cc48cfa350d3,Ancien utilisateur,557058:a7632d29-3694-42b2-9b4d-cc48cfa350d3,10/juin/2021 09:30 AM,14/juin/2021 04:42 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hi, I am having troubles persisting and cascading two entities, both with generated ids.

h1. Database tables

{code:java}CREATE TABLE [dbo].[CISLO](
	[ID_CISLA] [bigint] IDENTITY(1,1) NOT NULL,
        constraint PK_CISLO primary key (ID_CISLA)
        ...omit other columns for brevity{code}

This table behaves just like binding one - it connects numbers to stack

{code:java}CREATE TABLE [dbo].[VAZBA_ZASOBNIK_CISLO](
	[ID_VAZBY_ZASOBNIK_CISLO] [bigint] IDENTITY(1,1) NOT NULL,
	[ID_ZASOBNIKU] [int] NOT NULL,
	[ID_CISLA] [bigint] NOT NULL,
        constraint PK_VAZBA_ZASOBNIK_CISLO primary key (ID_VAZBY_ZASOBNIK_CISLO)
	...omit other columns for brevity{code}

{code:java}CREATE TABLE [dbo].[ZASOBNIK](
	[ID_ZASOBNIKU] [int] IDENTITY(1,1) NOT NULL PRIMARY KEY,
        constraint PK_ZASOBNIK primary key (ID_ZASOBNIKU)
        ...omit other columns for brevity{code}

h1. Entities looks like this

{code:java}@Getter
@Setter
@ToString
@NoArgsConstructor(access = AccessLevel.PROTECTED)

@Entity
public class Cislo extends AbstractBaseEntity<Cislo, Long> {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idCisla;

    @ToString.Exclude
    @Setter(AccessLevel.NONE)
    @OneToMany(mappedBy = ""cislo"", cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private Collection<VazbaZasobnikCislo> numberStackRelations = new LinkedList<>();{code}



{code:java}@Getter
@Setter
@ToString
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Entity
public class VazbaZasobnikCislo extends AbstractBaseEntity<VazbaZasobnikCislo, Long> {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long idVazbyZasobnikCislo;

    @NotNull
    @ToString.Exclude
    @JoinColumn(name = ""ID_ZASOBNIKU"")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Zasobnik zasobnik;

    @NotNull
    @ToString.Exclude
    @JoinColumn(name = ""ID_CISLA"")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    private Cislo cislo;
}{code}



{code:java}@Getter
@Setter
@ToString
@NoArgsConstructor(access = AccessLevel.PROTECTED)

@Entity
public class Zasobnik extends AbstractBaseEntity<Zasobnik, Integer> {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer idZasobniku;

    @ToString.Exclude
    @Setter(AccessLevel.NONE)
    @OneToMany(mappedBy = ""zasobnik"", cascade = {CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH})
    private Collection<VazbaZasobnikCislo> numberStackRelations = new LinkedList<>();{code}

h1. Now the program part

I am trying to create number (Cislo) and link it to existing stack (Zasobnik) by creating number-stack relation (VazbaZasobnikCislo).
Entire block runs in transaction session using spring's @Transactional (with open-in-view disabled). ""stack"" variable is persistent entity Zasobnik. ""asNew"" just sets the flag isNew for Persistable interface (this time maybe unnecessary due to id generation).

{code:java}var number = new Cislo(purpose, remainingRange.getFrom(), false, false, false);
var numberStackRelation = VazbaZasobnikCislo.initialize(""CISRAD"", stack, number.asNew());
vazbaZasobnikCisloService.save(numberStackRelation.asNew());{code}



VazbaZasobnikCislo.initialize keeps other relations in sync.

{noformat}    private VazbaZasobnikCislo(String autorZmeny, Zasobnik zasobnik, Cislo cislo) {
        this.zasobnik = zasobnik;
        this.cislo = cislo;
        this.auditAttributes = new AuditAttributes(autorZmeny);
    }

    public static VazbaZasobnikCislo initialize(String autorZmeny, Zasobnik stack, Cislo number) {
        var stackNumberRelation = new VazbaZasobnikCislo(autorZmeny, stack, number);
        stack.getNumberStackRelations().add(stackNumberRelation);
        number.getNumberStackRelations().add(stackNumberRelation);
        return stackNumberRelation;
    }
{noformat}



The following code produces this sql:

{code:java}Hibernate:
    insert
    into
        CISLO
        (CERPANO_V_CILOVEM_SYSTEMU_AN, DATUM_ZARAZENI_BLACKLIST, DATUM_ZMENY, HODNOTA_CISLA, NEOPRAVNENE_POUZITI_AN, POUZITE_AN, ID_UCELU)
    values
        (?, ?, ?, ?, ?, ?, ?) select
            scope_identity()
Hibernate:
    insert
    into
        VAZBA_ZASOBNIK_CISLO
        (AUTOR_ZMENY, DATUM_ZMENY, ID_CISLA, ID_UZIVATELE_KOMU_PRIDELENO, POPIS, ID_POZADAVKU, ID_UCTU_KOMU_PRIDELENO, ID_ZASOBNIKU)
    values
        (?, ?, ?, ?, ?, ?, ?, ?) select
            scope_identity()
2021-06-10 14:40:23.158  WARN 61377 --- [nio-8087-exec-6] o.h.e.j.s.SqlExceptionHelper             : SQL Error: 547, SQLState: 23000
2021-06-10 14:40:23.161 ERROR 61377 --- [nio-8087-exec-6] o.h.e.j.s.SqlExceptionHelper             : Příkaz INSERT způsobil konflikt s omezením FOREIGN KEY s názvem FK_VAZBA_ZA_R_VAZBA_C_CISLO. Ke konfliktu došlo v databázi CISRAD_KOOP, tabulce dbo.CISLO, , column 'ID_CISLA'.{code}

*FK_VAZBA_ZA_R_VAZBA_C_CISLO* is defined like:

{code:java}alter table VAZBA_ZASOBNIK_CISLO
    add constraint FK_VAZBA_ZA_R_VAZBA_C_CISLO foreign key (ID_CISLA)
        references CISLO (ID_CISLA)
        on update cascade
go{code}

If you need any more information, let me know. I am going to provide catched SQL profiler result what is actually being sent do the database.","Database SQL server, adoptopenjdk 11.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,rk:6a61cfaa-87fa-444a-83c0-5d499b5ebefc(rk:6a61cfaa-87fa-444a-83c0-5d499b5ebefc),,,,,,,,,0|104tw8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"14/juin/2021 00:55 AM;557058:a7632d29-3694-42b2-9b4d-cc48cfa350d3;This goes into database:



{code:sql}exec sp_executesql N'insert into CISLO (CERPANO_V_CILOVEM_SYSTEMU_AN, DATUM_ZARAZENI_BLACKLIST, DATUM_ZMENY, HODNOTA_CISLA, NEOPRAVNENE_POUZITI_AN, POUZITE_AN, ID_UCELU) values (@P0, @P1, @P2, @P3, @P4, @P5, @P6) select scope_identity()',N'@P0 bit,@P1 datetime2,@P2 datetime2,@P3 bigint,@P4 bit,@P5 bit,@P6 smallint',0,NULL,'2021-06-14 09:52:24.9277930',260,0,0,2
go
exec sp_executesql N'insert into VAZBA_ZASOBNIK_CISLO (AUTOR_ZMENY, DATUM_ZMENY, ID_CISLA, ID_UZIVATELE_KOMU_PRIDELENO, POPIS, ID_POZADAVKU, ID_UCTU_KOMU_PRIDELENO, ID_ZASOBNIKU) values (@P0, @P1, @P2, @P3, @P4, @P5, @P6, @P7) select scope_identity()',N'@P0 nvarchar(4000),@P1 datetime2,@P2 bigint,@P3 nvarchar(4000),@P4 nvarchar(4000),@P5 nvarchar(4000),@P6 int,@P7 int',N'CISRAD','2021-06-14 09:52:24.9239760',0,NULL,NULL,NULL,NULL,6
go
{code}",14/juin/2021 04:42 AM;557058:a7632d29-3694-42b2-9b4d-cc48cfa350d3;It turned out to be database instead of insert trigger,,,,,,,,,,,,,,,A faire,,
TimeAndTimestampTest fails on SAP ASE16.0 with an assertion error,HHH-14670,71110,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,10/juin/2021 07:08 AM,10/juin/2021 07:14 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"An Assertion error is thrown

{noformat}
java.lang.AssertionError: expected:<45678> but was:<45676>
{noformat}

while running _org.hibernate.test.type.TimeAndTimestampTest.test_.

As [SAP documentation|http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc32300.1600/doc/html/san1390612192030.html] states: 

_datetime values are accurate to 1/300 second on platforms that support this level of granularity_,

Perhaps, other [milliseconds value for inserting|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/test/java/org/hibernate/test/type/TimeAndTimestampTest.java#L58] to a database should be considered - empirically it was discovered if the latest digit is equal to zero, three or nine - it will not be rounded. ","oracle-java-1.8

jconn4.jar - jConnect (TM) for JDBC(TM)/16.0 GA (Build 27008)

hibernate.dialect org.hibernate.dialect.SybaseASE157Dialect
hibernate.connection.driver_class com.sybase.jdbc4.jdbc.SybDriver
hibernate.connection.url jdbc:sybase:Tds:\${db.hostname}:5000/\${db.username}?SQLINITSTRING=set quoted_identifier on&SQLINITSTRING=set ANSINULL on
hibernate.connection.username \${db.username}
hibernate.connection.password \${db.password}
hibernate.jdbc.use_streams_for_binary false
hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104tw0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
CriteriaLiteralWithSingleQuoteTest: SAP ASE16.0 does not support grouping by column heading or alias,HHH-14669,71109,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,10/juin/2021 06:49 AM,10/juin/2021 06:53 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"Running _rg.hibernate.jpa.test.criteria.literal.CriteriaLiteralWithSingleQuoteTest.testLiteralProjectionAndGroupBy_ on 

SAP ASE16.0 results in an exception:

{noformat}
select
''' || aValue || ''' as col_0_0_ 
from
Students criteriali0_ 
group by
''' || aValue || '''
com.sybase.jdbc4.jdbc.SybSQLException: GROUP BY expressions must refer to column names
{noformat}

According to [documentation|https://help.sap.com/viewer/e0d4539d39c34f52ae9ef822c2060077/16.0.2.9/en-US/ab305928bc2b1014b8d0e1ec2802bd00.html] we can not group by column heading or alias.

Perhaps an SkipForDialect annotation could be added. ","oracle-java-1.8

jconn4.jar - jConnect (TM) for JDBC(TM)/16.0 GA (Build 27008)

hibernate.dialect org.hibernate.dialect.SybaseASE157Dialect
hibernate.connection.driver_class com.sybase.jdbc4.jdbc.SybDriver
hibernate.connection.url jdbc:sybase:Tds:\${db.hostname}:5000/\${db.username}?SQLINITSTRING=set quoted_identifier on&SQLINITSTRING=set ANSINULL on
hibernate.connection.username \${db.username}
hibernate.connection.password \${db.password}
hibernate.jdbc.use_streams_for_binary false
hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104tvs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Bug using @DiscriminatorColumn/@DiscriminatorValue and self association,HHH-14668,71103,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Roberto Neto,557058:4c0fef93-88ef-41ac-8469-d170daa1e4e4,Roberto Neto,557058:4c0fef93-88ef-41ac-8469-d170daa1e4e4,09/juin/2021 18:33 PM,10/juin/2021 13:40 PM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I'm using the @DiscriminatorColumn/@DiscriminatorValue entities.

One of this entities (DiscriminatorValue) is self-associated to other DiscriminatorValue entities.

This is my mapping classes:

* Holder (simple entity)
* Component (entity with @DiscriminatorColumn)
* ComponentContainer extends Component (entity with @DiscriminatorValue)
* ComponentA extends Component (entity with @DiscriminatorValue)
* ComponentB extends Component (entity with @DiscriminatorValue)

The Holder has many Components, and the ComponentContainer has many Components too.

In the database I have this instances/hierarchy:

* 1 Holder
** 1 ComponentContainer
*** 1 ComponentA
*** 1 ComponentB

But then I load the Holder instance, it results on 2 instances (sameone) of ComponentContainer inside ""components"" association:

* 1 Holder
** 1 ComponentContainer
*** 1 ComponentA
*** 1 ComponentB
** 1 ComponentContainer
*** 1 ComponentA
*** 1 ComponentB

In attachment an example reproducing the behavior (bug).

I suppose that the EAGER loading of Holder.components is the responsible.

The spring framework, used in example, is just because it's easily for me to implement the test case. The source of the problem is evidenced in the EntityManager.find used by Spring data repository.","Spring boot 2.4.5, Hibernate 5.4.30.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,09/juin/2021 18:16 PM;betoneto.tbo;hibernate-discriminator-bug.zip;https://hibernate.atlassian.net/secure/attachment/49876/hibernate-discriminator-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,betoneto.tbo(betoneto.tbo),,,,,,,,,0|104tug:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Applying identifier/value/types/property bridges to dynamic-map properties,HSEARCH-4238,71102,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/juin/2021 06:43 AM,14/juin/2021 01:57 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"We should investigate how to provide alternatives to {{org.hibernate.search.mapper.pojo.bridge.binding.IdentifierBindingContext#bridge(java.lang.Class<I2>, org.hibernate.search.mapper.pojo.bridge.IdentifierBridge<I2>)}} and similar that work when the property type itself is a dynamic map (named {{Map}} type).

h3. Why

Following [this question|https://stackoverflow.com/questions/67901520/hibernate-envers-hibernate-search-reading-audit-information-over-lucene-elas], I tried to set up a test case where I indexed Envers Audit entities. Not audited entities, but audit entities: the entities that contain revision data for audited entities.

It turns out it's almost possible, if one is willing to use programmatic mapping and to get their hands dirty with conversions. There's just one one problem: we need to apply a custom bridge to the identifier of audit entities, and that currently doesn't work because of type checks that can never pass on the audit entity ID, which is a dynamic map (named {{Map}} type).

You can find my prototype here: https://github.com/yrodiere/hibernate-search/blob/audit_entity_indexing/integrationtest/mapper/orm-envers/src/test/java/org/hibernate/search/integrationtest/mapper/orm/envers/EnversIndexedAuditEntityIT.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur6i,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Reduce amount of Database metadata details being loaded during bootstrap,HHH-14667,71101,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,09/juin/2021 06:10 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,11/juin/2021 03:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,"Creating `ExtractedDatabaseMetaData` leverage's the JDBC `DatabaseMetaData` object.  Not only does this require a Connection to be established, but it also makes calls to the driver's `DatabaseMetaData`.  

Each of these can have a performance impact.  For the most part, `ExtractedDatabaseMetaData` is used to initialize some defaults.  

There is a ""hidden"" setting to disable the Connection at all (``), though its use is not really supported for normal usage; it is intended for tooling use.

However, we could minimize the number of calls we make since some drivers implement these poorly and we do not always need all of the info.  For example, we could by-pass loading keywords if the user has not enabled keyword-auto-quoting.  Another example - at the moment we also extract type-info, but do not currently use them.  
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-14T08:23:46.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),steve(steve),,,,,,,,0|104tu8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-11 10:59:21.167,,,,"11/juin/2021 03:59 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;A description of what was done can be found here:

* [https://github.com/hibernate/hibernate-orm/pull/4043#issue-665922135|https://github.com/hibernate/hibernate-orm/pull/4043#issue-665922135] 



Essentially:

* removed the queries which loaded information which wasn’t being used
* made sequence information loading lazy
* made it more unlikely to need triggering loading the sequence information
* added an option to fully disable loading the sequence information",,,,,,,,,,,,,,,,Terminé,,
StringMapLobTest case fails on SAP ASE16.0,HHH-14666,71100,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,09/juin/2021 03:40 AM,09/juin/2021 03:45 AM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"[org.hibernate.envers.test.integration.collection.StringMapLobTest|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/collection/StringMapLobTest.java#L93] fails running on Sybase ASE 16.0 as follows:

{code:java}
com.sybase.jdbc4.jdbc.SybSQLException: TEXT, IMAGE and UNITEXT datatypes may not be used in a WHERE clause, except with the LIKE expression and IS [NOT] NULL predicate on columns.
{code}

The possible reason could potentially be that [LOB columns cannot appear in WHERE clauses as predicates other than LIKE (meaning that no comparison is allowed)|https://help.sap.com/viewer/7c78579ce9b14a669c1f3295b0d8ca16/Cloud/en-US/c374aca91944460b834ef1d5ceb82acf.html]

In addition, [initData()|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/collection/StringMapLobTest.java#L53] method throws a 

{code:java}
com.sybase.jdbc4.jdbc.SybSQLException: Invalid operator for datatype op: = type: TEXT_LOCATOR.
{code}

AFAIU there is no direct declaration of a text locator in the mentioned test case, nevertheless it could be connected with the LOB data type comparison too.

Summing up, _SybaseASE157Dialect_ could be skipped as the other one (_AbstractHANADialect_), but the decision should be made by more experienced people here. 

","oracle-java-1.8
jconn4.jar - jConnect (TM) for JDBC(TM)/16.0 GA (Build 27008)

hibernate.dialect org.hibernate.dialect.SybaseASE157Dialect
hibernate.connection.driver_class com.sybase.jdbc4.jdbc.SybDriver
hibernate.connection.url jdbc:sybase:Tds:\${db.hostname}:5000/\${db.username}?SQLINITSTRING=set quoted_identifier on&SQLINITSTRING=set ANSINULL on
hibernate.connection.username \${db.username}
hibernate.connection.password \${db.password}
hibernate.jdbc.use_streams_for_binary false
hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104tu0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
DDL script generation: use ; as default delimiter,HHH-14665,71099,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Ancien utilisateur,5d5bade588d5680d3709848d,Ancien utilisateur,5d5bade588d5680d3709848d,08/juin/2021 06:53 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,08/juin/2021 11:49 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,"As per discussion in https://github.com/quarkusio/quarkus/pull/17589, it would make sense to make {{;}} the default delimiter when generating DDL scripts.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-08T14:05:51.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,rk:84f51a20-7729-4407-9579-7b452c40b0ad(rk:84f51a20-7729-4407-9579-7b452c40b0ad),christian.beikov(christian.beikov),,,,,,,,0|104tts:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Work around Surefire clearing the interrupt status when forwarding stdout/stderr
",HSEARCH-4237,71098,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,08/juin/2021 02:08 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,10/juin/2021 06:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,build,,,,0,,,,,,"Issue on the Surefire JIRA: [https://issues.apache.org/jira/browse/SUREFIRE-1815|https://issues.apache.org/jira/browse/SUREFIRE-1815|smart-link] 

A fix has already been merged almost one year ago, but Surefire didn’t see a release since then. In the meantime we can leverage the extension mechanism to override the faulty code. I'll submit a PR that does just that.

----

When tests write anything to stdout/stderr, these writes get intercepted by Surefire in order to redirect the streams to wherever Surefire needs them to go. That's great.

But... at some point, we end up in this method: {{org.apache.maven.surefire.booter.spi.LegacyMasterProcessChannelEncoder#encodeAndPrintEvent}}.
And here's the code:

{code:java}private void encodeAndPrintEvent( StringBuilder event, boolean sendImmediately )
    {
        try
        {
            //noinspection ResultOfMethodCallIgnored
            Thread.interrupted();

            byte[] array = event.append( '\n' )
                .toString()
                .getBytes( STREAM_ENCODING );

            ByteBuffer bb = ByteBuffer.wrap( array );

            if ( sendImmediately )
            {
                out.write( bb );
            }
            else
            {
                out.writeBuffered( bb );
            }
        }
        catch ( ClosedChannelException e )
        {
            if ( !onExit )
            {
                DumpErrorSingleton.getSingleton()
                    .dumpException( e, ""Channel closed while writing the event '"" + event + ""'."" );
            }
        }
        catch ( IOException e )
        {
            if ( trouble.compareAndSet( false, true ) )
            {
                DumpErrorSingleton.getSingleton()
                    .dumpException( e );
            }
        }
    }{code}

The line {{Thread.interrupted();}} in particular clears the current thread's interrupt flag... and never restores it\! As a result, if tests rely on some threads being killed through interruption, and the threads write anything to stdout/stderr after the interrupt flag has been set, then the threads will never get interrupted, and the test assertions will fail.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-10T06:10:37.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2589,0|104mtz:zcv,,,,,,HSEARCH - 2021-12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support for JDBC batching for update envers audit table in ValidityAuditStrategy,HHH-14664,71097,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Михаил Конопко,6062373370af500075b65239,Михаил Конопко,6062373370af500075b65239,08/juin/2021 01:05 AM,08/juin/2021 01:05 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,batch,envers;,,,,"It is known that, ValidityAuditStrategy supports jdbc batch when inserting into audit tables, but does not support it when update rows in audit tables.

In the task https://stackoverflow.com/questions/53887259/hibernate-envers-support-for-jdbc-batching-in-validityauditstrategy-with-allow this question has already been raised, and Naros invited hibernate users to the discussion and suggested opening a JIRA enhancement issue. So I do it.

In the tasks that we solve at our company, using hibernate and envers and Postgresql, we have to recalculate about 1 million records per transaction and then envers makes these changes to the audit tables. The entire operation takes about 18 minutes, of which 12 minutes are spent on update the audit tables. If we perform an update of the audit tables with jdbc batch (using the custom ValidityAuditStrategy, which we developed to estimate the running time),  the time will be reduced to 6 minutes, and the total to 12 minutes. This is a significant improvement for us. Therefore, we decided to develop a custom ValidityAuditStrategy for production.

1.	maintaining  sanity-check
Naros says in https://stackoverflow.com/a/54078998/9492922 that the main problem in the issue of providing jdbc batch when updating audit tables is sanity-check support.
<<The strategy as it exists expects those predicates to impact a single row in the table and therefore also checks that as a part of its sanity-check or else we force the transaction to fail.
I think it would be great to find a way to do this such that batch insert/updates would work, but we'd first have to find a way to implement those updates and maintain the same sanity-check where only one row would be influenced by that change rather than multiple which would be the case if they were delayed.>>

We can offer two methods for sanity-check the result of jdbc batch update.
•	first method. Batch update returns an array of integers showing how many rows each update in batch has changed. Therefore, after executing the batch update, we need to check that the values are not greater than 1 (or exactly equal to 1 depending  on reuseEntityIdentifier and RevisionType of data)
•	second method. After executing all the batch updates of transaction, we need:
* execute the query 
{code:java}
select count(*) from table_aud where revend = [revision] group by id having count(*) > 1; 
{code}
This query should not return any records.
* (the need for this step is determined by reuseEntityIdentifier and RevisionType of data) execute the query
{code:java}
select count(*) from table_aud where revend = [revision]; 
{code}
This query should return count of update in batch updates.

2.	Is it possible to get recommendations on these two methods of sanity-check?
3.	Can we get recommendations for writing a custom ValidityAuditStrategy, maybe a code review, and so on?
4.	Are there any plans for implementation jdbc batch update in ValidityAuditStrategy in hibernate 6?

",hibernate 5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,crancran(crancran),ug:05e454ef-ebab-41dd-950a-efc4d2ed4fa0(ug:05e454ef-ebab-41dd-950a-efc4d2ed4fa0),,,,,,,,0|104ttk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add testing for s390x to Jenkins CI,HHH-14663,71096,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Chandranana Naik,5eb516297dab3a0bb4407207,Chandranana Naik,5eb516297dab3a0bb4407207,07/juin/2021 23:40 PM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,19/oct./2021 02:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,,,,,0,,,,,,"Hi Team,
We are willing to *add s390x support to communities Jenkins CI for Hibernate*. Could you please tell us how to go about this?  If required we can provide s390x VMs for ci testing purpose. Happy to discuss.                                                                                                                                                                                                                                                                                                                                                                                                               ",Linux S390x Architecture,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-19T02:07:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,chandranana.naik(chandranana.naik),christian.beikov(christian.beikov),,,,,,,,0|104ttc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-08 07:16:53.355,,,,08/juin/2021 00:16 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Could you please come into our Chat platform so that we can discuss this in private? [https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user|https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user],10/juin/2021 06:31 AM;5eb516297dab3a0bb4407207;Yes have joined the chat platform. Kindly check.,,,,,,,,,,,,,,,Terminé,,
Remove unnecessary statefull lambda instances from StatisticsImpl,HHH-14662,71095,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,07/juin/2021 11:52 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,08/juin/2021 07:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-08T07:55:09.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tt4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
GraalVM support should not register ANTLR parser nodes when the Parser isn't reacheable,HHH-14661,71094,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,07/juin/2021 11:42 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,08/juin/2021 09:07 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-graalvm,,,,0,,,,,,"This is an improvement for our Hibernate ORM / GraalVM ""Automatic Feature"": we're registering all ANTLR nodes to be reacheable via Reflection, but in practice this is only necessary when any of the parsers is reacheable via live code as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-08T09:07:02.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tsw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Deprecate component mappings with different attributes for the same class,HHH-14660,71093,,Deprecation,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,07/juin/2021 09:18 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,10/juin/2021 03:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,"In hbm.xml it is currently allowed to map an attribute as component with different attribute mappings (once with 2 and another time with 7 attributes), although it uses the same java class. {{org.hibernate.test.component.basic.ComponentTest}} is the example for this. This kind of mapping is not very useful and doesn't align well with the JPA model. It would be better to create a dedicated java class for mapping just 2 attributes.

The goal of this task is to log a deprecation warning when we detect the use of such a mapping. We are currently thinking about removing support for this in 6.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-11T05:51:29.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104tso:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"""join fetch"" on mapped-by association is ignored when using bytecode enhancement",HHH-14659,71092,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,07/juin/2021 01:38 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,09/juin/2021 08:02 AM,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,"With bytecode enhancement enabled, with a {{Person}} entity that has a lazy one-to-one association to a {{Vehicle}} entity, when running this query:

{{""select p from Person p left join fetch p.vehicle""}}

If {{Vehicle}} is the owner of the association, the resulting {{Person}} instances won't have their {{vehicle}} property initialized.

Calling the getter will initialize the association, so the problem is only visible if you have a look at the number of SQL statements, or if you call the getter after the session was closed (then lazy-loading fails).

This looks like a regression from ORM, 5.4 where this used to work correctly. I'll submit a PR with a reproducer and hopefully a fix soon.

Reported on Quarkus: [https://github.com/quarkusio/quarkus/issues/17710|https://github.com/quarkusio/quarkus/issues/17710]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-09T08:02:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4033,0|104tsg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Conditional Index,HHH-14658,71091,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Won't Do,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Carmi Raz,5d3558343eb3ec0c892c9810,Carmi Raz,5d3558343eb3ec0c892c9810,06/juin/2021 15:14 PM,07/juin/2021 05:13 AM,14/mars/2022 12:54 PM,07/juin/2021 05:13 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,hibernate,,,,,"Create a possibility for specifying a WHERE condition on @Index annotations.
Useful when one needs a conditional unique constraint.

Example of usage:

{code:java}@Table(""users"", indexes = {
  @Index(name = ""name_idx"", columnList = ""name"", unique = true, where = ""is_deleted = false""),
})
public class User {

    @Column(""name"")
    private String name;
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:1a36a305-f031-4b70-bc09-919494ef29a8(ug:1a36a305-f031-4b70-bc09-919494ef29a8),christian.beikov(christian.beikov),,,,,,,,0|104ts8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-07 12:13:30.337,,,,"07/juin/2021 05:13 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Not all databases support this and since these are JPA annotations, you should rather ask the JPA specification to add support for this. Either way, I don’t think that this will be added. After all, JPA and Hibernate are not meant to be able to reflect all DDL through metadata. You should be using a schema management tool like e.g. Liquibase or Flyway for this purpose.",,,,,,,,,,,,,,,,Terminé,,
Byte code enhancement via Gradle plugin fails,HHH-14657,71090,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Markus Heiden,557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6,Markus Heiden,557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6,Markus Heiden,557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6,06/juin/2021 14:47 PM,22/juin/2021 03:35 AM,14/mars/2022 12:54 PM,22/juin/2021 03:35 AM,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.33,5.5.2,,,,,,,,bytecode-enhancement,,,,1,,,,,,"Caused by: java.lang.IllegalStateException: Cannot resolve type description for ...	
at net.bytebuddy.pool.TypePool$Resolution$Illegal.resolve(TypePool.java:158)	
at net.bytebuddy.pool.TypePool$Default$WithLazyResolution$LazyTypeDescription.delegate(TypePool.java:972)	
at net.bytebuddy.description.type.TypeDescription$AbstractBase$OfSimpleType$WithDelegation.getSuperClass(TypeDescription.java:8292)	
at net.bytebuddy.description.type.TypeDescription$AbstractBase.isAssignable(TypeDescription.java:7663)	
at net.bytebuddy.description.type.TypeDescription$AbstractBase.isAssignableTo(TypeDescription.java:7704)	
at net.bytebuddy.description.type.TypeDescription$AbstractBase.isAssignableTo(TypeDescription.java:7697)	
at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.alreadyEnhanced(EnhancerImpl.java:363)	
at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.doEnhance(EnhancerImpl.java:153)	
at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.lambda$enhance$0(EnhancerImpl.java:132)	
at org.hibernate.bytecode.internal.bytebuddy.ByteBuddyState.rewrite(ByteBuddyState.java:146)	
at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:132)	
at org.hibernate.orm.tooling.gradle.EnhancementHelper.doEnhancement(EnhancementHelper.java:124)	
at org.hibernate.orm.tooling.gradle.EnhancementHelper.enhance(EnhancementHelper.java:87)	
at org.hibernate.orm.tooling.gradle.HibernatePlugin$EnhancerAction.execute(HibernatePlugin.java:73)	
at org.hibernate.orm.tooling.gradle.HibernatePlugin$EnhancerAction.execute(HibernatePlugin.java:57)	
at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:749)	
at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:722)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$2.run(ExecuteActionsTaskExecuter.java:498)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:56)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$run$1(DefaultBuildOperationExecutor.java:71)	
at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.runWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:45)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:71)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:483)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:466)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.access$300(ExecuteActionsTaskExecuter.java:105)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.executeWithPreviousOutputFiles(ExecuteActionsTaskExecuter.java:270)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution.execute(ExecuteActionsTaskExecuter.java:248)	
at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:83)	
at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:37)	
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:50)	
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:47)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:76)	
at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:76)	
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:47)	
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:37)	
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:68)	
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:38)	
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:50)	
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:36)	
at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)	
at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)	
at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)	
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:51)	
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:29)	
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:54)	
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:35)	
at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:60)	
at org.gradle.internal.execution.steps.BroadcastChangingOutputsStep.execute(BroadcastChangingOutputsStep.java:27)	
at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:174)	
at org.gradle.internal.execution.steps.BuildCacheStep.executeAndStoreInCache(BuildCacheStep.java:150)	
at org.gradle.internal.execution.steps.BuildCacheStep.lambda$executeWithCache$2(BuildCacheStep.java:124)	
at org.gradle.internal.execution.steps.BuildCacheStep.lambda$executeWithCache$3(BuildCacheStep.java:124)	
at org.gradle.internal.Try$Success.map(Try.java:162)	
at org.gradle.internal.execution.steps.BuildCacheStep.executeWithCache(BuildCacheStep.java:83)	
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:73)	
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:45)	
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:40)	
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:29)	
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)	
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)	
at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:99)	
at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$0(SkipUpToDateStep.java:92)	
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:52)	
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:36)	
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:84)	
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:41)	
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)	
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)	
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:91)	
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:49)	
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:78)	
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:49)	
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:105)	
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:50)	
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.lambda$execute$2(SkipEmptyWorkStep.java:86)	
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:86)	
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:32)	
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)	
at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:43)	
at org.gradle.internal.execution.steps.LoadExecutionStateStep.execute(LoadExecutionStateStep.java:31)	
at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:40)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$TaskExecution$2.withWorkspace(ExecuteActionsTaskExecuter.java:283)	
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:40)	
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)	
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)	
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)	
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:49)	
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:35)	
at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:76)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:184)	
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:173)	
at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:109)	
at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)	
at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)	
at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)	
at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:56)	
at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)	
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)	
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)	
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:200)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:195)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:75)	
at org.gradle.internal.operations.DefaultBuildOperationRunner$3.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:153)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:68)	
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:62)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.lambda$call$2(DefaultBuildOperationExecutor.java:76)	
at org.gradle.internal.operations.UnmanagedBuildOperationWrapper.callWithUnmanagedSupport(UnmanagedBuildOperationWrapper.java:54)	
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:76)	
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)	
at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:74)	
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:408)	
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:395)	
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:388)	
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:374)	
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)	
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)	
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)	
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)	
at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)	
at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)	
at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)	
HomeFailure
","AdoptOpenJDK 16.0.1, Gradle 7.0.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,07/juin/2021 04:02 AM;markus_heiden;hbn-bug.zip;https://hibernate.atlassian.net/secure/attachment/49875/hbn-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-22T03:35:08.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,markus_heiden(markus_heiden),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4039,0|104ts0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"07/juin/2021 02:16 AM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;The stack trace is for a class that has nothing to do with any entities.

Plugin config:

{noformat}    hibernate {
        enhance {
            enableLazyInitialization= true
            enableDirtyTracking = true
            enableAssociationManagement = true
            enableExtendedEnhancement = false
        }
    }{noformat}

I tested with other configs too, but as soon as any flag is set to true, the exception occurs.",07/juin/2021 02:32 AM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;The type (an interface) that cannot be found resides in a different Gradle sub-project than the (implementing) class that is processed by the enhancer. This dependency is correctly declared  in Gradle and compiles successfully.,07/juin/2021 04:04 AM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;I added a minimal Gradle multi-project project showing the bug.,07/juin/2021 14:49 PM;557058:fdd9082c-8707-4d6e-b026-d0e65f4f44d6;The problem seems to be that the classloader (created via toClassLoader(sourceSet.getRuntimeClasspath())) references the jars of the project dependencies (which are not yet built) instead of the classes.,,,,,,,,,,,,,Terminé,,
"SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer generate (allocationSize + 1) IDs offline after incrementing the sequence, while SequenceHiLoGenerator + LegacyHiLoAlgorithmOptimizer generate only (allocationSize) IDs offline before doing the same",HHH-14656,71089,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Daniel Le,557058:dad70fda-1b96-4a02-8967-64e0b9249df1,Daniel Le,557058:dad70fda-1b96-4a02-8967-64e0b9249df1,06/juin/2021 00:51 AM,12/févr./2022 10:15 AM,14/mars/2022 12:54 PM,,5.6.5,6.Next,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"h3. Steps to Reproduce and Fix

Please refer to [https://github.com/hibernate/hibernate-orm/pull/4032|https://github.com/hibernate/hibernate-orm/pull/4032|smart-link] .

h3. Hibernate Configurations

With Hibernate v5.x:

# SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer:
{code:java}hibernate.id.new_generator_mappings = ""true"" (a.k.a, the default)
hibernate.id.optimizer.pooled.preferred = ""legacy-hilo""{code}
# SequenceHiLoGenerator + LegacyHiLoAlgorithmOptimizer:    
{code:java}hibernate.id.new_generator_mappings = ""false""{code}

h3. Expected Behavior

# SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer generate (allocationSize) IDs offline before querying and incrementing the sequence
# SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer is compatible with SequenceHiLoGenerator + LegacyHiLoAlgorithmOptimizer

h3. Current Behavior

# SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer generate _(allocationSize + 1)_ IDs offline before querying and incrementing the sequence
# SequenceStyleGenerator + LegacyHiLoAlgorithmOptimizer is _not_ compatible with SequenceHiLoGenerator + LegacyHiLoAlgorithmOptimizer

h3. Root Cause Analysis

# SequenceStyleGenerator sets its LegacyHiLoAlgorithmOptimizer optimizer's incrementSize to (allocationSize)
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L276|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L276] 
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L421-L460|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L421-L460] 
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L294-L299|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L294-L299] 
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java#L100|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java#L100] 
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java#L75-L76|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/enhanced/OptimizerFactory.java#L75-L76] 

# SequenceHiLoGenerator sets its LegacyHiLoAlgorithmOptimizer field's incrementSize to (allocationSize - 1)
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/boot/internal/IdGeneratorInterpreterImpl.java#L201|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/boot/internal/IdGeneratorInterpreterImpl.java#L201]
[https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/SequenceHiLoGenerator.java#L45-L53|https://github.com/hibernate/hibernate-orm/blob/5.5.0/hibernate-core/src/main/java/org/hibernate/id/SequenceHiLoGenerator.java#L45-L53]

h3. Impact

Imagine that one has two modules A and B. A uses Hibernate v3.x or v4.x, hence it uses SequenceHiLoGenerator + LegacyHiLoAlgorithmOptimizer. B uses Hibernate v5.x.

Of course, the correct way to make sure B is compatible with A with respect to ID generation is with {{hibernate.id.new_generator_mappings = ""false""}}.

However, one will notice that SequenceGenerator is deprecated in Hibernate v5.x. Hence, in an attempt to avoid using deprecated code, B is instead configured with:

{code:java}hibernate.id.new_generator_mappings = ""true"" (a.k.a, the default)
hibernate.id.optimizer.pooled.preferred = ""legacy-hilo""{code}

One will expect that this B will be compatible with A. However, it is not. For example, with allocationSize = 50:

* Next sequence value is 1
* hi is set to 1 and the sequence is incremented by 1
* A persists (allocationSize) records with IDs in \[50, 100); 
* Next sequence value is 2
* hi is set to 2 and the sequence is incremented by 1
* B persists (allocationSize + 1) records with IDs in \[102, 153)
* Next sequence value is 3
* hi is set to 3 and the sequence is incremented by 1
* A fails to persist a new record with ID 50 * 3 = 150\!
* Next sequence value is 4
* A persists (allocationSize) records with IDs in \[200, 250);

h3. Comment

I think this off-by-one issue has existed since SequenceStyleGenerator was introduced in v3.2.3:

* [https://in.relation.to/2007/04/10/new-323-hibernate-identifier-generators/|https://in.relation.to/2007/04/10/new-323-hibernate-identifier-generators/]
* [https://github.com/hibernate/hibernate-orm/blob/3.2/src/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L236-L250|https://github.com/hibernate/hibernate-orm/blob/3.2/src/org/hibernate/id/enhanced/SequenceStyleGenerator.java#L236-L250]

  
There was a similar problem where SequenceHiLoGenerator forgot that MAX_LO was already adjusted to (allocationSize - 1):

* [https://hibernate.atlassian.net/browse/HHH-5230|https://hibernate.atlassian.net/browse/HHH-5230]
* [https://github.com/hibernate/hibernate-orm/commit/3d988c6a6ded8199d9d6fda1ce854ab849fa20df|https://github.com/hibernate/hibernate-orm/commit/3d988c6a6ded8199d9d6fda1ce854ab849fa20df]

  
Look like it's difficult to:

* Ensure that (sequence) configuration values are adjusted correctly before they are used to initialize the Optimizer classes
* Highlight the fact that Optimizer's incrementSize is the result of adjusting allocationSize

Would it help to add a new method such as ""int determineAdjustedIncrementSize(int incrementSize)"" to the Optimizer interface to force all subclasses to implement it? (Most will simply return incrementSize as is.)

What else can be done to avoid similar issues in the future?

Let me know what you think in the comments. Thank you for your time and effort in building Hibernate.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-06T00:57:16.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:06ff8eae-c63d-4b31-b8ef-6fd6867dc425(ug:06ff8eae-c63d-4b31-b8ef-6fd6867dc425),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4032,0|104trs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,"22/juin/2021 01:10 AM;557058:dad70fda-1b96-4a02-8967-64e0b9249df1;Dear Hibernate maintainers, what else is required to get this moving? I’ve already submitted reproducible test cases and a fix in the linked PR.

Previously, one existing test was failing but I’ve since fixed it and updated the PR. Please approve the GitHub workflows again.",,,,,,,,,,,,,,,,A faire,,
Hibernate 5.5.0 doesn't work on a case sensitive SQLServer database,HHH-14655,71088,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Emanuel Kupcik,557058:2cdebdc3-60aa-4c0b-aac2-c58ba530c8e8,Emanuel Kupcik,557058:2cdebdc3-60aa-4c0b-aac2-c58ba530c8e8,05/juin/2021 02:30 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,07/juin/2021 07:40 AM,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,"When you try to run hibernate 5.5.0 on a SQL Server database using a case senstive collation like Latin1_General_CS_AS while the SQL server itself is running  Latin1_IS__AS hibernate crashes 

!image-2021-06-05-11-28-40-765.png|width=200,height=183!

 

{noformat}com.microsoft.sqlserver.jdbc.SQLServerException: Invalid object name 'information_schema.sequences'.
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:262) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1632) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:872) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:767) ~[?:?]
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7225) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:3053) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:247) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:222) ~[?:?]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeQuery(SQLServerStatement.java:692) ~[?:?]
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:110) ~[?:?]
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java) ~[?:?]
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:42) ~[?:?]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentImpl.sequenceInformationList(JdbcEnvironmentImpl.java:403) ~[?:?]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentImpl.<init>(JdbcEnvironmentImpl.java:268) ~[?:?]
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:114) ~[?:?]{noformat}

This might be or might not be related to the mix of case sensitve and case insenstive collations on DB and server level. Or just be caused by the fact that the database itself is case sensitive. But it is probably similar to the problem with H2 in mentioned in [https://github.com/hibernate/hibernate-orm/pull/3555|https://github.com/hibernate/hibernate-orm/pull/3555]

So everything related to INFORMATION_SCHEMA needs to be made upper case (completely like in NFORMATION_SCHEMA.XXX and not like NFORMATION_SCHEMA.xxx)

The code seems to the exactly the opostive of what the comment says

!grafik-20210605-095329.png|width=1227,height=290!",SQL Server using using a case insensitive collation running a database with a case sensitive collation,,,,,,,,,,,,,,,,,,,,,,,,,,,,05/juin/2021 02:53 AM;ekupcik;grafik-20210605-095329.png;https://hibernate.atlassian.net/secure/attachment/49874/grafik-20210605-095329.png,05/juin/2021 02:28 AM;ekupcik;image-2021-06-05-11-28-40-765.png;https://hibernate.atlassian.net/secure/attachment/49873/image-2021-06-05-11-28-40-765.png,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-07T07:39:36.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,christian.beikov(christian.beikov),ekupcik(ekupcik),,,,,,,,0|104trk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,,,,,,,,,Terminé,,
geolatte-geom Geometry types no longer works with geography column types,HHH-14654,71086,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Daniel Shuy,5a75cca00a1b9c21e2da0e93,Daniel Shuy,5a75cca00a1b9c21e2da0e93,04/juin/2021 09:27 AM,22/juin/2021 08:27 AM,14/mars/2022 12:54 PM,21/juin/2021 02:29 AM,5.4.31,5.4.32,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.3,,,,,,,,,hibernate-spatial,,,,0,,,,,,"Sample JPA Entity class:

{code:java}import org.geolatte.geom.G2D;
import org.geolatte.geom.Point;

@Entity
public class Location {
  @Basic
  private Point<G2D> coordinates;
}{code}

with DDL script:

{code:sql}CREATE TABLE location
(
    coordinates geography(Point, 4326)
);{code}

This used to work, but since hibernate-spatial 5.4.31, Hibernate throws:

{noformat}org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [coordinates] in table [location]; found [geography (Types#OTHER)], but expecting [geometry (Types#UNKNOWN(5432))]{noformat}

Seems like hibernate-spatial no longer supports *geography* column types and instead expects only *geometry* column types?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-21T02:28:58.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,daniel_shuy(daniel_shuy),maeseka(maeseka),,,,,,,,0|104tr4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,2021-06-08 20:51:11.85,,,,"08/juin/2021 13:51 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;As a workaround, you can annotate the geography member variable  like this:

{noformat}@Basic
@Column(columnDefinition = ""geography"")
private Point<G2D> coordinates;{noformat}

When I tested this, it worked.



The problem is introduced by [https://hibernate.atlassian.net/browse/HHH-11490|https://hibernate.atlassian.net/browse/HHH-11490|smart-link]  where a fictitious sql.Type code was introduced for the hibernate geometry type. 

To fix this we could override {{Dialect#equivalentTypes}} so that the fictitious type code and the type code reported by JDBC are treated as the same.",09/juin/2021 06:34 AM;5a75cca00a1b9c21e2da0e93;Thanks\! I’ll use that workaround for now until the fix is implemented,,,,,,,,,,,,,,,Terminé,,
Parameter in wrong order when using filters,HHH-14653,71085,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Oliver Kütemeier,60ba11baa5be0a00690cd4cc,Oliver Kütemeier,60ba11baa5be0a00690cd4cc,04/juin/2021 05:41 AM,04/juin/2021 05:41 AM,14/mars/2022 12:54 PM,,5.4.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Case: We want to query two entities in a left outer join. We have multiple parameters in said query. When we apply filters for the entities the order of parameters gets mixed up. 

The attachments contain a log of the created queries and a testcase to showcase the problem.  ","Hibernate-Core: 5.4.24
H2database: 1.3.176
Java: 11
OS: Windows 10",,,,,,,,,,,,,,,,,,,,,,,,,,,,04/juin/2021 05:33 AM;ug:12c81eaa-4acf-421b-b40c-ddf2c941e3e7;BuggedQueryLog.txt;https://hibernate.atlassian.net/secure/attachment/49872/BuggedQueryLog.txt,04/juin/2021 05:33 AM;ug:12c81eaa-4acf-421b-b40c-ddf2c941e3e7;hibernate-orm-5__ExampleTestcase.zip;https://hibernate.atlassian.net/secure/attachment/49871/hibernate-orm-5__ExampleTestcase.zip,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,2.0,ug:12c81eaa-4acf-421b-b40c-ddf2c941e3e7(ug:12c81eaa-4acf-421b-b40c-ddf2c941e3e7),,,,,,,,,0|104tqw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"No cleanup of threads, if an connection exception during mass indexation happens",HSEARCH-4236,71084,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,"Kunde, Aaron",5fa3c0858c4efd006f435dc8,"Kunde, Aaron",5fa3c0858c4efd006f435dc8,04/juin/2021 04:30 AM,14/juin/2021 07:41 AM,14/mars/2022 12:54 PM,10/juin/2021 06:11 AM,6.0.3.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,massindexer,,,,0,,,,,,"We have a pretty common Spring Boot application using Hibernate ORM with HikariCP for database (Oracle) connection and Elasticsearch as backend.

To update the index on a regular basis, we use the asynchronous call like:
{code}
     Search.session(entityManager).massIndexer()
                .start()
                .thenRun(() -> log.info(""Finished (re-)indexing of data in Elasticsearch""))
                .exceptionally(e -> {
                    log.error(""Could not index data in Elasticsearch"", e);
                    return null;
                });
{code}

The maximal connection pool size is set to {{10}} with
{code}
spring.datasource.hikari.maximumPoolSize=10
# And a little debugging
logging.level.com.zaxxer.hikari.pool=DEBUG
{code}

When we use this method multiple times in parallel (e.g. 6 calls), for each call 7 threads (and therefore 7 DB connections) are created. This works fine with a few calls (1-2) but with 6, an error might occur, that a connection could not be created, because of the pool size:
{code}
Failing operation:
Loading and extracting entity data for entity 'FilialeEntity' during mass indexing


org.hibernate.search.util.common.SearchException: HSEARCH800025: Unable to handle transaction: Unable to acquire JDBC Connection
	at org.hibernate.search.mapper.orm.massindexing.impl.IdentifierConsumerDocumentProducer.beginTransaction(IdentifierConsumerDocumentProducer.java:180) ~[hibernate-search-mapper-orm-6.0.3.Final.jar:6.0.3.Final]
	at org.hibernate.search.mapper.orm.massindexing.impl.IdentifierConsumerDocumentProducer.loadAndIndexList(IdentifierConsumerDocumentProducer.java:136) ~[hibernate-search-mapper-orm-6.0.3.Final.jar:6.0.3.Final]
	at org.hibernate.search.mapper.orm.massindexing.impl.IdentifierConsumerDocumentProducer.loadAndIndexAllFromQueue(IdentifierConsumerDocumentProducer.java:121) ~[hibernate-search-mapper-orm-6.0.3.Final.jar:6.0.3.Final]
	at org.hibernate.search.mapper.orm.massindexing.impl.IdentifierConsumerDocumentProducer.run(IdentifierConsumerDocumentProducer.java:101) ~[hibernate-search-mapper-orm-6.0.3.Final.jar:6.0.3.Final]
	at org.hibernate.search.util.common.impl.CancellableExecutionCompletableFuture$CompletingRunnable.run(CancellableExecutionCompletableFuture.java:49) ~[hibernate-search-util-common-6.0.3.Final.jar:6.0.3.Final]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:264) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
Caused by: org.hibernate.exception.JDBCConnectionException: Unable to acquire JDBC Connection
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:48) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:111) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:138) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getConnectionForTransactionManagement(LogicalConnectionManagedImpl.java:274) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.begin(LogicalConnectionManagedImpl.java:282) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.begin(JdbcResourceLocalTransactionCoordinatorImpl.java:246) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.begin(TransactionImpl.java:83) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.internal.AbstractSharedSessionContract.beginTransaction(AbstractSharedSessionContract.java:480) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.search.mapper.orm.massindexing.impl.IdentifierConsumerDocumentProducer.beginTransaction(IdentifierConsumerDocumentProducer.java:176) ~[hibernate-search-mapper-orm-6.0.3.Final.jar:6.0.3.Final]
	... 10 common frames omitted
Caused by: java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30001ms.
	at com.zaxxer.hikari.pool.HikariPool.createTimeoutException(HikariPool.java:695) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:197) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162) ~[HikariCP-3.4.5.jar:na]
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:128) ~[HikariCP-3.4.5.jar:na]
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:38) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:108) ~[hibernate-core-5.4.28.Final.jar:5.4.28.Final]
	... 17 common frames omitted
{code}
This is acceptable, but leads to another problem: After a while all 6 calls terminate without an error, but due to the exeption above, it might happen, that the corresponding thread for retrieving the ids during mass indexation is not terminated and never will be. In this example 4 Threads for 2 different entities ""survived"": !image-2021-06-04-13-25-26-474.png|thumbnail! 
Furthermore the attached DB Connections in Hikari are still marked as active connections and cannot be freed. 
{code}
HikariPool-1 - Pool stats (total=10, active=4, idle=6, waiting=0)
{code}

If one repeat this scenario or use more parallel calls (like 10-11) it happens, that no connection in the pool is free anymore and none cannot be obtained after restarting the whole application.

I would expect, that during the mass indexation, if an error occurs, that the related threads are interrupted and therefore the connections would be closed.

HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
","- Spring Boot 2.4.3
- Elasticsearch 7.12.1
- Hibernate 5.4.28.Final
- HikariCP 3.4.5
- OracleDB XE 18.4
- Oracle ojdbc 19.3.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,04/juin/2021 04:25 AM;ug:3eb3260a-fd1a-4c5c-b327-4a9877a3e32d;image-2021-06-04-13-25-26-474.png;https://hibernate.atlassian.net/secure/attachment/49870/image-2021-06-04-13-25-26-474.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-10T06:10:37.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,ug:3eb3260a-fd1a-4c5c-b327-4a9877a3e32d(ug:3eb3260a-fd1a-4c5c-b327-4a9877a3e32d),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2589,0|104mtz:zcr,,,,,,HSEARCH - 2021-12,,,,,,,,,,,,,,,,,,,,,,,2021-06-04 12:27:04.703,,,,"04/juin/2021 05:27 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Thanks for the report. There are plenty of tests in this area (failures while calling a getter, while indexing, while purging the index, …), but it seems there is no test for when the transaction or query execution fails, and that’s precisely your problem.

I will investigate.","14/juin/2021 07:41 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:5fa3c0858c4efd006f435dc8] This was fixed in 6.0.4.Final, released today. Thanks for reporting the issue\!",,,,,,,,,,,,,,,Terminé,,
Add support for Elasticsearch 7.13,HSEARCH-4235,71083,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/juin/2021 00:08 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,16/juin/2021 07:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,https://www.elastic.co/blog/whats-new-elasticsearch-7-13-0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-16T07:35:09.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2596,0|1009cw:000000xdur3mhxzzzx26,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Extract as pre-boot constants some of the work required to construct a SessionFactoryImpl,HHH-14652,71082,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,03/juin/2021 09:44 AM,03/juin/2021 09:44 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"This optimisation is only useful for applications compiled to native with GraalVM:

the SessionFactoryImpl is doing quite some work, and this necessarily needs to happen at runtime. Some of this work is actually a ""constant"" directly tied to trivial to anticipate configuration aspects, for example the SQLFunctionRegistry is based on the couple { Dialect, configuredCustomSqlFunctions } - frameworks such as Quarkus should be able to construct the matching SQLFunctionRegistry in advance (like we do for MetadataImpl), so to not have to re-run such operations at each boot.

N.B. I want to skip such operations from happening at bootstrap not because of the CPU time they take, but because of the burden they put on the object allocations: when tracing memory usage in native it's quite clear that in this case we're simply copying one map into another, ending up consuming twice the memory.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tqo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
StackOverflowError with Criteria API ,HHH-14651,71081,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Patrice Oms,557058:6855de23-5a42-4971-9429-8433953d65b7,Patrice Oms,557058:6855de23-5a42-4971-9429-8433953d65b7,03/juin/2021 09:32 AM,03/juin/2021 10:02 AM,14/mars/2022 12:54 PM,,5.4.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"When creating queries with Criteria API having to many restrictions, a StackOverflowError happens.

Here is a unit test to reproduce the bug

{code:java}/**
 * A TestEntity.
 */
@javax.persistence.Entity
@javax.persistence.Table(name = ""test_entity"")
public class TestEntity  {

    private static final long serialVersionUID = 1L;

    @javax.persistence.Id
    @javax.persistence.Column(name = ""id"")
    private String id;

    @javax.persistence.Column(name = ""field1"")
    private String field1;

    @javax.persistence.Column(name = ""field2"")
    private String field2;
    
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getField1() {
        return field1;
    }

    public void setField1(String field1) {
        this.field1 = field1;
    }

    public String getField2() {
        return field2;
    }

    public void setField2(String field2) {
        this.field2 = field2;
    }

}{code}

And the corresponding unit test that illustrates how to reproduce the bug:

{code:java}public class CriteriaStackOverflowErrorTest {

    @Autowired
    private EntityManager entityManager;


    // Execute the following query through criteria api
    //
    // SELECT id FROM TestEntity
    // WHERE       (field1 = ""field1_value_1"" AND field2 = ""field2_value_1"")
    //          OR ...
    //          OR (field1 = ""field1_value_N"" AND field2 = ""field2_value_N"")
    void executeQuery(int restrictions) {
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
        CriteriaQuery<String> query = cb.createQuery(String.class);

        Root<TestEntity> root = query.from(TestEntity.class);

        var field1 = root.get(""field1"");
        var field2 = root.get(""field2"");

        List<Predicate> predicates = new ArrayList<>();
        for(int i = 0; i < restrictions ; i++) {
            predicates.add(
                cb.and(
                          cb.equal(field1, ""field1_value_""+i),
                          cb.equal(field2, ""field2_value_""+i)
                     )
            );
        }


         query
            .select(root.get(""id""))
            .where(
                cb.or(predicates.toArray(new Predicate[0]))
            );

        entityManager.createQuery(query).getResultList();
    }

    @Test
    void testStackOverflow() {
        // OK
        Assertions.assertDoesNotThrow(() -> executeQuery(1));
        
        // NOT OK
        Assertions.assertThrows(StackOverflowError.class, () -> executeQuery(5000));
    }

}{code}

The error logs:

{noformat}java.lang.StackOverflowError: null
	at java.base/java.lang.ClassLoader.defineClass1(Native Method) ~[na:na]
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017) ~[na:na]
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:800) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:698) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:621) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:579) ~[na:na]
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na]
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[na:na]
	at java.base/java.lang.ClassLoader.defineClass1(Native Method) ~[na:na]
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1017) ~[na:na]
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:800) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:698) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:621) ~[na:na]
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:579) ~[na:na]
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178) ~[na:na]
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522) ~[na:na]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2111) ~[hibernate-core-5.4.20.Final.jar:5.4.20.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2111) ~[hibernate-core-5.4.20.Final.jar:5.4.20.Final]
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2111) ~[hibernate-core-5.4.20.Final.jar:5.4.20.Final]{noformat}

My understanding of the issue, is that:

*  Criteria API successfully produces an HQL query
* Generated HQL query is parsed by HqlSqlBaseWalker which tries to parse the OR expressions recursively and fails with {{StackOverflowError}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,patriceo(patriceo),,,,,,,,,0|104tqg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Efficiency improvements in AbstractRowReader,HHH-14650,71080,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,03/juin/2021 05:57 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,03/juin/2021 05:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,"Profiling one of our benchmarks I was pointed to a couple of low hanging fruits in the implementation of AbstractRowReader : its constructor could be simplified, the pre-computed cache of `entityInitializerByEntityReference` is sometimes not used at all (so it's worthwhile to create this lazily), and the iteration on entity initializers is extremely hot, can be optimised by iterating on an array.

Most interestingly, the combination of these improvements also lead to having much less and simpler code.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-06-03T02:14:35.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tq8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Disable _source,HSEARCH-4234,71079,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,emin.uzumluoglu,606556631613f300680bf5b4,emin.uzumluoglu,606556631613f300680bf5b4,03/juin/2021 05:19 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,12/oct./2021 03:26 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"It would be great to disable _source in elasticsearch to minimalize redundant data stored in both elasticsearch and database.  

https://stackoverflow.com/questions/67573527/hibernate-search-disable-source/67574009#67574009",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4253,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-30T06:58:23.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:6198a62f-babf-46fd-83d3-e3ccdb2cf6b8(ug:6198a62f-babf-46fd-83d3-e3ccdb2cf6b8),fercoli(fercoli),yrodiere(fenrhil),,,,,,https://github.com/hibernate/hibernate-search/pull/2665,0|1009cw:000000xdur3mhxzzzxezsq4d4,,,,,,HSEARCH - 2021-18,HSEARCH - 2021-19,,,,,,,,,,,,,,,,,,,,,,2021-09-20 11:48:48.67,,,,"20/sept./2021 04:48 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:097eae70-1c75-4c16-ab75-ab9600f8e584] As mentioned earlier, this should be fixed by [https://hibernate.atlassian.net/browse/HSEARCH-4253|https://hibernate.atlassian.net/browse/HSEARCH-4253|smart-link]. Please just add an integration test to check that, then we can close this ticket.  ",,,,,,,,,,,,,,,,Terminé,,
Oracle limit handler create wrong sql query when multiple spaces are present in the query ,HHH-14649,71078,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,03/juin/2021 02:06 AM,27/sept./2021 11:38 AM,14/mars/2022 12:54 PM,10/juin/2021 15:31 PM,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-09-29T09:17:07.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104tps:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Partition by range support for ddl for hbm2ddl (SchemaExport),HHH-14648,71077,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Den Fehr,70121:34a07a0e-2d50-4471-8629-5f16997f4bc5,Den Fehr,70121:34a07a0e-2d50-4471-8629-5f16997f4bc5,02/juin/2021 09:54 AM,02/juin/2021 09:54 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"As far as I can find, there's no current way to create a table with the hbm2ddl with annotations? The goal would be to have ""partition by range (column, column)"" or ""partition by range (column)"" when creating the table? Unless there's a hook that I can use that would allow me to append sql to the ddl create table? Still would be useful for it to be done with annotations though.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:0d4bc8ee-e15b-406f-9ada-a55ff81e552f(ug:0d4bc8ee-e15b-406f-9ada-a55ff81e552f),,,,,,,,,0|104tpk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
More lazy collection allocations would benefit ResourceRegistryStandardImpl ,HHH-14647,71076,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,02/juin/2021 08:49 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,03/juin/2021 06:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,hibernate-core,,,,0,,,,,,"The `unassociatedResultSets` field should really be made lazy, and I should have a better look at `xref` as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-02T08:50:03.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tpc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Updating the migration guide for 5.5,HHH-14646,71075,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,02/juin/2021 07:16 AM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,02/juin/2021 07:45 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-02T07:44:15.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tp4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Bug hibernate,HHH-14645,71074,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,manh cuong vu,60b6eac3a5be0a0069d37b76,manh cuong vu,60b6eac3a5be0a0069d37b76,01/juin/2021 19:37 PM,01/juin/2021 23:35 PM,14/mars/2022 12:54 PM,01/juin/2021 23:35 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,hibernate,,,,,"i have entity CertificateStaffBO <=> table CERTIFICATE_STAFF
@Entity
@Table(name = ""CERTIFICATE_STAFF"")
public class CertificateStaffBO extends BaseFWModelImpl {

    private Long id;
    private Long sysUserId;
    private String certificateCode;
    private String filed;
    private String certificateName;
    private String scanPath;
    private Long scoreExecute;
    private Long scoreTheory;
    private Long status;
    private Date activeDate;
    private Date exprireDate;

    @Id
    @GeneratedValue(generator = ""sequence"")
    @GenericGenerator(name = ""sequence"", strategy = ""sequence"", parameters = {@Parameter(name = ""sequence"", value = ""CERTIFICATE_STAFF_SEQ"")})
    @Column(name = ""ID"")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = ""SYS_USER_ID"")
    public Long getSysUserId() {
        return sysUserId;
    }

    public void setSysUserId(Long sysUserId) {
        this.sysUserId = sysUserId;
    }

    @Column(name = ""CODE"")
    public String getCertificateCode() {
        return certificateCode;
    }

    public void setCertificateCode(String certificateCode) {
        this.certificateCode = certificateCode;
    }

    @Column(name = ""FIELD"")
    public String getFiled() {
        return filed;
    }

    public void setFiled(String filed) {
        this.filed = filed;
    }

    @Column(name = ""NAME"")
    public String getCertificateName() {
        return certificateName;
    }

    public void setCertificateName(String certificateName) {
        this.certificateName = certificateName;
    }

    @Column(name = ""SCAN_PATH"")
    public String getScanPath() {
        return scanPath;
    }

    public void setScanPath(String scanPath) {
        this.scanPath = scanPath;
    }

    @Column(name = ""SCORE_EXECUTE"")
    public Long getScoreExecute() {
        return scoreExecute;
    }

    public void setScoreExecute(Long scoreExecute) {
        this.scoreExecute = scoreExecute;
    }

    @Column(name = ""SCORE_THEORY"")
    public Long getScoreTheory() {
        return scoreTheory;
    }

    public void setScoreTheory(Long scoreTheory) {
        this.scoreTheory = scoreTheory;
    }

    @Column(name = ""STATUS"")
    public Long getStatus() {
        return status;
    }

    public void setStatus(Long status) {
        this.status = status;
    }

    @Column(name = ""ACTIVE_DATE"")
    public Date getActiveDate() {
        return activeDate;
    }

    public void setActiveDate(Date activeDate) {
        this.activeDate = activeDate;
    }

    @Column(name = ""EXPIRE_DATE"")
    public Date getExprireDate() {
        return exprireDate;
    }

    public void setExprireDate(Date exprireDate) {
        this.exprireDate = exprireDate;
    }

    @Override
    public CertificateStaffDTO toDTO() {
        CertificateStaffDTO certificateStaffDTO = new CertificateStaffDTO();
        certificateStaffDTO.setCertificateId(this.id);
        certificateStaffDTO.setSysUserId(5520l);
        certificateStaffDTO.setCertificateCode(this.certificateCode);
        certificateStaffDTO.setField(this.filed);
        certificateStaffDTO.setCertificateName(this.certificateName);
        certificateStaffDTO.setScanPath(this.scanPath);
        certificateStaffDTO.setScoreExecute(this.scoreExecute);
        certificateStaffDTO.setScoreTheory(this.scoreTheory);
        certificateStaffDTO.setStatus(this.status);
        certificateStaffDTO.setActiveDate(this.activeDate);
        certificateStaffDTO.setExprireDate(this.exprireDate);
        return certificateStaffDTO;
    }
}

and i have method 
public List<CertificateStaffDTO> getLstCertificateStaff(CertificateStaffDTO dto) {
 StringBuilder sql = new StringBuilder();
 // test 1
 sql.append(""select * from CERTIFICATE_STAFF"");
// test 2 : replace sql
// sql.append(""SELECT * FROM CERTIFICATE_STAFF cs  LEFT JOIN SYS_USER su ON cs.SYS_USER_ID = su.SYS_USER_ID WHERE cs.STATUS = 1 "");
 SQLQuery query = getSession().createSQLQuery(sql.toString());
 query.setResultTransformer(Transformers.aliasToBean(CertificateStaffDTO.class));
 return query.list();
}
when i use case test 1 then program run 
But i use case test 2 then program have eror : No Dialect mapping for JDBC type: -9 and no execute comand sql
I need help ? Please . Thanks .....

","java 1.8, hibarnate...vv",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:66d86cad-0d11-4bf1-8d4d-b63f70966fa2(ug:66d86cad-0d11-4bf1-8d4d-b63f70966fa2),,,,,,,,0|104tow:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-02 06:35:18.766,,,,"01/juin/2021 23:35 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;This system is for issues, not for questions. Please ask your questions on https://discourse.hibernate.org/ or https://stackoverflow.com/questions/tagged/hibernate",,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.5.0.Final,HSEARCH-4233,71070,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/juin/2021 08:20 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,01/juin/2021 09:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-01T09:11:11.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2585,0|104mtz:zci,,,,,,HSEARCH - 2021-12,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Filter data by tenant when providing a low-level LuceneIndexReader ,HSEARCH-4232,71067,,Tâche,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,31/mai/2021 06:31 AM,14/déc./2021 00:14 AM,14/mars/2022 12:54 PM,,6.0.3.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,backend-lucene,,,,0,,,,,,"With the [https://hibernate.atlassian.net/browse/HSEARCH-4065|https://hibernate.atlassian.net/browse/HSEARCH-4065|smart-link] we don’t filter by tenant id the visibility of the data of the returned index reader if multi-tenancy is enabled, on Hibernate ORM session for instance.

This could lead to a misuse of the feature from the user.

We can try to use the {{org.apache.lucene.index.FilterLeafReader}}. In that case, we should also consider other related issues such as returning a correct index size.",,,,,,,,,,,,,,,,,,,HSEARCH-4065,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,,0|104vxq:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-05-31 13:42:31.148,,,,31/mai/2021 06:42 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;We’re definitely not going to do this in a micro. Moving from 6.1.1-backlog to 6.1.0.Alpha1.,,,,,,,,,,,,,,,,A faire,,
Static sharding of automatic indexing outbox event queues,HSEARCH-4231,71066,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,31/mai/2021 00:58 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,29/juil./2021 07:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"As a first step toward the dynamic sharding evoked in [https://hibernate.atlassian.net/browse/HSEARCH-4140|https://hibernate.atlassian.net/browse/HSEARCH-4140|smart-link] , we should implement simple, static sharding. That will at least lay the groundwork for the more complicated dynamic sharding.

The idea would be to allow users to specify, through configuration properties:

* That processing is sharded
* How many total shards there are
* What’s the index of the shards processed by the current application node. I’m using “shards”, plural, because it sounds reasonable to assign more shards to one node that to another, or to not assign any shard to a given node, in an attempt to move the load to specific nodes.

So for example, on node 1:

{noformat}hibernate.search.automatic_indexing.processing.strategy = static-sharding
hibernate.search.automatic_indexing.processing.shards.total_count = 5
hibernate.search.automatic_indexing.processing.shards.assigned = 0,1,2{noformat}

On node 2:

{noformat}hibernate.search.automatic_indexing.processing.strategy = static-sharding
hibernate.search.automatic_indexing.processing.shards.total_count = 5
hibernate.search.automatic_indexing.processing.shards.assigned = 3,4{noformat}

On node 3:

{noformat}hibernate.search.automatic_indexing.processing.strategy = none{noformat}

I think we should require an explicit {{processing.strategy=none}} when the user doesn’t want an node to process any shard; otherwise, the lack of value for {{processing.shards.assigned}} could just be an oversight…",,,,,,,,,,,,,,,,,,,HSEARCH-4134,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T07:11:24.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2621,0|1009cw:000000xdur642,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-14,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Failed to release JPA EntityManager java.util.ConcurrentModificationException:  null,HHH-14644,71064,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,28/mai/2021 10:06 AM,01/déc./2021 06:34 AM,14/mars/2022 12:54 PM,01/déc./2021 06:34 AM,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Using `enable_lazy_load_no_trans=true` in a multi thread environment.

Stacktrace:

{code:java}
at java.base/java.util.HashMap.forEach(HashMap.java:1339) ~[na:na]
	at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.releaseResources(ResourceRegistryStandardImpl.java:323) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.close(LogicalConnectionManagedImpl.java:255) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:175) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.hibernate.internal.AbstractSharedSessionContract.close(AbstractSharedSessionContract.java:351) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.hibernate.internal.SessionImpl.closeWithoutOpenChecks(SessionImpl.java:376) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.hibernate.internal.SessionImpl.close(SessionImpl.java:361) ~[hibernate-core-5.4.29.Final.jar:5.4.29.Final]
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.closeEntityManager(EntityManagerFactoryUtils.java:427) ~[spring-orm-5.3.5.jar:5.3.5]
	at org.springframework.orm.jpa.JpaTransactionManager.doCleanupAfterCompletion(JpaTransactionManager.java:650) ~[spring-orm-5.3.5.jar:5.3.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion(AbstractPlatformTransactionManager.java:1004) ~[spring-tx-5.3.5.jar:5.3.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:790) ~[spring-tx-5.3.5.jar:5.3.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711) ~[spring-tx-5.3.5.jar:5.3.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654) ~[spring-tx-5.3.5.jar:5.3.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407) ~[spring-tx-5.3.5.jar:5.3.5]
	at org.springframework.transaction.aspectj.AbstractTransactionAspect.ajc$around$org_springframework_transaction_aspectj_AbstractTransactionAspect$1$2a73e96c(AbstractTransactionAspect.aj:71) ~[spring-aspects-5.3.5.jar:5.3.5]
...
{code}

Possibly related to: https://hibernate.atlassian.net/browse/HHH-14643
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),sanne(sanne),,,,,,,,0|104tmw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-01 14:34:26.581,,,,"01/déc./2021 06:34 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Like [https://hibernate.atlassian.net/browse/HHH-14643|https://hibernate.atlassian.net/browse/HHH-14643|smart-link], Sessions are not threadsafe.",,,,,,,,,,,,,,,,Terminé,,
enable_lazy_load_no_trans not thread safe,HHH-14643,71063,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,28/mai/2021 09:58 AM,01/déc./2021 06:33 AM,14/mars/2022 12:54 PM,01/déc./2021 06:33 AM,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Using *enable_lazy_load_no_trans=true* .

Reproduction:

# read an entity with uninitialized lazy relationship
# close transaction
# start multiple threads that read that lazy relationship triggering initialization
# different errors show up on each run

Sample repo: [https://github.com/cdalexndr/HHH-14643|https://github.com/cdalexndr/HHH-14643|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),sanne(sanne),,,,,,,,0|104tmo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-12-01 14:33:41.968,,,,"01/déc./2021 06:33 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Neither Sessions nor entities are threadsafe, so this is not legal use of Hibernate.

Sorry it took me so long to comment though\!",,,,,,,,,,,,,,,,Terminé,,
verify/test Criteria in v6,HHH-14642,71062,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,28/mai/2021 08:20 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,09/sept./2021 07:40 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"see https://trello.com/c/XIN7ZPx6/103-verify-test-criteria

Description repeated here:

A more generalized task to test/verify all parts of Criteria - specifically building and using all the different types of nodes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-09-09T07:39:32.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4018,0|104tmg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Change references to ""http://"" to ""https://""",HHH-14641,71061,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,27/mai/2021 14:41 PM,14/juin/2021 08:36 AM,14/mars/2022 12:54 PM,04/juin/2021 03:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.2,,,,,,,,,,,,,0,,,,,,"There are a number of places that still refer to ""http://"" that should be changed to ""https://"".",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-04T03:09:45.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,0|104tm8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Backport support for automating releases that push to Sonatype to 5.3 branch (includes Gradle upgrade),HHH-14640,71060,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,27/mai/2021 13:33 PM,16/juil./2021 08:55 AM,14/mars/2022 12:54 PM,04/juin/2021 11:09 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=15, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":15,""lastUpdated"":""2021-06-03T15:24:01.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":15,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104tm0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,03/juin/2021 16:12 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in 5.3 branch.,03/juin/2021 17:18 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Reopening because of an authentication issue publishing to Sonatype.,"04/juin/2021 11:09 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Builds are working properly now, so resolving.",,,,,,,,,,,,,,Terminé,,
Preserve the relative order of events for a given entity even in the case of retries,HSEARCH-4230,71059,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,27/mai/2021 06:57 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,31/mai/2021 06:17 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"See [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134/near/231280623|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134/near/231280623]

{quote}For example, consider what happens if we discover there are inherent problems with handling the retry after a further event for the same entity... I.e. E1 fails, E2 gets processed, E1's retry gets processed.{quote}

Turns out I was right to be wary.

See for example this scenario:

* Send event 1: delete entity A
* Send event 2: add entity A
* Process event 1 => failure, create event 3 to re-try
* New batch
* Process event 2 => success, entity A is indexed
* Process event 3 (retry of event 1) => success, entity A is no longer indexed

We end up with an entity that is not indexed…",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-31T06:17:11.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2582,0|104tls:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Wrong query using filter and entity inheritance,HHH-14639,71058,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Valerio Cupelloni,557058:20b867e6-62a6-4e8e-9b95-146399f4ea6d,Valerio Cupelloni,557058:20b867e6-62a6-4e8e-9b95-146399f4ea6d,26/mai/2021 12:30 PM,26/août/2021 00:27 AM,14/mars/2022 12:54 PM,,5.4.15,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"Using @Filter annotation in combination with @Inheritance(strategy=InheritanceType.JOINED) in Hibernate 5.4.15.Final results in wrong query construction like this

select reservatio0_.id as id1_1_0_, place1_.id as id1_2_1_, reservatio0_.reservation_for_id as reservat3_1_0_, reservatio0_.status as status2_1_0_, place1_1_.name as name2_2_1_, place1_.address as address1_0_1_, place1_.parent_id as parent_i2_0_1_ from reservation reservatio0_ left outer join place place1_ on reservatio0_.reservation_for_id=place1_.parent_id and (*place1_1_.name* = ?) *left outer join thing place1_1_* on place1_.id=place1_1_.id where reservatio0_.status='ACTIVE' 

I've created a repository with test case that replicate this issue: [JPAUnitTestCase.java|https://github.com/vcupelloni/hibernate_filter_bug_report/blob/7ac6da59b639311e671c901c25bc74860a629262/src/test/java/com/example/demo/JPAUnitTestCase.java]

[^test-log]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,26/mai/2021 12:26 PM;ug:84c5d4fa-9801-41a1-88bd-adaeb215728c;test-log;https://hibernate.atlassian.net/secure/attachment/49868/test-log,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,christian.beikov(christian.beikov),ug:84c5d4fa-9801-41a1-88bd-adaeb215728c(ug:84c5d4fa-9801-41a1-88bd-adaeb215728c),,,,,,,,0|104tlk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-06 08:06:16.273,,,,30/juin/2021 08:12 AM;557058:20b867e6-62a6-4e8e-9b95-146399f4ea6d;Is there something wrong on the issue report?,06/juil./2021 01:06 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Why do you think so? The report is fine.,"16/août/2021 08:52 AM;557058:20b867e6-62a6-4e8e-9b95-146399f4ea6d;Is there a known workaround for this issue? I’m very surprised that no other is reporting it,  despite it affects a basic feature like query creation and execution…

The only way that I found to make it works is to prevent the join operation using the annotation @Fetch(FetchMode.SELECT) with huge impacts on application performance.","26/août/2021 00:27 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I don’t think there is. Hibernate is an open source project like many others where community members work on stuff based on their priorities. If this is really important to you, you should provide a fix for this or engage someone e.g. Red Hat or a consultant to do this for you. The Hibernate core team will get back to this at some point, but our resources are limited and we are focused on the development of Hibernate 6.0 which not only fixes this problem, but is also easier to maintain in general.",,,,,,,,,,,,,A faire,,
java.lang.ClassNotFoundException and Java 14 Support for Hibernate 5.4.31,HHH-14638,71057,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,CodeFilms,60ae4d538ff14c006adc31fe,CodeFilms,60ae4d538ff14c006adc31fe,26/mai/2021 06:41 AM,26/mai/2021 06:59 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hibernate 5.4.31 throws an exception for Java 14.
Jar files below included  yet still having issues.
javax.activation-1.2.0.jar
jaxb-api-2.3.0.jar
jaxb-core-2.3.0.jar
jaxb-impl-2.3.0.jar",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,shadow(shadow),ug:52f48e78-cd70-414f-a143-c320bafa2dca(ug:52f48e78-cd70-414f-a143-c320bafa2dca),,,,,,,,0|104tlc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-05-26 13:59:25.792,,,,26/mai/2021 06:59 AM;557058:bc807524-4b30-4e34-88c3-af0d27a91d16;why not also provide the stacktrace?,,,,,,,,,,,,,,,,A faire,,
Use a Long for OutboxEvent identifiers instead of Integer,HSEARCH-4229,71056,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,26/mai/2021 05:45 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,04/juin/2021 00:10 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"We expect many such events to be created over the lifespan of an application.

Integer gives us {{2,147,483,647}} positive values.

Long gives us {{9,223,372,036,854,775,807}} positive values.

An application sustaining 30 transactions per minute, with 2 events per transaction, every working day for 8 hours, would generate per year:

{noformat}2 * 30 * 60 * 8 * 5 * 50 = 7,200,000 events{noformat}

That would leave us with plenty of time when using integers (300 years), let alone longs.

However, a more active application sustaining 500 transactions per minute, with 10 events per transaction, every day, all day long, would generate per year:

{noformat}10 * 500 * 60 * 24 * 365 = 2,628,000,000 events{noformat}

Integers would not even last one year, while longs would still last about {{3,509,654,504}} years. That’s close to the age of earth.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-04T00:10:08.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2586,0|104tl4:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
DetachedMultipleCollectionChangeTest assertion failures on MariaDB Galera Cluster,HHH-14637,71055,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,Sultan Zhantemirov,5ac5dffb72078614ad177fd1,26/mai/2021 05:34 AM,26/mai/2021 06:18 AM,14/mars/2022 12:54 PM,,5.3.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,testsuite,,,,0,,,,,,"When using MariaDB Galera Cluster, _DetachedMultipleCollectionChangeTest_ particular assertion is failing. 

{noformat}org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest.testAuditJoinTable[0]
org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest.testAuditJoinTable[1]{noformat}

The following command is executed to run the Hibernate ORM tests:

{code:java}# make gradle ignore test failures
echo -e '\ntest { ignoreFailures=true }' >> hibernate-envers/hibernate-envers.gradle

./gradlew --init-script $WORKSPACE/init.gradle :hibernate-envers:matrix_mariadb_galera_103 \
        -Dmaven.repo.url=http://jcenter.bintray.com \
        -Dgradle.plugin.url=https://plugins.gradle.org/m2/ \
        -Dhibernate.show_sql=true -Dhibernate.format_sql=true -Dhibernate-matrix-dballocation=mariadb_galera_103 \
        -Dhibernate-matrix-databases=$WORKSPACE/hibernate-orm/db-profiles -Dhibernate-matrix-dballocation-geolocation=RDU \
        -Dhibernate-matrix-ignore=all -Dhibernate-matrix-skip-unittest=true \
        -Dhibernate-matrix-dballocation-requestee=""EAPQE/Hibernate/ORM/envers/mariadb_galera_103"" \
        --continue --info --stacktrace -x :hibernate-core:classes -x :hibernate-envers:classes -g local-home \
        --project-cache-dir=/tmp{code}

*Stack trace:*

java.lang.AssertionError: expected:<AuditJoinTableInfo \[name=MCE_RE1_AUD, revId=2, revType=ADD, MCE_ID=1, RE1_ID=2]> but was:<AuditJoinTableInfo \[name=MCE_RE1_AUD, revId=2, revType=ADD, MCE_ID=1, RE1_ID=3]>
at org.junit.Assert.fail(Assert.java:88)
at org.junit.Assert.failNotEquals(Assert.java:834)
at org.junit.Assert.assertEquals(Assert.java:118)
at org.junit.Assert.assertEquals(Assert.java:144)
at org.hibernate.envers.test.integration.collection.DetachedMultipleCollectionChangeTest.testAuditJoinTable([DetachedMultipleCollectionChangeTest.java:256|https://github.com/hibernate/hibernate-orm/blob/5.3.20/hibernate-envers/src/test/java/org/hibernate/envers/test/integration/collection/DetachedMultipleCollectionChangeTest.java#L256])
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
at org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.hibernate.testing.junit4.FailureExpectedHandler.evaluate(FailureExpectedHandler.java:41)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.hibernate.testing.junit4.BeforeClassCallbackHandler.evaluate(BeforeClassCallbackHandler.java:26)
at org.hibernate.testing.junit4.AfterClassCallbackHandler.evaluate(AfterClassCallbackHandler.java:25)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at org.junit.runners.Suite.runChild(Suite.java:128)
at org.junit.runners.Suite.runChild(Suite.java:27)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at ","java version ""1.8.0_291""
Java(TM) SE Runtime Environment (build 1.8.0_291-b10)
Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)
Java vendor: Oracle Corporation

OS name: ""linux"", version: ""3.10.0-1160.el7.x86_64"", arch: ""amd64"", family: ""unix""",,,,,,,,,,,,,,,,,,,,,,,,,,,,26/mai/2021 05:32 AM;ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d;log.txt;https://hibernate.atlassian.net/secure/attachment/49867/log.txt,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d(ug:15a085aa-240c-44e6-b6d9-dc2c97b7612d),,,,,,,,,0|104tkw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
StreamDecorator's closeHandler will be called multiple times,HHH-14636,71054,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Moonfruit Yu,557058:4cae2c49-4e37-4dc8-8aaf-a7f7ee41454b,Moonfruit Yu,557058:4cae2c49-4e37-4dc8-8aaf-a7f7ee41454b,Moonfruit Yu,557058:4cae2c49-4e37-4dc8-8aaf-a7f7ee41454b,26/mai/2021 00:17 AM,27/mai/2021 18:39 PM,14/mars/2022 12:54 PM,,5.5.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"[HHH-14449] already solved the problem of that onClose() handler not being called on close().

But there is another problem here that the closeHandler register in the StreamDecorator constructor will be called multiple times when close().

For example:

{code:java}public class Main {

    public static void main(String[] args) {
        AtomicInteger counter = new AtomicInteger();

        Stream<String> stream = new StreamDecorator<>(Stream.of(""""), counter::incrementAndGet)
                .flatMap(Stream::of)
                .filter(s -> true)
                .map(s -> s);

        stream.collect(Collectors.joining());

        System.out.println(counter); // This will output 4 instead of 1
    }
}{code}

For details please see 

[https://github.com/hibernate/hibernate-orm/pull/4011|https://github.com/hibernate/hibernate-orm/pull/4011|smart-card]

 and

[https://github.com/hibernate/hibernate-orm/pull/4015|https://github.com/hibernate/hibernate-orm/pull/4015|smart-card]

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:22d47ebe-4480-4466-80e0-68a1aa1a714c(ug:22d47ebe-4480-4466-80e0-68a1aa1a714c),,,,,,,,,0|104tko:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to latest JUnit and to Log4j 2,HHH-14635,71053,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/mai/2021 03:12 AM,13/déc./2021 04:46 AM,14/mars/2022 12:54 PM,13/déc./2021 04:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.25,5.4.33,5.5.0,,,,,,,build,testsuite,,,0,,,,,,Mostly to make security analysis tools happy. We're not affected by any known vulnerability as far as I can tell.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-26T00:05:57.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4008,0|104tkg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Integrate Gradle Enterprise into the ORM builds,HHH-14634,71052,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,24/mai/2021 09:48 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 07:00 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"Gradle have graciously offered to host an instance of their Gradle Enterprise offering for the Hibernate project.

Integrate this into our builds",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=9, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":9,""lastUpdated"":""2021-06-15T11:43:47.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":9,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104tk8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to latest geolatte-geom version 1.8.2,HHH-14633,71051,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,24/mai/2021 03:29 AM,04/sept./2021 04:00 AM,14/mars/2022 12:54 PM,04/sept./2021 03:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.6.0.Beta2,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-08-28T04:58:39.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104tk0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Call statistics.queryPlanCacheHit and statistics.queryPlanCacheMiss for FilterQueryPlan and NativeSQLQueryPlan,HHH-14632,71050,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Vlad Mihalcea,557058:f5e8c0d3-3aae-4bb4-a4e1-25463d60d232,Vlad Mihalcea,557058:f5e8c0d3-3aae-4bb4-a4e1-25463d60d232,Vlad Mihalcea,557058:f5e8c0d3-3aae-4bb4-a4e1-25463d60d232,24/mai/2021 00:57 AM,01/juin/2021 07:52 AM,14/mars/2022 12:54 PM,24/mai/2021 22:41 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0,,,,,,,,,hibernate-core,,,,0,,,,,,"Currently, the {{statistics.queryPlanCacheHit}} and {{statistics.queryPlanCacheMiss}} methods are called for the {{HQLQueryPlan}} only.

These statistics should be updated even for {{FilterQueryPlan}} and {{NativeSQLQueryPlan}}, as all these query objcts are stored in the Query Plan Cache.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-24T22:41:07.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,mih_vlad(mih_vlad),,,,,,,,,0|104tjs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Create a `StandardDomainModel` using the Sakila database in v6,HHH-14631,71049,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,22/mai/2021 19:18 PM,22/mai/2021 19:23 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"see https://trello.com/c/qIZ1C2F6/71-create-a-standarddomainmodel-using-the-sakila-database

Sakila is a famous sample database in MySQL: https://dev.mysql.com/doc/sakila/en/",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-06T09:48:36.000-0800"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4004,0|104tjk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Optimise method MetamodelImpl#locateEntityPersister(Class),HHH-14630,71048,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,21/mai/2021 13:10 PM,21/mai/2021 13:10 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"
There seem to be some easy opportunities in MetamodelImpl#locateEntityPersister(Class), and perhaps it's a good use case for a ClassValue.

This method is heavily invoked by other Hibernate components.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tjc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Persistence.generateSchema() does not release connections to the database server.,HHH-14629,71047,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gary Gregory,557058:e778dba1-de4c-48d8-9b45-e52cb08ef61d,Gary Gregory,557058:e778dba1-de4c-48d8-9b45-e52cb08ef61d,21/mai/2021 06:18 AM,21/mai/2021 06:19 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We have a large test suite that generates and drops schemas from different tests a by calling Persistence.generateSchema() on a PostgreSQL 13 database. This fails because generateSchema() does not seem to release connections to the database. This may be due to the empty implementation of {{org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.cancel()}}.

{noformat}org.opentest4j.AssertionFailedError: Test iteration index 5
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:43)
	at org.junit.jupiter.api.Assertions.fail(Assertions.java:129)
	at com.rs.legasuite.isaac.persist.AbstractTest.loop(AbstractTest.java:35)
	at com.rs.legasuite.isaac.persist.jpa.PersistenceTest.testGenerateSchema(PersistenceTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at java.util.ArrayList.forEach(ArrayList.java:1259)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:84)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: javax.persistence.PersistenceException: [PersistenceUnit: com.rs.legasuite.isaac.persist.postgresql] Error performing schema management
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1336)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.generateSchema(EntityManagerFactoryBuilderImpl.java:1246)
	at org.hibernate.jpa.HibernatePersistenceProvider.generateSchema(HibernatePersistenceProvider.java:161)
	at javax.persistence.Persistence.generateSchema(Persistence.java:114)
	at com.rs.legasuite.isaac.persist.jpa.PersistenceTest.lambda$0(PersistenceTest.java:47)
	at com.rs.legasuite.isaac.persist.AbstractTest.loop(AbstractTest.java:33)
	... 68 more
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:275)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:176)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:127)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1224)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.generateSchema(EntityManagerFactoryBuilderImpl.java:1238)
	... 72 more
Caused by: org.hibernate.HibernateException: com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: FATAL: sorry, too many clients already
	at org.hibernate.hikaricp.internal.HikariCPConnectionProvider.configure(HikariCPConnectionProvider.java:63)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:107)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:246)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.buildJdbcConnectionAccess(JdbcEnvironmentInitiator.java:145)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:66)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:101)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 82 more
Caused by: com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: FATAL: sorry, too many clients already
	at com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException(HikariPool.java:576)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:562)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.<init>(HikariDataSource.java:81)
	at org.hibernate.hikaricp.internal.HikariCPConnectionProvider.configure(HikariCPConnectionProvider.java:59)
	... 90 more
Caused by: org.postgresql.util.PSQLException: FATAL: sorry, too many clients already
	at org.postgresql.core.v3.ConnectionFactoryImpl.doAuthentication(ConnectionFactoryImpl.java:613)
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:161)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:213)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:51)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:223)
	at org.postgresql.Driver.makeConnection(Driver.java:465)
	at org.postgresql.Driver.connect(Driver.java:264)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	... 93 more{noformat}

Simplest reproducer:

{code:java}for (int i = 0; i < 20; i++) {
            final Map<String, Object> generateSchemaProperties1 = new HashMap<>();
            generateSchemaProperties1.put(AvailableSettings.HBM2DDL_DATABASE_ACTION, Action.DROP);
            generateSchemaProperties1.put(AvailableSettings.HBM2DDL_HALT_ON_ERROR, false);
            Persistence.generateSchema(PERSISTENT_UNIT_POSTGRESQL, generateSchemaProperties1);
            //
            final Map<String, Object> generateSchemaProperties2 = new HashMap<>();
            generateSchemaProperties2.put(AvailableSettings.HBM2DDL_DATABASE_ACTION, Action.CREATE_ONLY);
            generateSchemaProperties2.put(AvailableSettings.HBM2DDL_HALT_ON_ERROR, true);
            Persistence.generateSchema(PERSISTENT_UNIT_POSTGRESQL, generateSchemaProperties2);
}{code}","Microsoft Windows [Version 10.0.19041.928]

openjdk version ""1.8.0_292""
OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_292-b10)
OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.292-b10, mixed mode)

Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)
Maven home: C:\Java\apache-maven-3.8.1\bin\..
Java version: 1.8.0_292, vendor: AdoptOpenJDK, runtime: C:\Program Files\AdoptOpenJDK\jdk-8.0.292.10-hotspot\jre
Default locale: en_US, platform encoding: Cp1252
OS name: ""windows 10"", version: ""10.0"", arch: ""amd64"", family: ""windows""
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0043b311-5a8b-4eb5-bcac-33703b2a55d7(ug:0043b311-5a8b-4eb5-bcac-33703b2a55d7),,,,,,,,,0|104tj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Highlighting the download links.,HHH-14628,71046,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Maitri Mehta,60a76b179fd9f30067e3a31f,Maitri Mehta,60a76b179fd9f30067e3a31f,21/mai/2021 01:25 AM,21/mai/2021 01:25 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"The download link  on  [http://hibernate.org/orm/] needs to be highlighted as for the first time users it looks a bit confusing.
The zip archive section on the right (as can be found in the attachment) also seems a bit confusing for the users seeking downloads for the first time. [http://hibernate.org/orm/releases/5.4/]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,21/mai/2021 01:23 AM;ug:46b155d2-0318-4aec-ab5f-921fedd35d1d;image-2021-05-21-13-53-40-481.png;https://hibernate.atlassian.net/secure/attachment/49866/image-2021-05-21-13-53-40-481.png,21/mai/2021 01:24 AM;ug:46b155d2-0318-4aec-ab5f-921fedd35d1d;image-2021-05-21-13-54-05-997.png;https://hibernate.atlassian.net/secure/attachment/49865/image-2021-05-21-13-54-05-997.png,,,,,,{},,,,,,,,,,true,2.0,ug:46b155d2-0318-4aec-ab5f-921fedd35d1d(ug:46b155d2-0318-4aec-ab5f-921fedd35d1d),,,,,,,,,0|104tiw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
org.hibernate.mapping.PersistentClass#getProperty does not support composite ids,HHH-14627,71045,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Thomas Mortagne,557058:15418a7f-9417-4092-a9c4-9bbb79cabda0,Thomas Mortagne,557058:15418a7f-9417-4092-a9c4-9bbb79cabda0,21/mai/2021 01:06 AM,21/mai/2021 01:06 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I have the following mapping:

{code:xml}
    <class name=""com.xpn.xwiki.doc.XWikiLink"" table=""xwikilinks"">
        <composite-id unsaved-value=""undefined"">
            <key-property name=""docId"" column=""XWL_DOC_ID"" type=""long"" />
            <key-property name=""link"" type=""string"">
                <column name=""XWL_LINK"" index=""XWLNK_LINK"" length=""766"" />
            </key-property>
        </composite-id>
        <property name=""fullName"" type=""string"" column=""XWL_FULLNAME"" length=""768"" />
    </class>
{code}

and I was expecting the following to work

{code:java}
persistentClass.getProperty(""link"")
{code}

but it tells me my property does not exist.

When looking at getProperty implementation I can see that it does look at the identifier but only if it's a unique identifier and completely miss the Component identifiers which feels like at least an inconsistency.

I had to add the following workaround before my call to getProperty():

{code:java}
            KeyValue identifier = persistentClass.getIdentifier();
            if (identifier instanceof org.hibernate.mapping.Component) {
                Iterator<Property> it = ((org.hibernate.mapping.Component) identifier).getPropertyIterator();

                while (it.hasNext()) {
                    Property property = it.next();

                    if (property.getName().equals(propertyName)) {
                        return getConfiguredColumnName(property);
                    }
                }
            }

            return getConfiguredColumnName(persistentClass.getProperty(propertyName));
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,tmortagne(tmortagne),,,,,,,,,0|104tio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
@Where annotation doesn't work on Joined Subclasses,HHH-14626,71044,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,Daria Mitrofanova,70121:c89eccb9-26f2-4cc7-8939-c41ff24fc302,Daria Mitrofanova,70121:c89eccb9-26f2-4cc7-8939-c41ff24fc302,Daria Mitrofanova,70121:c89eccb9-26f2-4cc7-8939-c41ff24fc302,20/mai/2021 13:53 PM,20/mai/2021 15:38 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,hibernate,,,,"@Where annotation ignored if it's on joined subclass
For example, generated where-string for ChildEntity will include only ParentEntity where-clause



{noformat}@Entity(name = ""ChildEntity"")
@Persister(impl = JoinedSubclassEntityPersister.class)
@Where(clause = ""age = 1"")
public static class ChildEntity extends ParentEntity {

	private Integer age;
}{noformat}



{noformat}@Entity(name = ""ParentEntity"")
@Inheritance(strategy = InheritanceType.JOINED)
@Where(clause = ""id = 1"")
public static class ParentEntity {

   @Id
   public Integer id;

   private String name;
}
{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-01T04:55:24.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,20/mai/2021 00:00 AM,,,,true,0.0,ug:5dad72e4-149f-4c19-a2da-ddb2ac853727(ug:5dad72e4-149f-4c19-a2da-ddb2ac853727),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/4002,0|104tig:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Avoid performing a ServiceRegistryLookup in JtaTransactionCoordinatorImpl constructor,HHH-14625,71042,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,20/mai/2021 07:55 AM,25/août/2021 06:58 AM,14/mars/2022 12:54 PM,09/août/2021 09:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.7,,,,,,,,,,,,,0,,,,,,"The constructor of `JtaTransactionCoordinatorImpl` performs a lookup for the `JtaPlatform` service; since this happens each time a `Session` is opened, it would be great to have such references ready at hand when each `JtaTransactionCoordinatorImpl`needs to be constructed.

I'm unsure about what would be the best place to do this though, but I hope we can explore it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-09T09:28:37.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104ti0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Oracle from version 12 started supporting the `offset ? rows fetch next ? rows only`syntax for pagination,HHH-14624,71041,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,20/mai/2021 07:16 AM,29/sept./2021 09:58 AM,14/mars/2022 12:54 PM,01/juin/2021 07:19 AM,5.3.20,5.4.31,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,HHH-14649,HHH-14819,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-09-29T09:17:46.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104ths:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Not able to get the SQLSERVER RAISERROR() function custom error in JAVA Hibernet,HHH-14623,71040,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Rajan M Kapadia,557058:a966142c-cdb5-4f82-bf68-307074198ad6,Rajan M Kapadia,557058:a966142c-cdb5-4f82-bf68-307074198ad6,20/mai/2021 06:41 AM,20/mai/2021 06:41 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"we are not able to catch the correct exception thrown with RAISERROR() function from MS-SQL Server Trigger in to JAVA code which is hosted in JBOSS 7.3.1 . 


",JBOSS 7.3.1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0e9f6d7f-fad1-4b53-a464-a5c1c97d2165(ug:0e9f6d7f-fad1-4b53-a464-a5c1c97d2165),,,,,,,,,0|104thk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Ensure correct processing of events even if their IDs are out of order,HSEARCH-4228,71039,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,20/mai/2021 00:02 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,21/juil./2021 23:52 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"We cannot rely on identifiers to reflect to order events were created in, because of “ID pools”.

It’s possible that two transactions changing the same entity will produce events 1 and 2 (respectively), but assign ID 42 to the second event and ID 43 to the first event.

Something like that:

* Transaction 1 (T1) begins
* Transaction 2 (T2) begins
* T1: change entity A.
* T1: flush. An event gets created for entity A. Its ID is initialized from the ID pool, which gets initialized with IDs 0 to 9. So the ID of this event is 0.
* T2: delete entity B.
* T2: commit. An event gets created for the deletion of entity B. Its ID is initialized from the ID pool, which gets initialized with IDs 10 to 19. So the ID of this event is 10.
* T1: load entity B.
* T1: re-create entity B.
* T1: commit. An event gets created for the re-creation of entity B. Its ID is initialized from the ID pool, which is already initialized and contains IDs 1 to 9. So the ID of this event is 1.

End result:

* Event 1: update entity A, ID = 0.
* Event 2: delete entity B, ID = 10.
* Event 3: re-create entity B, ID = 1.

As demonstrated in HSEARCH-4202, this order of events will result in entity B not being updated at all, because we order events by ID when we poll the database. This behavior is incorrect.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-21T23:50:33.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2587,0|104tlw:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-14,,,,,,,,,,,,,,,"20/mai/2021 00:19 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;The only workable, future-proof solution I see to this problem would be to store a datetime ({{created}}) within the events, and order them according to this datetime instead of the ID.

We would need to initialize this datetime with the {{database}} time though, not the JVM time; otherwise we would run the risk of incorrect order caused by different time in different JVMs. So we would need to make sure that the {{created}}column gets initialized with an SQL {{now()}}. Maybe {{org.hibernate.annotations.ColumnTransformer}} can do the trick? Otherwise we’ll have to ask ORM experts: there’s probably a way to do this.

The datetime wouldn’t reflect when the entity changes are actually committed to the database, but that’s alright: we only care about the relative order of ADD/DELETE events for the same entity, and those involve a lock on a database row that would prevent incorrect ordering of events.",20/mai/2021 00:21 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Note that we already have a reproducer for this problem in the codebase; see the reference to this ticket in [OutboxPollingOutOfOrderIdsIT.java|https://github.com/hibernate/hibernate-search/pull/2579/commits/81e00ccd18e6f8f7cccadf823ba6eee04bdec94e#diff-74984a6e72a2cb7bd8d2f84cbfb587d1b9b46ffa7f3125af892beb7e9e2d1ff1],,,,,,,,,,,,,,,Terminé,,
Improved iteration of PreLoadEventListener,HHH-14622,71038,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/mai/2021 14:07 PM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,20/mai/2021 07:56 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,5.5.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,"The way in which `TwoPhaseLoad` implements iteration could really benefit from using the `FastSessionServices` optimised access to the eventlisteners stored in eventListenerGroup_PRE_LOAD.

This also happens to be necessary for a fix in Hibernate Reactive",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-05-20T07:08:10.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104th4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Introduce new methods on EventListenerGroup which allow Hibernate Reactive to fire events more efficiently,HHH-14621,71037,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,19/mai/2021 07:14 AM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,19/mai/2021 13:08 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,5.5.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,"The `EventListenerGroup` SPI exposes some methods which allow a more efficient strategy to fire events, by not needing to return a list if eventlisteners but processing the event while iterating within the implementation.

Unfortunately the current API isn't a good fit for Hibernate Reactive to use, so a new set of methods are proposed which it can use without the drawbacks of the current strategy.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-19T13:08:46.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104tgw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Retrieving a collection from an entity triggers collection initialization (with extended bytecode enhancement enabled),HHH-14620,71036,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/mai/2021 07:06 AM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,20/mai/2021 02:54 AM,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.CR1,,,,,,,,,hibernate-core,,,,0,,,,,,"When extended bytecode enhancement is enabled, a snippet of code like this will trigger the initialization of the collection:

{code}
MyEntity entity = session.find( MyEntity.class, 1L );
entity.getMyCollection();
{code}

Strangely, doing the same on a proxy (as shown below) will *not* reproduce the same problem:

{code}
MyEntity entity = session.load( MyEntity.class, 1L );
entity.getMyCollection();
{code}

This was noticed on ORM 5.5, with bytecode proxies enabled (that's the default).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-20T02:53:58.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3994,0|104tgo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"19/mai/2021 07:07 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;May be related to [https://hibernate.atlassian.net/browse/HHH-14500|https://hibernate.atlassian.net/browse/HHH-14500|smart-link], though that ticket mentions many more problems, so fixing this one will probably not solve [https://hibernate.atlassian.net/browse/HHH-14500|https://hibernate.atlassian.net/browse/HHH-14500|smart-link] completely.",,,,,,,,,,,,,,,,Terminé,,
ClassCastException because collection of uninitialized proxy is dirty checked,HHH-14619,71035,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,19/mai/2021 06:16 AM,24/mai/2021 02:36 AM,14/mars/2022 12:54 PM,21/mai/2021 00:15 AM,5.4.31,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,5.5.0.CR1,,,,,,,,bytecode-enhancement,hibernate-core,,,0,,,,,,"The following exception is thrown during auto-flushing:

{noformat}Request failed: java.lang.ClassCastException: class java.util.HashSet cannot be cast to class org.hibernate.collection.spi.PersistentCollection (java.util.HashSet is in module java.base of loader 'bootstrap'; org.hibernate.collection.spi.PersistentCollection is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @56673d41)
    at org.hibernate.event.internal.DirtyCollectionSearchVisitor.processCollection(DirtyCollectionSearchVisitor.java:52)
    at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:104)
    at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:65)
    at org.hibernate.event.internal.AbstractVisitor.processEntityPropertyValues(AbstractVisitor.java:59)
    at org.hibernate.event.internal.DefaultFlushEntityEventListener.hasDirtyCollections(DefaultFlushEntityEventListener.java:491)
    at org.hibernate.event.internal.DefaultFlushEntityEventListener.isUpdateNecessary(DefaultFlushEntityEventListener.java:261)
    at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:170)
    at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:93)
    at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:230)
    at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:93)
    at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:50)
    at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:93)
    at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1327)
    at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1407){noformat}

The discussion was started on the Quarkus Zulip-Channel: [https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/ClassCastException.20Hibernate.20PersistentCollection|https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/ClassCastException.20Hibernate.20PersistentCollection]

Essentially, when enhancement-as-proxy is used and such a proxy is in the persistence context, we try to dirty check the fields of the object. In case of an uninitialized proxy, this is unnecessary though and leads to the following exception. Here is some sample code for reproducing this issue:

{noformat}Record r = new Record();
r.setContainer(entityManager.getReference(Container.class, payload.getContainerId()));
entityManager.persist(r);
this.entityManager.find(Record.class, r.id);{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-21T00:15:36.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104tgg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Having the possibility to include several SQL files into the import.sql file,HHH-14618,71034,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,AntonioG,557058:92efe172-e4f8-4633-9624-de6c7c557562,AntonioG,557058:92efe172-e4f8-4633-9624-de6c7c557562,19/mai/2021 02:41 AM,24/mai/2021 03:04 AM,14/mars/2022 12:54 PM,24/mai/2021 02:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.CR1,,,,,,,,,,,,,0,,,,,,"This idea was discussed on Quarku GitHub : https://github.com/quarkusio/quarkus/issues/9464#issuecomment-843154137

At the moment, Hibernate executes the `import.sql` file at startup. Sometime we need to execute several files, not just one. Instead of changing the way this is configured by passing a list of files to execute, the `import.sql` file could allow to include a list of ordered SQL files. Something like:

````
include file1.sql;
include file2.sql;
include file3.sql;

INSERT INTO .....
```

The keyword `include` cannot be interpreted as SQL. So it could be `include` or something like `@include`, etc. so people know this is not a SQL statement.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-24T02:42:36.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:1c8612e5-d391-4335-bcf7-697fd0badd2a(ug:1c8612e5-d391-4335-bcf7-697fd0badd2a),christian.beikov(christian.beikov),gsmet(gsmet),,,,,,,0|104tg8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-05-19 10:17:29.353,,,,"19/mai/2021 03:17 AM;557058:71e31052-f0d7-46e3-a9d7-8b9acd6998d8;I think it would be better to allow the user to define a list of files in the configuration rather than enhancing the parser and taking the risk to break it.



That would be far easier to implement and good enough IMHO.","19/mai/2021 03:31 AM;557058:92efe172-e4f8-4633-9624-de6c7c557562;If you can include external files, you can do more complex things such as:



{noformat}@include file1.sql;

INSERT INTO...
INSERT INTO...

@include file2.sql;

UPDATE...
UPDATE...

@include file3.sql;

INSERT INTO{noformat}

 ",,,,,,,,,,,,,,,Terminé,,
Remove `QueryLiteralRendering` and `LiteralHandlingMode` from v6 codebase,HHH-14617,71033,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,18/mai/2021 16:56 PM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,20/mai/2021 02:26 AM,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,hibernate-core,,,,0,,,,,,"see https://trello.com/c/idT3VtG3/158-remove-queryliteralrendering-and-literalhandlingmode

We need to remove QueryLiteralRendering and LiteralHandlingMode in favour of ValueHandlingMode
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-20T02:26:22.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3990,0|104tg0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Safer work expectations in backend mock,HSEARCH-4227,71032,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,18/mai/2021 03:38 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,18/juin/2021 03:01 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"See [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4202|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4202]

If someone writes this:

{code:java}backendMock.expectWorks( IndexedEntity.INDEX )
                .add( ""any-value"", b -> b.field( ""any-value"", ""any-value"" ) )
                .delete( ""any-value"" );{code}

The expectations will never get verified, because it's missing the last part that actually commits the expectations:

{code:java}backendMock.expectWorks( IndexedEntity.INDEX )
                .add( ""any-value"", b -> b.field( ""any-value"", ""any-value"" ) )
                .delete( ""any-value"" )
                .createdAndExecuted();{code}

That's admittedly quite dodgy.

We should improve that, but that's not as easy as it might seem; or at least it wasn't a few years ago. Maybe it's easier now that we have a separate expectation queue per document?

At the very least, we should add safeguards to detect when someone forgot to call `createdAndExecuted()` (or `created()`, or `executed()`), and make the test fail in that case.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-03T06:42:17.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2599,0|1009cw:000000xdur3mhxzzzx2d,,,,,,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Optimistic Lock throws org.hibernate.exception.SQLGrammarException: could not retrieve version,HHH-14616,71031,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,18/mai/2021 01:04 AM,16/juil./2021 08:55 AM,14/mars/2022 12:54 PM,04/juin/2021 11:19 AM,5.3.20,5.4.31,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,5.4.32,5.5.0.CR1,,,,,,,hibernate-core,,,,0,,,,,,When a query is executed setting lock mode to {{LockModeType.OPTIMISTIC}}  and {{hibernate.globally_quoted_identifiers}} is enabled an{{flush.org.hibernate.exception.SQLGrammarException: could not retrieve version }}exception is thrown during flush.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-06-04T11:17:02.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),gbadner(gbadner),,,,,,,,0|104tfs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-04 18:19:14.841,Backport?,,,04/juin/2021 11:19 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in 5.3 branch as well.,,,,,,,,,,,,,,,,Terminé,,
Stop testing against JDK15,HSEARCH-4226,71030,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mai/2021 23:46 PM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,18/mai/2021 03:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,6.0.4.Final,6.1.0.Alpha1,,,,,,build,,,,0,,,,,,"JDK16 is GA, JDK15 is no longer important.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-05-17T23:46:34.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104mtz:zev,,,,,,HSEARCH - 2021-11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
fix obvious issues found by Intellij IDE's Inspect Code,HHH-14615,71029,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,17/mai/2021 20:20 PM,17/mai/2021 20:31 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"It is usually a rewardable endeavour to locate some issues via Intellij's Inspect Code feature periodically, including:
* real bugs;
* good performance improvement;
* typos in class or method names;",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3987,0|104tfk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Better support for JUnit 5 on-failure handling ,HHH-14614,71028,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mai/2021 13:17 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,testsuite,,,,0,,,,,,"https://github.com/junit-team/junit5/issues/2393

5.8 M1 has been released.  Give it a try",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104tfc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"12/déc./2021 20:54 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;This has since pushed to 5.9 by the JUnit team, but there is at least a PR now…",,,,,,,,,,,,,,,,A faire,,
Memory leak (SessionImpl) when updating index without transaction,HSEARCH-4225,71027,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Bernhard Scholz,5c9a012de1d047074727f7d4,Bernhard Scholz,5c9a012de1d047074727f7d4,17/mai/2021 12:58 PM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,17/juin/2021 08:57 AM,5.5.5.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.10.Final,,,,,,,,,,,,,0,,,,,,"h3. Problem
We are observing thousands of already closed {{SessionImpl}} instances in memory. Some of them have references to large objects (via loadEvent or actionQueue), causing a significant memory consumption.

We are using the following pattern to update entities in the index:
{noformat}
try (Session session = entityManagerFactory.createEntityManager().unwrap(Session.class)) {
	FullTextSession fullTextSession = Search.getFullTextSession(session);
	fullTextSession.setFlushMode(FlushMode.MANUAL);
	fullTextSession.setCacheMode(CacheMode.IGNORE);
	ScrollableResults results = fullTextSession.createCriteria(MyEntity.class)
			.setFetchSize(BATCH_SIZE)
			.scroll(ScrollMode.FORWARD_ONLY);
	int index = 0;
	while (results.next()) {
		index++;
		fullTextSession.index(results.get(0));
		if (index % BATCH_SIZE == 0) {
			fullTextSession.flushToIndexes();
			fullTextSession.clear();
		}		
	}
	fullTextSession.flushToIndexes();
	fullTextSession.clear();
}
{noformat}
This seems to be in line with [https://docs.jboss.org/hibernate/search/5.5/reference/en-US/html_single/#search-batchindex-flushtoindexes] except that we are not using a transaction. But obviously there is now a hard reference from PostTransactionWorkQueueSynchronization#transactionIdentifier to the {{SessionImpl}} instance, which will not be GCed any more:
!SessionImpl-path2gc.png!

According to the following comments, this should never happen:
* https://github.com/hibernate/hibernate-search/blob/5.5.5.Final/orm/src/main/java/org/hibernate/search/event/impl/FullTextIndexEventListener.java#L76
* https://github.com/hibernate/hibernate-search/blob/5.5.5.Final/orm/src/main/java/org/hibernate/search/event/impl/FullTextIndexEventListener.java#L219
* https://github.com/hibernate/hibernate-search/blob/5.5.5.Final/engine/src/main/java/org/hibernate/search/backend/impl/PostTransactionWorkQueueSynchronization.java#L27

h3. Steps to reproduce
# Unpack Maven project [^myexample.zip], build and run {{MyExample.main()}} (in the IDE)
-> Output
{noformat}
Enter 's' to save a new entity.
Enter 'i' to re-index all entities.
Enter 'q' to quit.
{noformat}
# Enter 's'
# Enter 'i'
# Perform GC, analyse heap dump (e.g. with Eclipse MAT)
-> Now there should be 0 instances of {{SessionImpl}}, but instead there is 1 instance with the above Path2GC

h3. Workaround
We found that one of the following approaches will solve the problem for us:
* use a transaction while indexing
* or call {{fullTextSession.flush()}} after {{fullTextSession.flushToIndexes()}}

h3. Questions
But there are some questions left:
# Is the observed behavior expected or is it a bug that should be fixed?
# Is it forbidden to update the index outside a transaction?
# Is it required to use {{flush()}} after {{flushToIndexes()}}?","Hibernate ORM 5.0.11.Final
Apache Lucene 5.3.1
AdoptOpenJDK 1.8.0_272-b10
Windows 10 Pro, Version 20H2, Build 19042.985",,,,,,,,,,,,,,,,,,,,,,,,,,,,17/mai/2021 12:56 PM;scholzb-hb;SessionImpl-path2gc.png;https://hibernate.atlassian.net/secure/attachment/49863/SessionImpl-path2gc.png,17/mai/2021 12:56 PM;scholzb-hb;myexample.zip;https://hibernate.atlassian.net/secure/attachment/49864/myexample.zip,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-06-17T23:59:04.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,2.0,scholzb-hb(scholzb-hb),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2598,0|104mtz:z9v,,,,,,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,2021-05-18 07:08:07.169,,,,"18/mai/2021 00:08 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello,

Thanks for reporting this.

First, let me warn you that you are using a very old version of Hibernate Search that is no longer maintained.

That being said, it’s possible that this problem still occurs with Hibernate Search 5.10/5.11, and maybe even 6.0 (though that’s less likely), so we will have a look, and if possible fix the problem in those versions. We will not backport the fix to 5.5.

To answer your questions:

# I have to get a closer look to your reproducer to tell if it’s a bug or misuse.
# It is not forbidden to update the index outside a transaction, but it’s definitely not recommended. See [https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_overview|https://docs.jboss.org/hibernate/search/5.11/reference/en-US/html_single/#_overview|smart-link]  for details of each mode (outside a transaction/within a transaction).
# Using flush() after flushToIndexes() is not normally required, but I’d have to check your particular use case.",16/juin/2021 08:00 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Thanks again for the reproducer; I was able to write a test and to fix the problem. The patch will be applied to Hibernate Search 5.11.10.Final.,,,,,,,,,,,,,,,Terminé,,
Test Search 5.10 against JDK 17,HSEARCH-4224,71026,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mai/2021 07:31 AM,18/oct./2021 01:24 AM,14/mars/2022 12:54 PM,18/mai/2021 03:22 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=3, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":3,""lastUpdated"":""2021-05-17T07:26:31.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104mtz:zer,,,,,,HSEARCH - 2021-11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
High CPU due to PersistenceUtilHelper not threadsafe?,HHH-14613,71025,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Veit Guna,557058:dba74d02-f023-4225-8622-0b7816621b34,Veit Guna,557058:dba74d02-f023-4225-8622-0b7816621b34,17/mai/2021 06:52 AM,26/août/2021 00:33 AM,14/mars/2022 12:54 PM,,5.4.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We're running a Spring Boot REST service in a high load environment. Recently it happened, that after a pod startup, it claimed all CPU resources on that node and JVM usage went up to 100% constantly. Looking at the tomcat HTTP busy threads they were at 147 (out of 200) and constantly increasing. All other pods were fine with 1-5 threads.

After taking a thread dump on the problematic pod, it showed, that all HTTP threads were interrupted at the very same codeplace seen below. After googling a bit, I stumbled across this existing ticket:

[https://hibernate.atlassian.net/browse/HV-1779|https://hibernate.atlassian.net/browse/HV-1779]

which is going into the same direction. Taking a look at the comments, it seems to have something todo with concurrent access to the WeakHashMap. Looking at the code here:

[https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/jpa/internal/util/PersistenceUtilHelper.java#L414|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/jpa/internal/util/PersistenceUtilHelper.java#L414]

it seems that this ""static"" helper class is lacking thread safety - which can also be seen in the thread dumps and the ticket.

Looking at Spring’s {{SpringValidatorAdaptor}}, it calls a validation method on the JSR {{Validator}} interface - which states that implementations must be thread safe. So I guess it’s nothing to fix on Spring side, right?

Additional links regarding {{WeakHashMap}} pitfalls:
[https://github.com/oracle/graal/issues/1916|https://github.com/oracle/graal/issues/1916|smart-link] 
[https://support.oracle.com/knowledge/Middleware/2587122_1.html|https://support.oracle.com/knowledge/Middleware/2587122_1.html|smart-link] 

[https://access.redhat.com/solutions/55161|https://access.redhat.com/solutions/55161|smart-link] 


{code:java}""http-nio-8080-exec-1"" - Thread t@42
   java.lang.Thread.State: RUNNABLE
        at java.base@11.0.6/java.util.WeakHashMap.get(WeakHashMap.java:404)
        at org.hibernate.jpa.internal.util.PersistenceUtilHelper$MetadataCache.getClassMetadata(PersistenceUtilHelper.java:422)
        at org.hibernate.jpa.internal.util.PersistenceUtilHelper.isLoadedWithReference(PersistenceUtilHelper.java:214)
        at org.hibernate.jpa.HibernatePersistenceProvider$1.isLoadedWithReference(HibernatePersistenceProvider.java:186)
        at javax.persistence.Persistence$PersistenceUtilImpl.isLoaded(Persistence.java:155)
        at org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.isReachable(JPATraversableResolver.java:52)
        at org.hibernate.validator.internal.engine.resolver.CachingJPATraversableResolverForSingleValidation.lambda$isReachable$0(CachingJPATraversableResolverForSingleValidation.java:43)
        at org.hibernate.validator.internal.engine.resolver.CachingJPATraversableResolverForSingleValidation$$Lambda$653/0x00007f1b99237db0.apply(Unknown Source)
        at java.base@11.0.6/java.util.HashMap.computeIfAbsent(HashMap.java:1133)
        at org.hibernate.validator.internal.engine.resolver.CachingJPATraversableResolverForSingleValidation.isReachable(CachingJPATraversableResolverForSingleValidation.java:43)
        at org.hibernate.validator.internal.engine.ValidatorImpl.isReachable(ValidatorImpl.java:1323)
        at org.hibernate.validator.internal.engine.ValidatorImpl.isValidationRequired(ValidatorImpl.java:1308)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:546)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForSingleDefaultGroupElement(ValidatorImpl.java:515)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:485)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:447)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:397)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedAnnotatedObjectForCurrentGroup(ValidatorImpl.java:626)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:587)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)
        at org.hibernate.validator.internal.engine.ValidatorImpl.access$300(ValidatorImpl.java:85)
        at org.hibernate.validator.internal.engine.ValidatorImpl$CascadingValueReceiver.doValidate(ValidatorImpl.java:712)
        at org.hibernate.validator.internal.engine.ValidatorImpl$CascadingValueReceiver.indexedValue(ValidatorImpl.java:678)
        at org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor.extractValues(ListValueExtractor.java:26)
        at org.hibernate.validator.internal.engine.valueextraction.ListValueExtractor.extractValues(ListValueExtractor.java:16)
        at org.hibernate.validator.internal.engine.valueextraction.ValueExtractorHelper.extractValues(ValueExtractorHelper.java:42)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedContainerElementsForCurrentGroup(ValidatorImpl.java:648)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:595)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedAnnotatedObjectForCurrentGroup(ValidatorImpl.java:626)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:587)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)
        at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:173)
        at org.springframework.validation.beanvalidation.SpringValidatorAdapter.validate(SpringValidatorAdapter.java:117)
        at org.springframework.validation.DataBinder.validate(DataBinder.java:889)
        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.validateIfApplicable(AbstractMessageConverterMethodArgumentResolver.java:266)
        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:137)
        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)
        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:888)
        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)
        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
        at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:203)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
        at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
        at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
        at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:128)
        at org.springframework.boot.web.servlet.support.ErrorPageFilter.access$000(ErrorPageFilter.java:66)
        at org.springframework.boot.web.servlet.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:103)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:121)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at acme.LoggingContextCleanupFilter.doFilterInternal(OrderLoggingContextCleanupFilter.java:30)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at datadog.trace.instrumentation.springweb.HandlerMappingResourceNameFilter.doFilterInternal(HandlerMappingResourceNameFilter.java:47)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at acme.RequestIdFilter.doFilterInternal(RequestIdFilter.java:27)
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
        - locked <1ca87272> (a org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper)
        at datadog.trace.bootstrap.instrumentation.java.concurrent.Wrapper.run(Wrapper.java:25)
        at java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
        at java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.base@11.0.6/java.lang.Thread.run(Thread.java:834)

   Locked ownable synchronizers:
        - locked <78b25d8b> (a java.util.concurrent.ThreadPoolExecutor$Worker){code}","K8s, EC2, Tomcat 9.0.33, JDK 11, Spring Boot 2.2.3, Hibernate Validator 6.0.18",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),gsmet(gsmet),steve(steve),ug:5b98bc52-3254-400a-8375-d540f72094e6(ug:5b98bc52-3254-400a-8375-d540f72094e6),,,,,,0|104tew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-22 14:12:33.43,,,,"16/juin/2021 02:15 AM;557058:dba74d02-f023-4225-8622-0b7816621b34;Hey guys, did you find time to look into this? It happened again for us yesterday :(.","22/juin/2021 07:12 AM;557058:71e31052-f0d7-46e3-a9d7-8b9acd6998d8;So first, if you are not validating JPA entities or don’t need the traversable resolver, you can apply the solution I mentioned here: [https://hibernate.atlassian.net/browse/HV-1779|https://hibernate.atlassian.net/browse/HV-1779|smart-link]  



That being said… I think we should find a solution for this issue.

A couple of comments on that:

* WeakHashMap is definitely not a good idea… but given this thing is static, I don’t know if we could have a way to clean this thing when closing an EM/unloading a class.
* When I looked at that back in the time, I was unable to find a JPA-compatible way to know if a class is an entity from the HV side. And AFAIK, ORM is not checking this before accessing the WeakHashMap.
* If we have to stick to a WeakHashMap, from what I read, it looks like making the accesses synchronized could help. But, while it could solve this “storm” issue, I’m not sure if it wouldn’t slow down significantly the rest of the accesses.
* I was wondering if we should somehow build these metadatas and publish them upfront but I’m not sure how doable this is.

Given it’s the second time someone has a major issue with that, I think we should try to find a solution but I definitely need someone with good knowledge of ORM to help with that.

[~accountid:557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a] [~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] [~accountid:557058:99e61e65-956b-4a21-b29c-06057642e9ea] ","22/juin/2021 09:07 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;JPA ultimately expects to call these methods outside the scope of any EntityManagerFactory - so these methods need to be statically accessible.  Coupled with the need to handle class unloading/reloading I’m just not sure what the alternative is.  Synchronized access could help, though potentially causing blocking concerns as mentioned.  Open to suggestions.

For historical note, this is one of the ways that JPA implicitly requires bytecode enhancement for lazy handling.  To your point about checking if the class is an entity… how?  If we could rely on entity classes always being enhanced, then this could be as simple as checking for the added interfaces.  But Hibernate also (and historically, only) supports laziness via proxy.



{quote}WeakHashMap is definitely not a good idea{quote}

Then you have to suggest  an alternative 😉  Sure its not a good idea in general, but what other paradigm works here?



{quote}I was wondering if we should somehow build these metadatas and publish them upfront but I’m not sure how doable this is.{quote}

Sure we could build these “up front” in terms of when each EMF is built.  But we still have the issue of where to “publish” them.  Not to mention, just because a class is an entity in one EMF does not mean it is an entity in the others.",24/juin/2021 00:26 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;How about using {{ClassValue}}instead which is a thread safe way to attach metadata to a class object?,"10/août/2021 05:01 AM;557058:dba74d02-f023-4225-8622-0b7816621b34;Hey guys,, any further progress on this yet?",16/août/2021 02:21 AM;557058:dba74d02-f023-4225-8622-0b7816621b34;It just happened again for us over the weekend. This time 3 out of 3 pods were at 100% CPU.,"26/août/2021 00:33 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;If you can provide a stress test that reproduces this we can look into this. The stress test could look like the following:

# Start N threads that exercise the code path in question
# In the main thread continuously check for the 100% CPU condition for at most 1 minute by looking at e.g. the stacktraces of the threads
# If the condition is met, throw an assertion error and finally stop all threads

Having this reproducible would help a lot to understand the problem and ensuring it doesn’t happen again once fixed.",,,,,,,,,,A faire,,
Outbox event background executor should stop as soon as Hibernate Search stops,HSEARCH-4223,71024,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mai/2021 06:04 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,17/mai/2021 07:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"Currently, the background executor stops as soon as it detects the session factory was closed. That gives us the expected behavior, but only because of HHH-14541 (the session factory is closed before the executor is stopped).

When HHH-14541 gets fixed, the session factory will not be closed until Hibernate Search is done with background works, which means we will continue processing all outbox events until there aren't any remaining. That's definitely not the expected behavior: we should add a stop condition.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-17T07:31:48.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2578,0|104teo:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Re-enable forbiddenapis on JDK16/JDK17+,HSEARCH-4222,71023,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mai/2021 02:54 AM,08/févr./2022 02:36 AM,14/mars/2022 12:54 PM,31/janv./2022 06:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.1.Final,,,,,,,,,,,,,0,,,,,,Apparently the problem was solved directly in JDK17: https://github.com/policeman-tools/forbidden-apis/issues/177#issuecomment-824101617,,,,,,,,,,,,,,,,,,,HSEARCH-4210,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, build={count=1, dataType=build, failedBuildCount=1, successfulBuildCount=0, unknownBuildCount=0}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-01-31T06:15:17.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":1,""successfulBuildCount"":0,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2875,0|104mtz:zei,,,,,,HSEARCH - 2021-11,HSEARCH - 2022-03,,,,,,,,,,,,,,,,,,,,,,,,,,"17/mai/2021 03:29 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Actually we cannot do this yet; we need some changes in forbiddenapis first, in particular an ASM upgrade, and I think also this: https://github.com/policeman-tools/forbidden-apis/commit/ac754c4bbc5e3e2a988dd266845e8ff3622781b1#diff-9ecb63300fb8e77c65f60af738a55866f2462960f1d0f08276be24a4e74d795eL182) 

Let's wait for a release of forbiddenapis.",,,,,,,,,,,,,,,,Terminé,,
Upgrade to Byteman 4.0.15,HSEARCH-4221,71022,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mai/2021 02:51 AM,18/oct./2021 01:21 AM,14/mars/2022 12:54 PM,17/mai/2021 04:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.12.Final,5.11.10.Final,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-05-17T04:44:05.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2576,0|104mtz:ze,,,,,,HSEARCH - 2021-11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Have enhancement throw an easy to understand error when model fields are marked ""final""",HHH-14612,71021,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,17/mai/2021 02:36 AM,17/mai/2021 02:36 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,,,,1,,,,,,"Context:
 - https://github.com/quarkusio/quarkus/issues/17253

While it might feel silly to mark an entity model field as `final` in Java, when Kotlin is being used the difference is caused by using `val` instead of `var`, which might be more subtle and easy to miss.

In the provided reproducer, `val` was applied to a field annotated with `@Version` - which obviously needs to be modifiable and it breaks the enhancement process.

We might be able to throw a more helpful error message.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104teg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Make branch 5.3 compatible with Java 17,HHH-14611,71020,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/mai/2021 07:31 AM,16/mai/2021 07:32 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,build,testsuite,,,0,,,,,,"We should see if we can make Hibernate ORM 5.3.x compatible with Java 17 - like we did with the other maintained branches.

AFAIR this will require:

* upgrading the Gradle version, probably to 7.0 so to be able to use its toolchains for testing on 17 ( [HHH-14599] )
* Backport all Bytebuddy related patches as we need to upgrade the dependency (e.g. [HHH-14610] )
* Setup CI jobs to monitor for Java 17 compatibility of branch {{5.3}} as well
* Possibly other steps",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104te8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Byte Buddy 1.10.22,HHH-14610,71019,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,16/mai/2021 06:55 AM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,16/mai/2021 07:26 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,5.5.0.CR1,,,,,,,,bytecode-enhancement,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-05-16T06:55:57.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104te0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Fetch join association within fetched element collection fails,HHH-14609,71018,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,16/mai/2021 02:06 AM,04/août/2021 06:19 AM,14/mars/2022 12:54 PM,,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5-backlog,,,,,,,,,hibernate-core,,,,0,,,,,,"Follow up of HHH-14116. The problem is that fetch joining an association within an element collection leads to an exception, saying that the fetch owner is not selected, but that is not true. The condition in {{SelectClause}} is just wrong. It probably should be something like this



{noformat}if ( !fromElementsForLoad.contains( origin ) && !fromElementsForLoad.contains( fromElement.getFetchOrigin() ) && (!fromElement.getFetchOrigin().isCollectionJoin() || !fromElementsForLoad.contains( fromElement.getFetchOrigin().getFetchOrigin() ) ) ) {{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104tds:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Merge causes StackOverflow when JPA proxy compliance is enabled,HHH-14608,71017,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,16/mai/2021 00:39 AM,16/juil./2021 08:55 AM,14/mars/2022 12:54 PM,15/juil./2021 23:26 PM,5.3.20,5.4.31,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,5.4.33,5.5.4,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-07-15T23:03:36.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),gbadner(gbadner),,,,,,,,0|104tdk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-07-16 04:34:15.015,Backport?,,,15/juil./2021 21:34 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in main and 5.4 branches.,15/juil./2021 23:26 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in 5.3 branch as well.,,,,,,,,,,,,,,,Terminé,,
prefer FetchOptions over FetchStrategy,HHH-14607,71016,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,14/mai/2021 19:39 PM,14/mai/2021 19:40 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"see https://trello.com/c/cUP2jLdu/136-prefer-fetchoptions-over-fetchstrategy

description repeated below:

""
org.hibernate.sql.results.graph.FetchOptions being an interface.

FetchStrategy existed prior to v6 so we cannot simply re-define for this requirement.

In general it is always better to use an interface. Here, it has a performance impact. Rather than having to instantiate a FetchStrategy, things can instead implement the interface and simply pass themselves
""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-25T05:29:53.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,,0|104tdc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Sign published artifacts (?),HHH-14606,71015,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/mai/2021 17:09 PM,26/janv./2022 04:43 AM,14/mars/2022 12:54 PM,26/janv./2022 04:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,https://docs.gradle.org/current/userguide/signing_plugin.html,,,,,,,,,,,,,,,,HHH-14604,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),yrodiere(fenrhil),,,,,,,,0|104td4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-26 12:43:36.533,,,,26/janv./2022 04:43 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Closing as duplicate of HHH-14604,,,,,,,,,,,,,,,,Terminé,,
"Handling for BLOB, CLOB and NCLOB relative to JavaTypeDescriptor `#isString` and `#isBinary`",HHH-14605,71014,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/mai/2021 09:42 AM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,18/mai/2021 03:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,,,,,0,,,,,,"Depends on the intent of these methods.  But logically speaking, a BLOB is binary data; and both CLOB and NCLOB are character data.

Either they should be included in the corresponding methods, or javadoc-ed as to why they are not included.  Like e.g., is these are used for SQL casting support (it does not seem like they are) then it is perfectly reasonable that they are not included (generally it is illegal to cast from LOB to other kinds without specific handling).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-18T03:52:42.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),steve(steve),,,,,,,,0|104tcw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Sign published artifacts,HHH-14604,71013,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,14/mai/2021 09:15 AM,08/mars/2022 19:20 PM,14/mars/2022 12:54 PM,07/févr./2022 06:17 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR2,,,,,,,,,build,,,,0,,,,,,"[https://docs.gradle.org/current/userguide/signing_plugin.html|https://docs.gradle.org/current/userguide/signing_plugin.html|smart-link] 

Need to set up keys.  Otherwise, applying the signing is pretty straight-forward...

In `published-java-module`, add the following:

{noformat}apply plugin: 'signing'

signing {
  sign publishing.publications.publishedArtifacts
}

tasks.withType(Sign) {
  onlyIf { ! project.ormVersion.isSnapshot }
}{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2022-03-14T01:59:36.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),yrodiere(fenrhil),,,,,,,,0|104tco:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-26 12:43:00.676,,,,"26/janv./2022 04:43 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] FYI the PGP key is available on Jenkins CI; however, you need to import it into gpg before your build. And above all, you need to make sure to remove it after the build (even if the build fails), so that we don’t expose the key to, say, pull request builds.

See:

* setting up the environment variables in the Jenkinsfile (I’m sure you can get an equivalent configuration in a “legacy” job defined through UI): [https://github.com/hibernate/hibernate-search/blob/db3626ddfd88e0ff71374ea05c00f63de8dfd2bc/Jenkinsfile#L765-L766|https://github.com/hibernate/hibernate-search/blob/db3626ddfd88e0ff71374ea05c00f63de8dfd2bc/Jenkinsfile#L765-L766|smart-link]  and also [https://github.com/hibernate/hibernate-search/blob/db3626ddfd88e0ff71374ea05c00f63de8dfd2bc/Jenkinsfile#L770|https://github.com/hibernate/hibernate-search/blob/db3626ddfd88e0ff71374ea05c00f63de8dfd2bc/Jenkinsfile#L770|smart-link] 
* importing the key [https://github.com/hibernate/hibernate-noorm-release-scripts/blob/36af93a2df3338c8e3a0f6b760eb278f66ba6031/release.sh#L116-L143|https://github.com/hibernate/hibernate-noorm-release-scripts/blob/36af93a2df3338c8e3a0f6b760eb278f66ba6031/release.sh#L116-L143|smart-link] 
* taking advantage of the environment variables in the Maven/Gradle build:[https://github.com/hibernate/hibernate-search/blob/7f89eb7bf290fd96dda4f47df6826c1bb7c5eb73/parents/public/pom.xml#L276-L277|https://github.com/hibernate/hibernate-search/blob/7f89eb7bf290fd96dda4f47df6826c1bb7c5eb73/parents/public/pom.xml#L276-L277|smart-link] ",26/janv./2022 04:52 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;I don’t think I have yet successfully released 6.0 from the CI job,,,,,,,,,,,,,,,Terminé,,
"Remove deprecated DTDEntityResolver, ConfigHelper,  ClassLoaderService.fromConfigSettings and related AvailableSettings",HHH-14603,71012,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,14/mai/2021 05:12 AM,20/mai/2021 07:31 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-10T00:58:55.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,jschatte(jschatte),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3981,0|104tcg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add flag that will disable lazy loading for detached entity,HHH-14602,71008,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,P,557058:ed8a9f32-e1de-429d-b17a-fb86b807af6d,P,557058:ed8a9f32-e1de-429d-b17a-fb86b807af6d,14/mai/2021 01:40 AM,14/mai/2021 01:53 AM,14/mars/2022 12:54 PM,,6.0.0.Alpha7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Consider the following code:

{code:java}@Entity
public class User {
    @OneToMany(fetch = FetchType.LAZY)
    @JoinColumn(name = ""USER_ID"")
    private List<UserRole> roles;
    ...
}{code}

As it can be seen roles are read lazily. However, we can always read them eagerly if we want this way:

{code:java}EntityGraph<User> graph = entityManager.createEntityGraph(User.class);
graph.addSubgraph(""roles"");
typedQuery.setHint(""javax.persistence.fetchgraph"", graph);
List<User> entities = typedQuery.getResultList();//roles will be eagerly loaded{code}

So, developer has always a choice how to read nested entities. Now, I want to to read user without roles. And I expect that roles will be null (I am the developer and I know better what I want and what I need, me, not JPA provider). However, when I do user.getRoles() I don't get the expected null, I get exception - LazyInitializationException. At least I must get an empty collection, but not exception.

Up to now, there is nothing new, everybody know about this hibernate behavior. This behavior is well known and everybody who works with hibernate must find a workaround to solve this problem. 

There are many solutions, for example [here|https://blog.frankel.ch/guide-lazyinitializationexception/]  but they all have their drawbacks. So, how long can it continue? I suggest to change the situation in Hibernate 6.

I suggest to add flag that will disable this default hibernate behavior. If entity is detached no proxy can use any session. This way, we will give the best solution for this problem and there won't be any surprises for current hibernate users - Hibernate 6 will work as Hibernate 5 with its LazyInitializationException, however, Hibernate 6 gives an ability to disable lazy loading, if a developer wants.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,PashaTurok(pashaturok),,,,,,,,,0|104tbk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
fix typos of 'extracter' in v6,HHH-14601,71007,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,13/mai/2021 19:32 PM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,14/mai/2021 09:43 AM,6.0.0.Alpha7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,,,,,0,,,,,,We need to fix the typo of 'xxxExtracter'. Should be 'xxxExtractor' instead.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2020-09-23T08:04:20.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,,0|104tbc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
verify UUID in v6,HHH-14600,71006,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,13/mai/2021 19:23 PM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,14/mai/2021 10:45 AM,6.0.0.Alpha7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,hibernate-core,,,,0,,,,,,see https://trello.com/c/vhZfXAFl/125-verify-uuid-support,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-07T19:22:02.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3974,0|104tb4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Gradle 7 in support of Java 17,HHH-14599,71005,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,13/mai/2021 11:03 AM,29/juil./2021 10:56 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,Pretty self-explanatory :),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104taw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29/juil./2021 10:56 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Removed a few versions.  I started playing with this and it was not a trivial task,,,,,,,,,,,,,,,,A faire,,
Drop `hibernate-infinispan`,HHH-14598,71004,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,13/mai/2021 10:53 AM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,14/mai/2021 09:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,,,,,0,,,,,,"This module has been deprecated for years as the Infinispan team have take over this module.  See `org.infinispan:infinispan-hibernate-cache-v53`, which in theory should still work with 6.0",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-13T11:11:38.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104tao:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/mai/2021 10:58 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;If using “short naming” for the cache provider, and the appropriate Infinispan artifact is available on the CP this should make no difference.

The only “change” on user side is if they refer explicitly to this module as a dependency.",,,,,,,,,,,,,,,,Terminé,,
Regression bug: could not resolve property: null of:,HHH-14597,71003,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,J Goodfellow,557058:5e1e6a2a-4c28-4980-a61e-47bc14c03a87,J Goodfellow,557058:5e1e6a2a-4c28-4980-a61e-47bc14c03a87,13/mai/2021 07:50 AM,22/juin/2021 08:27 AM,14/mars/2022 12:54 PM,22/juin/2021 03:31 AM,5.4.30,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.3,,,,,,,,,hibernate-core,,,,0,,,,,,"I included a unit test which works in 5.4.29.Final but not 5.4.31.Final (or 5.4.30.Final)
The entity class references a collection which references a different entity with cascade ""all-delete-orphan"".  Can no longer save this class after upgrading from 5.4.29.Final to 5.4.31.Final (or 5.4.30.Final).  Receive error message:
org.hibernate.QueryException: could not resolve property: null of: org.hibernate.bugs.Student
        at org.hibernate.persister.entity.AbstractPropertyMapping.propertyException(AbstractPropertyMapping.java:77)
        at org.hibernate.persister.entity.AbstractPropertyMapping.toType(AbstractPropertyMapping.java:71)
        at org.hibernate.persister.entity.AbstractEntityPersister.getPropertyType(AbstractEntityPersister.java:5032)
        at org.hibernate.engine.internal.Cascade.cascadeLogicalOneToOneOrphanRemoval(Cascade.java:297)
        at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:253)
        at org.hibernate.engine.internal.Cascade.cascadeComponent(Cascade.java:394)
        at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:239)
        at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:532)
        at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:463)
        at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:426)
        at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:220)
        at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:153)
        at org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:459)
        at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:293)
        at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)
        at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:135)
        at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:194)
        at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:38)
        at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:179)
        at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:32)
        at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:75)
        at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:93)
        at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:636)
        at org.hibernate.internal.SessionImpl.save(SessionImpl.java:629)
        at org.hibernate.internal.SessionImpl.save(SessionImpl.java:624)
        at org.hibernate.bugs.ORMStandaloneTestCase.setCompositeElementTest(ORMStandaloneTestCase.java:64) ","5.4.31.Final, Java 8, Windows 10, MySQL",,,,,,,,,,,,,,,,,,,,,,,,,,,,13/mai/2021 07:48 AM;jgoodfellow;hibernate-orm-5.zip;https://hibernate.atlassian.net/secure/attachment/49862/hibernate-orm-5.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-22T03:31:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,christian.beikov(christian.beikov),holger.brands(holger.brands),jgoodfellow(jgoodfellow),,,,,,,0|104tag:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,2021-06-17 15:57:48.503,,,,"17/juin/2021 08:57 AM;557058:c47a1229-5233-43cf-8a5f-7bd635e30561;We also have run into this problem with 5.4.30 today.
I think this regression is caused by the fix for HHH-4815.
Some hints from the stacktrace:

cascadeCollectionElements will call cascadeProperty with ‘null’ for the ‘propertyName’ parameter.

In cascadeProperty, when the type is a component type, the propertyName (= null) is added to the componentPath.

Sometime later cascadeLogicalOneToOneOrphanRemoval is called with this componentPath and eventually
entry.getPersister().getPropertyType( componentPath.get( 0 ) )

fails, because null is passed to getPropertyType.",17/juin/2021 10:43 AM;557058:5e1e6a2a-4c28-4980-a61e-47bc14c03a87;Thank you @Holger Brands for your comment.  I hope this bug can be fixed fairly soon.  The unit test I provided is simple and clearly shows the exception.  If the hibernate version in the unit test pom.xml is changed to pre 5.4.30 then the test succeeds. ,,,,,,,,,,,,,,,Terminé,,
WhereAnnotatedOneToManySizeTest fails on HANA database,HHH-14596,71002,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,13/mai/2021 00:48 AM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,13/mai/2021 05:13 AM,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.CR1,,,,,,,,,testsuite,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-13T00:49:14.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104ta8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"HibernateException while working with version, cache and lazy loading",HHH-14595,71001,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Phillip U,609b9cb15998a60068e1e7cc,Phillip U,609b9cb15998a60068e1e7cc,12/mai/2021 08:17 AM,12/mai/2021 08:17 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-ehcache,hibernate-jcache,,0,ehcache,hibernate-core,,,,"Hey folks,
i am facing a problem with Hibernate lazy loading in combination with the 2nd level cache and optimistic locking. I have an entity that is cached in the 2nd level cache. This entity has a lazy loaded collection which should also be cached.

{code:java}
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Cacheable
public class Foo
{
  @Id
  @GeneratedValue
  private Long identifier;

  @Version
  private Long entityVersion;

  @ElementCollection
  @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
  private List<String> bar = new ArrayList<>();

  public List<String> getBar(){
    return bar;
  }
}
{code}

When I try to work (load or add Objects) with the collection I am getting a HibernateException:

{code:java}
Caused by: org.hibernate.HibernateException: Unable to resolve owner of loading collection [[com.pu.hibernate.Entity.Foo.bar#1]] for second level caching
	at org.hibernate.engine.loading.internal.CollectionLoadContext.addCollectionToCache(CollectionLoadContext.java:360) ~[hibernate-core-5.4.31.Final.jar:5.4.31.Final]
	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:299) ~[hibernate-core-5.4.31.Final.jar:5.4.31.Final]
	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:224) ~[hibernate-core-5.4.31.Final.jar:5.4.31.Final]
	at org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:198) ~[hibernate-core-5.4.31.Final.jar:5.4.31.Final]
	at org.hibernate.loader.plan.exec.process.internal.CollectionReferenceInitializerImpl.endLoading(CollectionReferenceInitializerImpl.java:154) ~[hibernate-core-5.4.31.Final.jar:5.4.31.Final]
{code}

If I try to debug this code the exception disappears (maybe because the debugger is loading the collection beforehand?). The same behaviour is shown if I catch the HibernateException and try to work with the collection again. The FetchMode “join” does help, but the collection won’t be loaded lazy then.

These are the properties in my application.properties:

{code:java}
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:db;DB_CLOSE_DELAY=-1
spring.datasource.username=sa
spring.datasource.password=sa

spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory
spring.jpa.properties.hibernate.cache.default_cache_concurrency_strategy=read-write
spring.jpa.properties.hibernate.cache.provider_class=org.ehcache.jsr107.EhcacheCachingProvider
spring.jpa.properties.hibernate.cache.missing_cache_strategy=create
{code}

During testing and building the example project I found out, that the problem is only occuring when I use the spring mechanism to load objects (via Repository). If I use the EntityManagerFactory to start the transaction, the lazy collection can be loaded and I can work with it.

I am using Hibernate 5.4.31.Final and ehcache 3.9.3. Please let me know if you need more information.
The problem can be  reproduced in the attached archive.","hibernate-core: 5.4.31.Final
hibernate-jcache: 5.4.31.Final
ehcache: 3.9.3
H2, mariadb, oracle, mysql
",,,,,,,,,,,,,,,,,,,,,,,,,,,,12/mai/2021 08:14 AM;ug:1e6aea92-0c00-49c2-aec1-bc90caba5f14;hibernate_lazy_cache_version.7z;https://hibernate.atlassian.net/secure/attachment/49861/hibernate_lazy_cache_version.7z,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:1e6aea92-0c00-49c2-aec1-bc90caba5f14(ug:1e6aea92-0c00-49c2-aec1-bc90caba5f14),,,,,,,,,0|104ta0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
HQL order by size projection alias,HHH-14594,71000,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,11/mai/2021 08:45 AM,11/mai/2021 08:45 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"If we try to execute a HQL query such as the following:

{code:sql}
select r, size(r.cities) as cityCount from Region r order by cityCount desc
{code}

I got this error on HQL parsing/compiling...

{panel}
java.lang.IllegalStateException: selectExpression.getScalarColumnIndex() must be >= 0; actual = -1

    at org.hibernate.hql.internal.ast.tree.ResultVariableRefNode.getRenderText(ResultVariableRefNode.java:47)
    at org.hibernate.hql.internal.ast.SqlGenerator.out(SqlGenerator.java:115)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.addrExpr(SqlGeneratorBase.java:4116)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.simpleExpr(SqlGeneratorBase.java:3069)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.expr(SqlGeneratorBase.java:1644)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.orderExprs(SqlGeneratorBase.java:983)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.selectStatement(SqlGeneratorBase.java:304)
    at org.hibernate.hql.internal.antlr.SqlGeneratorBase.statement(SqlGeneratorBase.java:150)
    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:255)
    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:212)
    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:144)
    at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:113)
    at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:73)
    at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:162)
    at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:622)
    at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:734)
{panel}

While the query should be supported by the framework.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,,0|104t9s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"JavaAssistProxy, wildfly modules and class loaders.",HHH-14593,70999,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Mike Douglass,5b510cf1628cd32ca1bedd75,Mike Douglass,5b510cf1628cd32ca1bedd75,10/mai/2021 21:03 PM,10/mai/2021 21:03 PM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I'm not using JPA. I've been moving all my components out of the ear(s) and into modules.

I'm running hibernate 5.2.5 so I added all the hibernate jars I needed into a module. All worked fine with most of the modules installed.

I moved a further bunch of my jars into modules and at that point I ran into exceptions on a call to Configuration.buildSessionFactory() -


{noformat}
14:35:59,995 ERROR [stderr] (org.bedework.bwengine:service=indexing) java.lang.RuntimeException: org.bedework.calfacade.exc.CalFacadeException: org.hibernate.MappingException: Could not get constructor for org.hibernate.persister.entity.SingleTableEntityPersister
14:35:59,995 ERROR [stderr] (org.bedework.bwengine:service=indexing)     at org.bedework.calendar.engine.impl//org.bedework.calsvc.CalSvc.getCal(CalSvc.java:1646)
14:35:59,995 ERROR [stderr] (org.bedework.bwengine:service=indexing)     at org.bedework.calendar.engine.impl//org.bedework.calsvc.CalSvc.open(CalSvc.java:560)
14:35:59,995 ERROR [stderr] (org.bedework.bwengine:service=indexing)     at org.bedework.calendar.engine.impl//org.bedework.calsvc.CalSvc.init(CalSvc.java:272)


{noformat}

Guessing this was an issue with class loaders I changed this in org/hibernate/proxy/pojo/javassist/JavassistProxyFactory.java


{code:java}
        public static javassist.util.proxy.ProxyFactory buildJavassistProxyFactory(
                        final Class persistentClass,
                        final Class[] interfaces) {
                javassist.util.proxy.ProxyFactory factory = new javassist.util.proxy.ProxyFactory() {
                        @Override
                        protected ClassLoader getClassLoader() {
                                return persistentClass.getClassLoader();
                        }
                };
                factory.setSuperclass( interfaces.length == 1 ? persistentClass : null );
                factory.setInterfaces( interfaces );
                factory.setFilter( FINALIZE_FILTER );
                return factory;
        }

{code}

to

{code:java}
        public static javassist.util.proxy.ProxyFactory buildJavassistProxyFactory(
                        final Class persistentClass,
                        final Class[] interfaces) {
                javassist.util.proxy.ProxyFactory factory = new javassist.util.proxy.ProxyFactory() {
                        @Override
                        protected ClassLoader getClassLoader() {
                                return Thread.currentThread().getContextClassLoader();
                        }
                };
                factory.setSuperclass( interfaces.length == 1 ? persistentClass : null );
                factory.setInterfaces( interfaces );
                factory.setFilter( FINALIZE_FILTER );
                return factory;
        }


{code}
That is - get the classloader from the current thread - not from the class.

One hibernate test did fail when I built hibernate - I commented it out and installed the jar with that one change. Now my application is working again.

This is a fairly old configuration - it's all done with xml mappings.

Is this an issue with hibernate? It seems to me that the class loader used should be the classloader for the running thread - which is presumably what I'd get if I loaded my classes as part of the ear.","Wildfly 22, Java 11",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0d899a3e-c6c4-42ae-bcf0-82a2221f8a55(ug:0d899a3e-c6c4-42ae-bcf0-82a2221f8a55),,,,,,,,,0|104t9k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Query/SQL listener,HHH-14592,70998,,Amélioration,Rouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,10/mai/2021 06:02 AM,11/mai/2021 09:07 AM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I require a listener for all queries to get the sql issued to database.

I've tried using`*StatementInspector* to intercept all sql's, but this doesn't work for batch statements containing statements with the same signature. Only the first statement in batch is recorded.
Using *SessionEventListener* doesn't provide any arguments, so I don't know what query is being notified.

The only listener that gets all sqls is *SqlStatementLogger* that cannot be customized or replaced with a custom implementation…

A method to listen for idividual queries and batched queries including their sql/statement should be added.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),christian.beikov(christian.beikov),,,,,,,,0|104t9c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-05-10 14:57:12.607,,,,"10/mai/2021 07:57 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;{quote}Only the first statement in batch is recorded.{quote}

This is intentional, as that is the only interaction with the JDBC driver. You could even intercept the connection but you will again, see the call to {{prepareStatement}} only once. On the database side, you might see the query printed out multiple times in a log, but that doesn’t mean this query is re-parsed every time. It just means that the statement handle is executed multiple times, but possibly with different values.

What is the purpose of capturing the SQL statements? If you explain your use case, I might be able to hint you a better way to do what you want. Anyway, please consider our forum ([https://discourse.hibernate.org/|https://discourse.hibernate.org/|smart-link] ) for questions, rather than creating issues on Jira directly. You can create an issue when you have an actual proposal or bug report, but this is just a wish or question actually, so I’ll close this ticket for now. I will reopen it if it turns into an actual feature request or bug report.","10/mai/2021 08:14 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;This is a feature request\! For example JOOQ handles this very well, I can listen for all sql including batches.

I need to get all sqls in a batch issued by hibernate. This is not possible now, so this is a valid feature request….

My request is to provide a customizable listener for queries. For example replace *SqlStatementLogger* with an interface and instead of using a single instance, call a List where users can add custom implementation listeners for the sql. I only stated my generic requirement, must I also provide the code changes required so the issue gets accepted???

{quote}What is the purpose of capturing the SQL statements?{quote}

Framework generic extensibility… there can be any case where a user will want to listen to an SQL statement and do custom handling, so the purpose of this feature request is to provide a generic method to handle any future cases.

Example: custom logging, not using the limited non-extendable *SqlStatementLogger.* If I also want to log the stacktrace with the sql, when the statement was called… this is not possible with current implementation…","10/mai/2021 08:30 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;The current query listener implementation is a mess:

{{SessionEventListener}} provides start/end methods, but no argument.. how do I know what query started and ended… In a multi-threaded environment, I can get interlaced start start end end… To get any valid correlation between a query start and end in a multi-threaded environment I must group the events per thread. This listener does not provide sql functionality, only generic methods.

{{StatementInspector}} provides method to listen to sql but doesn’t show all sql… batch is trimmed as explained in post. Besides the sql, there is no other listener feature, no start/end, error/success notification…

To get any sense of what hibernate does, I use both of the above methods, group events by thread and build a final custom event with all my required info (start, end, sql, stacktrace).","10/mai/2021 08:55 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Look, I’m not saying that your request is invalid, but the information you gave is not enough to understand what you want to achieve.

{quote}I only stated my generic requirement, must I also provide the code changes required so the issue gets accepted???

Framework generic extensibility… there can be any case where a user will want to listen to an SQL statement and do custom handling, so the purpose of this feature request is to provide a generic method to handle any future cases.

Example: custom logging, not using the limited non-extendable *SqlStatementLogger.* If I also want to log the stacktrace with the sql, when the statement was called… this is not possible with current implementation…{quote}

Please don’t do this. Generic requirements are generally useless, because when it comes to specifics, it often turns out that something is not really needed in that generic way. Every generic and customizable thing we add incurs some performance overhead, so please understand that I would first like to understand your actual use case before doing anything. I guess you develop your applications in a similar way, by first trying to understand the real problem/use case and only then solve an issue based on the full picture.

So do I understand this right, that the purpose/use case is enriching logging? If so, you can customize the formatter of your logger and include some MDC context in there. I don’t know what logging framework you are using, but here is an example for log4j: [https://www.baeldung.com/mdc-in-log4j-2-logback|https://www.baeldung.com/mdc-in-log4j-2-logback|smart-link] 

I personally setup something like that to understand which statements were executed in which business methods and it works well.

{quote}{{SessionEventListener}} provides start/end methods, but no argument{quote}

That’s true, but the intention of this listener is AFAIU mostly for statistical purposes and not for detailed tracking of SQL statements. You can solve multi-threading concerns by making use of a thread local.

{quote}{{StatementInspector}} provides method to listen to sql but doesn’t show all sql…{quote}

Could you elaborate what you mean by “doesn’t show all sql”? What is it that you are missing? 

Like I tried to explain, batching isn’t that simple. Logging the statement N times (or calling a listener) for every batch item is probably not very helpful, as the driver will reuse the handle on the database and only send values, so it’s not like executing a statement N times. If you enable the logging for {{org.hibernate.type.descriptor.sql}} you will see in the logs though, that prepared statement binds are logged multiple times within these {{start}} /{{end}} calls for batches. Is that not enough information for the purpose of logging?

{quote}To get any sense of what hibernate does, I use both of the above methods, group events by thread and build a final custom event with all my required info (start, end, sql, stacktrace).{quote}

I think the standard SQL logging provides you a good amount of information about what Hibernate does in the background. You can also log slow statements by enabling the logging for {{org.hibernate.SQL_SLOW}} and configuring a good value for the property {{hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS}}. If you want all statements logged, use 0. Also see this post about the topic [https://vladmihalcea.com/hibernate-slow-query-log/|https://vladmihalcea.com/hibernate-slow-query-log/|smart-link] ","10/mai/2021 09:55 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;{quote}So do I understand this right, that the purpose/use case is enriching logging?{quote}

Actually I use my generated events to catch long running queries and the stacktrace to debug where the call originated. I don’t want to log all queries but filter them.

Instead of limiting to logging, the generic approach could provide the method to filter as I require. The next user could require something else…

{quote}Could you elaborate what you mean by “doesn’t show all sql”? What is it that you are missing?{quote}

I would expect the sql string to contain all batches queries, or to be notified by each of them. Without this I cannot rebuild the whole sql.

{quote}You can also log slow statements by enabling the logging for {{org.hibernate.SQL_SLOW}} and configuring a good value for the property {{hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS}}{quote}

So this + logging enrichment to add the stacktrace, can be my workaround.","10/mai/2021 10:05 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;The workaround s very limiting.. I also filter the stacktrace to not clutter the logs… 

I also use a common pipeline for all db access (Hibernate + JOOQ), so this will separate my logic which is bad programming. I have a common handler that logs all slow queries, hibernate and JOOQ. All I need is an adapter from the platform event to my custom event.","10/mai/2021 10:56 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;Cannot edit my prev comment: [jira bug|https://community.atlassian.com/t5/Jira-questions/Unable-to-save-a-jira-ticket-because-of-formatting-issue/qaq-p/1062513]

The workaround is very limiting.. I also filter the stacktrace to not clutter the logs… 

I use a common pipeline for all db access (Hibernate + JOOQ).  I use an adapter from the platform event to my custom event. The pipeline processes my custom events and logs slow queries with stacktrace. 

Using the workaround means separating logic which is bad programming. ","11/mai/2021 03:42 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;Another use case: in a web request I want to catch if some lazy relationship is not fetched with the initial sql and causes multiple separate query roundtrips to database. Currently I group the queries by sql, select the top ones above a threshold, and log them for debugging purposes (ex: “99x <sql>”).

This doesn’t work for batch statements where I only get the first sql, so I cannot know if the batch contains only one query or 1000 of the same query….

Now you can tell me that this can also be done by filling the log with all sqls using *SqlStatementLogger* and using some log aggregation tool to group by sql, and some log markers to limit timeframe to a web request…. This can have several issues, such as large log disk usage and increase in coding cost… I already use a common pipeline for all db access events and I don’t want to split logic. There are all sort of workarounds, this doesn’t mean they are good ones…

At least I want to be able to be notified (somehow) of all sqls in a batch query… at most a rework of existing query listeners to provide a cleaner framework.

Did I provide enough context for this issue to be reopened? Or you still believe that a unmeasured unknown overhead outweighs the benefits of a generic framework providing the flexibility to solve future issues…

I’m not very familiar with hibernate code but the overhead I see for query notifying is building an event and dispatching it… the query objects are already built for execution so no computation overhead here, and all other event pieces are already existent (start/stop/etc), only they are split between classes.",11/mai/2021 09:07 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Thanks to the details that you provided I can now see the discomfort with the current API. I started discussion on Zulip ([https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Event.20listeners|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/Event.20listeners]) about this in case you want to get involved.,,,,,,,,A faire,,
Entity with Embedded Object is always marked as dirty,HHH-14591,70997,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jens Janssen,6099157b8cbda70068070a9b,Jens Janssen,6099157b8cbda70068070a9b,10/mai/2021 04:30 AM,18/mai/2021 00:30 AM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,,,,0,,,,,,"Hello,

i have an entity with an embedded object  (EmbeddedProperties in the code snippet). 
I use bytecode enhancement for dirty checking. 
If the embededded object is null in the entity and the setter ist called with null, the attribute of the entity ist marked as dirty.

Here the generated code. In the last line the attribute is alwas marked as dirty. Is there a reason to do that or is it a bug?
{code:java}
	
public void $$_hibernate_write_embeddedProperties(EmbeddedProperties var1) {
        if (this.embeddedProperties != null) {
            ((CompositeTracker)this.embeddedProperties).$$_hibernate_clearOwner(""embeddedProperties"");
        }

    if (!Objects.deepEquals(var1, this.embeddedProperties)) {
        this.$$_hibernate_trackChange(""embeddedProperties"");
    }

    this.embeddedProperties = var1;
    if (this.embeddedProperties != null) {
        ((CompositeTracker)this.embeddedProperties).$$_hibernate_setOwner(""embeddedProperties"", this);
    }

    this.$$_hibernate_trackChange(""embeddedProperties"");
}
{code}

https://github.com/hibernate/hibernate-orm/blob/e76241a3091078713dd4b57de085f5fadce5e0db/hibernate-core/src/main/java/org/hibernate/bytecode/enhance/internal/bytebuddy/CodeTemplates.java#L332
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:7b5b0656-0e64-4a0b-91e9-bc7350de29d8(ug:7b5b0656-0e64-4a0b-91e9-bc7350de29d8),,,,,,,,,0|104t94:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/mai/2021 00:30 AM;6099157b8cbda70068070a9b;After fixing that, callOwner marks entity as dirty, even if the value has not changed.

{code:java}	public void callOwner(String fieldName) {
		for ( int i = 0; i < owners.length ; i++ ) {
			if ( owners[i] != null ) {
				owners[i].$$_hibernate_trackChange( names[i] + fieldName );
			}
		}
	}{code}

And ElementCollections are not tracked.

So DirtyTracking with bytecode enhancement is not working for me. But i leave the issue open if this feature should be enhanced. Otherwise the issue could be closed.",,,,,,,,,,,,,,,,A faire,,
Join not rendered when requested for embedded in secondary table if a single column is selected using the Criteria API,HHH-14590,70996,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jens Schauder,5a6836a7d57c332a76e19fb6,Jens Schauder,5a6836a7d57c332a76e19fb6,10/mai/2021 04:12 AM,10/mai/2021 04:19 AM,14/mars/2022 12:54 PM,,5.4.24,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Given the following entities

{code}
@SecondaryTable(name = ""secondary"")
@Entity
public class RootEntity {
	@Id
	@GeneratedValue
	Long id;

	String rootValue;

	@Embedded
	PlainEmbeddable plainEmbeddable;

	@Embedded
	SecondTableEmbeddable secondaryEmbeddable;
}
{code}

{code}
@Embeddable
public class PlainEmbeddable {
	String plainName;
	String plainValue;
}
{code}
{code}
@Embeddable
public class SecondTableEmbeddable {
	@Column(table = ""secondary"")
	String secName;
	@Column(table = ""secondary"")
	String secValue;
}
{code}

This query fails because it renders a SQL statement with a missing join:

{code}
CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<Long> query = builder.createQuery(Long.class);
		Root<RootEntity> root = query.from(RootEntity.class);

		Join<Object, Object> join = root.join(""secondaryEmbeddable"");

		Path<Object> name = join.get(""secName"");

		query.select(root.get(""id"")).where(builder.equal(name, ""secondary""));

		em.createQuery(query).getSingleResult();
{code}

The rendered select is (Note the missing join and the wrong table used for {{secName}}):
{code}
    select
        rootentity0_.id as col_0_0_ 
    from
        RootEntity rootentity0_ 
    where
        rootentity0_1_.secName=?
{code}


The following variants work fine:

**Embeddable not stored in secondary table**
{code}
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<Long> query = builder.createQuery(Long.class);
		Root<RootEntity> root = query.from(RootEntity.class);

		Join<Object, Object> join = root.join(""plainEmbeddable"");

		Path<Object> name = join.get(""plainName"");

		query.select(root.get(""id"")).where(builder.equal(name, ""primary""));

		em.createQuery(query).getSingleResult();
{code}

**Selecting the full entity**
{code}
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<RootEntity> query = builder.createQuery(RootEntity.class);
		Root<RootEntity> root = query.from(RootEntity.class);

		Join<Object, Object> join = root.join(""secondaryEmbeddable"");

		Path<Object> name = join.get(""secName"");

		query.select(root).where(builder.equal(name, ""secondary""));

		em.createQuery(query).getSingleResult();
{code}

**Using a path instead of a join**
{code}
		CriteriaBuilder builder = em.getCriteriaBuilder();
		CriteriaQuery<Long> query = builder.createQuery(Long.class);
		Root<RootEntity> root = query.from(RootEntity.class);

		Path<Object> path = root.get(""secondaryEmbeddable"");

		Path<Object> name = path.get(""secName"");

		query.select(root.get(""id"")).where(builder.equal(name, ""secondary""));

		em.createQuery(query).getSingleResult();
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:106545c1-2e2c-43ec-903e-62de755a82c3(ug:106545c1-2e2c-43ec-903e-62de755a82c3),,,,,,,,,0|104t8w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10/mai/2021 04:19 AM;5a6836a7d57c332a76e19fb6;There is a reproducer at [https://github.com/schauder/issue-HHH-14590-missing-join-with-embeddable|https://github.com/schauder/issue-HHH-14590-missing-join-with-embeddable|smart-link] ,,,,,,,,,,,,,,,,A faire,,
Make sure documentation examples regarding basic-types work and update the section,HHH-14589,70995,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/mai/2021 14:04 PM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,13/mai/2021 09:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,,,,,0,,,,,,"First, make sure that all of the examples for mapping basic types in the user-guide work.

Next, update that section for the newer ways to influence basic-type mappings",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-08T13:42:43.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104t8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop hibernate-osgi,HHH-14588,70994,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/mai/2021 13:51 PM,13/mai/2021 09:42 AM,14/mars/2022 12:54 PM,13/mai/2021 09:42 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-osgi,,,,0,,,,,,"It has been nearly impossible to consistently test OSGi support because of ongoing issues with PaxExam which we use for testing.

If we can't consistently and accurately test it, then its time to just remove it.  ",,,,,,,,,,,,,,,,HHH-14518,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104t8g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"13/mai/2021 09:41 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Forgot I had already created [https://hibernate.atlassian.net/browse/HHH-14518|https://hibernate.atlassian.net/browse/HHH-14518|smart-link]to track this
",,,,,,,,,,,,,,,,Terminé,,
Loading persistent bag after adding an element with cascade and delete orphans causes spurious TransientObjectException,HHH-14587,70993,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Simone Gianni,557058:d93625bc-6c24-4eab-87ea-229c9ecac7f7,Simone Gianni,557058:d93625bc-6c24-4eab-87ea-229c9ecac7f7,07/mai/2021 14:04 PM,14/janv./2022 21:53 PM,14/mars/2022 12:54 PM,,5.4.23,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"I have a simple parent-child relationship, both classes extending a BaseEntity providing id and version fields.


{code:java}
@Entity
@Getter
@Setter
public class ParentClass extends BaseEntity {
  
    @OneToMany(mappedBy = ""parent"", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Child> children = new ArrayList<>();
    
}
 
@Entity
@Getter @Setter
public class Child extends BaseEntity {
    @ManyToOne
    private Parent parent;
}   

{code}

However, for business rule, a parent should retain only the 10 most recent children, so I add a method that goes like this:


{code:java}
public void addAnotherChild(Child c) {
    List<Child> lst = getChildren();
    lst.add(c);
    c.setParent(this);
    while (lst.size() > 10) c.remove(0);
}
{code}

This code throws TransientObjectException:

{noformat}
org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: whatever.Child
	at org.hibernate.engine.internal.ForeignKeys.getEntityIdentifierIfNotUnsaved(ForeignKeys.java:347)
	at org.hibernate.collection.internal.AbstractPersistentCollection.getOrphans(AbstractPersistentCollection.java:1277)
	at org.hibernate.collection.internal.PersistentBag.getOrphans(PersistentBag.java:264)
	at org.hibernate.engine.spi.CollectionEntry.getOrphans(CollectionEntry.java:387)
	at org.hibernate.engine.internal.Cascade.deleteOrphans(Cascade.java:578)
	at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:560)
	at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:456)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:419)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:218)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:151)
	at org.hibernate.event.internal.AbstractFlushingEventListener.cascadeOnFlush(AbstractFlushingEventListener.java:158)
	at org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:148)
	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:81)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:102)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1362)
{noformat}

If I however swap the two operations:

{code:java}
public void addAnotherChild(Child c) {
    List<Child> lst = getChildren();
    while (lst.size() > 10) c.remove(0);
    lst.add(c);
    c.setParent(this);
}
{code}

Then it works perfectly.

I've partially investigated it, and it looks like the problem is about when the persistent bag gets it's snapshot initialized.

Apparently the snapshot is set when the persistent bag size is called.

In the first case, when the error happens, more or less this happens:
1. The persistent bag is initialized with a null snapshot
2. The new child is added to the persistent bag
3. persistent bag .size() is called
4. persistent bag is now loaded, and a snapshot containing the new child is created
5. persist starts
6. child is persisted, but a copy is created and placed in the persistent bag
7. check for orphans is started
8. AbstractPersistentCollection::getOrphans oldElements contains the previous, not persisted, copy of child
9. ForeignKeys::getEntityIdentifierIfNotUnsaved throws exception cause the object is not persisted

Instead, in the second, working, case this happens:
1. The persistent bag is initialized with a null snapshot
2. persistent bag .size() is called
3. persistent bag is initialized with an empty snapshot
4. The new child is added to the persistent bag
5. All other steps are the same as before except ...
6. CollectionEntry::getOrphans now uses an empty snapshot (size 0)
7. No exception occurs
","Spring boot, Spring data JPA, OpenJDK 11.0.1, Postgresql 9, Lombok",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,carreraariel(carreraariel),ug:289e559e-58d5-4236-8023-4ae97bae48e0(ug:289e559e-58d5-4236-8023-4ae97bae48e0),,,,,,,,0|104t88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-15 05:53:05.459,,,,"14/janv./2022 21:53 PM;557058:d3ace9d0-539e-46e1-9c4b-b9ff6f8ba7e0;Same exception with a similar case and Hibernate 5.6.3.Final.

if I remove {{orphanRemoval=true}} it works.",,,,,,,,,,,,,,,,A faire,,
improve CONTRIBUTING.md,HHH-14586,70992,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Rejected,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,Nathan Xu,557058:f1c90216-c2ff-4df7-8e20-9d0e140d7f64,07/mai/2021 10:38 AM,10/mai/2021 04:46 AM,14/mars/2022 12:54 PM,10/mai/2021 04:46 AM,5.4.29,5.4.31,5.5.0.Alpha1,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"There are still some minor issues in CONTRIBUTING.md as following:

* grammatical error in the following sentence: (For bug reports, the tests reproduce the initial reported bug and *illustrates* that the solution actually fixes the bug.). 'and illustrates' should be 'and illustrate';
* outdated reference link: both the Intellij and Eclipse links point to outdated page;
* outdated content, e.g. in regard to stricter jira link as the commit prefix;
* other minor verbiage or style issues.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-10T04:46:18.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,nathan.qingyang.xu(nathan.qingyang.xu),,,,,,,,,0|104t80:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
size() HQL function discards '@Where' clause,HHH-14585,70991,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Marco Rizzi,557058:3b94710d-9db3-4d47-8e7e-ab9f62bd4d03,Marco Rizzi,557058:3b94710d-9db3-4d47-8e7e-ab9f62bd4d03,07/mai/2021 08:48 AM,24/mai/2021 04:57 AM,14/mars/2022 12:54 PM,11/mai/2021 09:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,,,,,,,,,,,,,0,,,,,,"When ordering by using the {{size()}} HQL function applied to an entity with the {{@Where}} annotation, the clause defined in the {{@Where}} annotation is ignored.
This was working when using the deprecated {{.size}} HQL function which is suggested to be replaced with {{size()}} HQL function that doesn't work in the same way.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-11T09:33:13.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:3e23fb89-9402-4702-a0e9-9a07a7621423(ug:3e23fb89-9402-4702-a0e9-9a07a7621423),fercoli(fercoli),mrizzi(mrizzi),,,,,,https://github.com/hibernate/hibernate-orm/pull/3977,0|104t7s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-05-08 16:43:54.68,,,,07/mai/2021 08:56 AM;557058:3b94710d-9db3-4d47-8e7e-ab9f62bd4d03;Test case in associated [https://github.com/hibernate/hibernate-orm/pull/3972|https://github.com/hibernate/hibernate-orm/pull/3972|smart-link] ,"08/mai/2021 09:43 AM;6096bf380b80a60069383e56;Hi, has this been worked?",11/mai/2021 00:02 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;I noticed that we have the same issue also when we use the size function in the projection. I’m adding more tests.,,,,,,,,,,,,,,Terminé,,
Remove horizontal scrolling from the reference documentation,HSEARCH-4220,70990,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/mai/2021 23:20 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,15/juil./2021 04:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,documentation,,,,0,,,,,,"Some tables are too wide, resulting in horizontal scrolling even on extra-wide monitors.

For example https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-orm-directfieldmapping-supported-types
In this case, I think it's because of the last row: the first cell contains ""org.hibernate.search.engine.spatial.GeoPoint"", which is too wide and for some reason doesn't get spread out over two lines. There's probably some formatting configuration to do. 

There may be other instances of this problem, let's check everything.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-15T04:50:52.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2612,0|1009cw:000000xdur3mhxzzzx19,,,,,,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-14,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Allow PhysicalNamingStrategy implementations to detect when a name is implicit or explicit,HHH-14584,70989,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Openease Inc.,557058:fa5b7c60-901e-408a-ae24-2a1b1d6da75c,Openease Inc.,557058:fa5b7c60-901e-408a-ae24-2a1b1d6da75c,06/mai/2021 19:47 PM,06/mai/2021 19:51 PM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,3,,,,,,"This issue was originally posted by Phillip Webb: [HIBERNATE-160|https://issues.redhat.com/browse/HIBERNATE-160]

It's possible for column names to be explicitly defined, for example:

{code:java}
@Column(name = ""firstName"")
private String firstName;
{code}

Or deduced implicitly from the name of the field:

{code:java}
@Column
private String firstName;
{code}

Both of these forms result in a call to *{{PhysicalNamingStrategy}}* with an *{{Identifier}}* but it's not possible to tell if the identifier is explicitly named or deduced (the relevant code is [here|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/Ejb3Column.java#L304] and [here|https://github.com/hibernate/hibernate-orm/blob/main/hibernate-core/src/main/java/org/hibernate/cfg/Ejb3Column.java#L311]).

It would be nice if the *{{Identifier}}* could include an additional field that tells us where it came from. This would allow generic naming strategies to be developed that back-off when a name attribute is defined by the user.

For more background on users that are asking for this see Spring Boot issue: [#2129|https://github.com/spring-projects/spring-boot/issues/2129]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:29880cf2-d346-412e-a9d3-43b7f5a80c42(ug:29880cf2-d346-412e-a9d3-43b7f5a80c42),,,,,,,,,0|104t7k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"org.hibernate.AnnotationException: Foreign key circularity dependency involving the following tables: some_table, some_table",HHH-14583,70988,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Filipe Roque,5a974c54228ed33491d07367,Filipe Roque,5a974c54228ed33491d07367,06/mai/2021 16:55 PM,06/mai/2021 16:58 PM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Upgrading my application from Hibernate 5.4.28.Final to 5.4.29.Final fails when running unit tests with:
{code}
org.hibernate.AnnotationException: Foreign key circularity dependency involving the following tables: some_table, some_table
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.buildRecursiveOrderedFkSecondPasses(InFlightMetadataCollectorImpl.java:1801)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processFkSecondPassesInOrder(InFlightMetadataCollectorImpl.java:1759)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1655)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:295)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1224)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1255)
	at org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:56)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:79)
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:54)
	at org.hibernate.brmeyer.demo.BasicJpaDemo.main(BasicJpaDemo.java:30)
{code}

I have simplified my code into this:

{code:java}
package org.hibernate.brmeyer.demo;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = ""some_table"")
public class LocalizedNameEntity {

	@Id
	Long id;

	@Column(name = ""type"", nullable = false)
	private String type;

}
{code}

{code:java}
package org.hibernate.brmeyer.demo;

import java.io.Serializable;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorType;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name = ""type"", discriminatorType = DiscriminatorType.STRING)
@DiscriminatorValue(""ABSTRACT"")
@Table(name = ""some_table"")
public abstract class QueryHelperLocalized implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@OneToOne
	@JoinColumn(name = ""id"", nullable = false, insertable = false, updatable = false)
	private LocalizedNameEntity localizedName;

}
{code}

{code:java}
package org.hibernate.brmeyer.demo;

import javax.persistence.Persistence;

public class BasicJpaDemo {

	public static void main(String[] args) {
		try {

			Persistence.createEntityManagerFactory( ""Demo"" );

		} catch (Exception e) {
			e.printStackTrace();
		}
		System.exit(0);
	}

}
{code}

{code:xml}
<?xml version=""1.0"" encoding=""UTF-8""?>
<persistence xmlns=""http://java.sun.com/xml/ns/persistence"" version=""1.0"">
    <persistence-unit name=""Demo"">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>

        <class>org.hibernate.brmeyer.demo.LocalizedNameEntity</class>
        <class>org.hibernate.brmeyer.demo.QueryHelperLocalized</class>

        <properties>
            <property name=""hibernate.dialect"" value=""org.hibernate.dialect.H2Dialect""/>
            <property name=""hibernate.connection.driver_class"" value=""org.h2.Driver""/>
            <property name=""hibernate.connection.url"" value=""jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE""/>
            <property name=""hibernate.connection.username"" value=""sa""/>

            <property name=""hibernate.connection.pool_size"" value=""5""/>

            <property name=""hibernate.show_sql"" value=""true""/>
            <property name=""hibernate.format_sql"" value=""true""/>

            <property name=""hibernate.hbm2ddl.auto"" value=""create-drop""/>
        </properties>
    </persistence-unit>
</persistence>

{code}

I have bisected the hibernate sources and I have discovered the commit and issue that broke my code:
 * https://hibernate.atlassian.net/browse/HHH-14467
 * https://github.com/hibernate/hibernate-orm/commit/27ceeedc047626fe45fc4e9582c1f1626460e24b
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,froque(froque),,,,,,,,,0|104t7c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.28,,,,,,,,,,,,,,,,,,,,,A faire,,
Add timers to Hibernate-micrometer (especially regarding query execution),HHH-14582,70987,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Philipp Nanz,557058:b6258d6d-6023-4ec0-bc70-c8e14f3638bd,Philipp Nanz,557058:b6258d6d-6023-4ec0-bc70-c8e14f3638bd,06/mai/2021 15:17 PM,09/mai/2021 02:16 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Hi there,

I have been playing around with the new hibernate-micrometer metrics in Grafana to investigate performance issues (presumbly latency related, but we are not completely sure yet).

Basically what I would like to learn about in the statistics is the average execution time per issued prepared statement (assuming that the average execution time will give me a feeling on where we are with the overall latency).

As far as I see, this is something I could derive from the metric {{hibernate_query_executions_*}}. However, this metric (like some others) is missing a raw seconds counter. To get a better idea of what I mean, here is an example of another metric that provides this valuable information:

!triple.png|width=200,height=183!

 

You can see that the metric consists of three values, whereas in Hibernate it's usually only two (the max_seconds and the total).

So essentially, this issue is about making these metrics a proper summary ([https://prometheus.io/docs/concepts/metric_types/#summary|https://prometheus.io/docs/concepts/metric_types/#summary|smart-link] ), which is represented in Micrometer as a timer.

Thanks in advance for taking a look into this.

Kind regards,
Philipp",,,,,,,,,,,,,,,,,,,,,,,,,,,,,06/mai/2021 15:13 PM;philippn;triple.png;https://hibernate.atlassian.net/secure/attachment/49860/triple.png,,,,,,,{},,,,,,,,,,true,1.0,philippn(philippn),,,,,,,,,0|104t74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Schema migration does not match foreign keys correctly for delimited identifiers,HHH-14581,70986,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Frédéric Hannes,557058:643cf59b-4415-43ea-9c7c-4947ebad73ef,Frédéric Hannes,557058:643cf59b-4415-43ea-9c7c-4947ebad73ef,06/mai/2021 00:49 AM,06/mai/2021 00:50 AM,14/mars/2022 12:54 PM,,5.4.32,5.5.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"This is a minor issue, but it should be documented. A patch was submitted recently for issue [HHH-13779|https://hibernate.atlassian.net/browse/HHH-14581], which changes how foreign keys are checked by the schema migrator to a case-insensitive compare. This resolves a lot of issues, but it doesn't cover the SQL standard for [delimited identifiers|https://crate.io/docs/sql-99/en/latest//chapters/02.html#delimited-identifier]. I have already noted this on the [pull request|https://github.com/hibernate/hibernate-orm/pull/3860].

Delimited identifiers force case-sensitive identifiers in the database, which means that you can have the two tables with the same name, but different casing.

*Example:*
A database has 2 tables:

* {{A}} ({{id}}, {{value}})
* {{""B""}} ({{id}}, {{a_table_id}})
* {{""b""}} ({{id}}, {{a_table_id}})
{{""B""}} has a foreign key on field {{a_table_id}} to table {{A}} and {{""b""}} does not have one in the database, but does have one defined in JPA.

The current implementation would search for the foreign key of {{""b""}} to verify it already exists and match the foreign key of {{""B""}}, with the result that Hibernate would not create the missing foreign key constraint in the database.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:045fbfb1-c455-4316-901c-0d6481bc65c1(ug:045fbfb1-c455-4316-901c-0d6481bc65c1),,,,,,,,,0|104t6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Hibernate ORM 5.4.31.Final,HSEARCH-4219,70985,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,06/mai/2021 00:34 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,06/mai/2021 04:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.10.Final,6.0.4.Final,6.1.0.Alpha1,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-05-06T04:35:32.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2571,0|1009cw:000000xdur3mhxzzzxezsq,,,,,,HSEARCH - 2021-10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"misleading error: should be mapped with insert=""false"" update=""false""",HHH-14580,70984,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Chris Bitmead,5e833fe38078210c2a4cf951,Chris Bitmead,5e833fe38078210c2a4cf951,05/mai/2021 22:27 PM,05/mai/2021 22:27 PM,14/mars/2022 12:54 PM,,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Under various conditions, hibernate can output an error something like this...

> Repeated column in mapping for entity: Blah  column: BLAH (should be mapped with insert=""false"" update=""false"")

As far as I can tell, the attributes needed to fix this are actually insertable and updateable, not insert and update. 

https://docs.jboss.org/hibernate/envers/3.6/reference/en-US/html/exceptions.html

I have another gripe,  which is that I don't think the values should be quoted. So instead of ""false"", it should be false. Admittedly, I'm coming at this as a grails user, but reading the above document, even in Java it isn't quoted. I'm not a hibernate expert, maybe there is some scenario, like XML configs where it is quoted, but my feeling is that if you're doing XML, you can figure out that values should be quoted, but in Java or Groovy, lots of people get confused and think these values should be strings when they're actually booleans.

I could gripe more that in groovy it's insertable: false, rather than insertable=false, but maybe that's too much to ask.

As far as I see, this message comes from hibernate-core, PersistentClass.java, checkColumnDuplication()

I suggest the error be changed to something like:

> (should be mapped with insertable=false updateable=false)

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:20a709ce-d7a3-434e-8914-6c8800ab605d(ug:20a709ce-d7a3-434e-8914-6c8800ab605d),,,,,,,,,0|104t6o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate tries to force version increment on non-versioned entity,HHH-14579,70983,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jukka Lehtimäki,5a2693c9301ed0381f227dcf,Jukka Lehtimäki,5a2693c9301ed0381f227dcf,04/mai/2021 07:23 AM,04/mai/2021 07:39 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"[^hibernate-entity-graph-lock-bug.zip]

 

Test case contains simple gradle spring boot project with one junit test to demonstrate the bug. Read [README.md|http://README.md], forgot to mention but add your database url and credentials to application.properties under test resources.
Test requires database. Tables and data can be found from data.sql under test resources.

Consider the following query, even though it has been implemented with spring jpa hibernate is the problem here.

{noformat}@Lock(LockModeType.OPTIMISTIC_FORCE_INCREMENT)
@Query(""SELECT plan FROM StationPlan plan WHERE plan.planId = :planId"")
@EntityGraph(attributePaths = {""station"", ""station.stationTracks""})
Optional<StationPlan> findByStationPlanId(@Param(""planId"") final long planId);{noformat}

Query says that every time station plan is fetched with id, increase version number optimistically at the end of transaction. Query also has @EntityGraph to join other entities in order to prevent n+1 problem. Hibernate will propagate OPTIMISTIC_FORCE_INCREMENT to station and station.stationTracks. First question is, should it propagate OPTIMISTIC_FORCE_INCREMENT for entities in EntityGraph's attributePaths?

Second question if it should propagate, should it propagate only to entities that are versionable? Station is versionable but station track is not. Hibernate will create EntityIncrementVersionProcess action for station track and at the end of transaction save will fail.

{noformat}org.hibernate.AssertionFailure: cannot force version increment on non-versioned entity
	at org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement(AbstractEntityPersister.java:1851) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.action.internal.EntityIncrementVersionProcess.doBeforeTransactionCompletion(EntityIncrementVersionProcess.java:46) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.engine.spi.ActionQueue$BeforeTransactionCompletionProcessQueue.beforeTransactionCompletion(ActionQueue.java:954) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.engine.spi.ActionQueue.beforeTransactionCompletion(ActionQueue.java:525) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2381) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:447) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-5.3.6.jar:5.3.6]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743) ~[spring-tx-5.3.6.jar:5.3.6]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711) ~[spring-tx-5.3.6.jar:5.3.6]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:654) ~[spring-tx-5.3.6.jar:5.3.6]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:407) ~[spring-tx-5.3.6.jar:5.3.6]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-5.3.6.jar:5.3.6]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.3.6.jar:5.3.6]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750) ~[spring-aop-5.3.6.jar:5.3.6]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692) ~[spring-aop-5.3.6.jar:5.3.6]
	at fi.solita.hibernateentitygraphlockbug.service.SimpleTransactionManager$$EnhancerBySpringCGLIB$$dc76b55.executeInNewTransaction(<generated>) ~[main/:na]{noformat}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,04/mai/2021 07:11 AM;ug:185ee2fa-eae2-4f44-bcd2-0cf5ed06ec4f;hibernate-entity-graph-lock-bug.zip;https://hibernate.atlassian.net/secure/attachment/49859/hibernate-entity-graph-lock-bug.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:185ee2fa-eae2-4f44-bcd2-0cf5ed06ec4f(ug:185ee2fa-eae2-4f44-bcd2-0cf5ed06ec4f),,,,,,,,,0|104t6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
ClassCastException on changing collection cache strategy,HHH-14578,70979,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,03/mai/2021 14:54 PM,03/mai/2021 14:54 PM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,cache,,,,,"After changing the collection cache strategy, reading old cache entries will cause ClassCastException that propagates and fails loading.
This needs to be handled better. 
At least ignore the cache entry, at best ignore and remove the invalid cache entry.

The below stacktrce is from changing `NONSTRICT_READ_WRITE` to `READ_WRITE`, but other value changes produce another `ClassCastException` with different stacktrace.

{code:java}
java.lang.ClassCastException: class org.hibernate.cache.spi.entry.CollectionCacheEntry cannot be cast to class org.hibernate.cache.spi.support.AbstractReadWriteAccess$Lockable (org.hibernate.cache.spi.entry.CollectionCacheEntry and org.hibernate.cache.spi.support.AbstractReadWriteAccess$Lockable are in unnamed module of loader 'app')
	at org.hibernate.cache.spi.support.AbstractReadWriteAccess.get(AbstractReadWriteAccess.java:69)
	at org.hibernate.cache.spi.support.CollectionReadWriteAccess.get(CollectionReadWriteAccess.java:75)
	at org.hibernate.engine.internal.CacheHelper.fromSharedCache(CacheHelper.java:32)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.initializeCollectionFromCache(DefaultInitializeCollectionEventListener.java:123)
	at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:60)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:93)
	at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2163)
	at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:589)
	at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:264)
	at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:585)
	at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:149)
	at org.hibernate.collection.internal.PersistentBag.iterator(PersistentBag.java:387)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1798)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1603)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),,,,,,,,,0|104t5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"When mass indexing, wait for ID producing threads to finish",HSEARCH-4218,70978,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,03/mai/2021 04:28 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,07/mai/2021 05:37 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Currently we are only waiting on indexing threads.

Obviously those would never finish before the identifier producing threads are done producing but they could finish between the end of the identifier production and the time where the ID producing threads were actually done with some finalizing tasks.
 
This can result in some failure notifications to be pushed to the failure handler *after* startAndWait() returned, which can be annoying in some cases (mostly tests).

Reasons for this change:
 
# This won't impact performance much: when indexing threads finish, ID producing threads are mostly done anyway (worst case they still need to report an exception, but that's all).
# We will now wait for all threads to finish reporting errors before we consider indexing successful.
# We will now propagate exceptions thrown by ID producing threads to the caller of {{massIndexer.startAndWait()}}, instead of considering indexing successful.
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-10T06:10:37.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzy9v,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add a CI job for running the JPA 3.0 TCK,HHH-14577,70974,69739,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,29/avr./2021 06:15 AM,30/avr./2021 05:14 AM,14/mars/2022 12:54 PM,30/avr./2021 02:42 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-23T03:07:20.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104t4o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,69739,"Compatibility with JPA 3.0 candidate release, Jakarta EE 9"
Support TiDB,HHH-14576,70973,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Cong Wang,6089686883b8c6006bf51616,Cong Wang,6089686883b8c6006bf51616,Cong Wang,6089686883b8c6006bf51616,28/avr./2021 07:08 AM,02/déc./2021 14:00 PM,14/mars/2022 12:54 PM,20/oct./2021 07:21 AM,5.5-backlog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta2,,,,,,,,,hibernate-core,,,,0,,,,,,"TiDB(https://github.com/pingcap/tidb) is an open-source NewSQL database that aims for MySQL-compatibility. A lot of TiDB users are using Hibernate ORM, it is better to provide a TiDB dialect for the extended features & features not supported yet, compared with MySQL.

PS: This is part of https://github.com/pingcap/tidb/issues/24194",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-15T13:53:48.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:39e5c9bd-7ebf-40fd-a162-dbdfe003adba(ug:39e5c9bd-7ebf-40fd-a162-dbdfe003adba),,,,,,,,0|104t4g:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,2021-06-22 06:36:40.87,,,,"21/juin/2021 23:36 PM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Hi, thanks for the contribution. Please note that we have an ongoing discussion about how to handle dialect contributions for dialects that we as the Hibernate Core team do not want to provide support for: [https://github.com/hibernate/hibernate-orm/discussions/3783|https://github.com/hibernate/hibernate-orm/discussions/3783] 

We didn't come to a conclusion yet, but it is very likely that a dialect like this will be moved to a dedicated sub-project. Are you an employee of the company behind TiDB? In order to run our test suite against TiDB we require that the company behind it provides us with a dedicated database server against which we can run tests. We can discuss the details of that via E-Mail. Without that, we can’t guarantee the quality of the Dialect or discover regressions. Apart from that, we need the commitment from one of the employees behind TiDB to work on test suite issues when running against TiDB. We haven’t yet decided if we want to accept contributions for new dialects that are not properly tested.","22/juin/2021 00:46 AM;6089686883b8c6006bf51616;Hi Christian,

Thanks for the comments.

{quote}We didn't come to a conclusion yet, but it is very likely that a dialect like this will be moved to a dedicated sub-project.{quote}

I see, we are looking forward to the conclusion.

{quote}Are you an employee of the company behind TiDB? In order to run our test suite against TiDB we require that the company behind it provides us with a dedicated database server against which we can run tests.{quote}

Yes, I am an employee of PingCAP, the company behind TiDB. We would like to provide a dialect for our customers since Hibernate is widely used by a lot of them. Please let me know how we can provide the server, we can work on it.

{quote}Apart from that, we need the commitment from one of the employees behind TiDB to work on test suite issues when running against TiDB.{quote}

Sure\! Do you need an explicit commitment or something like it? Anyway, we'll keep maintaining the dialect, for the reason I explained above.

My email is [wangcong@pingcap.com|mailto:wangcong@pingcap.com].

Thank you\!","22/juin/2021 00:47 AM;6089686883b8c6006bf51616;BTW for now we've run the tests to make sure all cases can be passed: [https://docs.google.com/document/d/1LiY39K8ZaGmoo6Fl0EUHg_WqXlwizuYyiYUNoorA1jw/edit#,|https://docs.google.com/document/d/1LiY39K8ZaGmoo6Fl0EUHg_WqXlwizuYyiYUNoorA1jw/edit#,|smart-link]. You're welcome to review the doc and leave comments/suggestions.

Also, we had an idea to maintain a separate repo like, say {{pingcap/tidb-dialect-hibernate}} for the standalone dialect package. But it is not easy to run hibernate-core tests with the dialect because of the skip annotations. Do you have some best practices we can follow, to maintain a separate dialect for Hibernate?","02/juil./2021 01:03 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Hi, as part of [https://hibernate.atlassian.net/browse/HHH-14693|https://hibernate.atlassian.net/browse/HHH-14693|smart-link] we introduced the hibernate-community-dialects artifact where dialects usually go into. You can “apply” for getting your dialect into hibernate-core though. See the following document for more details: [https://github.com/hibernate/hibernate-orm/blob/f31639fcbf69ff53d7a0d3abe1b19a8d93641a3c/dialects.adoc|https://github.com/hibernate/hibernate-orm/blob/f31639fcbf69ff53d7a0d3abe1b19a8d93641a3c/dialects.adoc|smart-link] 

If you want to support Hibernate < 6.0, which I assume you want, you should probably refer people to your repository with a dialect that works with older Hibernate versions.

Depending on whether you agree/can meet our requirements, you can provide a PR for either including it in hibernate-core or hibernate-community-dialects for Hibernate 6.0 by providing a PR against the wip/6.0 branch.

If you want to run the full Hibernate test suite, you might have to introduce {{DialectChecks}}or {{DialectFeatureChecks}}for the features you are lacking, and annotate the tests with the respective checks. This usually also requires the introduction of some {{supports..}}method in the {{Dialect}}class, but maybe you are lucky and there is an appropriate check or supports method already.","09/juil./2021 07:37 AM;6089686883b8c6006bf51616;Hi Christian,

{quote}If you want to support Hibernate < 6.0, which I assume you want,{quote}

Yes, since Hibernate < 6.0 is very popular for our customers, we treat this support as very important. 

{quote}If you want to run the full Hibernate test suite, you might have to introduce…{quote}

I am able to pass all built-in tests from Hibernate(core) with our {{TiDBDialect}} and TiDB, but for now, I’m not sure if all requirements are met from your perspective: if not, we can go on working on it.

Thank you very much\! I’ll try to contract your team on Zulip.","19/juil./2021 03:56 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I wrote on Zulip about this, but I’ll include it here for the record.

We decided to not change anything on 5.5 for now IIRC and only add new dialects for 6.0

IMO it would be fine to add it to 5.5 though if the Dialect for 6 qualifies for hibernate-core according to the requirements document: [https://github.com/hibernate/hibernate-orm/blob/wip/6.0/dialects.adoc|https://github.com/hibernate/hibernate-orm/blob/wip/6.0/dialects.adoc|smart-link] ",,,,,,,,,,,Terminé,,
Adapt BasicProxyFactoryImpl to be more native-image friendly,HHH-14575,70972,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,28/avr./2021 02:22 AM,29/avr./2021 04:42 AM,14/mars/2022 12:54 PM,28/avr./2021 02:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"This relates to Quarkus issue:
 - https://github.com/quarkusio/quarkus/issues/16860

We can easily avoid registering the proxy for reflection by holding a reference to the constructor rather than to the Class instance of the generated proxy. Proxies are generated during augmentation and since each BasicProxyFactoryImpl instance holds a reference to the matching constructor, GraalVM's native-image can figure it out.

This will need to be followed by integration tests in Quarkus.

BTW I suspect this also represents a more general efficiency optimisation.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-28T02:24:20.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104t48:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid NullPointerExceptions from LoadContexts.cleanup(ResultSet),HHH-14574,70970,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,,,Christoph Dreis,557058:28629985-c0e1-4d5c-9179-b7fab9c270f3,Christoph Dreis,557058:28629985-c0e1-4d5c-9179-b7fab9c270f3,23/avr./2021 07:41 AM,24/mai/2021 03:52 AM,14/mars/2022 12:54 PM,24/mai/2021 03:19 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.32,5.5.0.CR1,,,,,,,,hibernate-core,,,,0,,,,,,"Hi,

in a couple of loadtests that we do we noticed that a substantial amount of hidden NPEs is thrown from Hibernate when using *Stream* returns and *LoadContext.cleanup(ResultSet)* is called internally, but the actual collectionLoadContext was already removed. This seems to happen when the cleanup was already done by *CollectionLoadContext.endCollectionLoad*.

 !image-2021-04-23-16-41-01-769.png|thumbnail! 

The actual runtime isn't affected because *AbstractScrollableResults.close()* ignores the exception and doesn't propagate it. Raising exceptions comes with an overhead, though.

A PR with defensive handling of *null* inside *LoadContext.cleanup(ResultSet)* will follow.

Cheers,
Christoph",,,,,,,,,,,,,,,,,,,,,,,,,,,,,23/avr./2021 07:41 AM;ChristophDreis;image-2021-04-23-16-41-01-769.png;https://hibernate.atlassian.net/secure/attachment/49858/image-2021-04-23-16-41-01-769.png,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-24T03:08:05.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,ChristophDreis(christophdreis),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3944,0|104t3s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,23/mai/2021 05:53 AM;557058:28629985-c0e1-4d5c-9179-b7fab9c270f3;Is there any maintainer willing to review my PR?,,,,,,,,,,,,,,,,Terminé,,
Remove calls to EnhancementAsProxyLazinessInterceptor#isInitialized() method,HHH-14573,70969,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,23/avr./2021 00:54 AM,30/avr./2021 05:14 AM,14/mars/2022 12:54 PM,30/avr./2021 04:11 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-30T04:11:02.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),,,,,,,,,0|104t3k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
@NamedNativeQueries broken on @MappedSuperclass abstract classes,HHH-14572,70968,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Vlad Paln,5d5d487dc812c40d27bff4ec,Vlad Paln,5d5d487dc812c40d27bff4ec,22/avr./2021 19:25 PM,05/juil./2021 07:36 AM,14/mars/2022 12:54 PM,,5.4.30,5.4.31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"5.4.30.Final breaks @NamedNativeQueries on @MappedSuperclass abstract classes

Latest version of hibernate does not find NamedNativeQueries. All previous version including 5.4.29.Final work with no errors.

Steps to reproduce the error:
open attached project hibernate-orm-5-test
run ORMUnitTestCase.java test case
test will complete succesfully

edit project pom
change version.org.hibernate value to 5.4.30.Final
rerun test, test will fail","Windows 20H2
Java AdoptOpenJDK (build 11.0.10+9)
Maven 3.8.1
hibernate 5.4.29.Final, 5.4.30.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,22/avr./2021 19:23 PM;vladpaln;hibernate-orm-5-test.zip;https://hibernate.atlassian.net/secure/attachment/49857/hibernate-orm-5-test.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ivohradek(ivohradek),vladpaln(vladpaln),,,,,,,,0|104t3c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,2021-07-05 14:35:30.846,,,,"05/juil./2021 07:35 AM;557058:607bccec-73c4-45fb-84cc-841f077dcee9;I was looking on this and it seems that from fix of HHHH-14499 \[1], classes annotated with {{MappedSuperclass}} are skipped and analyzed “indirectly” through their children.

In your example, your {{MappedSuperclass}} is not inherited by any entity and hence skipped. Therefore Hibernate does not register any {{@NamedNativeQuery}}.

----

\[1] [https://hibernate.atlassian.net/browse/HHH-14499|https://hibernate.atlassian.net/browse/HHH-14499|smart-link] ",,,,,,,,,,,,,,,,A faire,,
"Hibernate.isPropertyInitialized( someEntity, ""id"" ) returns false",HHH-14571,70967,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/avr./2021 06:31 AM,29/avr./2021 04:42 AM,14/mars/2022 12:54 PM,22/avr./2021 08:26 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"After upgrading to ORM 5.5, {{Hibernate.isPropertyInitialized( someEntity, ""id"" )}} returns false in one of Hibernate Search's integration tests.

Looking at the code of {{Hibernate.isPropertyInitialized}} I see this:

{code:java}if ( interceptor instanceof EnhancementAsProxyLazinessInterceptor ) {
				return false;
			}
			if ( interceptor instanceof LazyAttributeLoadingInterceptor ) {
				return ( (LazyAttributeLoadingInterceptor) interceptor ).isAttributeLoaded( propertyName );
			}{code}

In ORM 5.4 I end up in the second {{if}} block. In 5.5 I end up in the first one.

I think the {{return false}} is wrong, and we should actually only return false if the property is *not* the ID. The code of {{EnhancementAsProxyLazinessInterceptor}} actually confirms my thoughts: there is a special case for the identifier attributes.

{code:java}@Override
	protected Object handleRead(Object target, String attributeName, Object value) {
		// it is illegal for this interceptor to still be attached to the entity after initialization
		if ( isInitialized() ) {
			throw new IllegalStateException( ""EnhancementAsProxyLazinessInterceptor interception on an initialized instance"" );
		}

		// the attribute being read is an entity-id attribute
		// 		- we already know the id, return that
		if ( identifierAttributeNames.contains( attributeName ) ) {
			return extractIdValue( target, attributeName );
		}

		// [Yoann: then some code that initializes the entity and replaces the interceptor]
	}{code}

For some reason I don't have this bug in 5.4, despite having the same code in {{Hibernate.isPropertyInitialized}}. I suppose the reason is something changed in how ORM decides which intereceptor to use, and my test simply does not use a {{EnhancementAsProxyLazinessInterceptor}} with ORM 5.4.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-22T08:25:58.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3941,0|104t34:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Hibernate traces values of statement parameters also for large primitives byte array,HHH-14570,70966,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,MEDOATINSA Augustin,6081413fe851ab006b6f9d3a,MEDOATINSA Augustin,6081413fe851ab006b6f9d3a,22/avr./2021 03:08 AM,22/avr./2021 03:08 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Instead of getting summurized resume for primitive byte array when logging query parameter value, hibernate log the whole byte array binary and i was getting something like that :

13:28:45,466 [wwsservices-catalina-exec-10] TRACE   org.hibernate.type.descriptor.sql.BasicBinder: binding parameter [2] as [binary] - [[37, 80, 68, 70, 45, 49, 46, 52, ...

But the problem with this is when logging large byte array something about 3mb, it takes about 5 minutes before entity go to persist.
After investigation i found that is due to the PrimitiveByteArrayTypeDescriptor which madly implements the extractLoggableRepresentation method like this:

@Override
public String extractLoggableRepresentation(byte[] value) {
    return (value == null) ? super.extractLoggableRepresentation( null ) : Arrays.toString( value );
}

So to fix this temporaly in my code i did something like that :

@SuppressWarnings(""serial"")
public class HibernateByteArrayType extends BinaryType {

	public PrimitiveByteArrayType() {
		setSqlTypeDescriptor(VarbinaryTypeDescriptor.INSTANCE);
		setJavaTypeDescriptor(Descriptor.INSTANCE);	
	}
        
	public static class Descriptor extends PrimitiveByteArrayTypeDescriptor {
	    public static final Descriptor INSTANCE = new Descriptor();

	    @Override
	    public String extractLoggableRepresentation(byte[] value) {
	        if (null == value) {
	            return super.extractLoggableRepresentation(value);
	        } else {
	            return ""byte["" + readableFileSize(value.length) + ""]"";
	        }
	    }
	}
	
	public static String readableFileSize(long size) {
	    if(size <= 0) return ""0"";
	    final String[] units = new String[] { ""B"", ""kB"", ""MB"", ""GB"", ""TB"" };
	    int digitGroups = (int) (Math.log10(size)/Math.log10(1024));
	    return new DecimalFormat(""#,##0.#"").format(size/Math.pow(1024, digitGroups)) + "" "" + units[digitGroups];
	}
}

I have just override extractLoggableRepresentation(byte[] value) {..} to not return all byte array but just byte size and after that i got something like that :

2019-01-07 13:28:45,466 [wwsservices-catalina-exec-10] TRACE   org.hibernate.type.descriptor.sql.BasicBinder: binding parameter [2] as [byte[3,2MB]].

So i would like to suggests you to take tis in to account in your next release

Thank you and sorry for my bad english",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3a319ec5-e032-4b14-b567-c565fd9fc233(ug:3a319ec5-e032-4b14-b567-c565fd9fc233),,,,,,,,,0|104t2w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Move code related to index schema representation to the engine from the Elasticsearch and Lucene backends,HSEARCH-4217,70965,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/avr./2021 01:00 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,14/juin/2021 07:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"These could probably be merged and moved to the engine:

* {{ElasticsearchSearchIndexSchemaElementContext}}/{{LuceneSearchIndexSchemaElementContext}}
* {{ElasticsearchSearchCompositeIndexSchemaElementQueryElementFactory}}/{{LuceneSearchCompositeIndexSchemaElementQueryElementFactory}}
* Their implementations (maybe?)
* {{ElasticsearchScopeSearchIndexesContext}}/{{LuceneScopeSearchIndexesContext}} (at least use an abstract base)
* {{org.hibernate.search.backend.lucene.search.predicate.impl.PredicateTypeKeys}} and their counterparts for sorts, projections, aggregations. We may need to leave the ones that are backend-specific in the backend code, though.

Once it's done:

* Field-related methods in {{ElasticsearchSearchPredicateBuilderFactoryImpl}}/{{LuceneSearchPredicateBuilderFactoryImpl}} could probably be inlined into the various Search DSLs: instead of requesting a builder from the builder factory, we would look for the field and request a query element from that field.
* We could investigate the use of generics to merge {{LuceneSearchValueFieldQueryElementFactory}} with {{LuceneSearchCompositeIndexSchemaElementQueryElementFactory}}. The names are too long and complicated, it's a code smell.
* We might consider solving [https://hibernate.atlassian.net/browse/HSEARCH-3430|https://hibernate.atlassian.net/browse/HSEARCH-3430|smart-link] right away.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-14T07:40:01.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2591,0|1009cw:000000xdur3mhxzzzx1r,,,,,,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
TimestampTypeDescriptor instead of DateTypeDescriptor used in value binding when a JPA attribute converter to convert LocalDate to java.sql.Date is implied,HHH-14569,70964,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Miguel Moquillon,602554a7692da10070fcdf50,Miguel Moquillon,602554a7692da10070fcdf50,21/avr./2021 06:28 AM,21/avr./2021 06:35 AM,14/mars/2022 12:54 PM,,5.3.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,bug,core,hibernate,,,"Because Hibernate doesn't take in charge neither {{LocalDate.MIN}} nor {{LocalDate.MAX}}, we have written a JPA attribute converter between {{LocalDate}} and {{java.sql.Date}} in order to take into account these peculiar values. This converter is declared as to be auto-applied.

Without the converter, any attribute of a JPA entity that is a {{LocalDate}} is correctly treated by Hibernate in selecting  {{DateTypeDescriptor}} to perform the binding of the value.

With the converter enabled, although the attribute is working on {{LocalDate}} and on {{java.sql.Date}}, once the conversion done, {{AttributeConverterSqlTypeDescriptorAdapter}} uses  {{TimestampTypeDescriptor}} as real binder instead of {{DateTypeDescriptor}}. This is a problem when a timezone is explicitly set (to UTC in our case) with the Hibernate property _hibernate.jdbc.time_zone_ because the following code is then invoked:

{code:java}else if (options.getJdbcTimeZone() != null) {
	st.setTimestamp( index, timestamp, Calendar.getInstance( options.getJdbcTimeZone() ) );
}{code}

and then the value is modified. For example, ""1984-01-01"" becomes ""1983-12-31""\! (The timezone of the platform is in “Europe/Paris”.)

When this value is read from the database, the following code is invoked:

{code:java}javaTypeDescriptor.wrap( rs.getTimestamp( name, Calendar.getInstance( options.getJdbcTimeZone() ) ), options ){code}

and the returned value is ""1983-12-31 01:00:00.0"" and then translated to a java.sql.Date of ""1983-12-31"" before passing it to our attribute converter.","Hibernate 5.3.20 in Wildfly 23.0.1
OpenJdk version ""11.0.10"" 2021-01-19
H2 1.4.197 in in Wildfly
Bug detected in an integration tests with Arquillian
OS Linux Ubuntu 20.04.2 LTS
TimeZone set in ""Europe/Paris""",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0d757e7b-edd8-4d97-b6c9-1e4fbf2e3860(ug:0d757e7b-edd8-4d97-b6c9-1e4fbf2e3860),,,,,,,,,0|104t2o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
entity-join ignores discriminator value,HHH-14568,70963,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sebastian Hinzelmann,5c36ebad7d0c1a2f011214cd,Sebastian Hinzelmann,5c36ebad7d0c1a2f011214cd,20/avr./2021 21:22 PM,20/avr./2021 21:22 PM,14/mars/2022 12:54 PM,,5.3.20,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,4,,,,,,"entity-join (join com.acme.User) ignores discriminator value for polymorphous entities whereas an implicit join path (join p.address.city) filters discriminator values

Given the following entity mapping:

@Entity
@Table(name = ""Animal"")
@Inheritance(strategy = SINGLE_TABLE)
@DiscriminatorColumn(discriminatorType = CHAR)
@DiscriminatorValue(""A"")
public class Animal {

    @Id
    @GeneratedValue
    private Long id;
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Zoo zoo;
	
@Entity
@DiscriminatorValue(""D"")
public class Dog extends Animal {
}

@Entity
@DiscriminatorValue(""C"")
public class Cat extends Animal {
}

@Entity
public class Zoo {
    @Id
    @GeneratedValue
    private Long id;

    @OneToMany(cascade = CascadeType.ALL, mappedBy = ""zoo"", targetEntity = Cat.class, fetch = FetchType.LAZY, orphanRemoval = true)
    private final List<Cat> cats = new ArrayList<>();

    @OneToMany(cascade = CascadeType.ALL, mappedBy = ""zoo"", targetEntity = Dog.class, fetch = FetchType.LAZY, orphanRemoval = true)
    private final List<Dog> dogs = new ArrayList<>();
	...
}

I would expect the following queries to return count 1. Query 2 incorrectly returns count 2.

Query 1:
select count(zoo)
from Zoo zoo
  inner join zoo.dogs as dog
 
Query 2:
select count(zoo)
from Zoo zoo
  inner join Dog dog with dog.zoo = zoo
  
We reproduced this behaviour with versions 5.3.20.Final and 5.4.30.Final. 

The attached project demonstrates this behaviour (de.playground.DiscriminatorValueJoinBehaviourTest [^joinIgnoresDiscriminatorValue.zip] ). 
  

",,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/avr./2021 21:22 PM;ug:3bfa4f2e-54a9-4ca4-a0a3-4befae5ba29c;joinIgnoresDiscriminatorValue.zip;https://hibernate.atlassian.net/secure/attachment/49856/joinIgnoresDiscriminatorValue.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:3bfa4f2e-54a9-4ca4-a0a3-4befae5ba29c(ug:3bfa4f2e-54a9-4ca4-a0a3-4befae5ba29c),,,,,,,,,0|104t2g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Fix NullPointerException in new MassIndexer implementation,HSEARCH-4216,70962,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Simple,Corrigé,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,20/avr./2021 13:03 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,21/avr./2021 06:45 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"If an unindexed entity is found in the indexed list, indexing ends with an exception. 

{code:java}Loading and extracting entity data for entity 'StructureGroupRole,DefinedGrant,StructureGrant,GroupMembership,Grant,DefinedGroupRole,GroupRole' during mass indexing
: java.lang.NullPointerException
	at java.base/java.util.concurrent.CompletableFuture.andTree(CompletableFuture.java:1516)
	at java.base/java.util.concurrent.CompletableFuture.andTree(CompletableFuture.java:1515)
	at java.base/java.util.concurrent.CompletableFuture.andTree(CompletableFuture.java:1513)
	at java.base/java.util.concurrent.CompletableFuture.allOf(CompletableFuture.java:2409)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.massindexing.impl.PojoMassIndexingTypeProcessor.indexList(PojoMassIndexingTypeProcessor.java:157)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.massindexing.impl.PojoMassIndexingTypeProcessor.lambda$loadAndIndexList$3(PojoMassIndexingTypeProcessor.java:133)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.intercepting.spi.PojoInterceptingHandler.invokeNextInvocations(PojoInterceptingHandler.java:65)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.intercepting.spi.PojoInterceptingHandler.lambda$invokeNextInvocations$2(PojoInterceptingHandler.java:62)
	at com.azzumi.portal.kernel//com.azzumi.portal.kernel.storage.search.impl.WrapClassLoadingInterceptor.lambda$intercept$0(WrapClassLoadingInterceptor.java:40)
	at com.azzumi.portal.kernel//com.azzumi.portal.kernel.utils.SecurityHelper.with(SecurityHelper.java:183){code}",,,,600,600,,0 %,600,600,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-21T06:45:22.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,wklaczynski(wklaczynski),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2554,0|104t28:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-21 07:05:04.602,,,,"21/avr./2021 00:05 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;To me the problem here is that the error message is unclear and we should throw a proper exception with a descriptive error message.

It is not normal that the (user-provided) loader returns a non-indexable entity: Hibernate Search gives the loader it a precise list of all types that are accepted, and the loader should filter the returned entities accordingly.

Can you create a reproducer?","21/avr./2021 00:20 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Come to think of it, the fact that this code even exists in {{PojoMassIndexingTypeProcessor.java}} is, in my opinion, a mistake:

{noformat}			if ( !typeGroup.includesInstance( sessionContext, entity ) ) {
				continue;
			}{noformat}

The core principle behind the identifier scroll and loader is that we only load entities that are included in a given type group. That’s why in the ORM implementation we have a {{Set<? extends Class<? extends E>> includedTypesFilter}} parameter in methods of {{org.hibernate.search.mapper.orm.loading.impl.TypeQueryFactory}}: if what Hibernate Search wants is not *all* the subtypes of a given parent type, then we need to filter entities by type. See {{org.hibernate.search.mapper.orm.loading.impl.AbstractHibernateOrmLoadingStrategy#createQueryLoader}} in particular.

If your custom loader cannot do that, then you will end up loading many more entities than necessary, and performance will suffer. So we need to get to the bottom of this, rather than adding some bandaid by having Hibernate Search filter after loading.

Why is it you cannot filter before loading? ","21/avr./2021 01:03 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;Can it just remove the entity filtering fragment?


{code:java}if ( !typeGroup.includesInstance( sessionContext, entity ) ) {
	continue;
}
{code}



When you don't filter unindexed entities, this will still be caught and an appropriate exception will be thrown. Then the developer will watch the correctness of the returned entities.","21/avr./2021 02:53 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;You mean you want to send a PR to remove this snippet of code? I’m definitely in favor, yes. It shouldn’t be there, since it’s the user’s responsibility to return (only) entities of the type Hibernate Search asked for.","21/avr./2021 03:26 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;The test ""MassIndexingComplexHierarchyIT #rootIndexed_someSubclassesIndexed_requestMassIndexingOnRoot"" checks for correctness. However, the test will run correctly after removing this fragment. The ""JavaBeanIndexingStrategies"" checks the validity of the indexed entities so the defective fragment can be removed.","21/avr./2021 03:39 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;After deleting the fragment, I have the message:

{noformat}Caused by: org.hibernate.search.util.common.SearchException: HSEARCH700040: Invalid type 'com.azzumi.portal.api.idm.model.basic.OrganizationMembership' in an indexer: this type is not indexed.
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.work.impl.PojoIndexerImpl.createTypeIndexer(PojoIndexerImpl.java:91)
	at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.work.impl.PojoIndexerImpl.getDelegate(PojoIndexerImpl.java:82)
	at org.hibernate.search.mapper//org.hibernate.search.mapper.pojo.work.impl.PojoIndexerImpl.add(PojoIndexerImpl.java:46){noformat}



Error readability better than ""NullPointerException"". So deleting this fragment solves the problem.",,,,,,,,,,,Terminé,,
SearchSession#isOpen() in the javabean mapper,HSEARCH-4215,70961,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,20/avr./2021 03:32 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,20/avr./2021 07:36 AM,6.0.3.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-javabean,,,,0,,,,,,"Session activity information is missing. This is very important if the previously opened session was opened by another code fragment in the same transaction. Elsewhere, the same session is accessed without knowing if a session shutdown was programmatically performed before. 

The fix would be to add a ""boolean active()"" field to the ""SearchSession"" api. 



{code:java}package org.hibernate.search.mapper.javabean.session;

public interface SearchSession extends AutoCloseable {

        /**Get the active session state .
        *@return A active session state.
        */
	boolean active();
}{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-20T07:35:40.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,wklaczynski(wklaczynski),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2552,0|104t20:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-20 11:12:04.468,,,,"20/avr./2021 03:46 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;It is useful if in several places of the code it is checked whether the session has already been used in the transaction and has not been closed:



{code:java}    String key = SearchTransactionUtil.getScopedName(areaClassLoader, ""SearchSession"", unit, owner, areaName, owner);
    if (key != null && TransactionHelper.isInTx()) {
        session = SearchTransactionUtil.get(key);
    }

    if (session == null || !session.active()) {
       SearchMapping mapping = createMapping(unit, type, owner);
       session = mapping.createSessionWithOptions().
...
    }
    return session;{code}","20/avr./2021 04:12 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;This is not a bug, it’s a feature request. I changed the issue type accordingly.

Maybe name the new method {{isOpen()}}, to be consistent with the wording of the {{close()}} method? That would also be more consistent with {{EntityManager#isOpen}}.

But sure, feel free to submit a PR.",,,,,,,,,,,,,,,Terminé,,
hibernate.search.backend.version_check.enabled should be evaluated on backend startup,HSEARCH-4214,70960,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,20/avr./2021 02:33 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,23/avr./2021 00:43 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,"... instead of being evaluated at backend creation time like it currently is.

This is important for Quarkus in particular, where we ""pre-boot"" Hibernate Search, possibly creating the backend during compatilation to a native image. If we evaluate the property when creating the backend, it won't be possible to override it when actually starting the application.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2021-04-23T08:00:50.000-0700"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,wklaczynski(wklaczynski),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2550,0|104mtz:zf,,,,,,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,2021-04-20 10:40:29.549,,,,20/avr./2021 03:40 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;.,,,,,,,,,,,,,,,,Terminé,,
Filters are ignored if enabled after query creation but before execution,HHH-14567,70958,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/avr./2021 07:24 AM,29/avr./2021 04:42 AM,14/mars/2022 12:54 PM,19/avr./2021 08:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"Caused by [https://hibernate.atlassian.net/browse/HHH-13077|https://hibernate.atlassian.net/browse/HHH-13077|smart-link] .
This breaks integration tests in Quarkus (namely, {{io.quarkus.it.panache.PanacheFunctionalityTest#testBug9036}}).

I will submit a PR with reproducer and fix ASAP.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-19T08:58:58.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-orm/pull/3930,0|104t1k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-26 13:31:48.877,,,,26/avr./2021 06:31 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Backported to 5.4.x,,,,,,,,,,,,,,,,Terminé,,
Remove dead code related to DOM4J entitymode,HHH-14565,70956,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/avr./2021 05:52 AM,16/avr./2021 06:45 AM,14/mars/2022 12:54 PM,16/avr./2021 06:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"There are quite a few references to DOM4J entity mode in the code, but as far as I can tell this mode has been removed around 2011 (HHH-6330).

Anyone trying to use it should encounter an exception in 5.4 and probably before:

* {{EntityMode.DOM4J}} has been removed in HHH-6330, so using {{@Tuplizer(entityMode = ""dom4j"")}} (annotation mapping) or {{<tuplizer class=""..."" entity-mode=""pojo""/>}} (hbm.xml) will just fail
* I don't think there is any other way to use that entity mode?

So let's remove any code mentioning dom4j entity-mode?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104t14:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/avr./2021 06:08 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Actually this code is not dead. Its (only) purpose is to warn people using deprecated ""node"" attributes in hbm.xml mapping that these attributes are indeed deprecated and have absolutely no effect.

Not something we can change in 5.5, and even in 6.0 we may need to keep the warnings somehow.

In any case, it's not worth our time at the moment.

Closing.",16/avr./2021 06:09 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;See [https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/EntityMode/near/234847404|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/EntityMode/near/234847404],,,,,,,,,,,,,,,Terminé,,
Make the DOM4J dependency optional in hibernate-core,HHH-14564,70955,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Won't Do,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/avr./2021 05:03 AM,16/avr./2021 05:09 AM,14/mars/2022 12:54 PM,16/avr./2021 05:09 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I.e.:

* Don't use DOM4J-based XML mapping at all **by default** (currently the default is DOM4J and JAXB is opt-in)
* Exclude the DOM4J dependency from tests by default
* Test opt-in DOM4J-based XML mapping through a separate CI job

Note we will have to keep the DOM4J dependency in envers for now. But we should be able to get rid of it in the core.",,,,,,,,,,,,,,,,,,,HHH-14529,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104t0w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"16/avr./2021 05:09 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Actually, thinking about it... It's much easier to do HHH-14529 directly in Hibernate ORM 5.5, and since it's a new minor we can afford that kind of risky implementation change.

Originally the plan was to introduce JAXB-based XML mapping in 5.4, where it would have been too risky to change the default. But in 5.5, I think it's a legitimate move.

So, closing this: I will work on HHH-14529 in Hibernate ORM 5.5 instead.",,,,,,,,,,,,,,,,Terminé,,
Remove DOM4J-based XML mapping completely,HHH-14563,70954,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/avr./2021 04:43 AM,14/oct./2021 03:11 AM,14/mars/2022 12:54 PM,19/avr./2021 06:39 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,hibernate-core,,,,0,,,,,,In favor of Jaxb-based XML mapping introduced in Hibernate ORM 5.5 (HHH-14529),,,,,,,,,,,,,,,,,,,HHH-14529,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-19T06:39:35.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104t0o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Jackson 2.12.x,HSEARCH-4213,70953,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,16/avr./2021 01:05 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,16/avr./2021 02:52 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,Necessary for [https://hibernate.atlassian.net/browse/HSEARCH-3650|https://hibernate.atlassian.net/browse/HSEARCH-3650|smart-link] in particular,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-16T02:56:09.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2547,0|104mtz:z9,,,,,,HSEARCH - 2021-08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
NativeQuery UserTypes are used when no scalar is given.,HHH-14562,70952,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ben,607925ee6576f400685ff052,Ben,607925ee6576f400685ff052,15/avr./2021 22:58 PM,15/avr./2021 22:58 PM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Some Days ago I posted a question regarding the usage of scalars in native queries and usertypes on Stackoverflow. One of the Hibernate Developer wrote there that it might be a bug so I post it here too.

see:
https://stackoverflow.com/questions/66884279/hibernate-5-4-29-native-query-needs-scalar/66908098#66908098",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:481dfce3-0693-47b1-94a8-38d43441f2b9(ug:481dfce3-0693-47b1-94a8-38d43441f2b9),,,,,,,,,0|104t0g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.2.18,,,,,,,,,,,,,,,,,,,,,A faire,,
SingularAttribute#getBindableJavaType returns the incorrect type for java.sql.Date,HHH-14561,70951,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,15/avr./2021 11:29 AM,15/avr./2021 11:29 AM,14/mars/2022 12:54 PM,,6.0.0.Alpha7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,metamodel,,,0,,,,,,"{{org.hibernate.jpa.test.metamodel.EmbeddedTypeTest}} reproduces this issue.

{{#testSingularAttributeAccessByName}} reproduces the issue for a {{java.sql.Date}} attribute.

{{#testVersionAttributeMetadata}} reproduces the issue for a primitive {{int}} attribute. 

Javadoc for SingularAttribute#getBindableJavaType says:

""Return the Java type of the represented object. If the bindable type of the object is PLURAL_ATTRIBUTE, the Java element type is returned. If the bindable type is SINGULAR_ATTRIBUTE or ENTITY_TYPE, the Java type of the represented entity or attribute is returned.""

In {{#testSingularAttributeAccessByName}}, since {{ShelfLife#soldDate}} is declared as {{java.sql.Date}}, {{soldDate_.getBindableJavaType()}} should return {{java.sql.Date.class}} (not {{java.util.Date.class}}, which is causing the test to fail).

There appears to be a problem with primitive attributes as well, reproduced by {{#testVersionAttributeMetadata}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104t08:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,,,,,,,,,,,,,,,,,,,,,A faire,,
Using @MappedSuperclass as anchor for @TypeDef has been broken by HHH-14499,HHH-14560,70949,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Johannes Rost,5d273300fd3b8b0c278ec4b8,Johannes Rost,5d273300fd3b8b0c278ec4b8,15/avr./2021 09:42 AM,15/avr./2021 09:49 AM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"Skipping MappedSuperclass in AnnotationMetadataSourceProcessorImpl#insertMappedSuperclasses breaks our current method of collecting UserTypes (@TypeDef) via entity scan.
Currently we annotate our UserTypes, which are used for more than one Entity with @TypDef(defaultForType = XXX.class, typeClass = XXXUserType.class) and also add an @MappedSuperclass, although there is no entity that inherits from this class. In this way the UserTypes are selfcontained and are collected by the entity scan. We want to avoid using TypeDef on package level or repeating the same TypeDef on multiple Entity classes.

We are aware that this is not the standard way to collect TypeDefs, but it is very convenient.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2249d64b-d77d-4061-9efb-7a2bd090a634(ug:2249d64b-d77d-4061-9efb-7a2bd090a634),,,,,,,,,0|104szs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,,,,,,,,,,,,,,,,,,,,,A faire,,
Attempted to assign id from null one-to-one property with hibernate 5.4.30.Final,HHH-14559,70948,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Avinash Tiwari,6077f7e3fd9e5d006b5416d8,Avinash Tiwari,6077f7e3fd9e5d006b5416d8,15/avr./2021 01:33 AM,13/juil./2021 15:54 PM,14/mars/2022 12:54 PM,13/juil./2021 15:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"getting same exception like below JIRA ticket. M using hibernate-core version 5.4.30.Final.
My code practice is same as in the bug JIRA 

[#https://hibernate.atlassian.net/browse/HHH-12436]",,,,,,,,,,,,,,,,HHH-12436,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:532b2b19-7936-49f3-b2b3-f11e636c9f4e(ug:532b2b19-7936-49f3-b2b3-f11e636c9f4e),gbadner(gbadner),,,,,,,,0|104szk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Official, documented compatibility with OpenSearch",HSEARCH-4212,70944,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/avr./2021 09:37 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,18/juin/2021 03:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"# There should be a dedicated section on the website and in the documentation to mention that we do test Hibernate Search against OpenSearch too and that we aim for full compatibility.
# Everywhere we mention the ""Elasticsearch"", we should instead mention ""Elasticsearch/OpenSearch"".
# We should decide how we will handle separate dialects for OpenSearch... in particular they will use separate version numbers, starting back to 1.0, so the ""hibernate.search.backend.version"" property will become ambiguous unless the user tells us he's using OpenSearch. Having a separate ""backend-opensearch"" module, and putting the common code in a ""backend-elasticsearch-base"" module, would be very inconvenient. Maybe we need a separate property to select the fork; we would call that a “variant”, “flavor”, “brand”, “vendor” or whatever is clearer.",,,,,,,,,,,,,,,,,,,HSEARCH-4195,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-18T03:40:50.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2602,0|1009cw:000000xdur3mhxzzzx2i,,,,,,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,19/mai/2021 08:06 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;OpenSearch Beta 1.0 is out: [https://www.opensearch.org/blog/update/2021/05/opensearch-beta-announcement/|https://www.opensearch.org/blog/update/2021/05/opensearch-beta-announcement/|smart-link] ,,,,,,,,,,,,,,,,Terminé,,
@ElementCollection inside @Embeddable causes issues with Boolean column,HHH-14558,70942,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,kaj gol,60757bc1c642ff0070da8ae3,kaj gol,60757bc1c642ff0070da8ae3,13/avr./2021 04:46 AM,13/avr./2021 04:46 AM,14/mars/2022 12:54 PM,,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The following kotlin code works fine:
@Entity
data class P(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    val id: Long? = null,

    @Column(nullable = false)
    val name: String,

    @Embedded
    val sub: Sub? = null
)

@Embeddable
data class Sub(
    @Column
    var sc1: Boolean = false
)

There is a single table created with both P and Sub columns:

Hibernate: create table p (id bigint generated by default as identity, name varchar(255) not null, sc1 boolean, primary key (id))


and the following test code:

val p = P(name = ""aa"")
pRepo.save(p)
return pRepo.findByName(""aa"")

returns (as expected):
{
  ""id"": 1,
  ""name"": ""aa"",
  ""sub"": null
}

The problem is adding an @EntityCollection to Sub:

@Embeddable
data class Sub(
    @Column
    var sc1: Boolean = false,
    @ElementCollection(fetch = FetchType.EAGER)
    var sc2: List<String> = emptyList()
)

The same exact p table is created, and also an additional p_sc2 table with a foreign key constraint (all as expected):

Hibernate: create table p (id bigint generated by default as identity, name varchar(255) not null, sc1 boolean, primary key (id))
Hibernate: create table p_sc2 (p_id bigint not null, sc2 varchar(255))
Hibernate: alter table p_sc2 add constraint FKodcprs91i6g27dxtaxyq17d35 foreign key (p_id) references p

Running the test code adds a row to p, but findByName throws an exception:

Caused by: org.hibernate.PropertyAccessException: Null value was assigned to a property [class com.citi.prism.testClasses.Sub.sc1] of primitive type setter of com.citi.prism.testClasses.Sub.sc1

sc1 is not a primitive type and there's been no change to it's declaration.

Making sc2 nullable fixes the (misleading) exception:

@Embeddable
data class Sub(
    @Column
    var sc1: Boolean? = false,
    @ElementCollection(fetch = FetchType.EAGER)
    var sc2: List<String> = emptyList()
)

The generated table is exactly the same:

Hibernate: create table p (id bigint generated by default as identity, name varchar(255) not null, sc1 boolean, primary key (id))

However now running the test code returns:
{
  ""id"": 1,
  ""name"": ""aa"",
  ""sub"": {
    ""sc1"": null,
    ""sc2"": []
  }
}

So the sub field is populated by a default Sub object instead of being null as in the beginning.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:2ac65429-9da3-4b11-a643-2550b995f9b4(ug:2ac65429-9da3-4b11-a643-2550b995f9b4),,,,,,,,,0|104syg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Use commits instead of rollbacks in the mass indexer,HSEARCH-4211,70941,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Critique,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/avr./2021 00:34 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,13/avr./2021 04:18 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,mapper-orm,,,,0,,,,,,So as to work around bugs in ORM (HHH-14557).,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-16T02:56:08.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2544,0|104mtz:z,,,,,,HSEARCH - 2021-08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Connection leaked on rollback with mode DELAYED_ACQUISITION_AND_RELEASE_BEFORE_TRANSACTION_COMPLETION,HHH-14557,70940,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,13/avr./2021 00:08 AM,29/avr./2021 04:42 AM,14/mars/2022 12:54 PM,14/avr./2021 05:17 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"Originally [reported by Jan Kunzmann|https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/Hibernate.20Search.20-.20Massindexer]: thanks to him!

Reproducer (in Quarkus): https://github.com/suchwerk/quarkus-hibernate-search-massindexer
You'll need to start an Elasticsearch container, then run the tests:

{code}
docker run -it --rm=true --name es-7.10-it -p 9200:9200 -e ""discovery.type=single-node"" docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0
./mvnw clean verify
{code}

May be the same thing as HHH-14266, though I'm not entirely sure: in our case, everything happens in a single thread.

On commit, {{org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorImpl#beforeCompletion}} will be called and will close the connection. But not on rollback. And it seems we don't have anything to close the connection on rollback?",,,,,,,,,,,,,,,,,,,,,,,,HSEARCH-4211,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-14T05:15:57.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,lbarreiro(lbarreiro),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-orm/pull/3917,0|104sy8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-13 23:23:52.1,,,,13/avr./2021 05:35 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Related: [https://issues.redhat.com/browse/AG-168|https://issues.redhat.com/browse/AG-168],"13/avr./2021 16:23 PM;557058:415146e1-2fd0-4d69-b4f2-63b39fd2e879;I had a look at this issue for AG-168 and I believe the best strategy would be to close the connection as soon as a rollback occurs, if possible. I agree it may not be easy to achieve.

A note that Narayana has a setting for invoking {{beforeCompletion()}} on rollbacks too, but that setting was not effective on the use case I had. Even if it were, I’m not convinced it would be something that should be relied upon.

It seems that the API was designed after {{prepare()}} on the XA API, leaving out the rollback scenario. That is kinda unfortunate but there is not much that can be done around that now.","13/avr./2021 23:29 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;{quote}I believe the best strategy would be to close the connection as soon as a rollback occurs, if possible. I agree it may not be easy to achieve{quote}

Indeed. We don’t really have a hook for that.

We may do that in the future, but for now I’ll make sure that we will _at least_ close the connection _after_ the rollback (afterTransactionCompletion). At least that way ORM will be aware that the connection was closed and won’t trigger exceptions (“Connection is closed”) by reusing the connection for the next transaction.

We will iterate if we find better solutions.",,,,,,,,,,,,,,Terminé,,
Skip forbiddenapis on JDK17+,HSEARCH-4210,70938,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/avr./2021 07:52 AM,17/mai/2021 03:10 AM,14/mars/2022 12:54 PM,12/avr./2021 08:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.9.Final,6.0.3.Final,6.1.0.Alpha1,,,,,,,build,,,,0,,,,,,"Because of: https://github.com/policeman-tools/forbidden-apis/issues/177

We already skip forbiddenapis for JDK16+ on the 6.0/main branches, but not on the 5.11 branch.",,,,,,,,,,,,,,,,,,,,,,,,HV-1838,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-04-12T08:13:09.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104mtz:yi,,,,,,HSEARCH - 2021-08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Select via Criteria API does not properly retrieve one to one reference,HHH-14556,70937,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jens Schauder,5a685ede4e6fa32306362e53,Jens Schauder,5a685ede4e6fa32306362e53,12/avr./2021 05:57 AM,12/avr./2021 23:26 PM,14/mars/2022 12:54 PM,,5.4.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Given the following entity classes:

{code}
@Entity
public class EntityOne {

	@Id
	@GeneratedValue
	Long id;
	String name;

	@OneToOne(cascade = CascadeType.ALL)
	@MapsId
	@JoinColumn(name = ""id"")
	EntityTwo two;
}
{code}

{code}
@Entity
public class EntityTwo {
	@Id
	@GeneratedValue
	Long id;
	String name;
}
{code}

and instances created and persisted with

{code}
			EntityTwo a2 = new EntityTwo();
			a2.name = ""alpha 2"";

			EntityOne alpha = new EntityOne();
			alpha.name = ""alpha"";
			alpha.two = a2;

			em.persist(alpha);
{code}

The following query created via the Criteria API fails to retrieve the referenced {{EntityTwo}}, i.e. the test fails at the line indicated by a comment:

{code}
CriteriaQuery<Object> query = em.getCriteriaBuilder().createQuery(Object.class);
			Root<EntityOne> root = query.from(EntityOne.class);
			query = query.multiselect(root.get(""id""), root.get(""name""), root.get(""two""));

			List<Object> resultList = em.createQuery(query).getResultList();

			Assert.assertEquals(1, resultList.size());
			resultList.forEach(o -> {
				Assert.assertTrue(o + "" must be an instance of Object[]"", o instanceof Object[]);
				Assert.assertNotNull(""the referenced entity is missing"", ((Object[]) o)[2]); // <-- this fails
			});
{code}

Interestingly the generated SQL statement looks correct:

{code}
select
        entityone0_.id as col_0_0_,
        entityone0_.name as col_1_0_,
        entityone0_.id as col_2_0_,
        entitytwo1_.id as id1_1_,
        entitytwo1_.name as name2_1_ 
    from
        EntityOne entityone0_ 
    inner join
        EntityTwo entitytwo1_ 
            on entityone0_.id=entitytwo1_.id
{code}

I'll make a reproducer available in a moment.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),jschauder(jschauder),,,,,,,,0|104sxs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-12 15:39:19.367,,,,"12/avr./2021 06:00 AM;5a685ede4e6fa32306362e53;Reproducer: [https://github.com/schauder/issue-HHH-14556|https://github.com/schauder/issue-HHH-14556|smart-link] 

Related Spring Data JPA issue: [https://github.com/spring-projects/spring-data-jpa/issues/2189|https://github.com/spring-projects/spring-data-jpa/issues/2189|smart-link] ","12/avr./2021 06:03 AM;5a685ede4e6fa32306362e53;The mapping with {{@MapsId  @JoinColumn(name = ""id"")}} seems to be essential to reproduce the issue.",12/avr./2021 08:39 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Can you check if the fix in [https://github.com/hibernate/hibernate-orm/pull/2480|https://github.com/hibernate/hibernate-orm/pull/2480|smart-link]  resolves your issue?,12/avr./2021 23:26 PM;5a685ede4e6fa32306362e53;Is that PR available as a Snapshot somewhere? The build fails on my machine,,,,,,,,,,,,,A faire,,
"Reasonable, future-proof serialization strategy for outbox events",HSEARCH-4209,70936,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/avr./2021 04:26 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,23/sept./2021 04:32 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"Sometimes we need to serialize structured data to stuff it into database columns. We already have this problem for indexing routes, and we will likely have it again for dirty paths when we address HSEARCH-4141.

Currently we’re using Java serialization, which is not a great choice: it has security vulnerabilities (though they probably don’t affect us since we can trust the serialized data) and even the OpenJDK team has stated in the past that they wish they could deprecate it.

Maybe we should depend on Avro? Gson? Something else? The additional dependency means we would have to move the outbox automatic indexing strategy to a separate module, but I think that’s a reasonable tradeoff?

Ideally the format should be rather compact, since we anticipate lots of events. It should also be able to withstand the addition of fields (such as an “index” field for routes, or “previous value”/”new value” fields for dirty paths).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-23T04:31:14.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2655,0|1009cw:000000xdur3mhxzzzxezsq2,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-14,HSEARCH - 2021-15,HSEARCH - 2021-17,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Implement the id predicate using a TermInSetQuery instead of a BooleanQuery,HSEARCH-4208,70935,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/avr./2021 02:46 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,04/mai/2021 12:45 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-lucene,,,,0,,,,,,"Similar to what we did in HSEARCH-2589 in {{LuceneTextTermsPredicate}}.

In order to test the improvement, add a new test method in {{MatchIdPredicateSpecificsIT}} with more than 1024 IDs to be matched: the old implementation would fail with an exception, but the new one will work just fine.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-04T12:44:47.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2568,0|1009cw:000000xdur3mhxzzzxezry,,,,,,HSEARCH - 2021-09,HSEARCH - 2021-10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Clarify in README that Hibernate Search is licensed under LGPL v2.1 *or later*,HSEARCH-4207,70934,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/avr./2021 02:18 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,12/avr./2021 03:25 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-16T02:56:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2543,0|104mtz:y,,,,,,HSEARCH - 2021-08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Maven 3.8.1,HSEARCH-4206,70933,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/avr./2021 02:11 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,21/mai/2021 09:46 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,build,,,,0,,,,,,"In particular:

* Upgrade the version used in Maven Wrapper
* Upgrade all ""core"" plugins (compile, surefire, build-helper, ...) to the latest version
* Check very rigorously that all tests are still getting executed in all modules.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-21T09:20:57.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2580,0|1009cw:000000xdur3mhxzzzxezrzi,,,,,,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"""org.hibernate.QueryException: could not resolve property"" exception when using Envers with a class having @ManyToMany + @OrderBy annotated relation",HHH-14555,70932,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Balázs E. Pataki,557058:744e93ca-584d-4dc9-bd01-91637e7c0281,Balázs E. Pataki,557058:744e93ca-584d-4dc9-bd01-91637e7c0281,11/avr./2021 12:37 PM,25/août/2021 02:14 AM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,3,,,,,,"I get the following exception when trying to read a revision of my object, which has @ManyToMany relationship with a @OrderBy annotation on it:

{quote}java.lang.IllegalArgumentException: org.hibernate.QueryException: could not resolve property: mtid of: com.beepsoft.enversbug.Language_AUD [select new list(ee__, e__) from publication_languages_AUD ee__, com.beepsoft.enversbug.Language_AUD e__ where ee__.originalId.Publication_mtid = :Publication_mtid and e__.originalId.REV.id = (select max(e2__.originalId.REV.id) from com.beepsoft.enversbug.Language_AUD e2__ where e2__.originalId.REV.id <= :revision and e__.originalId.mtid = e2__.originalId.mtid) and ee__.originalId.REV.id = (select max(ee2__.originalId.REV.id) from publication_languages_AUD ee2__ where ee2__.originalId.REV.id <= :revision and ee__.originalId.Publication_mtid = ee2__.originalId.Publication_mtid and ee__.originalId.languages_mtid = ee2__.originalId.languages_mtid) and ee__.REVTYPE != :delrevisiontype and e__.REVTYPE != :delrevisiontype and (ee__.originalId.languages_mtid = e__.originalId.mtid or (ee__.originalId.languages_mtid is null and e__.originalId.mtid is null)) order by e__.mtid]
{quote}

Here's a repo with a test case demonstrating the bug:

[https://github.com/beepsoft/envers-bug|https://github.com/beepsoft/envers-bug]

I use Spring Boot 2.4.4, but I think it is not Spring related.

If I use {{@OrderBy(""languageCode"")}} instead of the ID field {{@OrderBy(""mtid"")}} then it works all right. These very same annotations work all right in {{Hibernate 5.0.12.Final}} but now fail in Spring Boot 2.4.4 and {{Hibernate 5.4.29.Final}}

","Spring Boot 2.4.4, Java 8",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,Akhil(akhil),ug:26b12e7c-d7d0-4224-9f5f-cb9e4225c54d(ug:26b12e7c-d7d0-4224-9f5f-cb9e4225c54d),crancran(crancran),,,,,,,0|104sxc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.0.12,2021-05-12 11:50:08.251,,,,"24/avr./2021 02:02 AM;557058:744e93ca-584d-4dc9-bd01-91637e7c0281;Hi Chris, 

could you take a look at this? Were you able to reproduce this bug?",12/mai/2021 04:50 AM;557058:30a15a19-c366-478a-8c60-7f798341b13c;Did you get any solution for this problem?,05/juil./2021 00:40 AM;557058:744e93ca-584d-4dc9-bd01-91637e7c0281;I just tried with Hibernate 5.5.3.Final and the problem still persists.,"25/août/2021 01:20 AM;557058:744e93ca-584d-4dc9-bd01-91637e7c0281;Hi\! Sorry for pushing it again, but is there any progress or plans to fix this (major priority marked) issue?

Thanks\!","25/août/2021 02:14 AM;557058:744e93ca-584d-4dc9-bd01-91637e7c0281;After some research it seems that the commit causing the regression is this:

[https://github.com/hibernate/hibernate-orm/commit/eff27db90ac4b33ea9e8f874f93cce2fa2db7fa3|https://github.com/hibernate/hibernate-orm/commit/eff27db90ac4b33ea9e8f874f93cce2fa2db7fa3|smart-link] 

Specifically these lines generating the order by clause:

[https://github.com/hibernate/hibernate-orm/blob/6e6b6eb0ae72c438bb6d51a90f82a89d299f4ba4/hibernate-envers/src/main/java/org/hibernate/envers/internal/entities/mapper/relation/query/TwoEntityQueryGenerator.java#L111-L114|https://github.com/hibernate/hibernate-orm/blob/6e6b6eb0ae72c438bb6d51a90f82a89d299f4ba4/hibernate-envers/src/main/java/org/hibernate/envers/internal/entities/mapper/relation/query/TwoEntityQueryGenerator.java#L111-L114|smart-link] 

{noformat}	// ORDER BY
	if ( !StringHelper.isEmpty( orderBy ) ) {
		qb.addOrderFragment( REFERENCED_ENTITY_ALIAS, orderBy );
	}{noformat}

This generates {{e__.mtid}}, while it maybe should generate {{e__.originalId.mtid}} as {{mtid}} is an ID field, but I don’t really know about the internals or what the logic should be, so I cannot provide a proper PR to fix it.

I also figured out that the last working release is {{5.3.22.Final}} and it breaks in {{5.4.0.Final}}",,,,,,,,,,,,A faire,,
Utilize new Validator class for Null-Checks,HHH-14554,70931,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Boris Unckel,5d8d0ebc707a180dbe8b00e4,Boris Unckel,5d8d0ebc707a180dbe8b00e4,10/avr./2021 13:43 PM,10/avr./2021 13:47 PM,14/mars/2022 12:54 PM,,5.5-backlog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,,,,,"Currently there are different approaches to have null checks of parameters and throw a NullPointerException or IllegalArgumentException. Some of them do not offer the parameter name which is null or causing a null lookup. Some of them offer the parameter name but are not I18N. Some offer both, but don't reuse a common solution.
 There are several existing solution for these cases:
[org.wildfly.common.Assert|https://github.com/wildfly/wildfly-common/blob/master/src/main/java/org/wildfly/common/Assert.java]
[com.google.base.Preconditions|https://github.com/google/guava/blob/master/guava/src/com/google/common/base/Preconditions.java]
[org.apache.commons.lang3.Validate|https://github.com/apache/commons-lang/blob/master/src/main/java/org/apache/commons/lang3/Validate.java]
Aside from license issues(?) all would cause a new dependency and would not utilize the Hibernate I18N messaging including an id.

First step is to adopt the neccessary class org.hibernate.internal.util.Validator and org.hibernate.internal.log.ValidatorLogger. It's not a plain copy to avoid any copyright issues. 

The approach of the refactoring is to have the same method signature, keep NullPointerException and/or IllegalArgumentException in the same way as now. Only the check and throw is changed with the mentioned methods.

There 60 classes affected.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-08T12:17:53.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,bu.atlassian_com(bu.atlassian_com),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3914,0|104sx4:,,,,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
"Simple Long ID entity en.persist() fails with ""IllegalArgumentException: Can not set java.lang.Long field to entity""",HHH-14553,70930,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ka Wu,557058:8438c7ec-865b-44f3-8046-8cae7e33a456,Ka Wu,557058:8438c7ec-865b-44f3-8046-8cae7e33a456,10/avr./2021 12:31 PM,25/janv./2022 08:01 AM,14/mars/2022 12:54 PM,,5.2.18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,,,,0,bytecode,BytecodeProvider,enhancement,persist,,"The test is simple. User a bytecode-enhanced runner and try to persist() a simple entity having a Long ID as PK:

{code:java}
@TestForIssue( jiraKey = ""HHH-99999"")
@RunWith( BytecodeEnhancerRunner.class ) // <-- without this, persist works
public class SimpleLongIdEntityPersistTest extends BaseEntityManagerFunctionalTestCase {

    @Override
    public Class<?>[] getAnnotatedClasses() {
        return new Class<?>[]{Ship.class};
    }

    @Override
    protected void addConfigOptions(Map options) {
        options.put( AvailableSettings.USE_SECOND_LEVEL_CACHE, ""false"" );
        options.put( AvailableSettings.SHOW_SQL, ""true"" );
        options.put( AvailableSettings.FORMAT_SQL, ""true"" );
    }

    @Before
    public void prepare() {
        doInJPA( this::entityManagerFactory, em -> {
            Ship entity = new Ship(1L, ""Titanic"");
            em.persist( entity );
        });
    }

    /**
     * Use --debug to see the SQL being run + the sysouts.
     */
    @Test
    public void test() {
        doInJPA( this::entityManagerFactory, em -> {
            Ship entity = em.find( Ship.class, 1L );

            Assert.assertNotNull(""Ship not found!"", entity);
        } );
    }
}
{code}

Ship entity:

{code:java}
@Entity
@Table(name = ""\""Ships\"""")
public class Ship
{
    @Id
    @Column
    private Long id;

    @Basic(optional = false)
    @Column
    private String name;

    public Ship()
    {
    }

    public Ship(String name)
    {
        this(null, name);
    }

    public Ship(Long id, String name)
    {
        this.id = id;
        this.name = name;
    }

    public Long getId()
    {
        return id;
    }

    public void setId(Long id)
    {
        this.id = id;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }
}
{code}

This fails with:

{noformat}
javax.persistence.PersistenceException: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.Long org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship.id] by reflection for persistent property [org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship#id] : org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship@66a3767e
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:790)
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:768)
	at org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.LazyBasicLobFieldsPersistTest.lambda$prepare$0(LazyBasicLobFieldsPersistTest.java:45)
	at org.hibernate.testing.transaction.TransactionUtil.doInJPA(TransactionUtil.java:205)
	at org.hibernate.testing.transaction.TransactionUtil.doInJPA(TransactionUtil.java:246)
	at org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.LazyBasicLobFieldsPersistTest.prepare(LazyBasicLobFieldsPersistTest.java:43)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [private java.lang.Long org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship.id] by reflection for persistent property [org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship#id] : org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship@66a3767e
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:75)
	at org.hibernate.tuple.entity.AbstractEntityTuplizer.getIdentifier(AbstractEntityTuplizer.java:224)
	at org.hibernate.persister.entity.AbstractEntityPersister.getIdentifier(AbstractEntityPersister.java:4773)
	at org.hibernate.persister.entity.AbstractEntityPersister.isTransient(AbstractEntityPersister.java:4473)
	at org.hibernate.engine.internal.ForeignKeys.isTransient(ForeignKeys.java:226)
	at org.hibernate.event.internal.AbstractSaveEventListener.getEntityState(AbstractSaveEventListener.java:499)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:99)
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:783)
	... 18 more
Caused by: java.lang.IllegalArgumentException: Can not set java.lang.Long field org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship.id to org.hibernate.test.bytecode.enhancement.lazy.HHH_99999.Ship
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.lang.reflect.Field.get(Field.java:393)
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:71)
{noformat}

I'd expect this to be persisted without any problems. Note that this only occurrs when using the `@RunWith( BytecodeEnhancerRunner.class )`.

What's wrong?

NOTE:

I had a very similar test case in https://hibernate.atlassian.net/browse/HHH-14546 (PR: https://github.com/hibernate/hibernate-orm/pull/3896) for 5.4.x recently, where this *did not happen*. It seems like the fix is already somewhere in the 5.3 and/or 5.4 branches, but I couldn't find the issue.


",Hibernate ORM test suite,,,,,,,,,,,,,,,,,,,,,,,,,,,,25/janv./2022 08:01 AM;marcelstoer;Screen Shot 2022-01-25 at 16.47.13.png;https://hibernate.atlassian.net/secure/attachment/49968/Screen+Shot+2022-01-25+at+16.47.13.png,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-09-20T14:43:19.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,kwutzke(kwutzke),marcelstoer(marcelstoer),,,,,,,,0|104sww:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-25 16:01:33.809,Backport?,,,"25/janv./2022 08:01 AM;557058:f4e23d47-a00b-4bc3-aea9-8073ec78e831;In my case the culprit was Spring Boot devtools.

{{UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)}} compares classes of the field and the object it should be operated upon like so:

{code:java}if (!field.getDeclaringClass().isAssignableFrom(o.getClass())) {
    throwSetIllegalArgumentException(o);
}{code}

This returned false in my case as the two classes were loaded by two different classloaders - one them being the devtools [RestartClassLoader|https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/devtools/restart/classloader/RestartClassLoader.html].

!Screen Shot 2022-01-25 at 16.47.13.png|width=972,height=447!

Issues like this one go back many years as e.g. [https://github.com/spring-projects/spring-boot/issues/3316|https://github.com/spring-projects/spring-boot/issues/3316|smart-link] is testament of. (One) fix is to create a {{META-INF/spring-devtools.properties}} which contains 

{{restart.include.all=.*}}

or similar. Source: [https://stackoverflow.com/a/35419080/131929|https://stackoverflow.com/a/35419080/131929|smart-link] ",,,,,,,,,,,,,,,,A faire,,
Batch Fetch for field having subtypes…Error: could not re-associate uninitialized transient collection,HHH-14552,70929,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Mario Martin Santana,5e00e42685a8c90ecac85027,Mario Martin Santana,5e00e42685a8c90ecac85027,10/avr./2021 03:45 AM,11/avr./2021 07:38 AM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"I have this problem running within a single Spring transaction.

I load objects of type PointerClass (See the “model” below), which contains two fields of type AbstractSuperClass.
At that point, 2 proxies of type AbstractSuperClass are are created.

I try to unproxy one of those AbstractSuperClass proxies like this:

# Get a PointerClass field_1 by reflection
# Call Hibernate.unproxy with that field value
# Hibernate does a batch fetch for objects of type ConcreteClass_1 and ConcreteClass_2 (both extending AbstractSuperClass, which is also abstract).

The prefetching generates a query to preload a few objects of ConcreteClass*_1* and ConcreteClass*_2*.

The returned object of type ConcreteClass*_1* is perfectly fine. I can see that the ConcreteClass_2 object is also fine.

I have this in the context: An AbstractSuperClass object pointing to one of those ConcreteClass*_2* objects.

But I merge that same AbstractSuperClass object with that relation nullified.

I can see that during the merge ConcreteClass*_2*.field_1 changes from initialized = true to false.

At a later stage I unproxy that ConcreteClass*_2* objects, and set a reference to it without modifying it.
Actually, unproxying this object does nothing but returning the already loaded object. However, from my Eclipse IDE I can’t see the 2 collection fields from the super classes (field_1 and field_2 below). These fields should be empty sets (according to the database):

* proxy of type PointerClass$HibernateProxy$?????? -> 
** $$_hibernate_interceptor of type ByteBuddyInterceptor
*** target of type ConcreteClass*_2*
**** field_1 of type Set
***** com.sun.jdi.InvocationException: Exception occurred in target VM occurred invoking method.
** field_1 = empty HashSet

At flush time hibernate thinks that the ConcreteClass_2 object above is dirty (which is not true) and tries to load its fields. There is an exception trying to load the set declared in an upper class: field_1

* org.hibernate.HibernateException: could not re-associate uninitialized transient collection

Putting a breakpoint in ProxyVisitor.reattachCollection before throwing the Exception:

* throw new HibernateException( ""could not re-associate uninitialized transient collection"" );

I can see that the reason is:

* PersistentSet.key == null && PersistentSet.role == null
I can also see that PersistetSet.session says closed == false

h2. I could avoid the exception detaching the referenced object after the merge:

# entityManager.detach(class*_2_*Instance);
# class*_2_*Instance = getReference(class*_2_*Instance);

Now I can make a reference from a PointerClass object to that class*_2_*Instance .

h2. Model:

@MappedSuperClass
PersistentObject
\{
@OneToMany
Set<> field_1

@Inheritance(strategy = InheritanceType.JOINED)
public abstract class DomainObject extends PersistentObject
\{
@OneToMany
Set<> field_2

@MappedSuperclass
public abstract class ValueObject extends DomainObject
\{

public abstract class AbstractSuperClass extends ValueObject
\{

public class ConcreteClass_1 extends AbstractSuperClass
\{

public class PointerClass extends ??? which in turn extends DomainObject Q: Why not make it extend DomainObject directly?
\{
@OneToOne(fetch = FetchType.LAZY)
private AbstractSuperClassfield_1;

@OneToOne(fetch = FetchType.LAZY)
private AbstractSuperClassfield_2;

<property name=""hibernate.default_batch_fetch_size"" value=""20""/>
<property name=""hibernate.jdbc.fetch_size"" value=""20""/>
<property name=""hibernate.jdbc.batch_size"" value=""20""/>
<property name=""hibernate.jdbc.batch_versioned_data"" value=""true""/>",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:279db840-5162-4d7f-a8c4-f44ca4cd1cda(ug:279db840-5162-4d7f-a8c4-f44ca4cd1cda),,,,,,,,,0|104swo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Optimistic locking fails if entity has field with @Lob annotated (using postgres),HHH-14551,70928,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Nikolaus Graf,60704aa1d652f700695d84e3,Nikolaus Graf,60704aa1d652f700695d84e3,09/avr./2021 05:51 AM,09/avr./2021 05:51 AM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"When an entity has a field annotated with @Lob and an optimistic lock error occures, than instead of the expected optimistic lock exception following exception is thrown:

org.postgresql.util.PSQLException: Large Objects may not be used in auto-commit mode.

attached test works, if @Lob annotation gets removed from entity
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/avr./2021 05:43 AM;ug:2d3d2d4c-5831-4ca4-bc27-336cfc5c204f;optimistic-lock-with-lob.zip;https://hibernate.atlassian.net/secure/attachment/49854/optimistic-lock-with-lob.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:2d3d2d4c-5831-4ca4-bc27-336cfc5c204f(ug:2d3d2d4c-5831-4ca4-bc27-336cfc5c204f),,,,,,,,,0|104swg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate throwing null pointer exception intermittently at org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:148)  with LazyToOne(NO_PROXY) even after by code enhancement ,HHH-14550,70927,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Kiran Chowdhary,60703ce73a516300768aa979,Kiran Chowdhary,60703ce73a516300768aa979,09/avr./2021 04:51 AM,09/avr./2021 06:19 AM,14/mars/2022 12:54 PM,,5.2.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Scenario:

{noformat}Class A {
...
@OneToMany(mappedBy = ""a"", fetch = FetchType.LAZY)
@LazyToOne(LazyToOneOption.NO_PROXY)
List<B> bLst = new ArrayList<>();
...
}{noformat}



{noformat}Class B {
...
@ManyToOne(name = ""ba_id"", referencedColumnName = ""id"", insertable = false, updatable = false)
@LazyToOne(LazyToOneOption.NO_PROXY)
A a;
...
}{noformat}



This case is working earlier and now it’s not, is there a way to fix it?



Code in ver 5.1.1 

{noformat}public class FlushVisitor extends AbstractVisitor {	private Object owner;	Object processCollection(Object collection, CollectionType type)
	throws HibernateException {		if (collection==CollectionType.UNFETCHED_COLLECTION) {
			return null;
		}		if (collection!=null) {
			final PersistentCollection coll;
			if ( type.hasHolder() ) {
				coll = getSession().getPersistenceContext().getCollectionHolder(collection);
			}
			else {
				coll = (PersistentCollection) collection;
			}			Collections.processReachableCollection( coll, type, owner, getSession() );
		}		return null;	}	FlushVisitor(EventSource session, Object owner) {
		super(session);
		this.owner = owner;
	}}{noformat}



and in 5.2.17

{noformat}public class FlushVisitor extends AbstractVisitor {	private Object owner;	Object processCollection(Object collection, CollectionType type)
	throws HibernateException {		if (collection==CollectionType.UNFETCHED_COLLECTION) {
			return null;
		}		if (collection!=null) {
			final PersistentCollection coll;
			if ( type.hasHolder() ) {
				coll = getSession().getPersistenceContext().getCollectionHolder(collection);
			}
			else if ( collection == LazyPropertyInitializer.UNFETCHED_PROPERTY ) {
				coll = (PersistentCollection) type.resolve( collection, getSession(), owner );
			}
			else {
				coll = (PersistentCollection) collection;
			}			Collections.processReachableCollection( coll, type, owner, getSession() );
		}		return null;	}	@Override
	boolean includeEntityProperty(Object[] values, int i) {
		return true;
	}	FlushVisitor(EventSource session, Object owner) {
		super(session);
		this.owner = owner;
	}}{noformat}


The new check added in 5.2.17 in line number 9 is causing issue



----

Logs:

java.lang.NullPointerException: null
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:148)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.FlushVisitor.processCollection(FlushVisitor.java:46)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:104)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:65)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.AbstractVisitor.processEntityPropertyValues(AbstractVisitor.java:59)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:155)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:216)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:85)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:44)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1398)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1483)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1445)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1414)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.query.Query.getResultList(Query.java:146)
INFO   | jvm 1    | 2021/04/09 02:50:54 | 	at org.hibernate.query.criteria.internal.compile.CriteriaQueryTypeQueryAdapter.getResultList(CriteriaQueryTypeQueryAdapter.java:72)",Zulu jdk8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,09/avr./2021 00:00 AM,,,,true,0.0,ug:3d404f2f-b0b1-4688-91bd-81afc51ce9ad(ug:3d404f2f-b0b1-4688-91bd-81afc51ce9ad),,,,,,,,,0|104sw8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.1.1,,,,,,,,,,,,,,,,,,,,,A faire,,
Collection with default field initializer will always be empty,HHH-14549,70926,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Ostap Stasenko,5e7d10480c8c030c39a34914,Ostap Stasenko,5e7d10480c8c030c39a34914,08/avr./2021 16:20 PM,20/mai/2021 03:17 AM,14/mars/2022 12:54 PM,19/avr./2021 05:44 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,bytecode-enhancement,hibernate-core,,,0,,,,,,"This issue can be observed when entities are bytecode enhanced and {{hibernate.bytecode.allow_enhancement_as_proxy}} is set to {{true}}.

Consider the following model:

{code:java}@Entity
BankAccount
    @ManyToOne(fetch = FetchType.LAZY)
    Bank bank;
    
@Entity
Bank
    @OneToMany
    List<BankDepartment> departments = new ArrayList<>();
    //new ArrayList is a cause of this problem

@Entity
BankDepartment{code}

Now let's fetch a {{BankAccount}}:

{code:java}BankAccount account = entityManager.find(BankAccount.class, 1L);{code}

This {{BankAccount}} references a {{Bank}}, which at this point is still uninitialized.
Let's do anything that will trigger a flush to the database. For example:

{code:java}entityManager.createNativeQuery(""SELECT 1"").getResultList();{code}

At this point, an empty collection (list of departments) from the uninitialized {{Bank}} entity will be added to the persistence context as if it is already initialized. And that’s the issue because now we can’t fetch the actual list of departments. 

{code:java}Assert.assertEquals(3, account.getBank().getDepartments().size()); // size is 0{code}

The code above won’t make a request to the database. Instead, it will fetch that empty collection from the persistence context.

Note: if you do not initialize {{Bank.departments}} to {{new ArrayList<>()}} everything will be fine. 

I have run into this issue because I’m using Quarkus framework which has bytecode instrumentation enabled by default.

The reproducer:
[https://github.com/osst/hibernate-empty-collection-issue|https://github.com/osst/hibernate-empty-collection-issue]
Somehow I could reproduce this issue only in JPAUnitTestCase.
ORMUnitTestCase works correctly.",,,,,,,,,,,,,HHH-14619,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-19T05:43:54.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),ug:4143dc73-5a49-4ec3-98e5-50664d0ccc64(ug:4143dc73-5a49-4ec3-98e5-50664d0ccc64),,,,,,,https://github.com/hibernate/hibernate-orm/pull/3916,0|104sw0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Alias in generated sql is longer than max alias length specified by dialect,HHH-14548,70925,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Peter Sakar,5e1c77794a10020ca9afda1d,Peter Sakar,5e1c77794a10020ca9afda1d,08/avr./2021 07:05 AM,08/avr./2021 13:38 PM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Caused by following piece of code 

https://github.com/hibernate/hibernate-orm/blob/f136dab/hibernate-core/src/main/java/org/hibernate/mapping/Column.java#L147


{code:java}
	/**
	 * Generate a column alias that is unique across multiple tables
	 */
	@Override
	public String getAlias(Dialect dialect, Table table) {
		return safeInterning( getAlias( dialect ) + AliasConstantsHelper.get( table.getUniqueInteger() ) );
	}
{code}

While 'getAlias( dialect )' part makes sure the length is less or equal to max alias length specified by dialect,  the addition of 'AliasConstantsHelper.get( table.getUniqueInteger() )' breaks it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:17a20af6-254d-42b8-bff2-206f487e0629(ug:17a20af6-254d-42b8-bff2-206f487e0629),,,,,,,,,0|104svs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"08/avr./2021 13:38 PM;5e1c77794a10020ca9afda1d;A bit hacky fix for me was to lower the alias max length of the dialect 


{noformat}public class SybaseASE15DialectFixed extends SybaseASE15Dialect {

	@Override
	public int getMaxAliasLength() {
		return super.getMaxAliasLength() - 5;
	}
}{noformat}",,,,,,,,,,,,,,,,A faire,,
Deletion of Parent of @ElementCollection causes a Referential Integrity Constraint Violation,HHH-14547,70924,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,René Grob,557058:f0e7c355-ff52-48c6-9fa4-ead6ba0df593,René Grob,557058:f0e7c355-ff52-48c6-9fa4-ead6ba0df593,07/avr./2021 04:34 AM,06/juil./2021 03:43 AM,14/mars/2022 12:54 PM,,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-entitymanager,,,,1,,,,,,"Deleting an entity that contains a `@ElementCollection` with a JPQL query causes a Referential integrity constraint violation.
See reproducer: https://github.com/renegrob/hibernate-test-case-templates/blob/elementcollection-delete-reproducer/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/ElementCollectionDeletionJPAUnitTestCase.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:456c6634-6483-4e45-82db-425f83952c7d(ug:456c6634-6483-4e45-82db-425f83952c7d),ug:06ba16d2-01e6-4841-a0cc-897a1a7ae8b9(ug:06ba16d2-01e6-4841-a0cc-897a1a7ae8b9),,,,,,,,0|104svk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.28,2021-07-06 10:43:25.05,,,,"06/juil./2021 03:43 AM;60e41a3ef90dee00693f6bec;I think the HQL DML operations do not guarantee to propagate to associations. But there is indeed a bug with deletion of @ElementCollection if the owning entity is deleted. Here is a quick test case:



{code:java}@Entity
public class Container {
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private Integer id;

  @ElementCollection(fetch = FetchType.EAGER)
  private List<Component> components = new ArrayList<>();
}

@Embeddable
public class Component {
  private String value;
}{code}



 

{code:java}      Container container = new Container();
	  Component component = new Component();
	  
	  container.setComponents(Arrays.asList(component));
	  
	  em.persist(container);
	  em.flush();
	  em.clear();
	  
	  Container persisted = em.find(Container.class, container.getId());
	  em.remove(persisted);
	  em.flush();{code}

The test fails on the second flush() (line 12) with an error

{quote}org.hibernate.exception.ConstraintViolationException: could not execute statement
at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:59)
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:99)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:200)
at org.hibernate.engine.jdbc.batch.internal.NonBatchingBatch.addToBatch(NonBatchingBatch.java:46)
at org.hibernate.persister.entity.AbstractEntityPersister.delete(AbstractEntityPersister.java:3696)
at org.hibernate.persister.entity.AbstractEntityPersister.delete(AbstractEntityPersister.java:3956)
at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:123)
at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:344)
at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:107)
at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1391)
... 75 more
Caused by: org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: ""FKGRST723M48JL71DDXSFAHF1YR: PUBLIC.CONTAINER_COMPONENTS FOREIGN KEY(CONTAINER_ID) REFERENCES PUBLIC.CONTAINER(ID) (1)""; SQL statement:
delete from container where id=? \[23503-200]{quote}

The executed statements look like this

{quote}Hibernate: insert into container (id) values (?)
Hibernate: insert into container_components (container_id, value) values (?, ?)
Hibernate: select container0_.id as id1_2_0_, components1_.container_id as containe1_3_1_, components1_.value as value2_3_1_ from container container0_ left outer join container_components components1_ on container0_.id=components1_.container_id where container0_.id=?
Hibernate: delete from container where id=?
o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 23503, SQLState: 23503
o.h.engine.jdbc.spi.SqlExceptionHelper   : Referential integrity constraint violation: ""FKGRST723M48JL71DDXSFAHF1YR: PUBLIC.CONTAINER_COMPONENTS FOREIGN KEY(CONTAINER_ID) REFERENCES PUBLIC.CONTAINER(ID) (1)""; SQL statement:
delete from container where id=? \[23503-200]{quote}

The deletion of components is missing before deletion of the container.",,,,,,,,,,,,,,,,A faire,,
Bytecode-enhanced byte[] getter unexpectedly loads other non-requested byte[] fields,HHH-14546,70923,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Rejected,,,Ka Wu,557058:8438c7ec-865b-44f3-8046-8cae7e33a456,Ka Wu,557058:8438c7ec-865b-44f3-8046-8cae7e33a456,04/avr./2021 10:43 AM,07/avr./2021 01:29 AM,14/mars/2022 12:54 PM,07/avr./2021 01:29 AM,5.2.18,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,,,,0,bytecode,core,hibernate,lazy,loading,"With bytecode enhancement active, create an entity with TWO lazy byte[] array fields:

{code:java}
@Entity
@Table(name = ""\""Ships\"""")
public class Ship
{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column
    private Long id;

    @Basic(optional = false)
    @Column
    private String name;

    @Basic(fetch = FetchType.LAZY)
    @Column
    @Lob
    private byte[] thumbnail;

    @Basic(fetch = FetchType.LAZY)
    @Column(name = ""full_image"")
    @Lob
    private byte[] fullImage;

    ...
}
{code}

When loading an entity, the LAZY fields aren't loaded. However, calling **any of the byte[] getters** will load + initialize more than the requested byte[] field. Instead, see example, the other field also gets loaded.

This is a problem for entities that have a thumbnail image to be displayed, e.g. in a list on the UI. You will need the thumbnails there, however **NOT** the full image due to performance reasons.

I will create a PR including the test case soon.

Excerpt from the test case:

{code:java}
    @Test
    public void test() {
        doInJPA( this::entityManagerFactory, em -> {
            Ship entity = em.find( Ship.class, 1l );

            Assert.assertNotNull(""Ship not found!"", entity);

            Assert.assertFalse( Hibernate.isPropertyInitialized( entity, ""thumbnail"" ) );
            Assert.assertFalse( Hibernate.isPropertyInitialized( entity, ""fullImage"" ) );

            // get thumbnail bytes only: will query full image as well (wrong, see SQL)
            System.out.println(""BEFORE entity.getThumbnail()!"");
            byte[] thumbnail = entity.getThumbnail();
            System.out.println(""AFTER entity.getThumbnail()!"");

            Assert.assertTrue( Hibernate.isPropertyInitialized( entity, ""thumbnail"" ) );
            Assert.assertFalse( Hibernate.isPropertyInitialized( entity, ""fullImage"" ) ); // <-- full image byte[] being loaded even though it shouldn't
        } );
    }
{code}

Excerpt from the debug log, running `gradlew --debug test`:

{noformat}
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]     16:55:57,802 DEBUG SQL:144 - 
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]         select
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]             ship0_.id as id1_0_0_,
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]             ship0_.name as name3_0_0_ 
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]         from
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]             ""Ships"" ship0_ 
2021-04-04T18:55:57.803+0200 [DEBUG] [TestEventLogger]         where
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship0_.id=?
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     Hibernate: 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         select
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship0_.id as id1_0_0_,
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship0_.name as name3_0_0_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         from
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ""Ships"" ship0_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         where
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship0_.id=?
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     16:55:57,803 TRACE BasicBinder:64 - binding parameter [1] as [BIGINT] - [1]
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     16:55:57,803 TRACE BasicExtractor:60 - extracted value ([name3_0_0_] : [VARCHAR]) - [Titanic]
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     BEFORE entity.getThumbnail()!
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     16:55:57,803 DEBUG SQL:144 - 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         select
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship_.full_image as full_ima2_0_,
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship_.thumbnail as thumbnai4_0_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         from
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ""Ships"" ship_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         where
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship_.id=?
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]     Hibernate: 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         select
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship_.full_image as full_ima2_0_,
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ship_.thumbnail as thumbnai4_0_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         from
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]             ""Ships"" ship_ 
2021-04-04T18:55:57.804+0200 [DEBUG] [TestEventLogger]         where
2021-04-04T18:55:57.805+0200 [DEBUG] [TestEventLogger]             ship_.id=?
2021-04-04T18:55:57.805+0200 [DEBUG] [TestEventLogger]     16:55:57,803 TRACE BasicBinder:64 - binding parameter [1] as [BIGINT] - [1]
2021-04-04T18:55:57.805+0200 [DEBUG] [TestEventLogger]     16:55:57,803 TRACE BasicExtractor:60 - extracted value ([full_ima2_0_] : [BLOB]) - [[2, 3, 4, 5, 6, 7]]
2021-04-04T18:55:57.805+0200 [DEBUG] [TestEventLogger]     16:55:57,804 TRACE BasicExtractor:60 - extracted value ([thumbnai4_0_] : [BLOB]) - [[0, 1]]
2021-04-04T18:55:57.805+0200 [DEBUG] [TestEventLogger]     AFTER entity.getThumbnail()!
{noformat}

As you can see, `getThumbnail()` also loads the full image byte[]... which is wrong.","Hibernate ORM, test suite",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-07T01:27:34.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),kwutzke(kwutzke),,,,,,,https://github.com/hibernate/hibernate-orm/pull/3896,0|104svc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-07 08:28:56.44,Backport?,,,"04/avr./2021 11:12 AM;557058:8438c7ec-865b-44f3-8046-8cae7e33a456;PR here: [https://github.com/hibernate/hibernate-orm/pull/3896|https://github.com/hibernate/hibernate-orm/pull/3896|smart-link] 

This issue must/should be backported to at least 5.2.19.Final. I will likely have another issue there, which doesn’t happen for 5.4.x.","07/avr./2021 01:28 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;Hi [~accountid:557058:8438c7ec-865b-44f3-8046-8cae7e33a456],

actually this is the expected behaviour for all singular attributes as stated [here in the doc|https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#BytecodeEnhancement-lazy-loading]

{quote}By default, all singular attributes are part of a single group, meaning that when one lazy singular attribute is accessed all lazy singular attributes are loaded{quote}

in order to obtain what you want you need to use the{{@LazyGroup}} annotation.",,,,,,,,,,,,,,,Terminé,,
Fix mistake in example title in user guide,HHH-14545,70922,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Sajad Mehrabi,5d2e400de161600bfbc9d433,Sajad Mehrabi,5d2e400de161600bfbc9d433,Sajad Mehrabi,5d2e400de161600bfbc9d433,03/avr./2021 13:17 PM,04/avr./2021 05:22 AM,14/mars/2022 12:54 PM,,5.2.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,documentation,,,,,"Fix mistake in example title in user guide:
`@Generator` is used incorrectly in two examples title. While `@GeneratorType` should be used.
I have seen this since version 5.2.

link:
[https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-GeneratorType|https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#mapping-generated-GeneratorType]
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-04T04:49:42.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:42bf7162-e6fd-4cc3-8b4c-1a8491cd4dee(ug:42bf7162-e6fd-4cc3-8b4c-1a8491cd4dee),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3894,0|104sv4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Performance degradation observed with Hibernate 5.4.23 updating timestamps cache when a cacheable hint isn't specified,HHH-14544,70921,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Edwin Avedian,557058:dc10784c-ab81-43e2-888a-4a9136507dc6,Edwin Avedian,557058:dc10784c-ab81-43e2-888a-4a9136507dc6,02/avr./2021 12:18 PM,02/avr./2021 12:59 PM,14/mars/2022 12:54 PM,,5.4.23,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-ehcache,,,0,,,,,,"When query cache is enabled, Hibernate constantly updates timestamps cache default-update-timestamps-region.data through ehcache even though a cacheable hint was not specified in the query.  This causes frequent writes to the disk causing slowness under heavy load.

According to [https://vladmihalcea.com/hibernate-query-cache-n-plus-1-issue/|https://vladmihalcea.com/hibernate-query-cache-n-plus-1-issue/], 

*Although we have enabled the Query Cache, it does not automatically apply to any query and we need to explicitly tell Hibernate which queries are to be cached.*

Attached is a sample maven project where this is reproducible.  Please extract the project, open in an IDE and run the test which will show the following 

{quote}11:52:19.594 \[main] DEBUG org.hibernate.cache.internal.TimestampsCacheEnabledImpl - Invalidating space \[Attribute], timestamp: 6624827554177024
11:52:19.595 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put added 0 on heap
11:52:19.599 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on heap
11:52:19.599 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on disk
11:52:19.599 \[main] DEBUG org.hibernate.cache.internal.TimestampsCacheEnabledImpl - Invalidating space \[Dorm], timestamp: 6624827554177024
11:52:19.599 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put added 0 on heap
11:52:19.600 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault removed 0 from heap
11:52:19.600 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault added 0 on disk
11:52:19.600 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on heap
11:52:19.600 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on disk
11:52:19.600 \[main] DEBUG org.hibernate.cache.internal.TimestampsCacheEnabledImpl - Invalidating space \[Purpose], timestamp: 6624827554177024
11:52:19.600 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put added 0 on heap
11:52:19.600 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault removed 0 from heap
11:52:19.600 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault added 0 on disk
11:52:19.601 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on heap
11:52:19.601 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on disk
11:52:19.601 \[main] DEBUG org.hibernate.cache.internal.TimestampsCacheEnabledImpl - Invalidating space \[Student], timestamp: 6624827554177024
11:52:19.602 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put added 0 on heap
11:52:19.602 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault removed 0 from heap
11:52:19.602 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault added 0 on disk
11:52:19.602 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on heap
11:52:19.602 \[main] DEBUG net.sf.ehcache.store.disk.Segment - put updated, deleted 0 on disk
11:52:19.602 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault removed 0 from heap
11:52:19.602 \[default-update-timestamps-region.data] DEBUG net.sf.ehcache.store.disk.Segment - fault added 0 on disk{quote}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,02/avr./2021 12:17 PM;edg;testcase.zip;https://hibernate.atlassian.net/secure/attachment/49853/testcase.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,edg(edg),,,,,,,,,0|104suw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Problem with positional parameters,HHH-14543,70920,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Sviataslau Apanasionak,5a43deab90ebee2d2dc61bdc,Sviataslau Apanasionak,5a43deab90ebee2d2dc61bdc,01/avr./2021 05:47 AM,01/avr./2021 05:47 AM,14/mars/2022 12:54 PM,,5.4.10,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,hibernate-entitymanager,,,0,hibernate,,,,,"Have following entities:

{code:java}
@Entity
public class Network {
    @Id
    private Long id;

    @ManyToMany(mappedBy = ""networks"")
    private Set<CategorySet> categorySets;
}

@Entity
public class Category {
    @Id
    private Long id;

    @ManyToOne
    @JoinColumn
    private CategorySet categorySet;
}

@Entity
public class CategorySet {
    @Id
    private Long id;

    @ManyToMany
    @JoinTable
    private Set<Network> networks;

    @OneToMany(mappedBy = ""categorySet"")
    private Set<Category> categories;
}

{code}

Then I create query:

{code:java}
entityManager.createQuery(""SELECT c FROM Category c ""
			+ ""JOIN c.categorySet s ""
			+ ""JOIN s.networks n ""
			+ ""WHERE c.id IN ?1 AND (n IS EMPTY or n.id IN ?2)"")
			.setParameter(1, Set.of(2L, 4L))
			.setParameter(2, Set.of())
			.getResultList();
{code}

And there is exception:

{code:java}
java.lang.IllegalArgumentException: org.hibernate.QueryException: Unexpected gap in ordinal parameter labels [1 -> 3] : [1,3]

	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:138)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1535)
	at org.hibernate.query.Query.getResultList(Query.java:165)
	at org.hibernate.bugs.JPAUnitTestCase.hhh123Test(JPAUnitTestCase.java:41)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
Caused by: org.hibernate.QueryException: Unexpected gap in ordinal parameter labels [1 -> 3] : [1,3]
	at org.hibernate.query.internal.ParameterMetadataImpl.<init>(ParameterMetadataImpl.java:75)
	at org.hibernate.engine.query.spi.HQLQueryPlan.buildParameterMetadata(HQLQueryPlan.java:430)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:130)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:73)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:155)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:600)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1386)
	at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1558)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1526)
	... 29 more
{code}

If I change parameter order as follow, it works fine:

{code:java}
entityManager.createQuery(""SELECT c FROM Category c ""
			+ ""JOIN c.categorySet s ""
			+ ""JOIN s.networks n ""
			+ ""WHERE c.id IN ?2 AND (n IS EMPTY or n.id IN ?1)"")
			.setParameter(2, Set.of(2L, 4L))
			.setParameter(1, Set.of())
			.getResultList();
{code}

See replication test in attachment.


",,,,,,,,,,,,,,,,,,,,,,,,,,,,,01/avr./2021 05:46 AM;sviato_slav;hibernate-param-order-error-test.zip;https://hibernate.atlassian.net/secure/attachment/49852/hibernate-param-order-error-test.zip,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-07T01:03:29.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,sviato_slav(sviato_slav),,,,,,,,,0|104suo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Getter methods with @Transient annotations cannot be overriden in orm.xml,HHH-14542,70919,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Erhan Ceran,557058:24de844a-8f79-476c-a06b-27931c4157ce,Erhan Ceran,557058:24de844a-8f79-476c-a06b-27931c4157ce,01/avr./2021 02:03 AM,19/avr./2021 05:00 AM,14/mars/2022 12:54 PM,,5.2.11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,bug,core,,,,"Entity definitions in orm.xml should override annotations by design. 

However, when using property based access, if a getter method is annotated with @Transient, it cannot be defined as non-transient in orm.xml. This is most likely a result of a change made for HHH-11716.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:0965dde7-51de-4d82-b64e-2d7aaccd2e8d(ug:0965dde7-51de-4d82-b64e-2d7aaccd2e8d),,,,,,,,,0|104sug:,,,Affirmative,,,,,,,,,,,,,,,,,,,,,"Yes, likely",,,,5.2.3,,,,,,,,,,,,,,,,,,,,,A faire,,
Set and validate the boolean query max clause count,HSEARCH-4205,70918,,Amélioration,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,31/mars/2021 19:46 PM,01/avr./2021 00:44 AM,14/mars/2022 12:54 PM,,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,backend-elasticsearch,backend-lucene,,,0,,,,,,"Allow the user to change the default value of the boolean query max clause count ( 1024 ).
Then use this value ( default or not ) to check the boolean queries and the terms query ( implemented as boolean queries ).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,,0|104su8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-01 07:44:16.045,,,,"01/avr./2021 00:44 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Not sure I want to expose this setting, really... There isn't a good 1-1 mapping between the settings we would expose and how they would be implemented.

For example, if we expose this as a backend setting, and two Lucene backends have a different value, we would be in trouble because the max clause count is set through a global, static variable. So we just cannot have two different values for two backends.

Same goes with Elasticsearch: [https://www.elastic.co/guide/en/elasticsearch/reference/current/search-settings.html|https://www.elastic.co/guide/en/elasticsearch/reference/current/search-settings.html]. it’s a global setting that affects all indexes in the cluster. Not just indexes for one Hibernate Search backend. Not even just indexes for all Hibernate search backends: it could affect other indexes in the cluster that are not managed by Hibernate Search.

Really, I think this setting would be better addressed by some documentation showing people how they can change it, rather than exposing something in Hibernate Search that will not quite work as expected.",,,,,,,,,,,,,,,,A faire,,
SessionFactoryObserver#sessionFactoryClosing() gets called after the session factory is marked as closed,HHH-14541,70914,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/mars/2021 04:56 AM,12/mai/2021 08:50 AM,14/mars/2022 12:54 PM,12/mai/2021 07:25 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Beta1,,,,,,,,,,,,,0,,,,,,"In Hibernate Search, we are using a {{SessionFactoryObserver}} in order to stop running background processes that rely on the {{SessionFactory}} before it gets closed, because otherwise those process would start failing.

However, it appears that when {{sessionFactoryClosing()}} gets called, {{SessionFactory#isClosed()}} already returns {{@code true}}. It seems the factory becomes unusable sometime *before* {{sessionFactoryClosing()}} gets called.

Queries relying on existing sessions, in particular, will start failing right when {{SessionFactory.close()}} gets called, before {{sessionFactoryClosing()}} gets executed and gets a chance to stop background processes.

This contradicts the javadoc of {{sessionFactoryClosing()}}:

{code}
Callback to indicate that the given factory is about to close.  The passed factory reference should be usable
since it is only about to close.
{code}",,,,,,,,,,,,,,,,,,,HHH-10674,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-05-12T08:27:14.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3952,0|104stc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Expose the Elasticsearch index names in the metamodel API,HSEARCH-4204,70913,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,30/mars/2021 03:27 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,04/mai/2021 02:16 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,"I.e. allow this:

{code}
// This is already possible
SearchIndexedEntity<Book> bookEntity = mapping.indexedEntity( Book.class ); 
ElasticsearchIndexManager indexManager = bookEntity.indexManager().unwrap( ElasticsearchIndexManager.class ); 
// This is new: before the proposed change, the indexDescriptor has a generic type (IndexDescriptor)
// which is not tied to Elasticsearch, even for an ElasticsearchIndexManager.
ElasticsearchIndexDescriptor indexDescriptor = indexManager.descriptor();
String readName = indexDescriptor.readName();
String writeName = indexDescriptor.writeName();
{code}

{{ElasticsearchIndexDescriptor}} would be a new interface in the {{backend-elasticsearch}} module, extending {{IndexDescriptor}}.

If the fix is simple enough, we could consider backporting it to 6.0.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-05-04T02:16:07.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2566,0|1009cw:000000xdur3mhxzzzxezrv,,,,,,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Interceptor instance is shared between ORM session and Enver's temporary session resulting in multiple calls.,HHH-14540,70912,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Dave Stephan,557058:ad663ec6-aca9-4e2b-8f03-be4d40ecd171,Dave Stephan,557058:ad663ec6-aca9-4e2b-8f03-be4d40ecd171,29/mars/2021 16:25 PM,17/déc./2021 23:14 PM,14/mars/2022 12:54 PM,16/nov./2021 07:45 AM,5.3.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.24,5.4.33,5.5.9,5.6.2,,,,,,hibernate-core,hibernate-envers,,,0,,,,,,"If ""Audited"" Entity is used, CustomInterceptor#beforeTransactionCompletion() will be invoked 2 times due to the following code block:
(In the beforeCompletion() method, beforeTransactionCompletion() will be invoked.)

org.hibernate.internal.SessionImpl.addSharedSessionTransactionObserver()
{noformat}
	@Override
	protected void addSharedSessionTransactionObserver(TransactionCoordinator transactionCoordinator) {
		this.transactionObserver = new TransactionObserver() {
			@Override
			public void afterBegin() {
			}

			@Override
			public void beforeCompletion() {
				if ( isOpen() && getHibernateFlushMode() !=  FlushMode.MANUAL ) {
					managedFlush();
				}
				actionQueue.beforeTransactionCompletion();
				try {
					getInterceptor().beforeTransactionCompletion( getTransactionIfAccessible() );
				}
				catch (Throwable t) {
					log.exceptionInBeforeTransactionCompletionInterceptor( t );
				}
			}

			@Override
			public void afterCompletion(boolean successful, boolean delayed) {
				afterTransactionCompletion( successful, delayed );
				if ( !isClosed() && autoClose ) {
					managedClose();
				}
			}
		};
		transactionCoordinator.addObserver(transactionObserver);
	}
{noformat}",,,,,,,,,,,,HHH-14963,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-11-16T07:58:27.000-0800"",""stateCount"":2,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),dstephan(dstephan),,,,,,,https://github.com/hibernate/hibernate-orm/pull/4347,0|104st4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-11-02 00:09:57.969,Backport?,,,"09/nov./2021 10:01 AM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;[~accountid:557058:99e61e65-956b-4a21-b29c-06057642e9ea] we probably should backport this to 5.5, 5.4, and 5.3 for consistency.",,,,,,,,,,,,,,,,Terminé,,
ERROR ON Hibernate JPA persistence.Query getResultList() method.,HHH-14539,70911,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Paawan Prashad Bhatt,557058:a310e1f0-0122-44ea-a3f9-f8e0211862e0,Paawan Prashad Bhatt,557058:a310e1f0-0122-44ea-a3f9-f8e0211862e0,29/mars/2021 08:46 AM,29/mars/2021 08:46 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,," Parent -> org.glassfish.internal.api.DelegatingClassLoader@4c07f6cc
 was requested to find class s.lastName after done was invoked from the following stack trace
java.lang.Throwable
	at com.sun.enterprise.loader.ASURLClassLoader.findClassData(ASURLClassLoader.java:825)
	at com.sun.enterprise.loader.ASURLClassLoader.findClass(ASURLClassLoader.java:742)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl$AggregatedClassLoader.findClass(ClassLoaderServiceImpl.java:224)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:242)
	at org.hibernate.internal.SessionFactoryImpl.getImportedClassName(SessionFactoryImpl.java:1286)
	at org.hibernate.hql.internal.QuerySplitter.getImportedClass(QuerySplitter.java:171)
	at org.hibernate.hql.internal.QuerySplitter.concreteQueries(QuerySplitter.java:111)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:111)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:88)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:190)
	at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:301)
	at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1250)
	at org.hibernate.internal.QueryImpl.list(QueryImpl.java:103)
	at org.hibernate.jpa.internal.QueryImpl.list(QueryImpl.java:573)
	at org.hibernate.jpa.internal.QueryImpl.getResultList(QueryImpl.java:449)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:3ab49d98-9edc-4b18-9217-b940809d961a(ug:3ab49d98-9edc-4b18-9217-b940809d961a),,,,,,,,,0|104ssw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate envers 5.4.27 java.lang.IllegalArgumentException: Can not set java.util.Date field X to [Ljava.lang.Object;,HHH-14538,70909,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Nyro,557058:16714465-c4d5-433c-8763-c076596c7d8b,Nyro,557058:16714465-c4d5-433c-8763-c076596c7d8b,29/mars/2021 02:07 AM,29/mars/2021 02:07 AM,14/mars/2022 12:54 PM,,5.4.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,0,envers,,,,,"Hi,

I'm using Hibernate Envers 5.4.27.Final with Hibernate Core 5.4.27.Final and i'm getting the following exception when trying to update an audited detached entity:

Caused by: java.lang.IllegalArgumentException: Can not set java.util.Date field com.*.Time.endDate to [Ljava.lang.Object;
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) ~[?:?]
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) ~[?:?]
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58) ~[?:?]
	at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36) ~[?:?]
	at java.base/java.lang.reflect.Field.get(Field.java:419) ~[?:?]
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:71) ~[hibernate-core-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper$1.run(MultiPropertyMapper.java:140) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper$1.run(MultiPropertyMapper.java:105) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:312) ~[?:?]
	at org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper.mapToMapFromEntity(MultiPropertyMapper.java:104) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.internal.entities.mapper.ComponentPropertyMapper.mapToMapFromEntity(ComponentPropertyMapper.java:71) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper.map(MultiPropertyMapper.java:90) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.internal.synchronization.work.ModWorkUnit.<init>(ModWorkUnit.java:43) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
	at org.hibernate.envers.event.spi.EnversPostUpdateEventListenerImpl.onPostUpdate(EnversPostUpdateEventListenerImpl.java:46) ~[hibernate-envers-5.4.27.Final.jar:5.4.27.Final]
...

This error does not occur when using Hibernate 4.1.7.Final and in 5.4.27 version (tried it too on 5.4.30 version) seems to always occur on Embeddable properties (the embedded property itself or a property of the embeddable class).

After digging into the Hibernate code, this error occurs in my opinion because of the following code in EnversPreUpdateEventListenerImpl:

if ( isDetachedEntityUpdate( entityName, event.getOldState() ) ) {
				final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get( event.getSession() );
				auditProcess.cacheEntityState(
						event.getId(),
						entityName,
						event.getPersister().getDatabaseSnapshot( event.getId(), event.getSession() )
				);
			}

Hibernate envers is caching the database snapshot of the entity to update in order to compare it with the new state and set the modified flag to true|false. The getDatabaseSnapshot method uses the Hibernate type hydrate method and not the resolve method. Looking at the ComponentType.hydrate method the returned value is an array of values and not an instance of the Embeddable class and this makes the compare code fail when trying to get the field value using reflection.

So this error occurs when the 'withModifiedFlag' is set to true (i'm setting the global org.hibernate.envers.global_with_modified_flag to true) and when updating a detached entity having an embedded property.

The only workaround is to annotate the embedded property or the embeddable class field with @NotAudited or by setting the withModifiedFlag to false on the parent entity but this is not a proper solution.

Thank you for your help!","Windows 7, hibernate-core-5.4.27.Final, Postgresql9.5",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,crancran(crancran),rzoghby(rzoghby),,,,,,,,0|104ssg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.1.7,,,,,,,,,,,,,,,,,,,,,A faire,,
EntityNotFoundException thrown when non-existing association with @NotFound(IGNORE) mapped has proxy in PersistenceContext,HHH-14537,70908,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,28/mars/2021 14:59 PM,29/avr./2021 04:42 AM,14/mars/2022 12:54 PM,30/mars/2021 14:45 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,5.4.31,5.5.0.Alpha1,,,,,,,hibernate-core,,,,0,,,,,,"For example, with the following mappings:

{code:java}
	@Entity(name = ""Task"")
	public class Task  {

		@Id
		private int id;

		@ManyToOne(fetch = FetchType.EAGER)
		@JoinColumn(
				name = ""employeeId"",
				foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT)
		)
		@NotFound(action = NotFoundAction.IGNORE)
		private Employee employee;
	}
{code}

{code:java}
	@Entity(name = ""Employee"")
	public class Employee {
		@Id
		private int id;
		private String name;
	}
{code}

The following code loads a proxy for a non-existing {{Employee}}, then queries a {{Task}} entity that is associated to that non-existing entity.

Even though, {{Task#employee}} is mapped with {{@NotFound(action = NotFoundAction.IGNORE)}}, an {{EntityNotFoundException}} is thrown:

{code:java}
	doInHibernate( this::sessionFactory, session -> {
		session.load( Employee.class, 2 );
		final Task task = session.createQuery( ""from Task"", Task.class ).getSingleResult();
	});
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-20T10:57:51.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),steve(steve),,,,,,,,0|104ss8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-29 12:34:45.338,,,,"29/mars/2021 05:34 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;I’ll take a look at the PR, but some general comments…

This would tell me that the removed Employee became associated with the Session through means other than this association, otherwise the proxy would never have been created.  I’d like to understand that aspect better first.  Because if something else conceptually loads this first then this is a different discussion.

A proxy loses all reference to how it became created by design.  What happens when an Employee is referenced multiple times in a graph, some of “ignored” while others are not?","29/mars/2021 15:09 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;< A proxy loses all reference to how it became created by design. What happens when an Employee is referenced multiple times in a graph, some of “ignored” while others are not?

[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], that's an interesting question. I've added a test to the PR for this.

What happens is that the lazy association will be a lay proxy, and the eager, ""ignored"" association will be {{null}}.",30/mars/2021 14:45 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in main and 5.4 branches.,,,,,,,,,,,,,,Terminé,,
Load child entity from second level cache,HHH-14536,70907,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,27/mars/2021 15:20 PM,27/mars/2021 15:20 PM,14/mars/2022 12:54 PM,,5.4.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Having a parent entity with a child as:

{code:java}
 @OneToOne(mappedBy = ""parent"")
    private Child child;
{code}

While loading the parent from second level cache, the child is loaded with a query instead of searching also in second level cache.

See: https://github.com/hibernate/hibernate-orm/blob/2b06123635dd723d9e3b38c6c22cae901d12055c/hibernate-core/src/main/java/org/hibernate/type/EntityType.java#L740

Stacktrace during child query:


{code:java}
doQuery:948, Loader (org.hibernate.loader)
doQueryAndInitializeNonLazyCollections:349, Loader (org.hibernate.loader)
doQueryAndInitializeNonLazyCollections:319, Loader (org.hibernate.loader)
loadEntity:2422, Loader (org.hibernate.loader)
load:72, AbstractEntityLoader (org.hibernate.loader.entity)
loadByUniqueKey:148, EntityLoader (org.hibernate.loader.entity)
loadByUniqueKey:144, EntityLoader (org.hibernate.loader.entity)
loadByUniqueKey:2475, AbstractEntityPersister (org.hibernate.persister.entity)
loadByUniqueKey:754, EntityType (org.hibernate.type)
resolve:467, EntityType (org.hibernate.type)
resolve:457, EntityType (org.hibernate.type)
assemble:199, OneToOneType (org.hibernate.type)
assemble:101, TypeHelper (org.hibernate.type)
assemble:135, StandardCacheEntryImpl (org.hibernate.cache.spi.entry)
convertCacheEntryToEntity:308, CacheEntityLoaderHelper (org.hibernate.loader.entity)
processCachedEntry:174, CacheEntityLoaderHelper (org.hibernate.loader.entity)
loadFromSecondLevelCache:147, CacheEntityLoaderHelper (org.hibernate.loader.entity)
performOrderedMultiLoad:112, MultiEntityLoadingSupport (org.hibernate.loader.entity.plan)
multiLoad:42, MultiEntityLoadingSupport (org.hibernate.loader.entity.plan)
multiLoad:4512, AbstractEntityPersister (org.hibernate.persister.entity)
lambda$multiLoad$1:2941, SessionImpl$MultiIdentifierLoadAccessImpl (org.hibernate.internal)
get:-1, 78955945 (org.hibernate.internal.SessionImpl$MultiIdentifierLoadAccessImpl$$Lambda$1730)
perform:2922, SessionImpl$MultiIdentifierLoadAccessImpl (org.hibernate.internal)
multiLoad:2941, SessionImpl$MultiIdentifierLoadAccessImpl (org.hibernate.internal)
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),,,,,,,,,0|104ss0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Add to the documentation that a composite key cannot have some values set to null,HHH-14535,70906,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Davide D'Alto,557058:dc17d3f8-d34a-4a8a-a552-704e1902d0ae,Davide D'Alto,557058:dc17d3f8-d34a-4a8a-a552-704e1902d0ae,27/mars/2021 03:10 AM,27/mars/2021 03:11 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,documentation,,,,0,,,,,,"See this answer on StackOverflow: https://stackoverflow.com/questions/70909/hibernate-mapping-a-composite-key-with-null-values

I think it would be nice to add it to this list in this section of the documentation: https://docs.jboss.org/hibernate/orm/6.0/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite
and here https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers-composite
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,davided(davided),,,,,,,,,0|104srs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Index annotation causing Runtime failure,HHH-14534,70905,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Won't Do,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,ben yahia haithem,605e740d4b9135006ab0002f,ben yahia haithem,605e740d4b9135006ab0002f,26/mars/2021 18:35 PM,29/mars/2021 02:30 AM,14/mars/2022 12:54 PM,29/mars/2021 02:30 AM,5.4.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,annotation-processor,annotations,,,,"After switching from 4.3.7.Final to 5.4.x I got a problem caused by an index annotation ""*org.hibernate.annoations.Index*"" causing a runtime failure ,but was working fine with hibernate 4 , I tried to use the non deprecated JPA index ""*javax.persistence.Index*"" but got the same output,so I think it’s not related to the fact that the Index is deprecated, I'm facing this problem since so long and hope it gets resolved or at least I get an explanation why after I added the index annotation the ORM is “tricked” into expecting the accounts property to be present on the AccountEntity which doesn’t make any sense at all .
I created a sandbox project to trigger the bug and the stack is the following :

{code:java}org.hibernate.MappingException: property [accounts] not found on entity [AccountEntity]
	at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:514)
	at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:525)
	at org.hibernate.cfg.IndexOrUniqueKeySecondPass.doSecondPass(IndexOrUniqueKeySecondPass.java:83)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1693)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1661)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:286)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:473)
	at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:84)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:689)
	at HibernateUtil.getSessionFactory(HibernateUtil.java:52)
	at Main.main(Main.java:12)
Exception in thread ""main"" java.lang.NullPointerException
	at Main.main(Main.java:12){code}

Adding column accounts on AccountEntity prevents the bug from appearing but it's not a proper solution to resolve the issue and the index is not generated as well.
I consider this a hibernate bug since it was working in 4.3.x and the index was created .

For the sandbox project link :
[https://github.com/unholyhoper/HibernateIndex|https://github.com/unholyhoper/HibernateIndex]



Logged output and queries for both hibernate 5.4.17.Final and 4.3.7.Final

[^hibernate 5.4 .txt]
[^Hibernate 4 log.txt]

Thank you",,,,201600,201600,,0 %,201600,201600,,,,,,,,,,,,,,,,,,,,27/mars/2021 07:39 AM;ug:0b898426-ffff-45b3-82ba-a4023a316e3d;Hibernate 4 log.txt;https://hibernate.atlassian.net/secure/attachment/49850/Hibernate+4+log.txt,27/mars/2021 07:39 AM;ug:0b898426-ffff-45b3-82ba-a4023a316e3d;hibernate 5.4 .txt;https://hibernate.atlassian.net/secure/attachment/49849/hibernate+5.4+.txt,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,30/mars/2021 00:00 AM,,,,true,2.0,ug:0b898426-ffff-45b3-82ba-a4023a316e3d(ug:0b898426-ffff-45b3-82ba-a4023a316e3d),christian.beikov(christian.beikov),,,,,,,,0|104srk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.3.7,2021-03-29 09:30:40.026,,,,"29/mars/2021 02:30 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;I see that [https://hibernate.atlassian.net/browse/HHH-11255|https://hibernate.atlassian.net/browse/HHH-11255|smart-link] is the cause for this issue, but it doesn’t matter, you should move away from the deprecated annotation {{org.hibernate.annotations.Index}} anyway. Please remove all index annotation uses in your example and try the following mapping for {{AccountEntity}}:

{noformat}@Table(
    name = ""ACCOUNT"", 
    uniqueConstraints = {
        @UniqueConstraint(columnNames = ""ID"")},
    indexes = {
        @Index(name = ""indexEmployees"", columnList = ""EMPLOYEE_ID""}
){noformat}

As far as I can tell, what you are expecting there is simply not supported (anymore). Hibernate can’t figure out the columns for the index for one-to-many associations which declare join columns, so you will have to list the columns. Since the annotation is deprecated and will be removed anyway, I recommend you switch to the approach I suggested. I’ll close this issue as won’t do.",,,,,,,,,,,,,,,,Terminé,,
Query with size() in select clause does not take conditions on join(s) into account,HHH-14533,70903,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,25/mars/2021 19:30 PM,29/mars/2021 12:50 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4-backlog,,,,,,,,,query-hql,,,,0,regression,,,,,"I've changed this to a ""Bug"" issue, since a bigger problem is that results for {{size( <collection> )}} in the {{select}} clause does not take into account conditions on a {{join}}.

For example, in the following {{Query}}, {{size( descendants ) }} should only include those {{offspring}} with {{descendants.intValue > 1}}.

{code:java}
select p.id, size( descendants ) 
from Animal p
left outer join p.offspring descendants
where descendants.intValue > 1
group by p.id
{code}

Instead,  {{size( descendants ) }} includes all of an animal's {{offspring}}, as long as it has at least 1 offspring with {{#intValue > 1}}.
 
If the fix involves keeping a subquery in the select clause, that subquery should be included in the {{group by}} clause, unless someone can determine that this is not necessary.

-----------------------------------------------------------------------------------------------------------------------------------
Original description:

I am tentatively setting type ""Task"" because I don't know for sure if this is a bug.

On 5.3 branch, HHH-13619 changed a query generated by {{ASTParserLoadingTest#testAggregatedJoinAlias}} for HQL:

{{select p.id, size( descendants ) from Animal p left outer join p.offspring descendants group by p.id}}

from:

{code:java}
    select
        animal0_.id as col_0_0_, 
        count(offspring1_.mother_id) as col_1_0_ 
    from
        Animal animal0_ 
    left outer join
        Animal offspring1_
            on animal0_.id=offspring1_.mother_id
    group by
        animal0_.id
{code}

to:

{code:java}
    select
        animal0_.id as col_0_0_,
        (select
            count(descendant2_.mother_id) 
        from
            Animal descendant2_ 
        where
            animal0_.id = descendant2_.mother_id) as col_1_0_ 
    from
        Animal animal0_ 
    left outer join
        Animal offspring1_ 
            on animal0_.id=offspring1_.mother_id 
    group by
        animal0_.id 
{code}

I did not check the ""before"" query on main branch, but the ""after"" queries are the same on main branch.

The test itself did not return any results, so I've create a PR that adds data and asserts that the results are correct:
https://github.com/hibernate/hibernate-orm/pull/3875

I confirmed that both the ""before"" and ""after"" queries work on H2 and Oracle.

I have a couple of concerns about this change in SQL:

1) The ""after"" query adds a subquery in the {{select}} clause and still includes the {{left outer join}}. I imagine that the added subquery could hurt performance.

2) Both the ""before"" and ""after"" queries have the same {{group by}} clause containing only {{animal0_.id}}. This is correct for the ""before"" query, because the other column in the {{select}} clause is the aggregation function call, {{count(offspring1_.mother_id)}}. In the ""after"" query, that second column is no longer an aggregation function call. I *think* this is OK, because the subquery only depends on {{animal0_.id}} from the outer query, and {{animal0_.id}} is in the {{group by}} clause. IOW, if there is more than one row for a {{animal0_.id}}, they will be duplicates that will be filtered out.

[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], what do you think about the change from the simpler ""before"" query to the more complex ""after"" query. Is it worth improving the resulting query?

Also, do you think that there might be dialects that would fail due to the subquery not being included in the {{group by}} clause?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-29T12:22:42.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),steve(steve),,,,,,,,0|104sr4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-26 13:42:05.342,,,,"26/mars/2021 06:42 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Is there a reason for the explicit join in the HQL?  Unless I am mistaken the query could be written as {{select p.id, size( p.offspring ) from Animal p group by p.id}} and there would be no SQL join.  And in fact, given that source query, the original (“before”) SQL is perfectly fine.  It is the join that causes the “trouble”.

I cannot say whether all databases will support this syntax.  But considering the test (I assume) already passes on all our test databases, I’d assume they all like the syntax itself.

The subquery is correlated.  The performance hit is really going to be a function of how large both the inner and outer datasets are.  For me, the general rule would be to prefer an uncorrelated subquery except for cases where the inner and outer datasets are pretty small. 

I’d actually argue that in terms of what they asked for, the original SQL was correct.  I think the query is just not asking what they want","26/mars/2021 09:40 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], I think the point of the test is to make sure that Hibernate gives correct results when an aggregate function is used with a join.

I agree there is no reason why the join would be required for this query.

This HQL:

{code:java}
select p.id, size( p.offspring ) from Animal p group by p.id
{code}

currently results in this SQL:

{code:java}
    select
        animal0_.id as col_0_0_,
        (select
            count(offspring1_.mother_id) 
        from
            Animal offspring1_ 
        where
            animal0_.id = offspring1_.mother_id) as col_1_0_ 
    from
        Animal animal0_ 
    group by
        animal0_.id 
{code}

I suppose a DBMS optimizer might be smart enough to convert the subquery to an outer join.

I would prefer to see the ""before"" SQL, but I'd like to get more opinions.

[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], [~accountid:557058:99e61e65-956b-4a21-b29c-06057642e9ea], WDYT about adding an issue (or just using this one) to optimize SQL generation to change the subquery back to on outer join in cases where it is appropriate?",29/mars/2021 06:26 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;My point though is that the join should effect the query.  It changes the question they are asking.  It’s no more “how many offspring does this Animal have” - now its “how many Animals are in this joined reference”.  See the difference?,"29/mars/2021 10:34 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], yes, I see what you mean. 

I'll add a test that puts a condition in the {{where}} clause that should affect the results. I'm guessing the result will be incorrect, but we will see...","29/mars/2021 12:24 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], thanks for raising that question! 

I've added a query to the test where {{size(descendants)}} does not take into account conditions on join(s) and pushed it to the PR.

I've renamed this issue to reflect the bug.","29/mars/2021 12:50 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], I've unassigned myself from this issue.

Who can I assign it to?",,,,,,,,,,,A faire,,
Create an equivalent of EntityManagerFactoryBasedFunctionalTest in org.hibernate.testing.orm.junit,HHH-14532,70902,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,25/mars/2021 15:40 PM,25/mars/2021 15:40 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Create an equivalent of EntityManagerFactoryBasedFunctionalTest in org.hibernate.testing.orm.junit and and remove org.hibernate.testing.junit5
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,jschatte(jschatte),,,,,,,,,0|104sqw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Improve the mapper-javabean loading API and common code,HSEARCH-4203,70901,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/mars/2021 07:18 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,07/mai/2021 05:37 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-javabean,mapper-pojo-base,,,0,,,,,,"First, we really should merge the way we configure loading for search and for massindexing. Having a single {{EntityLoadingStrategy}} type that handles the creation of search loaders **and** mass indexing loaders would be ideal.

Second, loading should be configured when creating the mapper, not when creating the session. We should assign loading strategies to entities when they are added to the mapping builder ({{org.hibernate.search.mapper.javabean.mapping.SearchMappingBuilder#addEntityType}}), and optionally allow users to pass session-specific context through {{LoadingOptions}}'s interceptors. {{LoadingOptions#registerLoader}} and {{LoadingOptions#massIndexingLoadingStrategy}} should disappear.

Third, ideally we should not expose loading-related APIs in mapper-pojo-base. We should have SPIs in mapper-pojo-base, with corresponding APIs and adapters in mapper-orm/mapper-javabean. See for example {{EntityLoadingTypeGroupStrategy}} or {{MassIndexingMonitor}}, but there are probably others.

Fourth, {{EntityLoadingTypeGroupStrategy}} is complex and dangerous, and should probably be moved to SPI. I wouldn’t expose it in the mapper-javabean API in particular.

Also, I would make the strategy global to the mapper, so that we can avoid having to depend on the {{typeContextProvider}} in  {{AbstractHibernateOrmLoadingStrategy}}, which leads to very dodgy code in {{HibernateOrmTypeContextContainer#init}}  (we pass to the type context builders a reference to the container while we are in the constructor of that container…).

There are also various details that could be improved:

* {{EntityLoader}} should accept a {{Deadline}}
* {{EntityLoadingTypeGroupStrategy}} should be {{EntityLoadingTypeGroupingStrategy}}, and the corresponding getter in {{EntityLoadingStrategy}} should be {{groupingStrategy}}, not {{groupStrategy}}.
* {{LoadingInvocationContext}} seems unnecessarily complex; why are there multiple {{proceed}} methods?
* {{JavaBeanSearchLoadingContext}} , when it looks for a loader/loadingStrategy, walks upwards through the type hierachy and picks the first loader/loadingStrategy it finds. See {{org.hibernate.search.mapper.javabean.loading.impl.JavaBeanSearchLoadingContext#createLoader}} for example. That’s… acceptable, I suppose, but should be done when the loaders/loadingStrategies are registered.
* The implementation {{org.hibernate.search.mapper.orm.loading.impl.HibernateOrmMassIndexingContext#entityIdentifier}} seems wrong, as it returns the entity ID instead of the ID used for indexing (which may be different if using {{@DocumentId}}). We should use the same implementation as in the JavaBean mapper.
* {{MassIndexingEntityLoadingStrategy}} should have a type parameter {{I}} for the type of identifiers, so that we can guarantee that the identifier scroll returns identifiers of the same type expected by the {{EntityLoader}}.
* {{HibernateOrmMassIndexingDocumentProducerInterceptor}} and {{HibernateOrmMassIndexingIdentifierProducerInterceptor}} share a lot of code related to transactions. We should factorize that.",,,,,,,,,,,,,,,,,,,HSEARCH-4180,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-07T09:00:13.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2564,0|1009cw:000000xdur3mhxzzzxezrt,,,,,,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test eventual consistency of outbox events in the wrong order,HSEARCH-4202,70900,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,24/mars/2021 19:25 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,20/mai/2021 02:53 AM,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"This can happen as ID generation is not transactional. We should be immune to it, i.e. we should reach consistency eventually. E.g.:

* An entity is created, updated, then deleted in separate transactions, but the delete event has ID 1, the update event has ID 2, and the add event has ID 3.
* An entity is deleted, then re-created in separate transactions, but the add event has ID 1, the and the delete event has ID 2.
* An entity is updated twice in two separate transactions, resulting in two events with different routing keys, but the second update event has ID 1, and the first update has ID 2.",,,,,,,,,,,,,,,,,,,HSEARCH-4134,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-20T00:41:50.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2579,0|104sqo:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
AbstractSharedSessionContract#currentHibernateTransaction is not always properly initialized leading to incorrect behaviour in Interceptors.,HHH-14531,70899,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Dave Stephan,557058:ad663ec6-aca9-4e2b-8f03-be4d40ecd171,Dave Stephan,557058:ad663ec6-aca9-4e2b-8f03-be4d40ecd171,24/mars/2021 15:21 PM,01/avr./2021 15:47 PM,14/mars/2022 12:54 PM,,5.3.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,hibernate-core,,,,0,,,,,,"In particular, this use case involves calling  {{EntityManager#close}} while a JTA {{Transaction}} is still active, then, later, committing that active {{Transaction}}. Also, {{hibernate.ejb.discard_pc_on_close == false}}, which is the default.

In some cases, the ""setRollbackOnly()"" method invoked in the beforeTransactionCompletion() method of a custom interceptor does not work as expected.

Logging shows:

o.h.e.t.internal.TransactionImpl - TransactionImpl created on closed Session/EntityManager

which leads to:

#setRollbackOnly called on a not-active transaction

This doesn't occur when the entity is an audited entity.

When there are no entities being audited at the time that SessionImpl#close is called, AbstractSharedSessionContract#currentHibernateTransaction is null.

Later, when SessionImpl#beforeTransactionCompletion is called on the closed SessionImpl, AbstractSharedSessionContract#accessTransaction initializes #currentHibernateTransaction to a new TransactionImpl. Since the SessionImpl is closed, TransactionImpl#transactionDriverControl does not get initialized and remains null.

SessionImpl#beforeTransactionCompletion passes #currentHibernateTransaction to CustomInterceptor#beforeTransactionCompletion. Later, when TransactionImpl#setRollbackOnly is called, TransactionImpl#isActive incorrectly finds that it is not active because TransactionImpl#transactionDriverControl is null. This is the reason why the underlying transaction does not get rolled back.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,dstephan(dstephan),gbadner(gbadner),,,,,,,,0|104sqg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-04-01 22:47:30.695,,,,"01/avr./2021 15:47 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;I discussed this issue with [~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c] [here|https://hibernate.zulipchat.com/#narrow/stream/132094-hibernate-orm-dev/topic/hibernate.2Eejb.2Ediscard_pc_on_close].

I'll summarize that conversation here.

It is not clear how Hibernate should behave in this case, because the {{org.hibernate.Transaction}} that is passed as an argument to {{Interceptor}} arguments, is defined by the life cycle of the {{EntityManager}}. Since the {{EntityManager}} is closed, the state of {{AbstractSharedSessionContract#currentHibernateTransaction}} is undocumented and untested.

Currently, if {{AbstractSharedSessionContract#currentHibernateTransaction}} was initialized somehow before calling {{EntityManager#close}}, then the use case would ""work""; if not, it will be ""broken"".

Some decisions need to be made about how this should be addressed.

1) Should Hibernate even support the use of  {{AbstractSharedSessionContract#currentHibernateTransaction}} after its {{Session}} or {{EntityManager}} is closed, or should some other more ""lightweight"" {{Transaction}} be provided instead?

2) Should Hibernate call {{Interceptor}} methods after a {{Session}} or {{EntityManager}} is closed?

3) Should {{IllegalStateException}} be thrown if any {{org.hibernate.Transaction}} method is called on a closed {{Session}} or {{EntityManager}}?

4) Are there specific cases that it will be supported (e.g., JTA only? JPA bootstrapped only? {{hibernate.ejb.discard_pc_on_close == false}} only?).

As a workaround, or, probably, a more appropriate solution is for an application to register its own {{Synchronization}} with the {{javax.transaction.Transaction}} obtained from the {{javax.transaction.TransactionManager}}, rather than relying on {{Interceptor}} methods being called after the {{Session}} or {{EntityManager}} is closed.",,,,,,,,,,,,,,,,A faire,,
Adding pre-parsed Binding<?> instance to MetadataSources,HHH-14530,70895,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/mars/2021 06:16 AM,30/avr./2021 05:14 AM,14/mars/2022 12:54 PM,15/avr./2021 05:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,hibernate-core,,,,0,,,,,,"MetadataSources currently allows adding {{orm.xml}}/{{hbm.xml}} files to be parsed, using their path or an input stream. It also exposes a {{XmlMappingBinderAccess}}, allowing us to parse such a file ourselves.

But it does not allow us to add that pre-parsed file to the metadata sources. That would be as easy as exposing a three-line method, and integrators would benefit from this because they would then be able to parse files ahead of time (i.e. at compile time) and to skip parsing at runtime.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-16T05:34:45.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3884,0|104spk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add optional JAXB-based orm.xml parsing as an alternative to dom4j-based parsing,HHH-14529,70894,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/mars/2021 06:10 AM,16/sept./2021 01:54 AM,14/mars/2022 12:54 PM,15/avr./2021 05:02 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,hibernate-core,,,,0,,,,,,"In Quarkus, we want to parse mapping files at compile time, so as to limit the overhead at runtime.

That means we need to serialize the Java representation of those mapping files. We already have the infrastructure for that (the {{BytecodeRecorder}}), but it only supports fairly straightforward POJOs with getters and setters.

In Hibernate ORM, {{hbm.xml}} files parsed with JAXB have an intermediary POJO representation that can easily be serialized. But {{orm.xml}} files are parsed with dom4j and represented as {{org.dom4j.Document}} instances, which are not straightforward at all and cannot be serialized by the {{BytecodeRecorder}}.

To solve this, I would like would be to convert the {{orm.xml}} parsing code to use JAXB instead of dom4j, and to generate fairly straightforward POJOs instead of just a {{org.dom4j.Document}}. Essentially the same as what we currently do with JAXB.

As a bonus, this would be a good first step towards getting rid of dom4j (HHH-13703).

Note that I do not intend to change the rather obscure way these {{orm.xml}} mappings are applied internally (using ""fake"", generated Java annotations); that's another problem entirely (HHH-10176).",,,,,,,,,,,,,HHH-14827,,,,,,HHH-9490,,,,,HHH-14530,,,,,,,,,,,,"{repository={count=19, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":19,""lastUpdated"":""2021-04-19T01:06:29.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":19,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3884,0|104spc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
add support in QueryHints for synchronizedEntityClass,HHH-14528,70893,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Matej Spiller,5a9fb4b52647632a1feba4b5,Matej Spiller,5a9fb4b52647632a1feba4b5,24/mars/2021 03:33 AM,24/mars/2021 03:35 AM,14/mars/2022 12:54 PM,,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"When doing native queries (for insert or update) there is a problem because whole L2 cache is flushed every time. 

To mitigate this you can use addSynchronizedEntityClass: 
nativeQuery.unwrap(NativeQuery.class).addSynchronizedEntityClass(FeeCollectionHistoryJPA.class);

Problem with this approach is that you cannot do that using plain JPA.
For example when using spring data repository you cannot call this method from interface.

That's why I suggest to implement this functionality ALSO using QueryHints.
This would make more ""standard"" approach for not invalidating unrelated cache.

{code:java}
@Repository
public interface ReportRepositoryJPA extends CrudRepository<ReportJPA, String> {

    @QueryHints({ @QueryHint(name = ""org.hibernate.cacheable"", value =""true"") })
    List<ReportJPA> findAllByTransactionId(String transactionId);

    @Modifying
    @Query(value=""INSERT INTO REPORT "" +
            ""(ID, TYPE, CURRENCY_ID, AMOUNT, TIMESTAMP) VALUES "" +
            ""(:id, :type, :currencyId, :currencyAmount, :timestamp) ON DUPLICATE KEY UPDATE "" +
            ""AMOUNT=AMOUNT+:currencyAmount"", nativeQuery=true)
    void incrementForCurrency(
            @Param(""id"")String id,
            @Param(""type"")String type,
            @Param(""currencyId"")String currencyId,
            @Param(""currencyAmount"")BigDecimal currencyAmount,
            @Param(""timestamp"") Instant timestamp
    );

}
{code}
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:2aaeefd2-6020-439a-aa79-8e28f13d6abc(ug:2aaeefd2-6020-439a-aa79-8e28f13d6abc),,,,,,,,,0|104sp4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"24/mars/2021 03:35 AM;5a9fb4b52647632a1feba4b5;for example:

{{@QueryHints({ @QueryHint(name = ""org.hibernate.synchronizedEntityClasses"", value =""net.sample.ReportJPA"")})}}",,,,,,,,,,,,,,,,A faire,,
EntityGraph + Stream Query returns too many results,HHH-14527,70892,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Jakob Joachim,5b4c901fbdb143114a16c5d3,Jakob Joachim,5b4c901fbdb143114a16c5d3,24/mars/2021 02:41 AM,24/mars/2021 03:30 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"When using an EntityGraph and a stream query, the entities contained in the root entity need to be returned by the SQL in adjacent rows. When this is not the case (for example by using `orderBy`) the repository call will return one result for each line in the resulting SQL


Example:

{code:java}@Entity
public class SomeEntity {
  @Id
  private Integer id;

  @OneToMany
  @OrderBy
  private List<AnotherEntity> someOrderedValues;

  ...
}

@Entity
public class AnotherEntity {
  @Id
  private Integer id;

  ...
}{code}


We have two Objects in the database (H2, JSON just for ease of overview):


{code:json}{
    ""id"": 5,
    ""someOrderedValue"": [{
         ""id"": 1
    }, {
         ""id"": 3
    }]
}

{
    ""id"": 6,
    ""someOrderedValue"": [{
         ""id"": 2
    }, {
         ""id"": 4
    }]
}{code}


When we call the repository the SQL will look something like this:


{code:sql}select someentity0_.id                     as id1_1_0_,
       anotherent2_.id                     as id1_0_1_,
       someordere1_.some_entity_id         as some_ent1_2_0__,
       someordere1_.some_ordered_values_id as some_ord2_2_0__
from some_entity someentity0_
         left outer join some_entity_some_ordered_values someordere1_
                         on someentity0_.id = someordere1_.some_entity_id
         left outer join another_entity anotherent2_
                         on someordere1_.some_ordered_values_id = anotherent2_.id
where someentity0_.id in (5, 6)
order by anotherent2_.id asc{code}


Resulting in the following:

| |someentity0_.id|anotherent2_.id|someordere1_.some_entity_id|someordere1_.some_ordered_values_id|
|1|5|1|5|1|
|2|6|2|6|2|
|3|5|3|5|3|
|4|6|4|6|4|

Because we are streaming the results we get 4 results (one for each line) because as soon as the cursor finds a new entity it will return the current one. When a `groupById` is added to the Repository method everything will work correctly (line 2 and 3 are swapped in the table).
When using `List` instead of `Stream` in the Repository Method everything will work correctly as well.

This problem is present when using Stream + EntityGraph in situations where the SQL doesn't return the entities in adjacent rows.

I created a test case showcasing the problem here: [https://github.com/jakobjoachim/StreamEntityGraphBug|https://github.com/jakobjoachim/StreamEntityGraphBug]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:6b8907a4-f666-424b-8698-c9a7dabe62b1(ug:6b8907a4-f666-424b-8698-c9a7dabe62b1),,,,,,,,,0|104sow:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Upgrade to Elasticsearch 7.12,HSEARCH-4201,70891,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/mars/2021 00:38 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,29/avr./2021 08:24 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,[https://www.elastic.co/blog/whats-new-elasticsearch-7-12-0-put-a-search-box-on-s3|https://www.elastic.co/blog/whats-new-elasticsearch-7-12-0-put-a-search-box-on-s3],,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-29T08:25:36.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2563,0|1009cw:000000xdur3mhxzzzxezri,,,,,,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Problem with InheritanceType.JOINED without own subtable,HHH-14526,70890,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Vladimir Popugin,557058:84a58213-b3ad-4556-b8b3-1badedb6154b,Vladimir Popugin,557058:84a58213-b3ad-4556-b8b3-1badedb6154b,23/mars/2021 20:41 PM,23/mars/2021 20:42 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,,,"*Summary:*
Problem with mapping 4 classes into 3 tables.

When I use “hbm.xml” for mapping it works fine.
But when I use annotations for mapping it does not work.

We tried using solution from discourse but it does not work (Test ignored with error ""Foreign key circularity dependency involving the following tables: DATA_TYPE, DATA_TYPE"")
If I try to use SimpleType without @Table(name=""DATA_TYPE"") then test passed but created extra table SimpleType

*Detailed description*: [https://discourse.hibernate.org/t/inheritancetype-joined-without-own-subtable/5207|https://discourse.hibernate.org/t/inheritancetype-joined-without-own-subtable/5207]

*Tables*:

{code:java}DATA_TYPE
id number;
name varchar2;
supertype_id number;{code}

{code:java}OBJECT_TYPE
type_id number (foreign key to DATA_TYPE.id)
desc varchar2;{code}

{code:java}PROP
id number;
obj_type_id number (foreign key to OBJECT_TYPE.type_id)
name varchar2;{code}

*Classes:*

{code:java}@Entity
@Table(name = ""DATA_TYPE"")
@Inheritance(strategy = InheritanceType.JOINED)
@DiscriminatorColumn(name = ""supertype_id"")
public abstract class DataType {

    private Long id;
    private String name;

    @Id
    @Column(name = ""ID"")
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = ""name"")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}{code}

{code:java}@Entity
@DiscriminatorValue(""2"")
public class SimpleType extends DataType {
}{code}

{code:java}@Entity
@DiscriminatorValue(""8"")
@Table(name = ""OBJ_TYPE"")
@PrimaryKeyJoinColumn(name = ""TYPE_ID"")
public class ObjectType extends DataType {

    private String description;
    private List<Prop> properties;

    @Column(name = ""desc"", table = ""OBJ_TYPE"")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @OneToMany(mappedBy = ""objectType"", cascade = CascadeType.ALL, orphanRemoval = true)
    public List<Prop> getProperties() {
        return properties;
    }

    public void setProperties(List<Prop> properties) {
        this.properties = properties;
    }
}{code}

{code:java}@Entity
@Table(name = ""PROP"")
public class Prop {

    private Long id;
    private String name;
    private ObjectType objectType;

    @Id
    @Column(name = ""ID"")
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Column(name = ""name"")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @JoinColumn(name = ""OBJ_TYPE_ID"",
            referencedColumnName = ""TYPE_ID"",
            foreignKey = @ForeignKey(
                    name = ""PROP_OBJ_FK"",
                    value = ConstraintMode.CONSTRAINT
            ))
    @ManyToOne(targetEntity = ObjectType.class)
    public ObjectType getObjectType() {
        return objectType;
    }

    public void setObjectType(ObjectType objectType) {
        this.objectType = objectType;
    }
}{code}

But when i tried to setup this configuration, it breaks, because it could not find table for SimpleType.

DataType.hbm.xml:

{code:java}<class name=""DataType"" table=""DATA_TYPE"" abstract=""true"" lazy=""false"" >
    <id name=""id"" column=""ID"" type=""long"">
        <generator class=""native"">
            <param name=""sequence_name"">SEQ</param>
        </generator>
    </id>
    <discriminator formula=""SUPER_TYPE_ID""/>
    <property name=""supertypeId"" column=""SUPER_TYPE_ID""/>
    <property name=""name"" column=""NAME""/>
    
    <subclass name=""SimpleType"" discriminator-value=""2""/>

    <subclass name=""ObjectType"" discriminator-value=""8"">
        <property name=""description"" column=""desc""/>
        <set name=""properties"" table=""PROP"" inverse=""true"" cascade=""all-delete-orphan"">
            <key>
                <column name=""OBJ_TYPE_ID"" />
            </key>
            <one-to-many class=""Prop"" />
        </set>
        <join table=""OBJ_TYPE"">
            <key column=""TYPE_ID""/>
        </join>
    </subclass>

</class>

<class name=""Prop"" table=""PROP"">
    <id name=""id"" column=""ID"" type=""long"">
        <generator class=""native"">
            <param name=""sequence_name"">SEQ</param>
        </generator>
    </id>
    <property name=""name"" column=""NAME""/>
    <many-to-one name=""objectType"" class=""ObjectType"" column=""OBJ_TYPE_ID"" fetch=""join""/>
</class>{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,23/mars/2021 20:40 PM;ug:0bbed1e4-ae88-4d8f-926a-c5d5f64f06b9;ORMUnitTestCase.java;https://hibernate.atlassian.net/secure/attachment/49847/ORMUnitTestCase.java,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:0bbed1e4-ae88-4d8f-926a-c5d5f64f06b9(ug:0bbed1e4-ae88-4d8f-926a-c5d5f64f06b9),,,,,,,,,0|104soo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Omit inner joins for SUBSELECT fetch for assocation defined at the leaf of JOINED inheritance hierarchy,HHH-14525,70889,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ancien utilisateur,557058:dde519e7-180d-44ff-847c-c33e8b81dfed,Ancien utilisateur,557058:dde519e7-180d-44ff-847c-c33e8b81dfed,23/mars/2021 15:20 PM,25/mars/2021 05:02 AM,14/mars/2022 12:54 PM,,5.3.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,hibernate-core,,,,0,,,,,,"An association defined at the leaf of a {{JOINED}} inheritance hierarchy is resulting in unnecessary inner joins with the superclasses in a {{SUBSELECT}} fetch scenario. In the below, the {{inner join}} clauses do not filter the result set since the association is defined at the leaf rather than in the superclasses.

{code:sql}
    select
        x.property1, ...
    from
        X x
    where
        x.fk in (
            select c.id 
            from C c 
            inner join B b on c.id=b.id
            inner join A a on c.id=a.id 
            where c.something=?
        )
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,rk:48cce108-8c15-4d42-bb37-957c689ecc3c(rk:48cce108-8c15-4d42-bb37-957c689ecc3c),christian.beikov(christian.beikov),gbadner(gbadner),steve(steve),,,,,,0|104sog:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-23 23:47:32.127,,,,"23/mars/2021 16:47 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;[~accountid:557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c], [~accountid:557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a], I've tentatively set the fix version to 6-wishlist. Please adjust as you see fit.","24/mars/2021 06:24 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Just for reference, I wanted to point out that according to the following article, not all databases optimize away inner joins of non-nullable FKs: [https://blog.jooq.org/2017/09/28/10-cool-sql-optimisations-that-do-not-depend-on-the-cost-model/#top3|https://blog.jooq.org/2017/09/28/10-cool-sql-optimisations-that-do-not-depend-on-the-cost-model/#top3]

I read that PostgreSQL has some difficulties to do this in their query planner, so this won’t change anytime soon. ","25/mars/2021 05:02 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;I’m actually curious if this might be already handled in 6 with the way we only add joins for secondary tables only when referenced.  We do still (always) include the root table, but including those secondary tables is conditional.  Speaking specifically about the initial query which is used as the basis for the subquery.

If the request is to somehow mutate that initial query to create the subquery (e.g. re-analyze the query to make the subselect-fetch-queue entry), I am very much against this.

If the request is to drop the root table,  I am very much against this.

If the request is to drop unnecessary intermediate joins, that is reasonable.  Though like I said, that may already be handled on 6.",,,,,,,,,,,,,,A faire,,
Rename SqlType(X) as JdbcType(X),HHH-14524,70888,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,23/mars/2021 09:13 AM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,23/mars/2021 17:39 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,,,,,0,trello:6058a21af3947b4251e6e4da,,,,,https://github.com/hibernate/hibernate-orm/discussions/3856,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-29T09:46:21.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104so8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Spatial Update Z axis of a org.locationtech.jts.geom.Point on Postgis,HHH-14523,70887,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,Corrigé,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,blue system,6058bbbf6bb16c006910f143,blue system,6058bbbf6bb16c006910f143,23/mars/2021 04:57 AM,27/juil./2021 21:59 PM,14/mars/2022 12:54 PM,06/avr./2021 11:42 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.31,5.5.0.Alpha1,,,,,,,,hibernate-spatial,,,,0,hibernate,spatial,,,,"Hi,
I use Hibernate spatial to work with Postgis.

When I try to update the Z axis of a org.locationtech.jts.geom.Point Hibernate not update the DB
If I also update any other property of my Entity or if I update X or Y axis of the Point the DB table is updated correctly.
If I try to insert new row using the same method (the JPA save) it work without problem

I think that Hibernate entity manager does not catch the change and not merge the DB.

I use a workaround and every time that I do a save i change a timestamp field and it works.
But I must to do this workaround manual because iI can't use the PreUpdate listener because it is not invoked if I change only the Z of the Point field.","spring boot 2.4.2
hibernate-spatial 5.4.30.Final
Postgis 2.5",,,,,,,,,,,HHH-14757,,,,,,,,,,,,,,,,,24/mars/2021 12:45 PM;maeseka;testcase.tgz;https://hibernate.atlassian.net/secure/attachment/49848/testcase.tgz,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-19T08:58:31.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,ug:0db893e5-05df-492f-8bc7-47a9020d47e7(ug:0db893e5-05df-492f-8bc7-47a9020d47e7),maeseka(maeseka),,,,,,,,0|104so0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-23 20:54:15.664,,,,"23/mars/2021 13:54 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;How exactly do you set the X/Y-coordinates, and how the Z-coordinate? I can't immediately see a change in behavior.","24/mars/2021 02:18 AM;6058bbbf6bb16c006910f143;Hi, thanks for your reply.

I add my dependencies:

{noformat}implementation('org.springframework.boot:spring-boot-starter-json')		
implementation('org.springframework.boot:spring-boot-starter')
implementation('org.springframework.boot:spring-boot-starter-data-jpa')
implementation('org.springframework.boot:spring-boot-starter-web')
developmentOnly('org.springframework.boot:spring-boot-devtools')

implementation('org.hibernate:hibernate-spatial:5.4.30.Final')
implementation('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.12.2')
implementation ('org.n52.jackson:jackson-datatype-jts:1.2.8') //for deserialize JSON geometries
implementation('org.locationtech.jts:jts-core:1.18.0')
implementation('org.locationtech.jts.io:jts-io-common:1.18.0')
implementation group: 'org.locationtech.jts', name: 'jts-io', version: '1.18.0', ext: 'pom'
implementation group: 'org.locationtech.jts', name: 'jts', version: '1.18.0', ext: 'pom'{noformat}

Suppose that I have a table in Postgres like this:

{noformat}id bigint,
geom geometry(PointZ,32632),
uid character varying COLLATE pg_catalog.""default""{noformat}

And suppose that I have a row inside the table that contains this data:

{noformat}id = 9,
geom = ""01010000A0787F0000038706184C4A0B40E1F61D268EE208404FAF946588E30440"",
uid = ""radar 5""{noformat}

The geom represents a POINT Z with this values:

""POINT Z (3.41127795 3.11062269 2.6111)""

Also I have a entity on spring JPA like this:

{noformat}@Entity
@Table(name = ""radar"")@SequenceGenerator(name = ""radar_id_seq"", sequenceName = ""radar_id_seq"", allocationSize = 1)
public class RadarAnchor implements Serializable {private static final long serialVersionUID = 1L;
@Id
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = ""radar_id_seq"")
@Column(name = ""id"")
private Long id;

@Column(name = ""uid"", unique = true)
private String uid;

@Column(name = ""geom"")
private Point geom;

//...constructors, getter and settet{noformat}

And I have the jpa repo also.

I use the JTSModule to deserialize data and it works correctly: 

{noformat}	ObjectMapper mapper = ((MappingJackson2HttpMessageConverter) converter).getObjectMapper();
	mapper.registerModule(new JtsModule(GeomUtils.geometryFactory));{noformat}

if I do a simple insert using JPA save it works, for example:

I receive a JSON message like this:

{noformat}  ""id"": 10,
  ""uid"": ""radar 6"",
  ""geom"": {
    ""type"": ""Point"",
    ""coordinates"": [
        6.415454,
        6.11545,
        4.6111
    ]
  }{noformat}

and I do a repo.save(entity) the returned entity is correct and the db row is succesfully insert.

Also if i try to update the row with id=9 and change Z axis and another axis, for example:

{noformat}  ""id"": 9,
  ""uid"": ""radar 5"",
  ""geom"": {
    ""type"": ""Point"",
    ""coordinates"": [
      3.41127795,
      8.11062269,
      8.6111
    ]
  }{noformat}

and I do a repo.save(entity) the returned entity is correct and the db row is succesfully updated.



Also if i try to update the row with id=9 and change Z axis and another field, for example:

{noformat}  ""id"": 9,
  ""uid"": ""radar 5 bis"",
  ""geom"": {
    ""type"": ""Point"",
    ""coordinates"": [
      3.41127795,
      3.11062269,
      7.6111
    ]
  }{noformat}

and I do a repo.save(entity) the returned entity is correct and the db row is succesfully updated.

But if I try to update only the Z axis like this:

{code:json}  ""id"": 9,
  ""uid"": ""radar 5"",
  ""geom"": {
    ""type"": ""Point"",
    ""coordinates"": [
      3.41127795,
      3.11062269,
      5.6111
    ]
  }{code}

and I do a repo.save(entity) the returned entity is correct but the db row is not updated.

I have seen using debug options that the Hibernate Entity manager not do the merge if I change only the Z axis but the entity returned by the save method return the correct values, I think it not catch the change in the persistence context.","24/mars/2021 12:46 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;I can't reproduce the bug. I've tried but Hibernate works as expected.  See the attached test case [^testcase.tgz]

I suspect you have an issue with the Hibernate life-cycle, rather than with Hibernate itself. If you reproduce the error in the above test case, load that up so we can further investigate","24/mars/2021 13:29 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;Right after I wrote this, I noticed I didn't property implement the test. So, yes now I can reproduce. I'm investigating the issue","24/mars/2021 13:55 PM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;Problem diagnosed. The problem is that the dirty checking actually relies on equalsExact(other, tolerance) which only compares the Points in 2D. Hence the problem you see.

I'll see how we can customize the dirty checking for JTS Geometries. ","25/mars/2021 00:37 AM;6058bbbf6bb16c006910f143;Ok Karel, If you have some news or good work around please send me.

Thank you so much for helping me",,,,,,,,,,,Terminé,,
Range fields and predicates for these fields,HSEARCH-4199,70886,,Nouvelle fonctionnalité,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/mars/2021 03:53 AM,14/juin/2021 01:57 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.4-backlog,,,,,,,,,backend-elasticsearch,backend-lucene,query,,0,,,,,,"When indexing a range in a document, searching for all documents whose range contains a given value does not perform very well: we have to run a query such as {{rangeStart <= myValue && myValue <= rangeEnd}}. Either clause potentially returns a large subset of documents, so computing the intersection can be very resource intensive and lead to poor performance.

See [this example|https://infinispan.zulipchat.com/#narrow/stream/118645-infinispan/topic/RemoteIndexedQuery/near/231443721] (in Infinispan)

Lucene has dedicated field types and queries that presumably perform better, since they are specialized:

* {{org.apache.lucene.document.IntRange}}
* {{org.apache.lucene.document.LongRange}}
* {{org.apache.lucene.document.DoubleRange}}
* etc.

We should expose range field types, with the corresponding predicates (contains a given value/range, intersects a given range, etc.).

On the mapper side, we could use the {{Range<T>}} util type we already have in Hibernate Search.

I think we only need to support one dimension, even if Lucene supports up to 4 dimensions.

Elasticsearch also exposes this feature: https://www.elastic.co/guide/en/elasticsearch/reference/current/range.html",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104sns:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Transactional outbox event creation with Spring and JTA,HSEARCH-4198,70885,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,23/mars/2021 01:53 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,18/mai/2021 05:07 AM,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"When JTA is enabled with Spring, the {{shouldReleaseBeforeCompletion}} strategy is used by default. This does not allow the outbox to work properly, since the session is closed when we try to persist the outbox entities.

We already work around it to some extent; see {{org.hibernate.search.mapper.orm.session.impl.HibernateOrmSearchSessionHolder#get}}.",,,,,,,,,,,,,,,,,,,HSEARCH-4134,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-18T04:57:55.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2574,0|104snk:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,2021-04-19 07:12:50.906,,,,23/mars/2021 02:03 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;comment removed,"19/avr./2021 00:12 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;One idea: since we’re pushing entity events in the same transaction, we could do it earlier, on flush. We’re pretty sure the session is still open at that point.

I believe we would just need to modifiy {{org.hibernate.search.mapper.orm.event.impl.HibernateSearchEventListener#onFlush}} to trigger a {{executeAndSynchronize}} when no transaction is in progress (as currently) *OR* when the automatic indexing strategy is transactional (we have that information, see {{enlistsInTransaction}} in {{org.hibernate.search.mapper.orm.automaticindexing.spi.AutomaticIndexingConfigurationContext#sendIndexingEventsTo}}.",,,,,,,,,,,,,,,Terminé,,
Add spatial dialect for MariaDB 10.3 and later. ,HHH-14522,70884,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Doublon,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Nicklas Wallgren,5cd3ce6cf348990dbc3c13f8,Nicklas Wallgren,5cd3ce6cf348990dbc3c13f8,22/mars/2021 08:03 AM,22/mars/2021 10:25 AM,14/mars/2022 12:54 PM,22/mars/2021 10:25 AM,5.4.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-spatial,,,,0,hibernate,,,,,Implemented a new Spatial dialect for MariaDB 10.3 and later.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-22T10:23:43.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,22/mars/2021 00:00 AM,,,,true,0.0,maeseka(maeseka),ug:0335c9b5-1bb7-406e-902d-60c89ad2b6a1(ug:0335c9b5-1bb7-406e-902d-60c89ad2b6a1),,,,,,,https://hibernate.atlassian.net/browse/HHH-14522,0|104snc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-22 17:25:21.193,,,,22/mars/2021 08:15 AM;5cd3ce6cf348990dbc3c13f8;Duplicate of [https://hibernate.atlassian.net/browse/HHH-14090|https://hibernate.atlassian.net/browse/HHH-14090|smart-link] ,22/mars/2021 10:25 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;Duplicate of HHH-14090,,,,,,,,,,,,,,,Terminé,,
Auto evict collection cache always evict entire region for XML mapping entities,HHH-14521,70883,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Petr Abrahamczik,605044d1009fee006921a4d3,Petr Abrahamczik,605044d1009fee006921a4d3,22/mars/2021 06:30 AM,22/mars/2021 07:55 AM,14/mars/2022 12:54 PM,,5.2.18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"We have entities mapped with hbm.xml files (not with annotations) and enabled the auto_evict_collection_cache property. When the collection entity is inserted or deleted, it's always invalidated entire cache region, not only a collection which was changed.

For non transactional cache the region is invalidated, it is not an optimal solution, but functional.

But for transactional Infinispan cache the entire region eviction is not implemented. The problem with transactional cache will be resolved by this issue and HHH-14514.
","Hibernate 5.2.18
Infinispan 8.2.11
DB2
Java 8
Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-22T07:41:44.000-0700"",""stateCount"":2,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:5907d7a2-229b-4844-bdd6-9442518f42fd(ug:5907d7a2-229b-4844-bdd6-9442518f42fd),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3854,0|104sn4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"22/mars/2021 07:55 AM;605044d1009fee006921a4d3;I also made a pull request for branch 5.2 

[https://github.com/hibernate/hibernate-orm/pull/3857|https://github.com/hibernate/hibernate-orm/pull/3857] ",,,,,,,,,,,,,,,,A faire,,
LocalDateTime Conversion to Java.util.Date,HHH-14520,70882,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Suyash Saurabh,60585b98557b950068573cb5,Suyash Saurabh,60585b98557b950068573cb5,22/mars/2021 02:01 AM,22/mars/2021 02:19 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"LocalDateTime convering to java.util.Date and that value is saved in sqlite sometime gives value 1 year ahead sometime 200 years ahead values.

I am trying to sync data from server to app and app saved the data in sqlite as INTEGER. when app checks sometime value visible in app is 1 year ahead sometime it is 200 years ahead.

for example:

date sent through server is:

\{
""year"":2021,
""month"":""MARCH"",
""monthValue"":3,
""dayOfMonth"":18,
""hour"":19,
""minute"":44,
""second"":19,
""nano"":0,
""dayOfWeek"":""THURSDAY"",
""dayOfYear"":77,
""chronology"":\{
""calendarType"":""iso8601"",
""id"":""ISO""
}
}



but when synced back from app its showing:

\{
        ""year"":2220,
        ""month"":""MARCH"",
        ""monthValue"":3,
        ""dayOfMonth"":21,
        ""hour"":9,
        ""minute"":44,
        ""second"":19,
        ""nano"":0,
        ""dayOfWeek"":""TUESDAY"",
        ""dayOfYear"":81,
        ""chronology"":\{
           ""calendarType"":""iso8601"",
           ""id"":""ISO""
        }
     }",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:14eec6a4-f062-48e1-a16f-b0a2e4e50a23(ug:14eec6a4-f062-48e1-a16f-b0a2e4e50a23),yrodiere(fenrhil),,,,,,,,0|104smw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-22 09:19:17.489,,,,"22/mars/2021 02:19 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Hello,

Please don’t assign me to tickets like that, it’s a bit rude. Just mention me in a comment if you need my attention.

Can you provide a reproducer? See [https://github.com/hibernate/hibernate-test-case-templates/tree/main/orm|https://github.com/hibernate/hibernate-test-case-templates/tree/main/orm|smart-link] ",,,,,,,,,,,,,,,,A faire,,
Misleading error message when unable to resolve table name,HHH-14519,70881,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Tassilo Karge,557058:b20aaa04-c8aa-4676-a6ab-142142e7f81c,Tassilo Karge,557058:b20aaa04-c8aa-4676-a6ab-142142e7f81c,21/mars/2021 06:08 AM,21/mars/2021 06:08 AM,14/mars/2022 12:54 PM,,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"The error message says ""must not be null"" when there is actually an empty string for a column name or it cannot resolve the identifier for other reasons. (See PR, it is self-explanatory. this issue is so that the issue bot is satisfied to find an associated issue number)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-21T06:11:55.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:36d3b3c1-7f2a-4bd4-bfe8-434134c4bb8d(ug:36d3b3c1-7f2a-4bd4-bfe8-434134c4bb8d),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3754,0|104smo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
App Mapping fail when there is class with multiple @Id,HSEARCH-4197,70880,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Blocage,Rejected,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Olivier,70121:7b7b474c-df00-499c-b954-ad93dd0dc81d,Olivier,70121:7b7b474c-df00-499c-b954-ad93dd0dc81d,19/mars/2021 08:40 AM,20/avr./2021 02:05 AM,14/mars/2022 12:54 PM,20/avr./2021 02:05 AM,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,mapper-orm,,,,0,,,,,,"1/ Everything is ok with Hibernate Search 5.x
2/ migrate to 6.0.2 final generate this error :

Caused by: org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]

with UserPush class *not Indexed* :
 
{code:java}
@Id
    @Column(name = ""imei"", nullable = false, length = 255, insertable = false, updatable = false)
    private String            imei;

    @Id
    @Column(name = ""push_type"", nullable = false)
    @Enumerated(EnumType.ORDINAL)
    private PushType          pushType;

    @ManyToOne()
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = ""user_id"", referencedColumnName = ""id"", nullable = false)
    private User              user;
{code}

*NB : if i comment // @Id on imei property... it's fail on the next table with multiple @Id even if i didn't use these tables on a related on which is @Indexed*

After one day of searching a solution... i came back to hibernate search 5.x 


May be i miss something in my configuration...


Thanks for your help


The complete exception :
_
{code:java}
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:132)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:123)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:244)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)
	at java.util.Iterator.forEachRemaining(Iterator.java:116)
	at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)
	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:141)
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:98)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'restConfig': Unsatisfied dependency expressed through field 'global'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'global' defined in file [/Users/meekado/git/rfserver/bin/main/net/octoplus/server/config/Global.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'propertyServiceImpl': Unsatisfied dependency expressed through field 'propertyDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hibernatePropertyDao': Unsatisfied dependency expressed through field 'octoplusDBSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'octoplusDBSessionFactory' defined in net.octoplus.rfserver.config.DbConfig: Invocation of init method failed; nested exception is org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)
	... 46 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'global' defined in file [/Users/meekado/git/rfserver/bin/main/net/octoplus/server/config/Global.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'propertyServiceImpl': Unsatisfied dependency expressed through field 'propertyDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hibernatePropertyDao': Unsatisfied dependency expressed through field 'octoplusDBSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'octoplusDBSessionFactory' defined in net.octoplus.rfserver.config.DbConfig: Invocation of init method failed; nested exception is org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:799)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:228)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1361)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1208)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:556)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:657)
	... 66 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'propertyServiceImpl': Unsatisfied dependency expressed through field 'propertyDao'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hibernatePropertyDao': Unsatisfied dependency expressed through field 'octoplusDBSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'octoplusDBSessionFactory' defined in net.octoplus.rfserver.config.DbConfig: Invocation of init method failed; nested exception is org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:886)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:790)
	... 79 more
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hibernatePropertyDao': Unsatisfied dependency expressed through field 'octoplusDBSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'octoplusDBSessionFactory' defined in net.octoplus.rfserver.config.DbConfig: Invocation of init method failed; nested exception is org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:660)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1425)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:657)
	... 94 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'octoplusDBSessionFactory' defined in net.octoplus.rfserver.config.DbConfig: Invocation of init method failed; nested exception is org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1799)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:657)
	... 108 more
Caused by: org.hibernate.MappingException: property [imei] not found on entity [net.octoplus.db.UserPush]
	at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:514)
	at org.hibernate.mapping.PersistentClass.getProperty(PersistentClass.java:525)
	at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.resolveMappedByPath(HibernateOrmMetatadaContributor.java:226)
	at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.collectPropertyMetadataContributors(HibernateOrmMetatadaContributor.java:138)
	at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.collectPropertyDelegates(HibernateOrmMetatadaContributor.java:115)
	at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.configure(HibernateOrmMetatadaContributor.java:67)
	at org.hibernate.search.mapper.pojo.mapping.spi.AbstractPojoMappingInitiator.configure(AbstractPojoMappingInitiator.java:120)
	at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMappingInitiator.configure(HibernateOrmMappingInitiator.java:113)
	at org.hibernate.search.engine.common.impl.SearchIntegrationBuilderImpl$MappingBuildingState.collect(SearchIntegrationBuilderImpl.java:342)
	at org.hibernate.search.engine.common.impl.SearchIntegrationBuilderImpl.prepareBuild(SearchIntegrationBuilderImpl.java:217)
	at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.doBootFirstPhase(HibernateOrmIntegrationBooterImpl.java:259)
	at org.hibernate.search.mapper.orm.bootstrap.spi.HibernateOrmIntegrationBooterBehavior.bootFirstPhase(HibernateOrmIntegrationBooterBehavior.java:17)
	at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.lambda$bootNow$7(HibernateOrmIntegrationBooterImpl.java:218)
	at java.util.Optional.orElseGet(Optional.java:267)
	at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateOrmIntegrationBooterImpl.bootNow(HibernateOrmIntegrationBooterImpl.java:218)
	at java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:602)
	at java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:577)
	at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)
	at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)
	at org.hibernate.search.mapper.orm.bootstrap.impl.HibernateSearchSessionFactoryObserver.sessionFactoryCreated(HibernateSearchSessionFactoryObserver.java:41)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:385)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:468)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:708)
	at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)
	at org.springframework.orm.hibernate5.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:616)
	at org.springframework.orm.hibernate5.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1858)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795)
	... 118 more

{code}
_
",Spring boot 2.3.9 or 2.4.4. Hibernate 5.4.28 spring-orm,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,fercoli(fercoli),ug:3bef361c-b595-4a68-ac63-aa3def900bbe(ug:3bef361c-b595-4a68-ac63-aa3def900bbe),yrodiere(fenrhil),,,,,,,0|1009cw:000000xdur3mhxzzzx1,,,,,,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,2021-03-23 10:23:53.491,,,,"23/mars/2021 03:23 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Thanks for the report, [~accountid:70121:7b7b474c-df00-499c-b954-ad93dd0dc81d] . [~accountid:557058:097eae70-1c75-4c16-ab75-ab9600f8e584] is going to have a look ASAP.","25/mars/2021 08:36 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;Hi [~accountid:70121:7b7b474c-df00-499c-b954-ad93dd0dc81d],

I’m trying to reproduce the case. I would like to know more about the mapping.

For instance, is the multiple @Id here mapped with an id class or an embedded id? Maybe you can post both the entities: {{UserPush}} and {{User}}.

Thanks","25/mars/2021 09:15 AM;70121:7b7b474c-df00-499c-b954-ad93dd0dc81d;Hi fabio,

there’s no @Id on  User entity field of UserPush ( cf. pb description )


actually , there’s no reference on User entity to UserPush (no @OneToMany List<UserPush) or something else )

problem occurs in every entity’s with multiple @Id

{{at org.hibernate.search.mapper.orm.mapping.impl.HibernateOrmMetatadaContributor.resolveMappedByPath(HibernateOrmMetatadaContributor.java:226)}} fail when it try to find a property name on entity with multiple @id","25/mars/2021 09:20 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;Can I ask you the full code of the classes: UserPush and User?

Thanks",25/mars/2021 09:24 AM;70121:7b7b474c-df00-499c-b954-ad93dd0dc81d;how can i send it directly to you ?,25/mars/2021 09:27 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;Sure you can send them to [fabio@hibernate.org|mailto:fabio@hibernate.org],25/mars/2021 09:29 AM;70121:7b7b474c-df00-499c-b954-ad93dd0dc81d;done,"20/avr./2021 01:07 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;We reproduce the case together with the user.
We discovered that the error started from a not valid Hibernate ORM entity mapping.
In particular, a wrong use of the `mappedBy` attribute between entities that are not supposed to even have an association.
Then we can safely close as rejected this issue.",,,,,,,,,Terminé,,
Upgrade to ORM 5.4.30.Final,HSEARCH-4196,70879,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/mars/2021 08:08 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,12/avr./2021 01:30 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.9.Final,6.0.3.Final,6.1.0.Alpha1,,,,,,,mapper-orm,,,,0,,,,,,https://in.relation.to/2021/03/19/hibernate-orm-5430-final-release/,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-04-12T01:45:19.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2537,0|1009cw:000000xdur3mhxzzzx3i,,,,,,HSEARCH - 2021-07,HSEARCH - 2021-08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Add continuous integration for Open Distro for Elasticsearch,HSEARCH-4195,70877,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/mars/2021 02:08 AM,13/juin/2021 23:49 PM,14/mars/2022 12:54 PM,23/avr./2021 00:41 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.4.Final,6.1.0.Alpha1,,,,,,,,build,tests,,,0,,,,,,"We will probably need [HSEARCH-4130] first.



Note OpenSearch is still in beta, but if we can get it to work, instead of using the (soon to be deprecated) Open Distro for Elasticsearch, that would be great: [https://github.com/opensearch-project/OpenSearch|https://github.com/opensearch-project/OpenSearch|smart-link] ",,,,,,,,,,,,,,,,,,,,,,HSEARCH-4130,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-08-05T00:23:26.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2555,0|1009cw:000000xdur3mhxzzzxdo,,,,,,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Guarantee a minimum delay on processing retries of outbox events,HSEARCH-4194,70875,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,19/mars/2021 01:46 AM,02/déc./2021 06:33 AM,14/mars/2022 12:54 PM,15/nov./2021 00:49 AM,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,mapper-orm,,,,0,,,,,,"Improve the algorithm of [HSEARCH-4134] to guarantee a minimum delay on processing retries of outbox events.
This could lead to a more efficient error handling in case of multiple servers / multiple routings on different points of failures.

*See comments about how to implement this.*

See conversation here: [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134/near/230862088|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134/near/230862088]",,,,,,,,,,,,,,,,,,,HSEARCH-4134,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-11-15T00:49:39.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2702,0|1009cw:000000xdur3mhxzzzxezsq7uxv,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-21,,,,,,,,,,,2021-11-02 08:44:15.279,,,,"02/nov./2021 01:44 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Implementation:

* Add a {{processAfter}} property to OutboxEvent, of type {{Instant}} 
* Make sure to add a database index to that column
* Set that column to null for initial (non-errored) events
* Set that column to {{Instant.now() + some configurable delay}} for errored events
IMPORTANT: *do NOT try* to generate the Instant using SQL in this case. Just use Java code. It’s not the same context as the last time we previously introduced an Instant column in OutboxEvent, and thus we don’t have the same constraints.
* In {{DefaultOutboxEventFinder}}, add a condition to the query : {{WHERE processAfter < :processingTime}}, and set {{processingTime}} to {{Instant.now()}}. *Don’t try* to use the JPQL/HQL/SQL {{now()}} function, that's more trouble than it's worth in this case.

This will need testing. Make sure to test this properly.",,,,,,,,,,,,,,,,Terminé,,
Fix tests wrongly using 0-based positional parameters with ORM,HSEARCH-4193,70874,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/mars/2021 01:23 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,29/juil./2021 08:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"JPA positional parameters are 1-based.

Source: https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#jpql-api-positional-parameter-example",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-29T08:40:32.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2629,0|1009cw:000000xdur6f,,,,,,HSEARCH - 2021-15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Drop hibernate-osgi module,HHH-14518,70873,,Remove Feature,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,18/mars/2021 14:08 PM,14/mai/2021 15:19 PM,14/mars/2022 12:54 PM,14/mai/2021 09:44 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha8,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-14T13:03:07.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104slk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
JPA Criteria locate() ignores 3rd parameter when using an OracleDialect,HHH-14517,70872,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Roland Spindelbalker-Davila,557058:107621ab-96f1-4654-a0cc-e3f2b43c706f,Roland Spindelbalker-Davila,557058:107621ab-96f1-4654-a0cc-e3f2b43c706f,18/mars/2021 10:35 AM,18/mars/2021 10:56 AM,14/mars/2022 12:54 PM,,5.3.17,5.4.24,5.4.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"h2. Summary

We found out that the current Hibernate Oracle Dialect only supports {{locate(pattern, string)}} without a start position, even though Oracle would support {{locate(pattern, string, startPosition)}} as well. This is unfortunate since the starting position could be used for a generic way of finding the {{n-th}} occurrence of a pattern in a string. In other databases (at least H2 and PostgreSQL) this works as expected.

I created a small reproducer: [https://github.com/Spindl/HHH-14517_reproducer|https://github.com/Spindl/HHH-14517_reproducer|smart-link] 

We are using version {{5.3.17}}, but I also checked {{5.4.24}} and {{5.4.27}} with the reproducer.

h2. Detailed description

I also had a closer look at the issue, here are my findings:

The problem stems from the Oracle dialect used to map the generic {{locate}} function from the JPQL standard to the Oracle specific {{instr}} function. 

In the Oracle dialect used to translate JPQL into Oracle native SQL, the following function template is registered for the {{locate}} function:

!registered_template.png|width=83.33333333333333%!



So a static template with two parameters is used whenever a JPQL {{locate}} needs to be translated. The two parameters are the pattern which is to be found, and the text in which it should be found. The search will always start at the first character of the string.

However, {{locate}} offers a three-parameter version as well, where the starting position can be set.

!locate_3_param.png|width=83.33333333333333%!

And Oracle would also offer a {{instr}} function with the same parameters. ([https://docs.oracle.com/cd/B28359_01/olap.111/b28126/dml_functions_1103.htm#OLADM564|https://docs.oracle.com/cd/B28359_01/olap.111/b28126/dml_functions_1103.htm#OLADM564])

We use the position parameter to get the {{n-th}} occurrence of a pattern by nesting calls, like this:

{{locate(1st) = locate(pattern, string, 1)}}
{{locate(2nd) = locate(pattern, string, locate(1st) + 1)}}
{{locate(3rd) = locate(pattern, string, locate(2nd) + 1)}}

But since the template only supports two parameters, this does not work on Oracle databases:

!effect.png|width=1081,height=260!



For e.g. Postgres, a more complex function is registered, which takes care of the different amount of parameters:

!registered_template_postgres.png|width=66.66666666666666%!


So that’s probably what would be necessary in the Oracle dialect as well.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,18/mars/2021 10:49 AM;ug:334271e7-640c-4a45-98f9-017b1172973b;effect.png;https://hibernate.atlassian.net/secure/attachment/49846/effect.png,18/mars/2021 10:49 AM;ug:334271e7-640c-4a45-98f9-017b1172973b;locate_3_param.png;https://hibernate.atlassian.net/secure/attachment/49843/locate_3_param.png,18/mars/2021 10:49 AM;ug:334271e7-640c-4a45-98f9-017b1172973b;registered_template.png;https://hibernate.atlassian.net/secure/attachment/49844/registered_template.png,18/mars/2021 10:49 AM;ug:334271e7-640c-4a45-98f9-017b1172973b;registered_template_postgres.png;https://hibernate.atlassian.net/secure/attachment/49845/registered_template_postgres.png,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,4.0,ug:334271e7-640c-4a45-98f9-017b1172973b(ug:334271e7-640c-4a45-98f9-017b1172973b),,,,,,,,,0|104slc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
make logging parameters easier,HHH-14516,70871,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Caleb Cushing,557058:250aada3-2918-4a54-8b99-876ccc15fdbd,Caleb Cushing,557058:250aada3-2918-4a54-8b99-876ccc15fdbd,18/mars/2021 09:05 AM,18/mars/2021 09:05 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Figuring out logging, especially logging of parameters is a pain in the behind.  See https://stackoverflow.com/q/1710476/206466 for a massive number of options, including an answer I added yesterday and need to revise today. I was getting no logs for the parameter of this Spring Data JPA query, using any of the previously described methods.

```java
public interface CountrySubdivisionRepository extends Repository<CountrySubdivision, CountrySubdivisionCode> {

// CountrySubdivisionCode is an enum of US states (currently)
    CountrySubdivision findByCode( CountrySubdivisionCode code );
```
for some reason this logs, if, and only if I set, this (it even disappears when I do trace on the specific class...), which of course results in a number of irrelevant logs appearing as well. note: 5.3.19, I'm leaving this project tomorrow so I won't be able to comment on this specific issue after that, it's just an example.

```xml
    <Logger name=""org.hibernate.engine"" level=""trace"" additivity=""false"">
```


The nicest option would be to be able to set a single logger name to log the parameters, such as `org.hibernate.SQL` = `trace`, or something, this way it goes through your normal logger. Alternatively perhaps a property like `hibernate.show_sql.parameters=true`, but `show_sql` does not seem to go through the regular logger, so I like this less. Last option would be to simply document all of the loggers and levels you need to set in reference documentation to get the parameters.

obviously I don't expect every logger framework configuration filetype to be documented, all I needed was the correct/comprehensive properties.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,xenoterracide(xenoterracide),,,,,,,,,0|104sl4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
 javax.ejb.EJBTransactionRolledbackException: Resources rolled back due to unresolved action of rollback.; nested exception is: com.ibm.ws.LocalTransaction.RolledbackException: Resources rolled back due to unresolved action of rollback.,HHH-14515,70870,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Aashish,60535a2494d7b90069f45491,Aashish,60535a2494d7b90069f45491,18/mars/2021 07:09 AM,18/mars/2021 07:43 AM,14/mars/2022 12:54 PM,,5.4.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Hi Team,

Recently we migrated our application from hibernate 3.6.10 to 5.4.25 . 

Our application supports Websphre , jboss , weblogic App server .

UseCase : Ejb method with @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)  

Websphere : do not work  ( javax.ejb.EJBTransactionRolledbackException: Resources rolled back due to unresolved action of rollback.; nested exception is: com.ibm.ws.LocalTransaction.RolledbackException: Resources rolled back due to unresolved action of rollback.)

Weblogic : works 
jboss works 

If @TransactionAttribute(TransactionAttributeType.REQUIRED) is annotated on ejb method then there is no issue  . 

We have reproduced same behavior  in sample application also .  Same piece of code work with hibernate 3.6.10 but gets failed in hibernate 4 and 5. 

Here our question is there any specific setting for WebSphere to make the code work without any change . 

I have attached  sample ear  and error file .

Please let me know in case any other information is required .

Regards,
Aashish
","Websphere ND 9 ,Linux , Oracle ",,,,,,,,,,,,,,,,,,,,,,,,,,,,18/mars/2021 07:07 AM;ug:12bcb275-21a5-4c36-884e-1501541f7989;error.txt;https://hibernate.atlassian.net/secure/attachment/49841/error.txt,18/mars/2021 07:06 AM;ug:12bcb275-21a5-4c36-884e-1501541f7989;tm.ear;https://hibernate.atlassian.net/secure/attachment/49842/tm.ear,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,2.0,ug:12bcb275-21a5-4c36-884e-1501541f7989(ug:12bcb275-21a5-4c36-884e-1501541f7989),,,,,,,,,0|104skw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,3.6.10,,,,,,,,,,,,,,,,,,,,,A faire,,
Auto evict collection cache not work when use transactional cache concurrency strategy,HHH-14514,70865,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Petr Abrahamczik,605044d1009fee006921a4d3,Petr Abrahamczik,605044d1009fee006921a4d3,18/mars/2021 02:08 AM,18/mars/2021 03:00 AM,14/mars/2022 12:54 PM,,5.2.18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,We use a transactional cache (Infinispan) and we enabled the auto_evict_collection_cache property. Collection cache eviction not work.,"Hibernate 5.2.18
Infinispan 8.2.11
DB2 
Java 8
Linux",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=OPEN, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-19T09:00:42.000-0700"",""stateCount"":1,""state"":""OPEN"",""dataType"":""pullrequest"",""open"":true},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:5907d7a2-229b-4844-bdd6-9442518f42fd(ug:5907d7a2-229b-4844-bdd6-9442518f42fd),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3840,0|104sjs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Move publishing release artifacts from BinTray,HHH-14513,70864,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mars/2021 16:10 PM,16/juil./2021 08:55 AM,14/mars/2022 12:54 PM,04/juin/2021 10:50 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3.21,5.4.31,5.5.0.Alpha1,6.0.0.Alpha8,,,,,,,,,,0,,,,,,"[https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/|https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/]
[https://www.infoq.com/news/2021/02/jfrog-jcenter-bintray-closure/|https://www.infoq.com/news/2021/02/jfrog-jcenter-bintray-closure/]

Of course the elephant in the room is what hosting service to use.  

* ORM does have an OSSRH account for publishing via Sonatype.  
* There is also always the JBoss Nexus, though I think that should be a distant last option.
* Others?",,,,,,,,,,,,HHH-14640,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-03T16:10:38.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),steve(steve),,,,,,,,0|104sjk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-06-04 17:50:14.072,,,,04/juin/2021 10:50 AM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Backported to 5.3 branch in whole or in part in support of HHH-14640.,,,,,,,,,,,,,,,,Terminé,,
Add Jenkinsfile for ORM,HHH-14512,70863,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mars/2021 14:41 PM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,28/juil./2021 07:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-28T07:26:09.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),steve(steve),,,,,,,,0|104sjc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Multiload doesn't search first level cache,HHH-14511,70862,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,Alex CD,557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d,17/mars/2021 13:24 PM,18/mars/2021 03:36 AM,14/mars/2022 12:54 PM,,5.4.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Using multiload executes query even if entities are already loaded in first level cache:

{code:java}entityManager.unwrap( Session.class ).byMultipleIds( MyEntity.class ).multiLoad( ids ){code}

The `MultiIdentifierLoadAccess` has `sessionCheckingEnabled` false.

From fixed issue [https://hibernate.atlassian.net/browse/HHH-10984|https://hibernate.atlassian.net/browse/HHH-10984:]
`sessionCheckingEnabled option default value should be true`
but this is not the case",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,cdalxndr(cdalxndr),,,,,,,,,0|104sj4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"18/mars/2021 03:35 AM;557058:9b0f6d49-bc76-4aca-875b-c8525b2f039d;Have to manually set {{.enableSessionCheck( true )}}`.

I don’t have permission to close this issue.",,,,,,,,,,,,,,,,A faire,,
Remove deprecated id-gen related contracts and classes,HHH-14510,70861,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mars/2021 12:20 PM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"For sure:

* `org.hibernate.id.MultipleHiLoPerTableGenerator`
* `org.hibernate.id.SequenceGenerator`
* `org.hibernate.id.SequenceHiLoGenerator`
* `org.hibernate.id.SequenceIdentityGenerator`
* `org.hibernate.id.enhanced.OptimizerFactory#NONE`
* `org.hibernate.id.enhanced.OptimizerFactory#HILO`
* `org.hibernate.id.enhanced.OptimizerFactory#LEGACY_HILO`
* `org.hibernate.id.enhanced.OptimizerFactory#POOL`
* `org.hibernate.id.enhanced.OptimizerFactory#POOL_LO`

Maybe?:

* `org.hibernate.id.enhanced.LegacyHiLoAlgorithmOptimizer`
* `org.hibernate.id.enhanced.HiLoOptimizer`
* `org.hibernate.id.enhanced.StandardOptimizerDescriptor#HILO` (not previously deprecated)
* `org.hibernate.id.enhanced.StandardOptimizerDescriptor#LEGACY_HILO` (not previously deprecated)



Depending on what we do with these, we may want to also clean up tests using either the HILO or LEGACY_HILO optimizers",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104siw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Git master -> main branch renaming,HHH-14509,70860,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Terminé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mars/2021 12:01 PM,20/mars/2021 07:36 AM,14/mars/2022 12:54 PM,20/mars/2021 07:36 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,build,,,,0,,,,,,"Also, where possible, clean up usages of the words where used throughout the code base",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-22T04:38:00.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104sio:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Logging in debug mode gives an invalid conversion error in StandardRowReader.java,HHH-14508,70859,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Joseph B Ottinger,5e8b87dabe041a0b78d2aea5,Joseph B Ottinger,5e8b87dabe041a0b78d2aea5,Joseph B Ottinger,5e8b87dabe041a0b78d2aea5,17/mars/2021 06:08 AM,18/mars/2021 12:49 PM,14/mars/2022 12:54 PM,17/mars/2021 13:09 PM,6.0.0.Alpha6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha7,,,,,,,,,hibernate-core,,,,0,,,,,,"if logger is set to debug level, StandardRowReader fails with an invalid conversion from %i. Changing to %s at Steve Ebersole's suggestion.","Java 11, logback",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-17T13:41:37.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:0bab4ae4-2114-48fa-a1e1-a3d0b7efa8b7(ug:0bab4ae4-2114-48fa-a1e1-a3d0b7efa8b7),,,,,,,,,0|104sig:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Document selection of ConnectionProvider based on ""single module"" on CP",HHH-14507,70858,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,17/mars/2021 05:42 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,documentation,,,,0,,,,,,"The User Guide section about [ConnectionProvider selection|https://hibernate.atlassian.net/browse/HHH-14507] should be augmented to discuss the selection of the provider to use when only a single module is on the CP, as well as how that happens",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104si8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Enable the JDK17 build on branch 5.11,HSEARCH-4192,70857,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Doublon,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mars/2021 04:57 AM,20/sept./2021 01:48 AM,14/mars/2022 12:54 PM,20/sept./2021 01:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,build,,,,0,,,,,,We need a version of byteman that supports JDK17 first.,,,,,,,,,,,,,,,,HSEARCH-4221,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104si0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20/sept./2021 01:47 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Done in HSEARCH-4221 . Closing as duplicate.,,,,,,,,,,,,,,,,Terminé,,
"Get rid of master/slave in Git repository, documentation where possible, etc.",HSEARCH-4191,70856,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,17/mars/2021 03:43 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,17/mars/2021 06:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.11.Final,5.11.9.Final,6.0.3.Final,6.1.0.Alpha1,,,,,,build,documentation,,,0,,,,,,"No technical reason, that's more about not offending anyone.

We will rename git branches, and update the documentation where possible.

We will probably keep these words in the documentation of older (5.x) branches, since changing wording in micro releases would be confusing. But we won't use that wording in newer (6.x) branches.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2021-04-16T02:56:06.000-0700"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2533,0|104mtz:zy,,,,,,HSEARCH - 2021-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
IdentifierGenerator changes,HHH-14506,70855,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,16/mars/2021 11:47 AM,08/déc./2021 10:21 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14959,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-17T16:01:40.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104shs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
hibernate-enhance-maven-plugin does not have @threadSafe so Maven emits warning,HHH-14505,70854,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Darryl,5d21a6ccfd3b8b0c278e8859,Darryl,5d21a6ccfd3b8b0c278e8859,16/mars/2021 11:08 AM,02/janv./2022 01:27 AM,14/mars/2022 12:54 PM,,5.3.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,,,,0,,,,,,"[WARNING] *****************************************************************
[WARNING] * Your build is requesting parallel execution, but project      *
[WARNING] * contains the following plugin(s) that have goals not marked   *
[WARNING] * as @threadSafe to support parallel building.                  *
[WARNING] * While this /may/ work fine, please look for plugin updates    *
[WARNING] * and/or request plugins be made thread-safe.                   *
[WARNING] * If reporting an issue, report it against the plugin in        *
[WARNING] * question, not against maven-core                              *
[WARNING] *****************************************************************
[WARNING] The following plugins are not marked @threadSafe in my.domain.maven.project.name:
[WARNING] org.hibernate.orm.tooling:hibernate-enhance-maven-plugin:5.3.20.Final
[WARNING] Enable debug to see more precisely which goals are not marked @threadSafe.
[WARNING] *****************************************************************


Is there a known reason the annotation is not present in the goal ?

For example if the Maven plugin is modifying the filesystem outside of the ${project.basedir}/targets folder ?

For example if the Maven plugin is modifying another resource (such as over network) that is not co-ordinated to be threadsafe or that might lockup/deadlock the build.


From my 3 minute look at the Mojo I think the only side effects of running the Mojo are modification of files inside ${project.basedir}/targets folder which means it is threadsafe from Maven's point of view to safely allow parallel building and parallel running of the hibernate-enhance-maven-plugin for 2 or more different pom.xml inside the same Maven reactor build.


The fix would be to modify the annotation at the line:

https://github.com/hibernate/hibernate-orm/blob/master/tooling/hibernate-enhance-maven-plugin/src/main/java/org/hibernate/orm/tooling/maven/MavenEnhancePlugin.java#L51
@Mojo(name = ""enhance"", defaultPhase = LifecyclePhase.COMPILE, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)

into

@Mojo(name = ""enhance"", defaultPhase = LifecyclePhase.COMPILE, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, threadSafe = true)",Maven3 JDK11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:15e31d5e-db85-482d-9930-752986a2f788(ug:15e31d5e-db85-482d-9930-752986a2f788),ug:4c74c57d-9454-4268-b633-1e3c95cbeeb6(ug:4c74c57d-9454-4268-b633-1e3c95cbeeb6),,,,,,,,0|104shk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-01-02 09:27:26.91,,,,02/janv./2022 01:27 AM;5ca1c896faab36165eb98c1f;Any progress on this issue?,,,,,,,,,,,,,,,,A faire,,
No Synchronization.afterCompletion is called if transaction rollback is failed,HHH-14504,70853,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Denis Drozdov,557058:fd24d0cb-74ed-45aa-9ddf-a4dda08530cc,Denis Drozdov,557058:fd24d0cb-74ed-45aa-9ddf-a4dda08530cc,16/mars/2021 09:07 AM,16/mars/2021 09:09 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl#rollback

If rollback is failed (due to network issues, etc)  no Synchronization is called. 

code from hibernate-core 5.3.7:

{code:java}@Override
public void rollback() {
	try {
		TransactionStatus status = jdbcResourceTransaction.getStatus();
		if ( ( rollbackOnly && status != TransactionStatus.NOT_ACTIVE ) || status == TransactionStatus.ACTIVE ) {
			jdbcResourceTransaction.rollback();
			JdbcResourceLocalTransactionCoordinatorImpl.this.afterCompletionCallback( false );
		}
	}
	finally {
		rollbackOnly = false;
	}

	// no-op otherwise.
}{code}

if *jdbcResourceTransaction.rollback()* throws exception, then no Synchronizations are called. 
TransactionObservers are not called in that case also.

Is it intentional behavior or should be fixed?

May be it is better to wrap *jdbcResourceTransaction.rollback()* with try-finally, and call *afterCompletionCallback* method in finally ?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:53a806ec-fe25-4878-8d85-5dab5e7a8430(ug:53a806ec-fe25-4878-8d85-5dab5e7a8430),,,,,,,,,0|104shc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Migrate tests to orm/test package,HHH-14503,70852,,Tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,Jan Schatteman,557058:d2e3c0d7-28e0-4bde-9d33-5380e446ab06,16/mars/2021 08:55 AM,17/mars/2021 16:07 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,Placeholder for the ongoing test migration effort ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-06-02T07:50:50.000-0700"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,jschatte(jschatte),,,,,,,,,0|104sh4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Iterations and memory retention improvements for processing of PropertyContainer metadata,HHH-14502,70851,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,15/mars/2021 10:12 AM,19/mars/2021 00:13 AM,14/mars/2022 12:54 PM,15/mars/2021 10:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"
The initialization of a PropertyContainer is currently performing a quadractic amount of checks to ensure successfull narrowing down of generic properties; a quick inspection of the code reveals that this can be easily made linear.

In addition, the memory retention of this container seems suboptimal: it's retaining a full TreeMap, while a (small) List is sufficient; in addition, defensive copies are being allocated for each access, and we've observed the access is happening multiple times for each instance.",,,,,,,,,,,,,,,,,,,HHH-14499,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-15T09:42:21.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104sgw:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
FlushMode in JTA Environments not applied,HHH-14501,70850,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Ralf Eisele,604c759eb2ea120115ce7f8a,Ralf Eisele,604c759eb2ea120115ce7f8a,14/mars/2021 12:41 PM,14/mars/2021 12:47 PM,14/mars/2022 12:54 PM,,5.4.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,1,,,,,,"When hibernate is configured for JTA environments, then it is not possible to change the FlushMode.
The FlushMode is ""ALWAYS"" and can't switched to ""AUTO""

This regression was introduced with Issue:   [HHH-13974]

The JTASessionContext.currentSession() initiates a new Session with a configured ""FlushMode""
And the new code from Issue [HHH-13974]

{code:java}if ( getHibernateFlushMode() == null ) {{code}

prevents to set the configured FlushMode

Here is a simple Unit Test to check:

{code:java}/**
 * In JTA Environment, check if Flush Mode is configurable
 * @author Ralf Eisele
 */
public class TestFlushJtaEnvironment extends BaseNonConfigCoreFunctionalTestCase {

	@Override
	protected void addSettings(Map settings) {
		super.addSettings( settings );
		TestingJtaBootstrap.prepare( settings );	
		settings.put( AvailableSettings.FLUSH_MODE, ""AUTO"" );
	}
	
	@Test
	public void testIsFlushModeAuto() throws Exception {		
		JTASessionContext jta = new JTASessionContext(sessionFactory());		
		final JtaPlatform jtaPlatform = sessionFactory().getServiceRegistry().getService( JtaPlatform.class );		
		final TransactionManager transactionManager = jtaPlatform.retrieveTransactionManager();		
		transactionManager.begin();		
		Session session = jta.currentSession();		
		try {
			FlushMode flushMode = session.getHibernateFlushMode();
			assertEquals(FlushMode.AUTO, flushMode);			
		}
		finally {
			session.close();
		}
	}
}{code}

 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:308c1e36-e7ea-410f-8275-b65e4d53edf0(ug:308c1e36-e7ea-410f-8275-b65e4d53edf0),,,,,,,,,0|104sgo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.19,,,,,,,,,,,,,,,,,,,,,A faire,,
Eager vs lazy loading control of link properties is broken in some cases,HHH-14500,70849,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,A Susnjar,5ae0d5a77b44642d39d32a6c,A Susnjar,5ae0d5a77b44642d39d32a6c,12/mars/2021 06:48 AM,19/mai/2021 07:07 AM,14/mars/2022 12:54 PM,,5.4.14,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,hibernate-core,query-criteria,,2,core,hibernate,jpa21,performance,query,"Started here:

[https://discourse.hibernate.org/t/how-to-make-lazy-loading-truly-lazy-v5-4/1994/28|https://discourse.hibernate.org/t/how-to-make-lazy-loading-truly-lazy-v5-4/1994/28]

Summary:

(At least) with bytecode enhancement and field access it is impossible to control how (at least) to-one link properties are loaded - they are never quite lazy all the way and don't react well to entity graph specification (or ""fetches"") - they remain somewhat lazy, regardless of combination of annotations and/or bytecode enhancement parameters and Hibernate configuration settings used. 

In the original test case specifically, there are two distinct outcomes coming from twelve different test cases (combinations of annotations, all needing to be treated as lazy by default).

Outcome #1: Hibernate treats properties with 8 out of 12 combinations of annotations as eager regardless of whether the property is ""requested"" via entity graphs or fetches.

Outcome #2: Remaining four remain combinations are treated as essentially lazy even when explicitly requested via entity graphs or explicit fetches. They are NOT loaded if not requested (good) but Hibernate issues additional queries on access even though it already has all the data, which is also evident from the fact that additional queries only re-get ids).

End result: we have no way to indicate that properties are meant to be lazy unless requested somehow (entity graphs, fetches) when they should be treated as eager. If we annotate properties to make them normally lazy, we can't get them to be eagerly loaded when we need to. The only ""certain"" way is to make them all eager, which is a performance ""consideration"".

Test case attached ({{LazyToOnesControlTest.java}}) and available in a branch: {{HHH-14500-test}}

Console output of the test is also attached - {{LazyToOnesControlTest.log}}.

See comments below for additional detail and discussion.","Hibernate: Originally noticed with 5.4.14. Retested with 5.4.29 and the issue is (still) present.
JDK: 11
OS: any (tested on Mac, Linux, Windows)
DB: PostgreSQL 11.7",,,,,,,,,,,,,,,,,,,,,,,HHH-14620,,,,,12/mars/2021 11:01 AM;asusnjar;LazyToOnesControlTest.java;https://hibernate.atlassian.net/secure/attachment/49839/LazyToOnesControlTest.java,12/mars/2021 12:00 PM;asusnjar;LazyToOnesControlTest.log;https://hibernate.atlassian.net/secure/attachment/49840/LazyToOnesControlTest.log,12/mars/2021 06:35 AM;asusnjar;TestEntity-recoloured.png;https://hibernate.atlassian.net/secure/attachment/49836/TestEntity-recoloured.png,12/mars/2021 06:35 AM;asusnjar;TestEntity.java;https://hibernate.atlassian.net/secure/attachment/49837/TestEntity.java,12/mars/2021 06:35 AM;asusnjar;TestEntity.log;https://hibernate.atlassian.net/secure/attachment/49835/TestEntity.log,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,5.0,asusnjar(asusnjar),christian.beikov(christian.beikov),,,,,,,,0|104sgg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-15 15:55:38.988,,,,12/mars/2021 11:02 AM;5ae0d5a77b44642d39d32a6c;Uploaded LazyToOnesControlTest.java as my credentials didn’t allow me to push to a (new) branch.,"12/mars/2021 12:01 PM;5ae0d5a77b44642d39d32a6c;Note - the test makes multiple assertions for each case. Passing the first assertion does not mean that the test will pass as there are more of them. 

Additionally, I didn’t know how to check/assert some things - look for {{FIXME}} in {{LazyToOnesControlTest.java}} to see what I am talking about.","12/mars/2021 13:38 PM;5ae0d5a77b44642d39d32a6c;For example, for {{testBare()}} I’d expect only the first query shown in logs to be executed:

{code:sql}    select
        lazytoones0_.id as id1_0_,
        lazytoones0_.linkLazy_id as linklazy4_0_,
        lazytoones0_.linkLazyJoin_id as linklazy5_0_,
        lazytoones0_.linkLazyNoProxyJoin_id as linklazy7_0_,
        lazytoones0_.linkLazySelect_id as linklazy9_0_,
        lazytoones0_.name as name2_0_,
        lazytoones0_.version as version3_0_ 
    from
        loading_test lazytoones0_ 
    where
        lazytoones0_.id=50{code}

But before the control returns to the test/client code that query is immediately followed by both unexpected and unwanted next one that eagerly loads the rest:

{code:sql}    select
        lazytoones0_.id as id1_0_0_,
        lazytoones0_.linkLazy_id as linklazy4_0_0_,
        lazytoones0_.linkLazyJoin_id as linklazy5_0_0_,
        lazytoones0_.linkLazyNoProxyJoin_id as linklazy7_0_0_,
        lazytoones0_.linkLazySelect_id as linklazy9_0_0_,
        lazytoones0_.name as name2_0_0_,
        lazytoones0_.version as version3_0_0_,
        lazytoones1_.id as id1_0_1_,
        lazytoones1_.linkLazy_id as linklazy4_0_1_,
        lazytoones1_.linkLazyJoin_id as linklazy5_0_1_,
        lazytoones1_.linkLazyNoProxyJoin_id as linklazy7_0_1_,
        lazytoones1_.linkLazySelect_id as linklazy9_0_1_,
        lazytoones1_.name as name2_0_1_,
        lazytoones1_.version as version3_0_1_,
        lazytoones2_.id as id1_0_2_,
        lazytoones2_.linkLazy_id as linklazy4_0_2_,
        lazytoones2_.linkLazyJoin_id as linklazy5_0_2_,
        lazytoones2_.linkLazyNoProxyJoin_id as linklazy7_0_2_,
        lazytoones2_.linkLazySelect_id as linklazy9_0_2_,
        lazytoones2_.name as name2_0_2_,
        lazytoones2_.version as version3_0_2_ 
    from
        loading_test lazytoones0_ 
    left outer join
        loading_test lazytoones1_ 
            on lazytoones0_.linkLazyJoin_id=lazytoones1_.id 
    left outer join
        loading_test lazytoones2_ 
            on lazytoones1_.linkLazyNoProxyJoin_id=lazytoones2_.id 
    where
        lazytoones0_.id in (
            ?, ?, ?, ?
        ){code}

On the flip side, {{testCompleteFetchGraph()}} starts with as-expected massive query that I won’t show here (see timestamp {{18:58:55,136}}) but that isn’t enough. Even if I remove the {{Hibernate.isPropertyInitialized(…)}} assertion, we can see that an extra SQL is issued:

{code:sql}    select
        lazytoones_.linkLazyNoProxy_id as linklazy6_0_,
        lazytoones_.linkLazyNoProxySelect_id as linklazy8_0_ 
    from
        loading_test lazytoones_ 
    where
        lazytoones_.id=?{code}

… when the properties are accessed, requesting data that was already (or should have been) loaded in the first query. 

Then, there is the case of {{testShallowFetchGraph()}} which I can’t properly validate, so it actually passes if I remove {{Hibernate.isPropertyInitialized(…)}} assertions because the tests “sees” that:

 (a) only one query was issued up front (but it asked for more than it should have):

{code:sql}    select
        lazytoones0_.id as id1_0_0_,
        lazytoones1_.id as id1_0_1_,
        lazytoones2_.id as id1_0_2_,
        lazytoones3_.id as id1_0_3_,
        lazytoones4_.id as id1_0_4_,
        lazytoones5_.id as id1_0_5_,
        lazytoones6_.id as id1_0_6_,
        lazytoones0_.linkLazy_id as linklazy4_0_0_,
        lazytoones0_.linkLazyJoin_id as linklazy5_0_0_,
        lazytoones0_.linkLazyNoProxyJoin_id as linklazy7_0_0_,
        lazytoones0_.linkLazySelect_id as linklazy9_0_0_,
        lazytoones0_.name as name2_0_0_,
        lazytoones0_.version as version3_0_0_,
        lazytoones1_.linkLazy_id as linklazy4_0_1_,
        lazytoones1_.linkLazyJoin_id as linklazy5_0_1_,
        lazytoones1_.linkLazyNoProxyJoin_id as linklazy7_0_1_,
        lazytoones1_.linkLazySelect_id as linklazy9_0_1_,
        lazytoones1_.name as name2_0_1_,
        lazytoones1_.version as version3_0_1_,
        lazytoones2_.linkLazy_id as linklazy4_0_2_,
        lazytoones2_.linkLazyJoin_id as linklazy5_0_2_,
        lazytoones2_.linkLazyNoProxyJoin_id as linklazy7_0_2_,
        lazytoones2_.linkLazySelect_id as linklazy9_0_2_,
        lazytoones2_.name as name2_0_2_,
        lazytoones2_.version as version3_0_2_,
        lazytoones3_.linkLazy_id as linklazy4_0_3_,
        lazytoones3_.linkLazyJoin_id as linklazy5_0_3_,
        lazytoones3_.linkLazyNoProxyJoin_id as linklazy7_0_3_,
        lazytoones3_.linkLazySelect_id as linklazy9_0_3_,
        lazytoones3_.name as name2_0_3_,
        lazytoones3_.version as version3_0_3_,
        lazytoones4_.linkLazy_id as linklazy4_0_4_,
        lazytoones4_.linkLazyJoin_id as linklazy5_0_4_,
        lazytoones4_.linkLazyNoProxyJoin_id as linklazy7_0_4_,
        lazytoones4_.linkLazySelect_id as linklazy9_0_4_,
        lazytoones4_.name as name2_0_4_,
        lazytoones4_.version as version3_0_4_,
        lazytoones5_.linkLazy_id as linklazy4_0_5_,
        lazytoones5_.linkLazyJoin_id as linklazy5_0_5_,
        lazytoones5_.linkLazyNoProxyJoin_id as linklazy7_0_5_,
        lazytoones5_.linkLazySelect_id as linklazy9_0_5_,
        lazytoones5_.name as name2_0_5_,
        lazytoones5_.version as version3_0_5_,
        lazytoones6_.linkLazy_id as linklazy4_0_6_,
        lazytoones6_.linkLazyJoin_id as linklazy5_0_6_,
        lazytoones6_.linkLazyNoProxyJoin_id as linklazy7_0_6_,
        lazytoones6_.linkLazySelect_id as linklazy9_0_6_,
        lazytoones6_.name as name2_0_6_,
        lazytoones6_.version as version3_0_6_ 
    from
        loading_test lazytoones0_ 
    inner join
        loading_test lazytoones1_ 
            on lazytoones0_.linkLazy_id=lazytoones1_.id 
    inner join
        loading_test lazytoones2_ 
            on lazytoones0_.linkLazySelect_id=lazytoones2_.id 
    inner join
        loading_test lazytoones3_ 
            on lazytoones0_.linkLazyJoin_id=lazytoones3_.id 
    inner join
        loading_test lazytoones4_ 
            on lazytoones0_.linkLazyNoProxy_id=lazytoones4_.id 
    inner join
        loading_test lazytoones5_ 
            on lazytoones0_.linkLazyNoProxySelect_id=lazytoones5_.id 
    inner join
        loading_test lazytoones6_ 
            on lazytoones0_.linkLazyNoProxyJoin_id=lazytoones6_.id 
    where
        lazytoones0_.id=201{code}

… and (b) it “tricks” my assertion that there must be additional queries to load the data not eagerly loaded by means of that ids-only extra query:

{code:sql}    select
        lazytoones_.linkLazyNoProxy_id as linklazy6_0_,
        lazytoones_.linkLazyNoProxySelect_id as linklazy8_0_ 
    from
        loading_test lazytoones_ 
    where
        lazytoones_.id=?{code}

This is why I introduced {{Hibernate.isPropertyInitialized(…)}} assertion although it is secondary. It may or not be true what it says and it may or not have data otherwise, for other reasons, but the queries issued paid what we do need to care about when optimizing for performance:

(a) Not needlessly eagerly loading (or causing the DB to gather) data we don’t request

(b) Eagerly getting all the data that is needed in the most optimal set of queries so as to avoid the 1+N loading issue (1+1 or 1+few may be acceptable upfront, but not 1+N and ideally it would all happen before the control is returned to the caller as that data may be needed after the session is closed (not my immediate case but it is a general case).","12/mars/2021 13:53 PM;5ae0d5a77b44642d39d32a6c;Also note:

# I have {{ssrb.applySetting( AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY, ""false"" );}} as suggested but this needs to work either way. Perhaps create two test sets, one with {{false}} and another with {{true}}?
# I do not know how to control bytecode enhancement settings within the test. However, these expectations need to be met regardless of whether bytecode enhancements are used or which settings are applied. Does this mean multiple tests as well? How would one write those?
# I did not try this without “field” access but, just like the above, the expectations should be met all ways. 

If there is a workaround I’d be willing to hear about it.","12/mars/2021 19:37 PM;5ae0d5a77b44642d39d32a6c;To further clarify the test, as it is a bit inverted - instead of coding multiple entity classes with differently annotated properties I created one class with multiple differently ToOne properties that are otherwise the same (type). Aside from the the annotations common to all:

{code:java}		@JoinColumn(name = ""..._id"", nullable = true)
		@OptimisticLock(excluded = false)
		@NotFound(action = NotFoundAction.IGNORE)       {code}

… (omitting them for brevity) the fields are:

{code:java}		@ManyToOne(fetch = FetchType.LAZY)
		private TestEntity linkLazy;

		@ManyToOne(fetch = FetchType.LAZY)
		@Fetch(FetchMode.SELECT)
		private TestEntity linkLazySelect;

		@ManyToOne(fetch = FetchType.LAZY)
		@Fetch(FetchMode.JOIN)
		private TestEntity linkLazyJoin;

		@ManyToOne(fetch = FetchType.LAZY)
		@LazyToOne(LazyToOneOption.NO_PROXY)
		private TestEntity linkLazyNoProxy;

		@ManyToOne(fetch = FetchType.LAZY)
		@LazyToOne(LazyToOneOption.NO_PROXY)
		@Fetch(FetchMode.SELECT)
		private TestEntity linkLazyNoProxySelect;

		@ManyToOne(fetch = FetchType.LAZY)
		@LazyToOne(LazyToOneOption.NO_PROXY)
		@Fetch(FetchMode.JOIN)
		private TestEntity linkLazyNoProxyJoin;{code}

They should all be lazy but they are not. Those two are lazy - even when requested to be fetched eagerly via graphs or fetches:

{code:java}		@ManyToOne(fetch = FetchType.LAZY)
		@LazyToOne(LazyToOneOption.NO_PROXY)
		private TestEntity linkLazyNoProxy;

		@ManyToOne(fetch = FetchType.LAZY)
		@LazyToOne(LazyToOneOption.NO_PROXY)
		@Fetch(FetchMode.SELECT)
		private TestEntity linkLazyNoProxySelect;{code}

… and the rest are eager all the way, regardless of whether the graphs/fetches are specified. ",15/mars/2021 04:47 AM;5ae0d5a77b44642d39d32a6c;Test added in a branch {{HHH-14500-test}}.,15/mars/2021 08:55 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Can you post a link to that branch?,"15/mars/2021 08:59 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;You should actually use {{ssrb.applySetting( AvailableSettings.ALLOW_ENHANCEMENT_AS_PROXY, ""true"" );}}","15/mars/2021 10:16 AM;5ae0d5a77b44642d39d32a6c;I wanted to run the test(s) with both {{true}} and {{false}}. It fails (somewhat differently) either way.

For example, after setting {{ALLOW_ENHANCEMENT_AS_PROXY}} to {{true}} and removing the {{isPropertyInitialized()}} check that no longer applies some tests pass but others fail. For example, {{testBare()}} which should be entirely lazy fails because it is still eager and it issues the following two queries immediately, before returning control:

{code:sql}    select
        lazytoones0_.id as id1_0_,
        lazytoones0_.linkLazy_id as linklazy4_0_,
        lazytoones0_.linkLazyJoin_id as linklazy5_0_,
        lazytoones0_.linkLazyNoProxy_id as linklazy6_0_,
        lazytoones0_.linkLazyNoProxyJoin_id as linklazy7_0_,
        lazytoones0_.linkLazyNoProxySelect_id as linklazy8_0_,
        lazytoones0_.linkLazySelect_id as linklazy9_0_,
        lazytoones0_.name as name2_0_,
        lazytoones0_.version as version3_0_ 
    from
        loading_test lazytoones0_ 
    where
        lazytoones0_.id=50{code}

… and then:

{code:sql}    select
        lazytoones0_.id as id1_0_0_,
        lazytoones0_.linkLazy_id as linklazy4_0_0_,
        lazytoones0_.linkLazyJoin_id as linklazy5_0_0_,
        lazytoones0_.linkLazyNoProxy_id as linklazy6_0_0_,
        lazytoones0_.linkLazyNoProxyJoin_id as linklazy7_0_0_,
        lazytoones0_.linkLazyNoProxySelect_id as linklazy8_0_0_,
        lazytoones0_.linkLazySelect_id as linklazy9_0_0_,
        lazytoones0_.name as name2_0_0_,
        lazytoones0_.version as version3_0_0_,
        lazytoones1_.id as id1_0_1_,
        lazytoones1_.linkLazy_id as linklazy4_0_1_,
        lazytoones1_.linkLazyJoin_id as linklazy5_0_1_,
        lazytoones1_.linkLazyNoProxy_id as linklazy6_0_1_,
        lazytoones1_.linkLazyNoProxyJoin_id as linklazy7_0_1_,
        lazytoones1_.linkLazyNoProxySelect_id as linklazy8_0_1_,
        lazytoones1_.linkLazySelect_id as linklazy9_0_1_,
        lazytoones1_.name as name2_0_1_,
        lazytoones1_.version as version3_0_1_,
        lazytoones2_.id as id1_0_2_,
        lazytoones2_.linkLazy_id as linklazy4_0_2_,
        lazytoones2_.linkLazyJoin_id as linklazy5_0_2_,
        lazytoones2_.linkLazyNoProxy_id as linklazy6_0_2_,
        lazytoones2_.linkLazyNoProxyJoin_id as linklazy7_0_2_,
        lazytoones2_.linkLazyNoProxySelect_id as linklazy8_0_2_,
        lazytoones2_.linkLazySelect_id as linklazy9_0_2_,
        lazytoones2_.name as name2_0_2_,
        lazytoones2_.version as version3_0_2_ 
    from
        loading_test lazytoones0_ 
    left outer join
        loading_test lazytoones1_ 
            on lazytoones0_.linkLazyJoin_id=lazytoones1_.id 
    left outer join
        loading_test lazytoones2_ 
            on lazytoones1_.linkLazyNoProxyJoin_id=lazytoones2_.id 
    where
        lazytoones0_.id in (
            ?, ?, ?, ?, ?, ?
        ){code}

with the following parameters:

{noformat}17:11:47,905 TRACE BasicBinder:64 - binding parameter [1] as [BIGINT] - [9]
17:11:47,905 TRACE BasicBinder:64 - binding parameter [2] as [BIGINT] - [7]
17:11:47,905 TRACE BasicBinder:64 - binding parameter [3] as [BIGINT] - [10]
17:11:47,905 TRACE BasicBinder:64 - binding parameter [4] as [BIGINT] - [12]
17:11:47,906 TRACE BasicBinder:64 - binding parameter [5] as [BIGINT] - [11]
17:11:47,906 TRACE BasicBinder:64 - binding parameter [6] as [BIGINT] - [8]{noformat}","15/mars/2021 10:54 AM;5ae0d5a77b44642d39d32a6c;Here … refactored the test class into two sharing the same base (third class) and that only differ, right now, in whether they allow enhanced proxies or not. The one that does skips {{isPropertyInitialized()}} checks. Added a {{FIXME}} note as well - there are now two (I don’t know how to do these).

Pushed the changes to GitHub. Same branch… Forgot to include the link … as I forgot that this isn’t really your repo:

[https://github.com/aleksandarsusnjar/hibernate-orm/tree/HHH-14500-test|https://github.com/aleksandarsusnjar/hibernate-orm/tree/HHH-14500-test|smart-link] ","16/mars/2021 06:22 AM;5ae0d5a77b44642d39d32a6c;Not sure if my edit above ☝️  got noticed… I originally neglected to add a link to the branch, but I edited it in.","29/mars/2021 07:10 AM;5ae0d5a77b44642d39d32a6c;Can anyone confirm that my updates were, at least, seen, please?","29/mars/2021 10:04 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Yes, I have seen your updates.",,,,A faire,,
Explicitly listing mapped classes which are @MappedSuperClass might break narrowing down of generics,HHH-14499,70846,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Andrea Boriero,557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,12/mars/2021 06:34 AM,19/mars/2021 00:13 AM,14/mars/2022 12:54 PM,15/mars/2021 09:58 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,"If the user has an \[abstract] class used as MappedSuperClass which is also generic, and has some generic mapped attributes which need to be narrowed down to an actual type during Metadata collection, this will require a specific sort order of the mapped entities defined in the metadata for the narrowing of the types to succeed.

In practice, Hibernate ORM does sort automatically the entities to make this work correctly, but there is one case in which the order can be tricked into producing an invalid sequence: when the mapped super classes are explicitly listed in the metadata, then the sorting that Hibernate ORM performs might end up being incorrect.

The workaround is simple: do not list such entities explicitly, as that's unnecessary and ORM can discover any mapped super class automatically.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-15T09:57:39.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,dreab8(dreab8),sanne(sanne),,,,,,,,0|104sfs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Enhanced entities with ManyToOne relationsship is eagerly fetched.,HHH-14498,70845,,Bug,Résolu,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Terminé,,,Nicklas Wallgren,5cd3ce6cf348990dbc3c13f8,Nicklas Wallgren,5cd3ce6cf348990dbc3c13f8,12/mars/2021 06:25 AM,15/mars/2021 13:54 PM,14/mars/2022 12:54 PM,15/mars/2021 13:54 PM,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,bytecode-enhancement,hibernate-core,,,0,,,,,,"It seems like `ManyToOne`-relationships are always eagerly fetched while using `@LazyToOne(LazyToOneOption.PROXY)`. I have tried to
debug the issue, and it seems like `FetchStrategyHelper@determineFetchTiming` returns FetchTiming.IMMEDIATE, due to `AbstractEntityPersiter.hasProxy()` returns false
if the `entityMetamodel` is lazy, and enhanced lazy loading is active.

Am I doing something wrong, or am I forced to use runtime proxies to not eagerly load singular attributes? 

I have created a crude example of the problem
https://bitbucket.org/stnw04/hibernate_proxy_bug/src/master/src/main/java/com/example/demo/DemoApplication.java",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:0335c9b5-1bb7-406e-902d-60c89ad2b6a1(ug:0335c9b5-1bb7-406e-902d-60c89ad2b6a1),,,,,,,,0|104sfk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-15 15:46:29.747,,,,15/mars/2021 08:46 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Could you please try to set the following setting to {{true}}which is by default {{false}}in Hibernate 5.4: {{hibernate.bytecode.allow_enhancement_as_proxy}},15/mars/2021 09:13 AM;5cd3ce6cf348990dbc3c13f8;That seems to have done it. Thank you.,,,,,,,,,,,,,,,Terminé,,
Drop legacy id-generator settings,HHH-14497,70844,70855,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,12/mars/2021 06:11 AM,27/janv./2022 07:09 AM,14/mars/2022 12:54 PM,27/janv./2022 07:01 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.CR1,,,,,,,,,,,,,0,,,,,,"# {{hibernate.id.new_generator_mappings}} - always use the new/enhanced generators
# {{hibernate.model.generator_name_as_sequence_name}} - this is a compatibility setting to prefer {{hibernate_sequence}} in a few scenarios",,,,,,,,,,,,,,,,,,,,,,,,HHH-14959,,,,,,,,,,,,"{repository={count=10, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":10,""lastUpdated"":""2021-12-09T05:45:44.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":10,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104sfc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
Remove IdGeneratorStrategyInterpreter,HHH-14496,70843,70855,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,12/mars/2021 06:05 AM,08/mars/2022 19:05 PM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.next,,,,,,,,,,,,,0,,,,,,"This was a contract added for OGM, however it mucks up generator building and can be handled in a better way.

See [https://github.com/hibernate/hibernate-orm/discussions/3823|https://github.com/hibernate/hibernate-orm/discussions/3823]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{build={count=1, dataType=build, failedBuildCount=0, successfulBuildCount=1, unknownBuildCount=0}, repository={count=1, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":1,""lastUpdated"":""2021-12-08T12:33:30.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}},""build"":{""overall"":{""count"":1,""lastUpdated"":null,""failedBuildCount"":0,""successfulBuildCount"":1,""unknownBuildCount"":0,""dataType"":""build""},""byInstanceType"":{""cloud-providers"":{""count"":1,""name"":""Other providers""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104sf4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,70855,IdentifierGenerator changes
"Use table name, rather than entity name, as base for per-entity implicit sequence naming",HHH-14495,70842,70855,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,12/mars/2021 05:41 AM,03/août/2021 12:50 PM,14/mars/2022 12:54 PM,28/juil./2021 07:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha9,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,HHH-14492,,,,,,,,,,,,"{repository={count=5, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":5,""lastUpdated"":""2021-07-08T08:18:04.000-0700"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":5,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),steve(steve),,,,,,,,0|104sew:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,12/mars/2021 12:33 PM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Union-subclass makes this tricky.  And I’m not sure its a valid strategy to use table-name in all cases except this one (or other one-offs that might come up).,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
Backport Jenkinsfile improvements to 5.10/5.11,HSEARCH-4190,70841,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/mars/2021 05:29 AM,17/mars/2021 04:59 AM,14/mars/2022 12:54 PM,17/mars/2021 04:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.11.Final,5.11.9.Final,,,,,,,,build,,,,0,,,,,,In particular HSEARCH-4012,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-17T04:58:43.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2527,0|104mtz:zx,,,,,,HSEARCH - 2021-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Test Hibernate Search against JDK 17,HSEARCH-4189,70840,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,12/mars/2021 05:10 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,17/mars/2021 04:59 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.11.9.Final,6.0.3.Final,6.1.0.Alpha1,,,,,,,build,integration,tests,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2021-04-16T02:56:05.000-0700"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2526,0|104mtz:zv,,,,,,HSEARCH - 2021-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade the PostgreSQL JDBC driver used for testing to v. 42.2.19,HHH-14494,70839,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Simple,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,12/mars/2021 03:12 AM,19/mars/2021 00:13 AM,14/mars/2022 12:54 PM,12/mars/2021 03:55 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,5.5.0.Alpha1,,,,,,,,testsuite,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-12T03:54:33.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104seo:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
"Upgrading from 5.4.9 to 5.4.29, HQL no longer correctly generates inner joins",HHH-14493,70838,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Impossible à reproduire,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,SGilbert,603ecc105290e70069916239,SGilbert,603ecc105290e70069916239,11/mars/2021 14:46 PM,22/juin/2021 07:36 AM,14/mars/2022 12:54 PM,22/juin/2021 07:36 AM,5.4.24,5.4.25,5.4.26,5.4.27,5.4.28,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Same issue manifests when I tried with theta-style join

*HQL:* select distinct tableOneBO.id FROM tableTwoBO as tableTwoBO 
INNER JOIN tableOneBO as tableOneBO on tableTwoBO.someVarchar=tableOneBO.someVarcharWithSlightlyDifferentMappingNameButSameDBFieldName 
where tableTwoBO.manyToOneAssocTable.id = 1 
AND tableOneBO.typeCode in ('ABC', 'DEF', 'GHI')
AND tableOneBO.somVal = 0 

*SQL for 5.4.9 (correct):*
select
distinct t2alias.ID as col_0_0_ 
from
TABLE_ONE t1alias
inner join
TABLE_TWO t2alias
on 
where
t1alias.ID=123 
and t1alias.SOME_VARCHAR=t2alias.SOME_VARCHAR 
and (
t2alias.TYPE_CD in (
'ABC', 'DEF', 'GHI'
)
) 
and t2alias.ACTIVE_IND=0 for fetch only 

*SQL for 5.4.29(incorrect):*
select
distinct t2alias.ID as col_0_0_ 
from
TABLE_ONE t1alias
where
t1alias.ID=123 
and t1alias.SOME_VARCHAR=t2alias.SOME_VARCHAR 
and (
t2alias.TYPE_CD in (
'ABC', 'DEF', 'GHI'
)
) 
and t2alias.ACTIVE_IND=0 for fetch only ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:1806f22f-7ff5-4a9f-a7c9-6cee4faa3d95(ug:1806f22f-7ff5-4a9f-a7c9-6cee4faa3d95),,,,,,,,0|104seg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.9,2021-03-12 08:24:24.657,,,,12/mars/2021 00:24 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Thanks for the report. Could you please attach a test case created with the [test case template|https://github.com/hibernate/hibernate-test-case-templates/blob/master/orm/hibernate-orm-5/src/test/java/org/hibernate/bugs/JPAUnitTestCase.java] or create a PR with a test against the hibernate-orm repository?,"16/mars/2021 11:40 AM;603ecc105290e70069916239;Yes, I’ll work on creating a test case. It might take me some time. In the meantime, I’ve narrowed down the issue to which version it starts. It looks like the query works until version 5.4.22; version 5.4.21 correctly renders the SQL, but 5.4.22 does not. ","28/mai/2021 08:10 AM;603ecc105290e70069916239;I’m still unable to reproduce this issue without my legacy project code, so I’ve started debugging in the hibernate source. It looks like something is assigning type=142 to the AST object associated with the tableTwoBO, maybe inside HqlSqlBaseWalker, but I haven’t had time to sort that out yet. ","21/juin/2021 14:35 PM;603ecc105290e70069916239;After attempting to upgrade to 5.2.2, I found that my legacy project code was using a custom version of SQLGeneratorBase in order to append a statement to each generated SQL. This no longer appears to be a bug, and I think this can be closed. ",,,,,,,,,,,,,Terminé,,
Preserve generic type arguments when casting type models during the mapping phase,HSEARCH-4188,70837,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,11/mars/2021 09:28 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,12/mars/2021 01:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"E.g. with this model:

{code}
		abstract class IndexedEmbeddedLevel1<T> {
			public abstract T getLevel1Property();
			public abstract void setLevel1Property(T level1Property);
		}
		class IndexedEmbeddedLevel1Impl<T> extends IndexedEmbeddedLevel1<T> {
			T level1Property;
			@Override
			@GenericField
			public T getLevel1Property() {
				return level1Property;
			}
			@Override
			public void setLevel1Property(T level1Property) {
				this.level1Property = level1Property;
			}
		}
		@Indexed(index = INDEX_NAME)
		class IndexedEntity {
			@DocumentId
			Integer id;
			@IndexedEmbedded(includeDepth = 1, targetType = IndexedEmbeddedLevel1Impl.class)
			IndexedEmbeddedLevel1<String> level1;
			public IndexedEntity(int id, String level1Value) {
				this.id = id;
				this.level1 = new IndexedEmbeddedLevel1Impl<>();
				this.level1.setLevel1Property( level1Value );
			}
		}
{code}

... make sure that {{level1.level1Property}} is correctly assigned type {{String}}.

I need this to solve HSEARCH-4148.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-16T02:56:04.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2524,0|104mtz:zr,,,,,,HSEARCH - 2021-06,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Document the database-polling coordination strategy,HSEARCH-4187,70836,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,11/mars/2021 05:55 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,10/août/2021 03:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-orm,,,,0,,,,,,"Document the features added so far as part of [https://hibernate.atlassian.net/browse/HSEARCH-4132|https://hibernate.atlassian.net/browse/HSEARCH-4132|smart-link] , [https://hibernate.atlassian.net/browse/HSEARCH-4134|https://hibernate.atlassian.net/browse/HSEARCH-4134|smart-link] , [https://hibernate.atlassian.net/browse/HSEARCH-4231|https://hibernate.atlassian.net/browse/HSEARCH-4231|smart-link] 

Don’t forget to add a limitation section about DB timestamp resolution.",,,,,,,,,,,,,,,,,,,HSEARCH-4134,HSEARCH-4132,HSEARCH-4231,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-08-10T03:27:13.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2638,0|1009cw:000000xdur3mhxzzzxezsq4x,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-14,HSEARCH - 2021-15,HSEARCH - 2021-16,,,,"Yes, likely",,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Prefer sequence-per-entity (hierarchy) by default,HHH-14492,70835,70855,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,10/mars/2021 12:52 PM,18/mars/2021 12:49 PM,14/mars/2022 12:54 PM,17/mars/2021 16:16 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha7,,,,,,,,,,,,,0,,,,,,"Basically this is about changing the default value for `SequenceStyleGenerator#CONFIG_PREFER_SEQUENCE_PER_ENTITY` to true instead of false.

Relatedly, we may want to consider changing this from being based on the entity name to based on the table name.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-12T11:25:17.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104se0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
Apply default allocation/increment size for @GeneratedValue(AUTO),HHH-14491,70834,70855,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,10/mars/2021 12:48 PM,18/mars/2021 12:49 PM,14/mars/2022 12:54 PM,17/mars/2021 16:17 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha7,,,,,,,,,,,,,0,,,,,,"When annotating an id with `@GeneratedValue( strategy = AUTO )` (with no generator) we use a `SequenceStyleGenerator`.  

Since we treat AUTO as effectively SEQUENCE we really should honor the JPA default allocation/increment size of 50.  Currently we do not.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-12T11:25:17.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104sds:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,70855,IdentifierGenerator changes
ClassCastException thrown when using @PrePersist listener with ArrayList,HHH-14490,70833,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Mariya Iskrova,5aae53c63b2fcc2a6f6b9992,Mariya Iskrova,5aae53c63b2fcc2a6f6b9992,10/mars/2021 09:27 AM,10/mars/2021 09:27 AM,14/mars/2022 12:54 PM,,5.4.5,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"If a @PrePersist/ @PreUpdate listener is present on an @Entity, containing a List of objects, a ClassCastException is raised. 
 I have found a similar [issue|https://hibernate.atlassian.net/browse/HHH-13466], related to the same problem, but appeared to be present when it comes to usage of a Set.
My question is whether it is expected to have such a behavior when it comes to ArrayList casting. 

Also tested with the fixed hibernate-core version 5.4.5 and above and the problem is still present.

Here is the exception:

java.lang.ClassCastException: class java.util.ArrayList cannot be cast to class org.hibernate.collection.spi.PersistentCollection (java.util.ArrayList is in module java.base of loader 'bootstrap'; org.hibernate.collection.spi.PersistentCollection is in unnamed module of loader 'app')
 at org.hibernate.event.internal.FlushVisitor.processCollection(FlushVisitor.java:47)
 at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:104)
 at org.hibernate.event.internal.AbstractVisitor.processValue(AbstractVisitor.java:65)
 at org.hibernate.event.internal.AbstractVisitor.processEntityPropertyValues(AbstractVisitor.java:59)
 at org.hibernate.event.internal.DefaultFlushEntityEventListener.onFlushEntity(DefaultFlushEntityEventListener.java:182)
 at org.hibernate.event.internal.AbstractFlushingEventListener.flushEntities(AbstractFlushingEventListener.java:233)
 at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:93)
 at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:50)
 at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:108)
 at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1323)

Thanks in advance. 
Best Regards,
Mariya",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:05df431b-3713-4249-ba93-a229ce5b6592(ug:05df431b-3713-4249-ba93-a229ce5b6592),,,,,,,,,0|104sdk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Incorrect entity id alias in SQL query for @ManyToMany relation,HHH-14489,70832,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Евгений Захарченко,557058:c52cf5f0-c070-4ba4-bb5b-2ca7fec2185b,Евгений Захарченко,557058:c52cf5f0-c070-4ba4-bb5b-2ca7fec2185b,09/mars/2021 04:46 AM,09/mars/2021 23:43 PM,14/mars/2022 12:54 PM,,5.4.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,core,hibernate,ManyToMany,,,"This issue can be replicated in project git@github.com:hibernate/hibernate-demos.git with the provided patch.

In this patch, we have added many to many relation to the User object and apply soft deletion @Where condition for Skills table.
User with skills will be loaded with an entity graph.

In a case where we load user via Session “find” method collection loaded correctly, soft deleted entities were excluded from the result.
SQL query:

{code:sql}select
        user0_.id as id1_11_0_,
        user0_.email as email2_11_0_,
        user0_.name as name3_11_0_,
        user0_.phone as phone4_11_0_,
        skills1_.PARENT_ID as parent_i1_10_1_,
        skill2_.id as entity_i2_10_1_,
        skill2_.id as id1_8_2_,
        skill2_.deleted as deleted2_8_2_,
        skill2_.name as name3_8_2_ 
    from
        USERS user0_ 
    left outer join
        USER_TO_SKILL skills1_ 
            on user0_.id=skills1_.PARENT_ID 
    left outer join
        SKILLS skill2_ 
            on skills1_.ENTITY_ID=skill2_.id 
            and (
                skill2_.deleted is null
            ) 
    where
        user0_.id=?{code}

In this case skills objects will be loaded from ""skill2_.id as entity_i2_10_1_"" result column.

In a second case where we will load user with skills via query like 

{code:sql}elect u from User u where u.id = :id{code}

then we will receive EntityNotFoundException.
SQL query

{code:sql}select
        user0_.id as id1_11_0_,
        skill2_.id as id1_8_1_,
        user0_.email as email2_11_0_,
        user0_.name as name3_11_0_,
        user0_.phone as phone4_11_0_,
        skill2_.deleted as deleted2_8_1_,
        skill2_.name as name3_8_1_,
        skills1_.PARENT_ID as parent_i1_10_0__,
        skills1_.ENTITY_ID as entity_i2_10_0__ 
    from
        USERS user0_ 
    left outer join
        USER_TO_SKILL skills1_ 
            on user0_.id=skills1_.PARENT_ID 
    left outer join
        SKILLS skill2_ 
            on skills1_.ENTITY_ID=skill2_.id 
            and (
                skill2_.deleted is null
            ) 
    where
        user0_.id=?{code}

It happened because hibernate try to load Skill instances from ""skills1_.ENTITY_ID as entity_i2_10_0__ "" column. 
""skills1_."" is a join table and for this table soft deletion @Where condition was not applied.

To replicate this issue it is required to run BasicJpaDemo_1 example.

\[^Soft_deletion_issue_with_@ManyToMany.patch] ",Java 8,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/mars/2021 04:45 AM;ug:44ba4c02-1939-4155-b801-aa24307e5265;Soft_deletion_issue_with_@ManyToMany.patch;https://hibernate.atlassian.net/secure/attachment/49834/Soft_deletion_issue_with_%40ManyToMany.patch,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,1.0,ug:44ba4c02-1939-4155-b801-aa24307e5265(ug:44ba4c02-1939-4155-b801-aa24307e5265),,,,,,,,,0|104sdc:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Support for MonetDB,HHH-14488,70831,,Nouvelle fonctionnalité,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,Thodoris Zois,557058:d10692fd-f527-4df7-a2a9-0faab03e0fce,Thodoris Zois,557058:d10692fd-f527-4df7-a2a9-0faab03e0fce,Thodoris Zois,557058:d10692fd-f527-4df7-a2a9-0faab03e0fce,09/mars/2021 03:33 AM,09/mars/2021 03:33 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,ug:449a996e-365b-4f24-aa13-c5163316b33c(ug:449a996e-365b-4f24-aa13-c5163316b33c),,,,,,,,,0|104sd4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
PropertyAccessStrategyMapImpl imports wrong class,HHH-14487,70828,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,rick gong,60473bc22b3f9a006a2f7a10,rick gong,60473bc22b3f9a006a2f7a10,09/mars/2021 01:25 AM,11/mars/2021 02:47 AM,14/mars/2022 12:54 PM,,5.3.0.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-orm-modules,,,,0,,,,,,"*PropertyAccessStrategyMapImpl* imports *""org.hibernate.mapping.Map*"". Is that correct?
If i'm not very wrong, should import ""*java.util.Map*"" right?

I'm getting error like this:

{noformat}org.hibernate.PropertyNotFoundException: Could not resolve PropertyAccess for role_id on class java.util.HashMap. org.hibernate.PropertyNotFoundException: Could not resolve PropertyAccess for role_id on class java.util.HashMap at org.hibernate.property.access.internal.PropertyAccessStrategyChainedImpl.buildPropertyAccess(PropertyAccessStrategyChainedImpl.java:35){noformat}

Code: 
[https://github.com/hibernate/hibernate-orm/blob/a514460bb9b686d1e4e9aad86acd5eb86ca15bcb/hibernate-core/src/main/java/org/hibernate/property/access/internal/PropertyAccessStrategyMapImpl.java|https://github.com/hibernate/hibernate-orm/blob/a514460bb9b686d1e4e9aad86acd5eb86ca15bcb/hibernate-core/src/main/java/org/hibernate/property/access/internal/PropertyAccessStrategyMapImpl.java]



I was asking for help here:  [https://github.com/hibernate/hibernate-orm/discussions/3806|https://github.com/hibernate/hibernate-orm/discussions/3806]",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:23608630-f62c-4dac-9f4e-77db9b439264(ug:23608630-f62c-4dac-9f4e-77db9b439264),,,,,,,,0|104scg:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.2.17,2021-03-10 08:13:12.916,,,,"10/mars/2021 00:13 AM;557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a;Hi,

could you please show me an entity model that reproduces this issue?","11/mars/2021 02:47 AM;60473bc22b3f9a006a2f7a10;It always run into exception when involving:

{quote}Query query = entityManager.createNativeQuery(""select ......"");
query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(HashMap.class));{quote}

When we upgrading our application from springboot-2.0.8 to 2.3.3, the issue rises. After a quick research i found it works in hibernate-orm version 5.2.17. 



I know the 'Query.setResultTransformer' is deprecated, however i have tons of legacy codes to live with. As a dirty workaround i compiled a home-made hibernate-orm.jar and it back to normal... ",,,,,,,,,,,,,,,A faire,,
"PojoIndexingQueueEventProcessingPlan should only deal with ""previous"" routes",HSEARCH-4186,70827,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,09/mars/2021 01:18 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,06/mai/2021 03:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,,,,,0,,,,,,"As discussed here: [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-4134] 

When the processing plan reindexes an entity, the “current route” passed as an argument to the add/addOrUpdate methods might not be up-to-date anymore, so we need to re-compute it from the entity.

Essentially, we don’t need to include a “current route” in indexing event; we only need to include all possible previous routes, to make sure that we will always delete previously indexed documents.

We should probably apply the following changes:

* (maybe) change {{PojoIndexingQueueEventProcessingPlan}} / {{PojoIndexingQueueEventSendingPlan}} so that only a set of “previous routes” is passed to the methods. That set would include the current route, because by the time the event is processed, the “current” route can no longer be considered “current”.
* change the implementation of {{PojoIndexingQueueEventProcessingPlan}} so that we don’t pass a “current route” to the underlying indexing plan. Instead, we ask the indexing plan to compute the current route, as well as the previous routes, and we additionally provide a list of “current or previous routes at the time of event creation” to be considered as previous routes (i.e. for additional deletes).",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-06T03:27:07.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2570,0|104sc8:,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Allow id generators defined by annotation to be shared amongst a hierarchy,HHH-14486,70826,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Rejected,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,08/mars/2021 08:34 AM,09/mars/2021 06:27 AM,14/mars/2022 12:54 PM,09/mars/2021 06:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"This specifically relates to `hibernate.jpa.compliance.global_id_generators`.

JPA says that generators can be used by any entity mapping regardless of where the generator is defined which is very counter-intuitive.  In Hibernate we define this `hibernate.jpa.compliance.global_id_generators` setting to allow more intuitive behavior in that the generators are scoped in a intuitive manner.

One specific case where the non-compliant behavior is a bit too restrictive is defining the generator on the root of a hierarchy.  This issue is about allowing that with the intuitive non-compliant behavior

Note that this can easily be worked-around by defining the generator on a package which is considered “global scope”



[https://github.com/quarkusio/quarkus/issues/15538|https://github.com/quarkusio/quarkus/issues/15538|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104sc0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,09/mars/2021 06:27 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;Misunderstood the users question (see the linked discussion).  Won't change this - it logically makes no sense,,,,,,,,,,,,,,,,Terminé,,
Upgrade integration tests to use Oracle JDBC driver version 21.1,HHH-14485,70825,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,08/mars/2021 06:09 AM,19/mars/2021 00:13 AM,14/mars/2022 12:54 PM,12/mars/2021 03:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.30,5.5.0.Alpha1,,,,,,,,testsuite,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-12T03:04:50.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104sbs:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve support for Firebird 4,HHH-14484,70824,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Mark Rotteveel,557058:75255517-190e-4d8b-b2b9-a590fcce4259,Mark Rotteveel,557058:75255517-190e-4d8b-b2b9-a590fcce4259,Mark Rotteveel,557058:75255517-190e-4d8b-b2b9-a590fcce4259,08/mars/2021 05:23 AM,11/oct./2021 11:26 AM,14/mars/2022 12:54 PM,22/mars/2021 11:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Beta1,,,,,,,,,hibernate-core,,,,0,,,,,,"Dialect improvements for Firebird 4. 

Pull request: [https://github.com/hibernate/hibernate-orm/pull/3797|https://github.com/hibernate/hibernate-orm/pull/3797|smart-link] ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-22T11:15:47.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,mrotteveel(mrotteveel),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3797,0|104sbk:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Return type of session.search() in mapper-javabean does not expose the entity type,HSEARCH-4185,70822,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,08/mars/2021 02:01 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,08/mars/2021 03:44 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-javabean,,,,0,,,,,,"Does not cast type when searching in mapper-javabean.

{code:java}SearchResult<Book> result /*not cast*/ = session.search( scope )
					.where( (t) -> t.matchAll() )
					.fetchAll();{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-08T03:45:00.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,wklaczynski(wklaczynski),yrodiere(fenrhil),,,,,,,,0|104sb4:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-08 10:27:53.829,,,,08/mars/2021 02:27 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[https://translate.google.com/?sl=auto&tl=en&text=Nie chcę rzutować typu%2C gdy używane jest wyszukiwanie&op=translate|https://translate.google.com/?sl=auto&tl=en&text=Nie%20chc%C4%99%20rzutowa%C4%87%20typu%2C%20gdy%20u%C5%BCywane%20jest%20wyszukiwanie&op=translate],,,,,,,,,,,,,,,,Terminé,,
Insert statement with VALUES list is not split when Dialect.supportsValuesList() is false,HHH-14483,70819,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,08/mars/2021 00:38 AM,09/mars/2021 23:11 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6-wishlist,,,,,,,,,hibernate-core,,,,0,,,,,,"From the mailing list, reported by Mark Rotteveel:

{noformat}Testing against Firebird, it seems like Dialect.supportsValuesList() is ignored.

Specifically the test org.hibernate.orm.test.query.hql.InsertUpdateTests.testInsertValues generates the following statement even with Dialect.supportsValuesList() return false:

```
    insert
    into
        Ticket
        (id, ticket_key, subject, details)
    values
        (2, 'XYZ123', 'Outage', 'Something is broken'),  (
            13, 'HIJ456', 'x', 'x'
        )
```

Or is this a situation where this is ignored because the HQL explicitly contains two lists?

Mark{noformat}

The insert statement should probably be split into multiple insert statements. Maybe we can make use of DML in CTE for the splitting purpose and just emulate that properly? Anyway, the current implementations of {{Dialect.supportsValuesList}}are not really correct and should be revisited. Overall, the method should move to {{SqlAstTranslator}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104sag:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Implicit join registration discards previously resolved join paths,HHH-14482,70818,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Critique,,,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,06/mars/2021 13:38 PM,06/mars/2021 13:39 PM,14/mars/2022 12:54 PM,,6.0.0.Alpha7,6.0.0.Beta1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Assuming the following entity models:
{code}
    @Entity
    public static class TheEntity {
        @EmbeddedId
        private OriginalId originalId;
        private String data;

        public OriginalId getOriginalId() {
            return originalId;
        }

        public void setOriginalId(OriginalId originalId) {
            this.originalId = originalId;
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }
    }
{code}
{code}
    @Entity
    public static class RevisionInfoEntity {
        @Id
        private Integer id;

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }
    }
{code}
{code}
    @Embeddable
    public static class OriginalId implements Serializable {
        @ManyToOne
        private RevisionInfoEntity rev;
        private Integer id;

        public RevisionInfoEntity getRev() {
            return rev;
        }

        public void setRev(RevisionInfoEntity rev) {
            this.rev = rev;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public static OriginalId from(RevisionInfoEntity rev, Integer id) {
            OriginalId oId = new OriginalId();
            oId.rev = rev;
            oId.id = id;
            return oId;
        }

        @Override
        public int hashCode() {
            return Objects.hash(rev, id);
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (obj.getClass() != this.getClass()) {
                return false;
            }

            final OriginalId other = (OriginalId) obj;
            return Objects.equals(rev, other.rev) && Objects.equals(id, other.id);
        }
    }
{code}
The following HQL query will fail to locate all TableGroups:
{code}
SELECT e__
  FROM TheEntity e__ 
 WHERE e__.originalId.rev.id = (
      SELECT max(e2__.originalId.rev.id)
        FROM TheEntity e2__
       WHERE e2__.originalId.rev.id <= 2 AND e__.originalId.id = e2__.originalId.id)
{code}

The underlying issue is in {{AbstractSqmPath#registerImplicitJoinPath}} where we discard any previously registered SqmPath references by key if one exists.  In the query above, when the Subquery is evaluated, the predicate that references {code}e__{code} (the outer query root), re-registers an implicit join for {{originalId}} which had previously been resolved when evaluating the outer query's where-clause already.  By discarding this prior join, the query looses the ability to resolve the TableGroup associated with {code}e__.originalId.rev{code}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-10T06:01:32.000-0800"",""stateCount"":2,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,crancran(crancran),,,,,,,,,0|104sa8:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Hibernate sets entity fields to null depending on existence/length of string value in other field,HHH-14481,70817,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Blocage,Impossible à reproduire,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Josh McCullough,5aec83dc1b0caa2d33fa36e6,Josh McCullough,5aec83dc1b0caa2d33fa36e6,05/mars/2021 18:59 PM,08/mars/2021 06:55 AM,14/mars/2022 12:54 PM,08/mars/2021 06:55 AM,5.4.29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"This is a tough one. And it's truly bizarre.

We've run into this issue a few times over the last few years. The gist is that a record in the database (MySQL 5.7) is non-null, but Hibernate sets the field to null when fetching the entity. Thus causing null pointer exceptions and generally missing data. What is more crazy is that this happens depending on whether or not some other field in the database record has a value in some field. This is affecting related entities of that entity.

*For an elaborate example and supporting information, please see this SO post I created from 2019:*

https://stackoverflow.com/questions/57815740/varchar-column-breaks-hibernate-quietly-when-content-is-more-than-141-characters

Note that the SO question was naturally posted when we were on older versions of Hibernate / Spring -- but the issue is still occurring with the current versions of Hibernate / Spring.",Hibernate Core 5.4.29.Final; Spring Boot 2.2.1.RELEASE; MySQL 5.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,christian.beikov(christian.beikov),ug:485b59ee-cf0e-478c-89c6-20e31da89f2b(ug:485b59ee-cf0e-478c-89c6-20e31da89f2b),,,,,,,,0|104sa0:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,06/mars/2021 17:17 PM;5aec83dc1b0caa2d33fa36e6;I messed around a bit more and found that upgrading the MySQL Connector dependency (from {{6.0.6}} to {{8.0.23}} (latest)) solved the problem\! Not a Hibernate issue at all. *So this can be closed.*,,,,,,,,,,,,,,,,Terminé,,
Envers reflection error when updating an ElementCollection with EmbeddedId,HHH-14480,70816,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,Chris Cranford,557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c,Borys Makogonyuk Vasylev,557058:0037b95c-0b6f-48e6-88b7-c879e6ae3457,Borys Makogonyuk Vasylev,557058:0037b95c-0b6f-48e6-88b7-c879e6ae3457,05/mars/2021 06:32 AM,23/nov./2021 23:07 PM,14/mars/2022 12:54 PM,,5.4.20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-envers,,,,1,,,,,,"Envers having trouble matching fields when a model has a composite key id and a map of strings that is mapped as an element collection.

{code:java}@Entity
@Audited
@NoArgsConstructor
@AllArgsConstructor
@Data
public class DemoModel {
    @EmbeddedId
    private DemoCompositeKey id;

    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name=""demo_model_collection"", joinColumns = {
            @JoinColumn(name=""demo_one"", referencedColumnName = ""one""),
            @JoinColumn(name=""demo_two"", referencedColumnName = ""two"")
    })
    @MapKeyColumn(name = ""key_thing"")
    @Column(name = ""value_thing"")
    @EqualsAndHashCode.Exclude()
    private Map<String, String> someCollection = new HashMap<>();
}{code}

Composite Key:

{code:java}@Embeddable
@AllArgsConstructor
@NoArgsConstructor
public class DemoCompositeKey implements Serializable {
    Integer one;
    Integer two;
}{code}

Simple repo:

{code:java}@Repository
public interface DemoRepository extends JpaRepository<DemoModel, DemoCompositeKey> {}{code}

Fails with the following (full stacktrace):

{code:java}org.springframework.orm.jpa.JpaSystemException: Error accessing field [java.lang.Integer com.example.demo.DemoCompositeKey.one] by reflection for persistent property [com.example.demo.DemoCompositeKey#one] : A; nested exception is org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [java.lang.Integer com.example.demo.DemoCompositeKey.one] by reflection for persistent property [com.example.demo.DemoCompositeKey#one] : A

	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:353)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:255)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:538)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:743)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:711)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:633)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:386)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:178)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy118.save(Unknown Source)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:205)
	at com.sun.proxy.$Proxy120.save(Unknown Source)
	at com.example.demo.DemoRepositoryTest.whenUpdatingElementCollectionEnversErrorsOut(DemoRepositoryTest.java:31)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:74)
	at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:84)
	at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
	at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
	at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)
Caused by: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field [java.lang.Integer com.example.demo.DemoCompositeKey.one] by reflection for persistent property [com.example.demo.DemoCompositeKey#one] : A
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:75)
	at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValue(AbstractComponentTuplizer.java:59)
	at org.hibernate.tuple.component.AbstractComponentTuplizer.getPropertyValues(AbstractComponentTuplizer.java:65)
	at org.hibernate.tuple.component.PojoComponentTuplizer.getPropertyValues(PojoComponentTuplizer.java:92)
	at org.hibernate.type.ComponentType.getPropertyValues(ComponentType.java:443)
	at org.hibernate.type.ComponentType.isSame(ComponentType.java:172)
	at org.hibernate.envers.internal.entities.mapper.relation.MapCollectionMapper.isSame(MapCollectionMapper.java:128)
	at org.hibernate.envers.internal.entities.mapper.relation.MapCollectionMapper.mapCollectionChanges(MapCollectionMapper.java:156)
	at org.hibernate.envers.internal.entities.mapper.relation.AbstractCollectionMapper.mapCollectionChanges(AbstractCollectionMapper.java:147)
	at org.hibernate.envers.internal.entities.mapper.MultiPropertyMapper.mapCollectionChanges(MultiPropertyMapper.java:256)
	at org.hibernate.envers.internal.synchronization.work.PersistentCollectionChangeWorkUnit.<init>(PersistentCollectionChangeWorkUnit.java:51)
	at org.hibernate.envers.event.spi.BaseEnversCollectionEventListener.onCollectionAction(BaseEnversCollectionEventListener.java:86)
	at org.hibernate.envers.event.spi.EnversPreCollectionUpdateEventListenerImpl.onPreUpdateCollection(EnversPreCollectionUpdateEventListenerImpl.java:34)
	at org.hibernate.action.internal.CollectionUpdateAction.preUpdate(CollectionUpdateAction.java:113)
	at org.hibernate.action.internal.CollectionUpdateAction.execute(CollectionUpdateAction.java:58)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:604)
	at org.hibernate.engine.spi.ActionQueue.lambda$executeActions$1(ActionQueue.java:478)
	at java.base/java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:475)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:348)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:40)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:102)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1363)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:454)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3213)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2381)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:447)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:183)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$300(JdbcResourceLocalTransactionCoordinatorImpl.java:40)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:281)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:534)
	... 53 more
Caused by: java.lang.IllegalArgumentException: Can not set java.lang.Integer field com.example.demo.DemoCompositeKey.one to java.lang.String
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)
	at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)
	at java.base/java.lang.reflect.Field.get(Field.java:418)
	at org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:71)
	... 84 more{code}

h2. Additional details

This setup has been working without any issues for quite a while, but recently I decided I want to audit this entity and added the @Audited tag and added Hibernate Envers to the project.

Inserting the entity initially does not cause any issues and works as expected. But once one of the elements of the collection is updated the application errors out with the aforementioned error in the stacktrace. 

The original production code for DemoModel has some additional attributes and it made sense from a modeling perspective for it to have a composite key.

Repo with issue: [https://github.com/lances101/spring-boot-envers-issue|https://github.com/lances101/spring-boot-envers-issue]
[Initially created a stackoverflow|https://stackoverflow.com/questions/66465635/envers-reflection-error-when-updating-an-elementcollection-with-embeddedid], but this felt like the more proper place for this.

Hibernate itself seems unaffected, but it seems like Envers is having trouble with it. ","Hibernate 5.4.20, Java 11.0.5, MySQL/H2 ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:06673a6f-50bc-48e6-aa3b-8b41ff11d0c2(ug:06673a6f-50bc-48e6-aa3b-8b41ff11d0c2),ug:27925842-6a89-4af6-a5b6-b0b4ae95ddd6(ug:27925842-6a89-4af6-a5b6-b0b4ae95ddd6),crancran(crancran),ug:1ea74c5f-19c1-4892-af6c-8b06e6b30b6d(ug:1ea74c5f-19c1-4892-af6c-8b06e6b30b6d),,,,,,0|104s9s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2021-03-17 11:20:23.223,,,,"17/mars/2021 04:20 AM;5aaa62ece78b8c2a7c8880de;Had some time to play around with this some more. Swapping the composite for a primary key does fix the issue of course, but then that influences the underlying table structure and references. 

It would be great if Envers could be made aware of composite keys in such cases. ",18/nov./2021 15:44 PM;5c4581b917919c1f8bfaf2b8;@Borys I just updated your example to Envers 5.4.32.Final and Envers is still affected with this bug.,23/nov./2021 23:07 PM;557058:ea49f1db-ef91-4d96-8f3a-a939be8d2b1c;Hi [~accountid:5c4581b917919c1f8bfaf2b8] thanks for confirming.,,,,,,,,,,,,,,A faire,,
A contained entity with only irrelevant changes may mistakenly trigger reindexing,HSEARCH-4184,70815,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Simple,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,05/mars/2021 03:09 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,05/mars/2021 06:35 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"This only affects 6.1. ORM's event-based reindexing is probably unaffected due to its extra checks before marking an entity as dirty. I think the only way this could affect users is when relying on {{SearchIndexingPlan}} to explicitly mark entities are dirty.

In any case, this bug does show up on some new tests I'm writing, so that at least is real and annoying.

The bug was caused by the changes in HSEARCH-4139 / HSEARCH-4138.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-16T02:56:04.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2519,0|104mty:zx,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Support for  Spatialite,HHH-14479,70814,,Nouvelle fonctionnalité,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Won't Do,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,Karel Maesen,557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740,05/mars/2021 00:23 AM,02/févr./2022 11:12 AM,14/mars/2022 12:54 PM,02/févr./2022 11:12 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-spatial,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,maeseka(maeseka),,,,,,,,,0|104s9k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,02/févr./2022 11:12 AM;557058:68b80d8e-82af-4eb6-a1e3-ebdf68a7d740;No longer relevant,,,,,,,,,,,,,,,,Terminé,,
"SearchResult.took() returns incorrect, very large value with the Lucene backend",HSEARCH-4183,70813,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2021 23:40 PM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,05/mars/2021 02:41 AM,6.0.0.Final,6.0.1.Final,6.0.2.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,backend-lucene,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-16T02:56:03.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2515,0|104mty:zi,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve detection of whether an OutboxEvent entity mapping is required,HSEARCH-4182,70812,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2021 08:51 AM,02/déc./2021 06:32 AM,14/mars/2022 12:54 PM,01/oct./2021 01:40 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Beta1,,,,,,,,,,,,,0,,,,,,"See [https://github.com/hibernate/hibernate-search/pull/2512|https://github.com/hibernate/hibernate-search/pull/2512|smart-link] 



We’re currently testing whether the configuration property for “automatic_indexing.strategy” is set to some magic string. But that’s wrong:

* Users could legitimately use {{builtin:themagicstring}} as the value of that configuration property.
* In extreme scenarios, users could provide their own bean reference that would ultimately return the automatic indexing strategy indirectly.

We should try to improve the current implementation.

One way is to just retrieve the automatic indexing strategy (the bean holder) and test its type using instance of. That’s a bit dirty, but it will work most of the time.

As an alternative to instanceof, we could have a proper SPI. For example a {{contribute(StandardServiceRegistryBuilder serviceRegistryBuilder)}} method that would allow the strategy to contribute services, which could then be retrieved from the {{AdditionalJaxbMappingProducer}} to decide whether an additional mapping is required or not. That would require moving the instantiation of the automatic indexing strategy to a much earlier phase, however; possibly before the Hibernate Search integrator is called.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-10-01T01:40:33.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,HSEARCH-3280,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2662,0|1009cw:000000xdur3mhxzzzxezsq4p,,,,,,HSEARCH - 2021-02,HSEARCH - 2021-03,HSEARCH - 2021-04,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,HSEARCH - 2021-18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Allow DialectResolvers to be discovered by ServiceLoader,HHH-14478,70811,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,04/mars/2021 07:07 AM,18/mars/2021 12:49 PM,14/mars/2022 12:54 PM,08/mars/2021 06:23 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha7,,,,,,,,,,,,,0,,,,,,"Currently, we hardcoded all supported databases/dialects for the dialect resolution, but an SPI would be more appropriate especially since we are considering to move certain Dialects outside of hibernate-core into a dedicated artifact.

See the discussion here: https://github.com/hibernate/hibernate-orm/discussions/3783#discussioncomment-429586",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-08T06:24:08.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),steve(steve),,,,,,,,0|104s94:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Hibernate ORM 5.4.29.Final,HSEARCH-4181,70810,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,04/mars/2021 00:25 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,05/mars/2021 01:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,mapper-orm,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-04-16T02:56:03.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2516,0|104mty:zr,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Log warnings about the use of Javassist as BytecodeProvider being deprecated,HHH-14477,70809,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,03/mars/2021 02:43 AM,03/mars/2021 03:01 AM,14/mars/2022 12:54 PM,03/mars/2021 02:57 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=2, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-03T02:44:29.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne(sanne),,,,,,,,,0|104s8w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
org.hibernate.persister.entity.EntityPersister.getEntityTuplizer() is null,HHH-14476,70808,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Сергей Машков,557058:23fcadfe-2481-43fc-9335-9da2e62f2792,Сергей Машков,557058:23fcadfe-2481-43fc-9335-9da2e62f2792,03/mars/2021 02:16 AM,03/mars/2021 02:16 AM,14/mars/2022 12:54 PM,,6.0.0.Alpha6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,,,,,,"Committing transactions sometimes fails with the following stacktrace:


{noformat}
javax.persistence.RollbackException: Error while committing the transaction

  at org.hibernate.internal.ExceptionConverterImpl.convertCommitException(ExceptionConverterImpl.java:81)
  at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:104)
  at com.lesson3.jjfeb2021.models.DAO.ClientDaoTest.configure(ClientDaoTest.java:83)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.base/java.lang.reflect.Method.invoke(Method.java:564)
  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
  at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
  at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
  at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251)
  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
  at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
  at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
  at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
  at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
  at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
  at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
  at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)
  at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)
Caused by: java.lang.NullPointerException: Cannot invoke ""org.hibernate.tuple.entity.EntityTuplizer.isInstance(Object)"" because the return value of ""org.hibernate.persister.entity.EntityPersister.getEntityTuplizer()"" is null
  at org.hibernate.type.EntityType.toLoggableString(EntityType.java:514)
  at org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:73)
  at org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:117)
  at org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:127)
  at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:103)
  at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:39)
  at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:110)
  at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1335)
  at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:422)
  at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2655)
{noformat}

Workaround: specify the latest stable version 5.4.28.Final",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,ug:590de1dc-4e05-4481-bf90-182a627885a1(ug:590de1dc-4e05-4481-bf90-182a627885a1),,,,,,,,,0|104s8o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.28,,,,,,,,,,,,,,,,,,,,,A faire,,
select indices from ternary relation is broken since 5.4.13,HHH-14475,70806,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Burkhard Graves,5f3cd7b48d89e3004664f832,Burkhard Graves,5f3cd7b48d89e3004664f832,02/mars/2021 10:20 AM,10/janv./2022 04:59 AM,14/mars/2022 12:54 PM,22/avr./2021 03:20 AM,5.4.13,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5.0.Alpha1,,,,,,,,,hibernate-core,,,,0,,,,,,"Given three entities Person, Project and Role with Person holding a ternary relation

{code:java}@OneToMany
    @JoinTable(name = ""person_to_role"",
            joinColumns = @JoinColumn(name = ""person_id""),
            inverseJoinColumns = @JoinColumn(name = ""role_id"")
    )
    @MapKeyJoinColumn(name = ""project_id"")
    private Map<Project, Role> roles;{code}

the query `select indices(p.roles) from Person p` creates invalid SQL since 5.4.13.Final:

{code:sql}select
        select
            roles1_.project_id 
        from
            person_to_role roles1_ 
        where
            person0_.id=roles1_.person_id as col_0_0_ 
        from
            person person0_ cross 
        join
            person_to_role roles1_ 
        where
            person0_.id=roles1_.person_id;{code}

In 5.4.12.Final and below it's ok:

{code:sql}select
        roles1_.project_id as col_0_0_ 
    from
        person person0_ cross 
    join
        person_to_role roles1_ 
    where
        person0_.id=roles1_.person_id;{code}

-I created a small test project on github:- [-https://github.com/drahkrub/jpa_sandbox-|https://github.com/drahkrub/jpa_sandbox] Forget that, I attached a small test case now.","jdk 11, linux, mariadb",,,,,,,,,,,,,,,,,,,,,,,,,,,,12/mars/2021 08:19 AM;ug:36b38bfa-5ffa-4ac0-9b16-9e2c64e76492;HHH-14475.tar.bz2;https://hibernate.atlassian.net/secure/attachment/49838/HHH-14475.tar.bz2,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-22T03:19:45.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,1.0,ug:36b38bfa-5ffa-4ac0-9b16-9e2c64e76492(ug:36b38bfa-5ffa-4ac0-9b16-9e2c64e76492),christian.beikov(christian.beikov),gavin.king(gavin.king),,,,,,https://github.com/hibernate/hibernate-orm/pull/3821,0|104s88:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.12,2022-01-10 01:12:45.93,,,,"03/mars/2021 03:11 AM;5f3cd7b48d89e3004664f832;“Of course” 5.4.28.Final is affected too.

-Question: Am I blind or is it not possible to edit self created issues?- 🤔 I was blind.","12/mars/2021 08:29 AM;5f3cd7b48d89e3004664f832;Sorry, I just realized that the SQL produced in 5.4.13 onwards is ugly and inperformant but surprisingly valid SQL *in h2*\!

*But* it is invalid SQL in MariaDB (10.1 here), which makes me think that it is invalid in MySQL, too.

I attached a small unit test based on [https://github.com/hibernate/hibernate-test-case-templates|https://github.com/hibernate/hibernate-test-case-templates|smart-link] , which runs against

{noformat}<property name=""hibernate.connection.url"" value=""jdbc:mariadb://localhost/hibernate""/>
<property name=""hibernate.connection.username"" value=""hibernate""/>
<property name=""hibernate.connection.password"" value=""hibernate""/>
{noformat}

and fails (in 5.4.13 onwards).",12/mars/2021 11:21 AM;5f3cd7b48d89e3004664f832;also created a pull request and except for h2 all tests fail,"09/janv./2022 17:12 PM;557058:c227967f-4207-4715-82ea-1c48a845aea1;So FTR, the _correct_ HQL for this is:

    select index(r) from Person p join p.roles r

The {{indices()}} function is really meant for use with quantifiers and the {{in}} operator. It’s a subquery.","10/janv./2022 02:56 AM;5f3cd7b48d89e3004664f832;{quote}So FTR, the _correct_ HQL for this is: …{quote}

Interesting\! Can that be found in the docs? E.g. [https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#hql-collection-expressions|https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#hql-collection-expressions|smart-link] does not state that (“applicable in the {{SELECT}} clause only” or something like that).

Moreover, regarding JPA/JPQL, using {{key()}} (instead of {{index()}}) seams to be even more correct 😉, see [https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#hql-collection-qualification|https://docs.jboss.org/hibernate/orm/5.6/userguide/html_single/Hibernate_User_Guide.html#hql-collection-qualification|smart-link] (but the select gets “bigger”).","10/janv./2022 04:10 AM;557058:c227967f-4207-4715-82ea-1c48a845aea1;Well it was certainly stated in the old docs when I maintained them:



[https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/queryhql-expressions.html|https://docs.jboss.org/hibernate/stable/core.old/reference/en/html/queryhql-expressions.html|smart-link] 



At some stage the docs were rewritten and some information was lost and/or garbled. I found several rather bad mistakes in the chapter on HQL for Hibernate 5.

But I’ve just spend several days rewriting and fact-checking the chapter on HQL, getting ready for Hibernate 6, and I promise the new docs are much better.

With respect to {{map()}} vs {{key()}} that is a distinction that JPQL makes but that HQL doesn’t.","10/janv./2022 04:59 AM;557058:c227967f-4207-4715-82ea-1c48a845aea1;{quote}With respect to {{map()}} vs {{key()}} that is a distinction that JPQL makes but that HQL doesn’t.{quote}

Well, actually, that statement is too strong: they’re not _precisely_ equivalent. And yeah, fine, you’re right, I guess clearer it’s to use {{key()}} if it’s a {{Map}}.",,,,,,,,,,Terminé,,
Mass indexing in mapper-javabean,HSEARCH-4180,70805,,Nouvelle fonctionnalité,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Mineur(e)(s),Corrigé,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,Waldemar Kłaczyński,557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea,02/mars/2021 03:48 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,01/avr./2021 08:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-javabean,mapper-orm,mapper-pojo-base,,0,,,,,,"The modification is to add mass indexation to the module ""mapper-pojo"" as a common function for ""mapper-orm"" and ""mapper-javabean"". This will allow you to define your own strategies for mass indexation.

The change is to move the mass indexing code from ""hibernate-orm"" to ""mapper-pojo"" with the same functionality as in ""hibernate-orm"". In ""hibernate-orm"" mass indexing will be defined by mass indexing strategy, similar to loading strategy. Due to the fact that mass indexation uses batch processes, so it is more complex than the loading strategy, a special DSL can be built to facilitate the construction of such strategies. 

Thanks to this, you will be able to use the same code for indexing in mapping-javabean and mapping-orm, and building your own mass indexation in external mapping modules built by programmers using the elements from mapping-pojo. 
",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-01T08:08:35.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,wklaczynski(wklaczynski),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2503/,0|104mty:zv,,,,,,HSEARCH - 2021-05,HSEARCH - 2021-06,HSEARCH - 2021-07,,,,,,,,,,,,,,,,,,,,,,,,,"02/mars/2021 03:53 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;An example of mass indexing in mapper-javabean:



{code:java}		try ( SearchSession session = mapping.createSessionWithOptions()
				.loading( (options) -> {
					options.registerIndexLoader( Book.class, () -> {
						return bookmap.values().stream().collect( Collectors.toList() );
					} );

					options.registerIndexLoader( Author.class, () -> {
						return authormap.values().stream().collect( Collectors.toList() );
					} );
				} )
				.build() ) {{code}

Thanks to the added strategy for mass indexing with mapping-pojo:

{code:java}public class JavaBeanMassIndexingTypeLoadingStrategy<E> implements
		MassIndexingTypeLoadingStrategy<E, JavaBeanMassIndexerContext> {

	private final MassIndexingTypeGroupSelector group;
	private final List<MassIndexingInterceptor> identifierInterceptors = new ArrayList<>();
	private final List<MassIndexingInterceptor> documentInterceptors = new ArrayList<>();
	private final JavaBeanMassIndexingMappingContext mappingContext;
	private final LoadingTypeContextProvider typeContextProvider;
	private final JavaBeanMassIndexingTypeLoader loader;

	public JavaBeanMassIndexingTypeLoadingStrategy(JavaBeanMassIndexingMappingContext mappingContext,
			LoadingTypeContextProvider typeContextProvider, IndexLoader<E> indexLoader) {
		this.mappingContext = mappingContext;
		this.typeContextProvider = typeContextProvider;
		loader = new JavaBeanMassIndexingTypeLoader( this, indexLoader );
		identifierInterceptors.add( new JavaBeanProducerInterceptor( mappingContext ) );
		documentInterceptors.add( new JavaBeanProducerInterceptor( mappingContext ) );
		group = MassIndexingTypeGroupSelector.asNone();
	}

	@Override
	public MassIndexingTypeGroupSelector group() {
		return group;
	}

	@Override
	public MassIndexingTypeLoader<E, JavaBeanMassIndexerContext> createLoader(Set<PojoRawTypeIdentifier<? extends E>> expectedTypes) {
		return loader;
	}

	@Override
	public String entityName(PojoRawTypeIdentifier<? extends E> entityType) {
		LoadingTypeContext<? extends E> typeContext = typeContextProvider.indexedForExactType( entityType );
		return typeContext.entityName();
	}

	@Override
	public Object identifier(MassIndexingSessionContext sessionContext,
			PojoRawTypeIdentifier<? extends E> commonSuperType, Object entity) {
		PojoRawTypeIdentifier targetType = sessionContext.runtimeIntrospector().detectEntityType( entity );
		LoadingTypeContext typeContext = typeContextProvider.indexedForExactType( targetType );
		return typeContext.identifierMapping().identifier( null, () -> entity );
	}

	@Override
	public Object extractReferenceOrSuppress(MassIndexingSessionContext sessionContext,
			PojoRawTypeIdentifier<? extends E> commonSuperType, Object entity, Throwable throwable) {
		String entityName = entityName( commonSuperType );
		Object identifier = identifier( sessionContext, commonSuperType, entity );
		return EntityReferenceFactory.safeCreateEntityReference( mappingContext.entityReferenceFactory(),
				entityName, identifier, throwable::addSuppressed );
	}

	@Override
	public List<MassIndexingInterceptor> identifierInterceptors() {
		return identifierInterceptors;
	}

	@Override
	public List<MassIndexingInterceptor> documentInterceptors() {
		return documentInterceptors;
	}

	private static class JavaBeanProducerInterceptor implements MassIndexingInterceptor {

		private final JavaBeanMassIndexingMappingContext mappingContext;

		public JavaBeanProducerInterceptor(JavaBeanMassIndexingMappingContext mappingContext) {
			this.mappingContext = mappingContext;
		}

		@Override
		public void procesInterceptor(MassIndexingInterceptorInvocationContext ictx) throws Exception {
			MassIndexingSessionContext sessionContext = mappingContext.sessionContext();
			ictx.contextData().put( MassIndexingSessionContext.class, sessionContext );
			ictx.invoke();
		}
	}

	private static class JavaBeanMassIndexingTypeLoader<E> implements MassIndexingTypeLoader<E, JavaBeanMassIndexerContext> {
		private final JavaBeanMassIndexingTypeLoadingStrategy strategy;
		private final IndexLoader<E> indexLoader;

		public JavaBeanMassIndexingTypeLoader(JavaBeanMassIndexingTypeLoadingStrategy strategy, IndexLoader<E> indexLoader) {
			this.strategy = strategy;
			this.indexLoader = indexLoader;
		}

		@Override
		public void loadIndex(MassIndexingTypeLoadingContext<E, JavaBeanMassIndexerContext> loading) throws InterruptedException {
			MassIndexingSessionContext sessionContext = (MassIndexingSessionContext) loading
					.contextData().get( MassIndexingSessionContext.class );
			List<E> entiteies = indexLoader.load();
			Map<Object, E> map;
			map = entiteies.stream()
					.collect( Collectors.toMap( entity -> strategy.identifier( sessionContext, loading.commonSuperType(), entity ),
							Function.identity() ) );

			MassIndexingTypeBatchingStep batching = loading.batching( (ctx, ids) -> {
				return ids.stream().map( map::get ).collect( Collectors.toList() );
			} );

			loading.totalCount( map.size() );
			int batchSize = loading.indexer().batchSize();
			List<Object> destination = new ArrayList<>( batchSize );
			Set<Object> identifiers = map.keySet();
			for ( Object identifier : identifiers ) {
				destination.add( identifier );
				if ( !loading.isActive() ) {
					throw new InterruptedException();
				}

				if ( destination.size() == batchSize ) {
					batching.load( destination );
					destination.clear();
				}

			}

			batching.load( destination );
		}
	}
}{code}","02/mars/2021 03:57 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;The previous indexation in mapping-orm also uses mapping-pojo. Thanks to the strategy that replaces the existing indexation while maintaining the current functionality:





{code:java}
public class HibernateOrmJpaMassIndexingTypeLoadingStrategy<E, I> implements
		MassIndexingTypeLoadingStrategy<E, HibernateOrmMassIndexerContext> {

	private static final Log log = LoggerFactory.make( Log.class, MethodHandles.lookup() );

	private static final String ID_PARAMETER_NAME = ""ids"";

	private final HibernateOrmMassIndexingMappingContext mappingContext;
	private final List<MassIndexingInterceptor> identifierProducerInterceptors = new ArrayList<>();
	private final List<MassIndexingInterceptor> documentProducerInterceptors = new ArrayList<>();
	private final HibernateOrmSessionTypeContextProvider typeContextProvider;
	private final SessionFactoryImplementor sessionFactory;
	private final EntityPersister rootEntityPersister;
	private final TypeQueryFactory<E, I> queryFactory;

	HibernateOrmJpaMassIndexingTypeLoadingStrategy(HibernateOrmMassIndexingMappingContext mappingContext,
			HibernateOrmSessionTypeContextProvider typeContextContainer,
			SessionFactoryImplementor sessionFactory,
			EntityPersister rootEntityPersister, TypeQueryFactory<E, I> queryFactory) {
		this.mappingContext = mappingContext;
		this.sessionFactory = sessionFactory;
		this.rootEntityPersister = rootEntityPersister;
		this.queryFactory = queryFactory;
		this.typeContextProvider = typeContextContainer;
		identifierProducerInterceptors.add( new HibernateOrmMassIndexingIdentifierProducerInterceptor( mappingContext ) );
		documentProducerInterceptors.add( new HibernateOrmMassIndexingDocumentProducerInterceptor( mappingContext ) );
	}

	@Override
	public MassIndexingTypeGroupSelector group() {
		return (superType1, superType2) -> {
			LoadingIndexedTypeContext<?> commonSuperType1 = typeContextProvider.indexedForExactType( superType1 );
			LoadingIndexedTypeContext<?> commonSuperType2 = typeContextProvider.indexedForExactType( superType2 );

			EntityPersister entityPersister = commonSuperType1.entityPersister();
			EntityPersister otherEntityPersister = commonSuperType2.entityPersister();
			if ( HibernateOrmUtils.isSuperTypeOf( entityPersister, otherEntityPersister ) ) {
				return MassIndexingTypeJoin.TOP;
			}
			if ( HibernateOrmUtils.isSuperTypeOf( otherEntityPersister, entityPersister ) ) {
				return MassIndexingTypeJoin.NEXT;
			}
			return MassIndexingTypeJoin.NONE;
		};
	}

	public HibernateOrmQueryLoader<E, I> createQueryLoader(
			Set<? extends PojoRawTypeIdentifier<? extends E>> targetEntityTypes) {
		Set<Class<? extends E>> includedTypesFilter;
		if ( HibernateOrmUtils.targetsAllConcreteSubTypes( sessionFactory, rootEntityPersister,
				targetEntityTypes ) ) {
			// All concrete types are included, no need to filter by type.
			includedTypesFilter = Collections.emptySet();
		}
		else {
			includedTypesFilter = new HashSet<>( targetEntityTypes.size() );
			for ( PojoRawTypeIdentifier<? extends E> includedType : targetEntityTypes ) {
				includedTypesFilter.add( includedType.javaClass() );
			}
		}
		return new HibernateOrmQueryLoader<>( queryFactory, includedTypesFilter );
	}

	@Override
	public HibernateOrmMassIndexingTypeLoader<E> createLoader(Set<PojoRawTypeIdentifier<? extends E>> expectedTypes) {
		HibernateOrmQueryLoader<? super E, I> typeGroupLoader = createQueryLoader( expectedTypes );
		return new HibernateOrmJpaStrategyMassIndexingTypeLoader( typeGroupLoader );
	}

	@Override
	public String entityName(PojoRawTypeIdentifier<? extends E> entityType) {
		LoadingIndexedTypeContext<? extends E> typeContext = typeContextProvider.indexedForExactType( entityType );
		return typeContext.jpaEntityName();
	}

	@Override
	public Object identifier(MassIndexingSessionContext sessionContext,
			PojoRawTypeIdentifier<? extends E> commonSuperType, Object entity) {
		Session session = ((HibernateOrmMassIndexingSessionContext) sessionContext).session();
		return session.getIdentifier( entity );
	}

	@Override
	public Object extractReferenceOrSuppress(MassIndexingSessionContext sessionContext,
			PojoRawTypeIdentifier<? extends E> commonSuperType, Object entity, Throwable throwable) {
		String entityName = entityName( commonSuperType );
		Object identifier = identifier( sessionContext, commonSuperType, entity );
		return EntityReferenceFactory.safeCreateEntityReference( mappingContext.entityReferenceFactory(),
				entityName, identifier, throwable::addSuppressed );
	}

	@Override
	public List<MassIndexingInterceptor> identifierInterceptors() {
		return identifierProducerInterceptors;
	}

	@Override
	public List<MassIndexingInterceptor> documentInterceptors() {
		return documentProducerInterceptors;
	}

	private class HibernateOrmJpaStrategyMassIndexingTypeLoader<E> implements HibernateOrmMassIndexingTypeLoader<E> {
		private final HibernateOrmQueryLoader<? super E, I> typeGroupLoader;

		public HibernateOrmJpaStrategyMassIndexingTypeLoader(HibernateOrmQueryLoader<? super E, I> typeGroupLoader) {
			this.typeGroupLoader = typeGroupLoader;
		}

		@Override
		public void loadIndex(MassIndexingTypeLoadingContext<E, HibernateOrmMassIndexerContext> loading) throws InterruptedException {
			HibernateOrmMassIndexerContext indexer = loading.indexer();
			int fetchSize = indexer.fetchSize();
			int batchSize = indexer.batchSize();
			long objectsLimit = indexer.objectsLimit();

			MassIndexingTypeBatchingStep batching = loading.batching( (ctx, ids) -> {
				CacheMode cacheMode = indexer.cacheMode();
				SessionImplementor session = (SessionImplementor) ctx.contextData().get( SessionImplementor.class );
				Query<? super E> query = typeGroupLoader.createLoadingQuery( session, ID_PARAMETER_NAME )
						.setParameter( ID_PARAMETER_NAME, ids )
						.setCacheMode( cacheMode )
						.setLockMode( LockModeType.NONE )
						.setCacheable( false )
						.setHibernateFlushMode( FlushMode.MANUAL )
						.setFetchSize( ids.size() );
				return query.getResultList();
			} );

			SharedSessionContractImplementor session = (SharedSessionContractImplementor) loading
					.contextData().get( SharedSessionContractImplementor.class );

			long totalCount = typeGroupLoader
					.createCountQuery( session )
					.setCacheable( false ).uniqueResult();

			if ( objectsLimit != 0 && objectsLimit < totalCount ) {
				totalCount = objectsLimit;
			}
			if ( log.isDebugEnabled() ) {
				log.debugf( ""going to fetch %d primary keys"", (Long) totalCount );
			}
			loading.totalCount( totalCount );

			ArrayList<I> destinationList = new ArrayList<>( batchSize );
			long counter = 0;
			try ( ScrollableResults results = typeGroupLoader.createIdentifiersQuery( session )
					.setCacheable( false )
					.setFetchSize( fetchSize ).scroll( ScrollMode.FORWARD_ONLY ) ) {

				while ( results.next() ) {
					@SuppressWarnings(""unchecked"")
					I id = (I) results.get( 0 );
					destinationList.add( id );
					if ( destinationList.size() == batchSize ) {
						// Explicitly checking whether the TX is still open; Depending on the driver implementation new ids
						// might be produced otherwise if the driver fetches all rows up-front
						if ( !(loading.isActive() && session.isTransactionInProgress()) ) {
							throw log.transactionNotActiveWhileProducingIdsForBatchIndexing( loading.includedEntityNames() );
						}

						batching.load( destinationList );
						destinationList = new ArrayList<>( batchSize );
					}
					counter++;
					if ( counter == totalCount ) {
						break;
					}
				}
			}
			batching.load( destinationList );
		}
	}
}

{code}","02/mars/2021 04:30 AM;557058:77e50cac-bda3-4af4-9bb3-6461f4d10eea;To enable the definition of various use cases, e.g. transactions, orm sessions, etc ... Proposes a mechanism of nested aspects. You can add interceptions that implement extended use cases of the mass index.

An example of an aspect used in hibernate-orm, in a batch document production process:



{code:java}public class HibernateOrmMassIndexingDocumentProducerInterceptor implements MassIndexingInterceptor {
........
	@Override
	public void procesInterceptor(MassIndexingInterceptorInvocationContext ictx) throws Exception {
		HibernateOrmMassIndexerContext indexer = (HibernateOrmMassIndexerContext) ictx.indexing();
		CacheMode cacheMode = indexer.cacheMode();
		Integer transactionTimeout = indexer.transactionTimeout();
		String tenantId = ictx.tenantId();

		try ( SessionImplementor upperSession = (SessionImplementor) factory
				.withOptions()
				.tenantIdentifier( tenantId )
				.openSession() ) {
			upperSession.setHibernateFlushMode( FlushMode.MANUAL );
			upperSession.setCacheMode( cacheMode );
			upperSession.setDefaultReadOnly( true );

			HibernateOrmScopeSessionContext sessionContext = mappingContext.sessionContext( upperSession );
			ictx.contextData().put( MassIndexingSessionContext.class, sessionContext );

			ictx.invoke( next -> {
				SessionImplementor session = sessionContext.session();
				ictx.contextData().put( SessionImplementor.class, session );
				try {
					beginTransaction( session, transactionTimeout );
					next.proceed();
					session.clear();
				}
				finally {
					// it's read-only, so no need to commit
					rollbackTransaction( session );
				}

			} );

		}
	}
......{code}",,,,,,,,,,,,,,Terminé,,
Refactor internal visibility to allow Hibernate Reactive to implement non-primary key associations,HHH-14474,70804,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,Sanne Grinovero,557058:99e61e65-956b-4a21-b29c-06057642e9ea,02/mars/2021 02:05 AM,03/mars/2021 03:01 AM,14/mars/2022 12:54 PM,02/mars/2021 02:35 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=6, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":6,""lastUpdated"":""2021-03-02T05:25:59.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":6,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gavin.king(gavin.king),sanne(sanne),,,,,,,,0|104s7s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Undecided,,,,,,,,,,,,,,,,,,Terminé,,
Multi-index Elasticsearch query fails when nested field used in distance sort is present in only one index,HSEARCH-4179,70803,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/mars/2021 01:30 AM,02/mars/2021 04:04 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"This is actually due to a limitation in Elasticsearch that we cannot work around; see {{org.hibernate.search.integrationtest.backend.elasticsearch.testsupport.util.ElasticsearchTckBackendFeatures#supportsDistanceSortWhenNestedFieldMissingInSomeTargetIndexes}} after we've merged the fix for HSEARCH-4173.

We should report this upstream.

Note there used to be the same problem for field sorts, at least until 6.6, but it got solved in 6.7 or 6.8. We should probably look for that bugfix, it will give the bug report for distance sorts more weight.",,,,,,,,,,,,,,,,,,,HSEARCH-4173,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|104s7k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Resolve managed class name with class loader as well,HHH-14473,70802,,Amélioration,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,John Niang,603dfcf5678612006b9f518e,John Niang,603dfcf5678612006b9f518e,John Niang,603dfcf5678612006b9f518e,02/mars/2021 01:27 AM,03/mars/2021 03:29 AM,14/mars/2022 12:54 PM,03/mars/2021 03:29 AM,5.5-backlog,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,core,enhancement,,,,"Hibernate tries to resolve managed class names by converting class name to class file name and package info file name when invoke *org.hibernate.boot.model.process.internal.ScanningCoordinator#applyScanResultsToManagedResources*, But if the managed class names contain name of auto-generated classes by ByteBuddy.

So we should resolve the class name by class loader as well if both of the class file name and package info file name are not found. ","hibernateVersion=5.5.0-SNAPSHOT
javaVersion=openjdk version ""11.0.10"" 2021-01-19
osVersion=Linux 5.10.18-1-MANJARO #1 SMP PREEMPT Tue Feb 23 18:07:15 UTC 2021 x86_64 GNU/Linux
databasePlatform=MySQL",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-03T03:42:34.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:40d678f5-aac2-45f9-9313-0238989d32f2(ug:40d678f5-aac2-45f9-9313-0238989d32f2),,,,,,,,,0|104s7c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to maven-checkstyle-plugin 3.1.2 and Checkstyle 8.41,HSEARCH-4178,70801,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,02/mars/2021 00:51 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,02/mars/2021 02:09 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,build,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-02T05:30:11.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2510,0|104mty:z,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve NamedPredicate API,HSEARCH-4177,70800,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/mars/2021 09:40 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,26/avr./2021 23:44 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,mapper-pojo-base,0,,,,,,"# I'm not sure we have something definitive, so maybe we should mark all related APIs as {{@Incubating}}?
# {{NamedPredicateFactory}} is a bit confusing considering there's another interface called {{SearchPredicateFactory}}. Maybe rename it to {{NamedPredicateProvider}}? {{NamedPredicateSupplier}}? {{NamedPredicateDefinition}}?",,,,,,,,,,,,,,,,,,,HSEARCH-3325,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-26T23:44:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2559,0|104mtz:m,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Multi-index Elasticsearch query fails when scaled_float field used in sort is present in only one index,HSEARCH-4176,70799,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/mars/2021 09:09 AM,02/mars/2021 02:15 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"This is actually due to a limitation in Elasticsearch that we cannot work around; see {{org.hibernate.search.backend.elasticsearch.types.sort.impl.ElasticsearchStandardFieldSort#doToJsonSorts}} after we've merged the fix for HSEARCH-4173.

We should report this upstream.",,,,,,,,,,,,,,,,,,,HSEARCH-4173,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezv,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Bidirectional relationship with @NotNull on both sides fails to save,HHH-14472,70798,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Oliver Breidenbach,557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d,Oliver Breidenbach,557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d,01/mars/2021 03:55 AM,09/mars/2021 03:45 AM,14/mars/2022 12:54 PM,,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,hibernate-core,,,,0,,,,,,"Simular to
[https://hibernate.atlassian.net/browse/HHH-14129|https://hibernate.atlassian.net/browse/HHH-14129]
we have a bidirectional relationshipt between parent and child. But we have both sides marked as '@NotNull'.
This works fine until release 5.4.19. Starting with relesase 5.4.20 the save methode fails with the following Exception:

{noformat}org.hibernate.TransientPropertyValueException: Not-null property references a transient value - transient instance must be saved before current operation : org.hibernate.test.annotations.manytoone.NotNullManyToOneTest$Parent.child -> org.hibernate.test.annotations.manytoone.NotNullManyToOneTest$Child{noformat}

 

To reproduce the exception you can use the NotNullManyToOneTest.

Just add the @NotNull annotation to the child property of the parent entity.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,dreab8(dreab8),OliverB(oliverb),,,,,,,,0|104s74:,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.19,2021-03-03 10:33:04.505,,,,"03/mars/2021 02:33 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;Hi [~accountid:557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d] ,

I’m tried the change to the {{NotNullManyToOneTest}} but it seems the same failure happens also for version 5.4.19.



Can you please provide a test that just fails for versions >= 5.4.19 ?



Thanks","04/mars/2021 23:21 PM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;Hi Andrea,
thank you for your fast responce. And sorry for not providing a test in the first place.

Unfortunately until now I could not reproduce the failure with a test. I modeled my example entities as my real entities. Just left out some properties that should not have any affect.
But with the test the scenario works with 5.4.19 and with 5.4.28.
I have to dig further to create a test reproducing my failure.
CU","05/mars/2021 00:12 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;Hi [~accountid:557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d] ,

out of curiosity, does your schema has {{not null}} values for the 2 Foreign Key columns?

 and can you try to set {{javax.persistence.validation.mode=CALLBACK}} ?

Thanks","05/mars/2021 03:03 AM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;Hi @Andrea,

I just figured out that we do not have {{not null constrains}} for the 2 Foraign Key columns.

Should I set {{javax.persistence.validation.mode=CALLBACK}} in our application or in the test case?

Our application is running with bean validation so setting this did not change anything.

In the test case I do not get the dependency right. So I get a{{ java.lang.NoClassDefFoundError: javax/el/ELManager}}.","05/mars/2021 03:25 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;I suggested setting it in your application, with the default value {{AUTO}} Hibernate kind assumes the schema as {{non null}} for the Foreign key columns and this causes the exception. ",05/mars/2021 04:58 AM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;{{javax.persistence.validation.mode=CALLBACK}} does not change anything.,"05/mars/2021 06:05 AM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;Hi Andrea,

I beleave the following is happing. 

On the parent.child property I have the {{@NotNull}} annotation but not {{optional=false}} set.

On the child.parent property I have the  {{@NotNull}} annotation and {{optional=false}} set.

This works fine until 5.4.19. With release 5.4.20 you added {{property.setOptional( !hasNotNull );}} to {{TypeSafeActivator}}. Now both side of the relation are {{optional=false}}, and hibernate fails to save the parent entity.

[https://github.com/hibernate/hibernate-orm/blob/17c5fab50e9a1c90a96a01498b8c95b1646194cc/hibernate-core/src/main/java/org/hibernate/cfg/beanvalidation/TypeSafeActivator.java#L353|https://github.com/hibernate/hibernate-orm/blob/17c5fab50e9a1c90a96a01498b8c95b1646194cc/hibernate-core/src/main/java/org/hibernate/cfg/beanvalidation/TypeSafeActivator.java#L353]

My testcase did not use bean validation and so the optional was not changed to {{optional=false}}. If I set {{optional=false}} I get the same failure as in my application.
I do not understand what is the problem with a bidirectional reference with {{optional=false}} on both sides.

 ","05/mars/2021 08:30 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;in the case of {{NotNullManyToOneTest}} the mapping produces 2 tables having both a not null Foreign Key and this is the source of the problem.

in case of {{ValidationMode}}.CALLBACK the {{applyRelationalConstraints}} is not executed and then  {{property.setOptional( !hasNotNull );}} is not applied (see {{TypeSafeActivator}} line 146) but  {{javax.persistence.validation.mode}} is considered only when {{EntityManager}} is used. 

In your case probably a solution is to set {{hibernate.validator.apply_to_ddl=false}} ","07/mars/2021 04:44 AM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;With {{hibernate.validator.apply_to_ddl=false}} the failure is gone. So yes this could be a solution.

I still does not understand why on a bidirectional connection not both sides can be non null. The constrainsts could be deferred. This should perfectly work.","08/mars/2021 02:53 AM;557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d;Hi Andrea,

thank you for your help. It helped me a lot. I have a solution for my problem. So feel free to close this ticket. But I still think that hibernate is to strikt hear. The not null constraints could be deffered.

Thanks agaein

Oliver","09/mars/2021 03:45 AM;557058:8ce9ebec-e8f7-4cb9-b414-ea2ae49591e3;Hi [~accountid:557058:76a16e01-3537-477b-a1d1-0a9e2a6bde9d] ,

you are welcome\!

I want to investigate a little more before closing this Jira.",,,,,,A faire,,
Unify field value converter with identifier value converters,HSEARCH-4175,70797,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/mars/2021 02:01 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,09/juil./2021 05:34 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,mapper-pojo-base,0,,,,,,"HSEARCH-4142 introduces projection conversion for identifiers, and makes the identifier converters very similar to field converters.

I think we should be able to factorize some code, because identifier value conversion is very similar to field value conversion.

On the mapper side, this won't change much as we'll still have separate concepts for {{IdentifierBridge}} and {{ValueBridge}}. And there's no point unifying them as there are key differences ({{indexNullAs}}, multiple target types for {{ValueBridge}} vs. always String for {{IdentifierBridge}}, ...).

On the backend side, though, we could probably introduce a new set of interfaces to replace {{FromDocumentFieldValueConverter}}/{{ToDocumentFieldValueConverter}}, as shown below. We'd deprecate the old ones.

Then we should be able to use {{DslConverter}}/{{ProjectionConverter}} for both field converters and ID converters, which should allow us to get rid of some duplicate code.

**WARNING**: Make sure to:

* Deprecate old interfaces, but keep them working
* Add specific tests for the old interfaces that are part of the API.
* Review error messages to make sure they make sense with both field values and ID values (no mention of ""field"" or ""path"", in particular)
* 

{code}
/**
 * A converter from a source value to a target value in the document model.
 *
 * @param <V> The type of source values.
 * @param <F> The type of target values in the document model.
 */
public interface ToDocumentValueConverter<V, F> {

	/**
	 * @param value The source value to convert.
	 * @param context A context that can be
	 * {@link ToDocumentValueConvertContext#extension(ToDocumentValueConvertContextExtension) extended}
	 * to a more useful type, giving access to such things as a Hibernate ORM SessionFactory (if using the Hibernate ORM mapper).
	 * @return The converted index field value.
	 */
	F toDocumentValue(V value, ToDocumentValueConvertContext context);

	/**
	 * @param other Another {@link ToDocumentValueConverter}, never {@code null}.
	 * @return {@code true} if the given object behaves exactly the same as this object,
	 * i.e. its {@link #toDocumentValue(Object, ToDocumentValueConvertContext)}
	 * method is guaranteed to always return the same value as this object's
	 * when given the same input. {@code false} otherwise, or when in doubt.
	 */
	default boolean isCompatibleWith(ToDocumentValueConverter<?, ?> other) {
		return equals( other );
	}

}
{code}

{code}
/**
 * ...
 * @deprecated Implement {@link ToDocumentValueConverter} instead. 
 */
@Deprecated
public interface ToDocumentFieldValueConverter<V, F> extends ToDocumentValueConverter<F, V> {
	...

	default F toDocumentValue(V value, ToDocumentFieldValueConvertContext context) {
		return convert(value, context);
	}

	default boolean isCompatibleWith(ToDocumentFieldValueConverter<?, ?> other) {
		return other instanceof ToDocumentFieldValueConverter && isCompatibleWith( (ToDocumentFieldValueConverter<?, ?>) other );
	}

}
{code}

{code}
public interface ToDocumentValueConvertContext extends ToDocumentFieldValueConvertContext {

	/**
	 * Extend the current context with the given extension,
	 * resulting in an extended context offering more options.
	 *
	 * @param extension The extension to apply.
	 * @param <T> The type of context provided by the extension.
	 * @return The extended context.
	 * @throws SearchException If the extension cannot be applied (wrong underlying technology, ...).
	 */
	<T> T extension(ToDocumentValueConvertContextExtension<T> extension);

}
{code}

{code}
/**
 * A converter from a source value in the document model to a different value.
 *
 * @param <F> The type of source values in the document model.
 * @param <V> The type of target values.
 */
public interface FromDocumentValueConverter<F, V> {

	/**
	 * @param value The value in the document model to convert.
	 * @param context A context that can be
	 * {@link FromDocumentValueConvertContext#extension(FromDocumentValueConvertContextExtension) extended}
	 * to a more useful type, giving access to such things as a Hibernate ORM Session (if using the Hibernate ORM mapper).
	 * @return The converted value.
	 */
	V fromDocumentValue(F value, FromDocumentValueConvertContext context);

	/**
	 * @param other Another {@link FromDocumentValueConverter}, never {@code null}.
	 * @return {@code true} if the given object behaves exactly the same as this object,
	 * i.e. its {@link #convert(Object, FromDocumentValueConvertContext)}
	 * method is guaranteed to always return the same value as this object's
	 * when given the same input. {@code false} otherwise, or when in doubt.
	 */
	default boolean isCompatibleWith(FromDocumentValueConverter<?, ?> other) {
		return equals( other );
	}

}
{code}

{code}
/**
 * ...
 * @deprecated Implement {@link FromDocumentValueConverter} instead. 
 */
@Deprecated
public interface FromDocumentFieldValueConverter<F, V> extends FromDocumentValueConverter<F, V> {
	...

	default V fromDocumentValue(F value, FromDocumentValueConvertContext context) {
		return convert(value, context);
	}

	default boolean isCompatibleWith(FromDocumentValueConverter<?, ?> other) {
		return other instanceof FromDocumentFieldValueConverter && isCompatibleWith( (FromDocumentFieldValueConverter<?, ?>) other );
	}

	...
}
{code}

{code}
public interface FromDocumentValueConvertContext extends FromDocumentFieldValueConvertContext {

	/**
	 * Extend the current context with the given extension,
	 * resulting in an extended context offering more options.
	 *
	 * @param extension The extension to apply.
	 * @param <T> The type of context provided by the extension.
	 * @return The extended context.
	 * @throws SearchException If the extension cannot be applied (wrong underlying technology, ...).
	 */
	<T> T extension(FromDocumentValueConvertContextExtension<T> extension);

}
{code}",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-07-09T05:33:43.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2611,0|104mtz:z9r,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Concurrency issue in DynamicBatchingEntityLoader,HHH-14471,70796,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,Christian Beikov,557058:0222998d-a0c8-4789-91ec-6a92d10dfb9a,01/mars/2021 00:49 AM,03/mars/2021 11:53 AM,14/mars/2022 12:54 PM,03/mars/2021 11:53 AM,5.4.28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,As discussed on discourse https://discourse.hibernate.org/t/concurrency-issues-since-upgrade-to-5-4-24/5048 there is a concurrency issue in {{DynamicBatchingEntityLoader}} due to the sharing of the {{entityLoaderBuilder}}.,,,,,,,,,,,,,,,,,,,,,,,,HHH-14457,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T09:11:52.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,christian.beikov(christian.beikov),,,,,,,,,0|104s6w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Backport?,,,,,,,,,,,,,,,,,,,Terminé,,
Reorganize Elasticsearch version properties in POM,HSEARCH-4174,70795,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,01/mars/2021 00:15 AM,13/avr./2021 06:20 AM,14/mars/2022 12:54 PM,01/mars/2021 09:33 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T05:30:10.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2508,0|104mty:x,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Multi-index Elasticsearch query fails (sometimes silently) when field is present in only one index,HSEARCH-4173,70794,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Griffin DeJohn,603536d9783a4600686b35ff,Griffin DeJohn,603536d9783a4600686b35ff,26/févr./2021 09:33 AM,14/avr./2021 09:38 AM,14/mars/2022 12:54 PM,10/mars/2021 04:31 AM,6.0.1.Final,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.3.Final,6.1.0.Alpha1,,,,,,,,backend-elasticsearch,,,,0,,,,,,"https://github.com/gdejohn/hibernate-test-case-templates/tree/master/search/hibernate-search-6/orm-elasticsearch

{noformat}
org.hibernate.search.util.common.SearchException: 
HSEARCH400007: Elasticsearch request failed: HSEARCH400090: Elasticsearch response indicates a failure.
Request: POST /series-read,asset-read/_search with parameters {size=10000, track_total_hits=false}
Response: 400 'Bad Request' from 'http://localhost:9200' with body 
{
  ""error"": {
    ""root_cause"": [
      {
        ""type"": ""query_shard_exception"",
        ""reason"": ""failed to create query: [nested] failed to find nested object under path [episodes]"",
        ""index_uuid"": ""a8NbcBHQQoeLPj-3TSmhoQ"",
        ""index"": ""asset-000001""
      },
      {
        ""type"": ""query_shard_exception"",
        ""reason"": ""failed to create query: [nested] failed to find nested object under path [dataPackages]"",
        ""index_uuid"": ""2apDK087TOu3gnGEYMjBFw"",
        ""index"": ""series-000001""
      }
    ],
    ""type"": ""search_phase_execution_exception"",
    ""reason"": ""all shards failed"",
    ""phase"": ""query"",
    ""grouped"": true,
    ""failed_shards"": [
      {
        ""shard"": 0,
        ""index"": ""asset-000001"",
        ""node"": ""QnGUU-TeQ4a26JQj9p0vCA"",
        ""reason"": {
          ""type"": ""query_shard_exception"",
          ""reason"": ""failed to create query: [nested] failed to find nested object under path [episodes]"",
          ""index_uuid"": ""a8NbcBHQQoeLPj-3TSmhoQ"",
          ""index"": ""asset-000001"",
          ""caused_by"": {
            ""type"": ""illegal_state_exception"",
            ""reason"": ""[nested] failed to find nested object under path [episodes]""
          }
        }
      },
      {
        ""shard"": 0,
        ""index"": ""series-000001"",
        ""node"": ""QnGUU-TeQ4a26JQj9p0vCA"",
        ""reason"": {
          ""type"": ""query_shard_exception"",
          ""reason"": ""failed to create query: [nested] failed to find nested object under path [dataPackages]"",
          ""index_uuid"": ""2apDK087TOu3gnGEYMjBFw"",
          ""index"": ""series-000001"",
          ""caused_by"": {
            ""type"": ""illegal_state_exception"",
            ""reason"": ""[nested] failed to find nested object under path [dataPackages]""
          }
        }
      }
    ]
  },
  ""status"": 400
}

Caused by: org.hibernate.search.util.common.SearchException: HSEARCH400090: Elasticsearch response indicates a failure.
{noformat}

The query works with the Lucene backend.","Hibernate Search 6.0.1.Final, JDK 8.0.282, macOS 10.14.6, Elasticsearch 7.10.2",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=4}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":4,""lastUpdated"":""2021-04-16T02:56:02.000-0700"",""stateCount"":4,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,ug:00ae40fb-acad-4b7a-9f84-42e10f26bf8c(ug:00ae40fb-acad-4b7a-9f84-42e10f26bf8c),ug:2d8bac65-29fb-404e-bb6f-8e24ac512ee4(ug:2d8bac65-29fb-404e-bb6f-8e24ac512ee4),yrodiere(fenrhil),,,,,,https://github.com/hibernate/hibernate-search/pull/2513,0|104mtz:zi,,,,,,HSEARCH - 2021-05,HSEARCH - 2021-06,,,,,,,,,,,,,,,,,,,,,,2021-03-01 11:25:14.608,,,,"01/mars/2021 03:25 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;From what I can see, it’s a failure on the Elasticsearch side.

Generally, when Elasticsearch doesn’t recognize a field mentioned in a Query, it simply ignores that query and assumes it matches nothing.

In the case of \{\{nested}}, it apparently throws an exception instead.

I’m afraid there isn’t much we can do on the Hibernate Search side. I’ll look for a reported bug on the Elasticsearch side.","01/mars/2021 03:28 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Ok, it looks like it’s working as intended on the Elasticsearch side, but the good news is there is an option to control that behavior and make it align with that of other queries: \{\{ignore_unmapped}}. See [https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html#nested-top-level-params|https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html#nested-top-level-params]

I’ll see what I can do.","01/mars/2021 05:43 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;It turns out the problem is more widespread than just the nested predicate. We have similar problems on distance sorts, distance projections, field sorts, field projections in particular. We may be able to apply similar workarounds.","02/mars/2021 02:15 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;We have a fix: [https://github.com/hibernate/hibernate-search/pull/2513|https://github.com/hibernate/hibernate-search/pull/2513|smart-link] 

Thanks for reporting this, [~accountid:603536d9783a4600686b35ff] \!","09/mars/2021 15:09 PM;603536d9783a4600686b35ff;So I built Hibernate Search from master and tried it out. The error I got before is indeed gone, but the result set is different with the elasticsearch backend than with lucene, so the test fails with elasticsearch (there’s only one result instead of the expected three).

Is this just a difference between the backends that we have to live with?","09/mars/2021 23:35 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;More like it’s me not being thorough enough with my testing… There’s still a failure when running your tests, but it's a silent one. It seems related to implicit nesting. I’ll have a closer look.

Reopening.","09/mars/2021 23:36 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Request/response for future reference:



{noformat}08:30:23,891 (Hibernate Search - default backend - Transport thread - 3) TRACE request:245 - HSEARCH400093: Executed Elasticsearch HTTP POST request to 'http://localhost:9200' with path '/series-read,asset-read/_search', query parameters {size=10000, track_total_hits=false} and 1 objects in payload in 7ms. Response had status 200 'OK'. Request body: <
{
  ""query"": {
    ""bool"": {
      ""should"": [
        {
          ""bool"": {
            ""must_not"": {
              ""exists"": {
                ""field"": ""series""
              }
            },
            ""filter"": {
              ""nested"": {
                ""path"": ""dataPackages"",
                ""query"": {
                  ""bool"": {
                    ""filter"": [
                      {
                        ""range"": {
                          ""dataPackages.startDate"": {
                            ""lt"": ""2021-03-10T08:30:23.869000000+01:00[Europe/Paris]""
                          }
                        }
                      },
                      {
                        ""range"": {
                          ""dataPackages.endDate"": {
                            ""gt"": ""2021-03-10T08:30:23.872000000+01:00[Europe/Paris]""
                          }
                        }
                      }
                    ],
                    ""minimum_should_match"": ""0""
                  }
                },
                ""ignore_unmapped"": true
              }
            },
            ""minimum_should_match"": ""0""
          }
        },
        {
          ""nested"": {
            ""path"": ""episodes"",
            ""query"": {
              ""nested"": {
                ""path"": ""episodes.dataPackages"",
                ""query"": {
                  ""bool"": {
                    ""filter"": [
                      {
                        ""range"": {
                          ""episodes.dataPackages.startDate"": {
                            ""lt"": ""2021-03-10T08:30:23.873000000+01:00[Europe/Paris]""
                          }
                        }
                      },
                      {
                        ""range"": {
                          ""episodes.dataPackages.endDate"": {
                            ""gt"": ""2021-03-10T08:30:23.873000000+01:00[Europe/Paris]""
                          }
                        }
                      }
                    ],
                    ""minimum_should_match"": ""0""
                  }
                },
                ""ignore_unmapped"": true
              }
            }
          }
        }
      ]
    }
  },
  ""docvalue_fields"": [
    ""_entity_type""
  ],
  ""_source"": false
}
>. Response body: <
{
  ""took"": 4,
  ""timed_out"": false,
  ""_shards"": {
    ""total"": 2,
    ""successful"": 1,
    ""skipped"": 0,
    ""failed"": 1,
    ""failures"": [
      {
        ""shard"": 0,
        ""index"": ""asset-000001"",
        ""node"": ""Wgf58HUPRsGSFd9qW8nLcw"",
        ""reason"": {
          ""type"": ""query_shard_exception"",
          ""reason"": ""failed to create query: [nested] failed to find nested object under path [episodes]"",
          ""index_uuid"": ""llwNEOqBT_SNuYgHQFPH_g"",
          ""index"": ""asset-000001"",
          ""caused_by"": {
            ""type"": ""illegal_state_exception"",
            ""reason"": ""[nested] failed to find nested object under path [episodes]""
          }
        }
      }
    ]
  },
  ""hits"": {
    ""max_score"": 0.0,
    ""hits"": [
      {
        ""_index"": ""series-000001"",
        ""_type"": ""_doc"",
        ""_id"": ""1"",
        ""_score"": 0.0,
        ""fields"": {
          ""_entity_type"": [
            ""Series""
          ]
        }
      }
    ]
  }
}
>
{noformat}","10/mars/2021 04:34 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Here, we just merged a fix in branches 6.0 and master.

Tests now cover:

* Missing fields on any predicate (match, range, …)
* Missing field on explicit nested predicate
* Missing field on sort
* Missing field on projection
* And with the latest fix, missing field on implicit nested predicate

Hopefully that’s the end of it…

In any case, your test now works as expected with the latest master. It still fails, but the failure seems caused by incorrect assertions (expecting hits in a certain order, but they end up in another order; I’d say you need a sort).","14/avr./2021 00:02 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;[~accountid:603536d9783a4600686b35ff] We just released the fix: [https://in.relation.to/2021/04/14/hibernate-search-6-0-3-Final/|https://in.relation.to/2021/04/14/hibernate-search-6-0-3-Final/] . Thanks for reporting this, and sorry it took so long.","14/avr./2021 09:38 AM;70121:fa5baecd-aa34-42c5-91aa-c977dc1c0ca4;Thank you, Yoann\!",,,,,,,Terminé,,
"Support ""hiding"" domain references from sources other than ORM",HHH-14470,70793,47422,Sous-tâche,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,25/févr./2021 07:27 AM,04/mars/2022 07:46 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.Next,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,sanne(sanne),steve(steve),,,,,,,,0|104s6g:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2022-03-04 14:41:57.147,,,,"04/mars/2022 06:41 AM;557058:99e61e65-956b-4a21-b29c-06057642e9ea;Discussed this with Steve and Christian now, some notes:

* the Hibernate Envers and Hibernate Search uses cases we had in mind are actually a little different, as in the Envers case we see some usefulness in not hiding the objects.
* the Hibernate Search use case is about storing dirtyness information in a new database backed indexing queue: essentially a table tracking which objects need to be re-indexed or removed from the index. In this case it’s a purely internal table and it would be nice to have it generated by schema export (et al) but not list this table among user entities. It was noted that this could be implemented by Search without actually mapping additional entities (but do we want that?).

So let’s try to see what Hibernate Search is really going to need with a POC before fleshing this further in ORM.","04/mars/2022 07:46 AM;557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c;If we do decide to do anything here, it won’t be part of 6.0.  Scheduled for 6.x mainly as a talking point.

Not sure it is worth doing anything here.",,,,,,,,,,,,,,,A faire,47422,Extend support for integrator-contributed domain and relational objects
Support schema-tooling on sub-sets of the relational model known to Hibernate,HHH-14469,70792,47422,Sous-tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,25/févr./2021 07:27 AM,18/mars/2021 12:49 PM,14/mars/2022 12:54 PM,04/mars/2021 07:47 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.0.Alpha7,,,,,,,,,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-04T07:43:55.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,steve(steve),,,,,,,,,0|104s68:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,47422,Extend support for integrator-contributed domain and relational objects
Ignore relative ordering of works on different documents in BackendMock,HSEARCH-4172,70791,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/févr./2021 04:44 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,25/févr./2021 08:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.7.Final,6.1.0.Alpha1,,,,,,,,tests,,,,0,,,,,,"It turns out that these ordering constraints are making CI fail; see HSEARCH-4164.

The thing is, we don't really care about relative ordering of works on different documents. It has no impact whatsoever on the end result.

And in the case of automatic indexing using a strategy that sends events to a queue, the relative ordering can be changed by the strategy. E.g. if we trigger indexing of document A and B in the same session, we expect this ordering:

* Create work for doc A
* Create work for doc B
* Execute work for doc A
* Execute work for doc B

But while processing the queue, the background process may end up executing it like this:

* Create work for doc A
* Execute work for doc A
* Create work for doc B
* Execute work for doc B

And that's fine! Really, we don't care, as long as works on the same document are still executed in order.

So we should re-scope ordering constraints to the document, instead of the index.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-09-03T06:42:17.000-0700"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2507,0|104mty:v,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Regexps on normalized fields are normalized on Elasticsearch,HSEARCH-4171,70789,,Bug,Ouvert,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,25/févr./2021 00:57 AM,30/nov./2021 04:46 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.x-backlog,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"The Lucene backend doesn't analyze/normalize regexp patterns, which is IMO the correct solution in order to avoid problems with regexp metacharacters.

The Elasticsearch backend, on the other hand, does normalize regexp patterns.

See:

* [https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#_regexp_predicates_and_analysis|https://docs.jboss.org/hibernate/search/6.1/reference/en-US/html_single/#_regexp_predicates_and_analysis|smart-link] 
* [https://github.com/elastic/elasticsearch/issues/80189|https://github.com/elastic/elasticsearch/issues/80189|smart-link] 

Once this gets fixed (somehow) on the Elasticsearch side, we need to take advantage of the fix in Hibernate Search; it will likely be an opt-in fix in Elasticsearch, so that they avoid breaking backwards compatibility.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,,0|1009cw:000000xdur3mhxzzzxezsq7uzu2,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-20,,,,,,,,,,,,,,,,,,,,,,,,,,"02/nov./2021 05:41 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;I reported Elasticsearch’s behavior as a bug: [https://github.com/elastic/elasticsearch/issues/80189|https://github.com/elastic/elasticsearch/issues/80189|smart-link] 

Let’s see if they agree.",,,,,,,,,,,,,,,,A faire,,
more efficient loading after cache miss for @NaturalId,HHH-14468,70788,,Amélioration,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,,,,Gavin King,5ed39290d986a30c29c69002,Gavin King,5ed39290d986a30c29c69002,24/févr./2021 06:43 AM,19/avr./2021 05:20 AM,14/mars/2022 12:54 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.5-backlog,,,,,,,,,hibernate-core,,,,0,core,performance,,,,"Previously, if a natural id is not found in the cache, Hibernate issues two different {{select}}s on the same database row.

After this change ([https://github.com/hibernate/hibernate-orm/pull/3750),|https://github.com/hibernate/hibernate-orm/pull/3750),] only one {{select}} is issued.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,{},,,,,,,,,,true,0.0,gking(gking),,,,,,,,,0|104s5s:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
AnnotationException: A Foreign key refering <SomeEntity> from <SomeOtherEntity> has the wrong number of column. should be 0,HHH-14467,70787,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/févr./2021 03:35 AM,06/mai/2021 16:58 PM,14/mars/2022 12:54 PM,01/mars/2021 00:49 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,,,,,0,,,,,,"See https://github.com/quarkusio/quarkus/issues/12228

This happens with mappings similar to this:

{code}
@Entity
public class Simple {
    @Id
    private Long id;
}
@Entity
public class Derived {
    @Id
    @ManyToOne
    private Simple idSource;
}
@Entity
public class Referencing {
    @Id
    private Long id;

    @ManyToOne
    private Derived ref;
}
{code}

The problem seems caused by a lack of ordering in the second-pass processing of foreign keys for derived IDs. If {{ref}} is processed before {{idSource}}, then we end up with a bootstrap failure.

Pull request with test case and fix coming right up.",,,,,,,,,,,,,HHH-14583,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-01T00:48:41.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-orm/pull/3760,0|104s5k:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Elasticsearch 7.11,HSEARCH-4170,70786,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,24/févr./2021 01:13 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,01/mars/2021 05:27 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,,,,0,,,,,,"Be careful about the license, though...",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T05:30:10.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2508,0|104mty:r,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Lucene 8.8.1,HSEARCH-4169,70785,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/févr./2021 23:47 PM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,24/févr./2021 08:05 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-lucene,,,,0,,,,,,https://lucene.apache.org/core/8_8_1/changes/Changes.html,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T05:30:09.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2504,0|104mty:i,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
StackOverflowError loading an entity with eager one-to-many if bidirectional and many-to-one side is the ID,HHH-14466,70784,,Bug,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,Gail Badner,557058:abbef6b0-cce3-4556-9748-b721becb9c9a,23/févr./2021 17:21 PM,13/juil./2021 16:21 PM,14/mars/2022 12:54 PM,02/mars/2021 14:26 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,6.0.0.Alpha7,,,,,,,hibernate-core,,,,0,,,,,,"In a mapping like the following, a {{StackOverflowError}} is thrown:


{code:java}
@Entity
public class Foo {
    ...
    @OneToMany(mappedBy = ""foo"", fetch = FetchType.EAGER)
    private Set<Bar> bars = new HashSet<>();
}
@Entity
public class Bar implements Serializable {
    @Id     
    @ManyToOne(fetch = FetchType.EAGER)
    private Foo foo;
    ...
}
{code}

There will is an infinite loop loading a {{Foo}} entity because, {{Foo#bars}} is eager and, by default, uses {{FetchMode.JOIN}}. it is impossible to ever finish loading a {{Foo}}, because it depends on the associated {{Foo#bars}} to be loaded. The associated {{Bar}} entities cannot be loaded until its ID (the associated {{Foo}} ) is loaded.

The fix is for Hibernate to change the one-to-many side to use {{FetchMode.SELECT}} instead of {{FetchMode.JOIN}}.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T14:15:57.000-0800"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gbadner(gbadner),,,,,,,,,0|104s5c:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,02/mars/2021 14:26 PM;557058:abbef6b0-cce3-4556-9748-b721becb9c9a;Fixed in master and 5.4 branches.,,,,,,,,,,,,,,,,Terminé,,
hbm2ddl uses NULL for primitives in sub-classes,HHH-14465,70783,,Bug,Ouvert,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Mineur(e)(s),,,,SuperF,557058:c176b3b7-de9d-453c-ae4b-42c9931959f0,SuperF,557058:c176b3b7-de9d-453c-ae4b-42c9931959f0,23/févr./2021 07:04 AM,23/févr./2021 07:04 AM,14/mars/2022 12:54 PM,,5.4.21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,hbm2ddl,NPE,null,,,"When a primitive type (int, boolean, float etc) is used, hbm2ddl will normally generate ""NOT NULL"" fields, but this unexpectedly differs for sub-classes.

Example:
{code:title=A.java|borderStyle=solid}
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class A {
    @Id @GeneratedValue
    private Long id; // not null
    private Integer ia1; // null
    private int ia2; // not null
}
{code}

{code:title=B.java|borderStyle=solid}
@Entity
public class B extends A {
    private Integer ib1; // null
    private int ib2; // null, where not null would be expected
}
{code}
In the code above, hbm2ddl will generate ""not null"" for A.ia2 (int) as expected, but it will generate ""null"" for B.ib2 (int), which is not expected, you would expect ""not null"".

This behavior can cause propertyAccessExceptions when such data is read by Hibernate from the database:
{quote}
Caused by: org.hibernate.PropertyAccessException: Null value was assigned to a property [class entities.B.ib2] of primitive type setter of entities.B.ib2
	at org.hibernate.property.access.spi.SetterFieldImpl.set(SetterFieldImpl.java:58)
	at org.hibernate.tuple.entity.AbstractEntityTuplizer.setPropertyValues(AbstractEntityTuplizer.java:682)
	... more
Caused by: java.lang.IllegalArgumentException: Can not set int field entities.B.ib2 to null value
	at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
	... more
{quote}","Hibernate ORM core version 5.4.21.Final
MariaDB 10.5.8
DriverClass: org.mariadb.jdbc.Driver
HibernateDialect: MariaDB10Dialect
StorageEngine: innodb
JDK-11.0.10.9-hotspot
Windows 10",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,{},,,,,,,,,,true,0.0,j(j),,,,,,,,,0|104s54:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,A faire,,
Expose more AbstractEntityPersister operations to Hibernate Reactive,HHH-14464,70782,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Gavin King,557058:c227967f-4207-4715-82ea-1c48a845aea1,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,23/févr./2021 05:35 AM,03/mars/2021 03:01 AM,14/mars/2022 12:54 PM,23/févr./2021 05:51 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,hibernate-core,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{repository={count=4, dataType=repository}, json={""cachedValue"":{""errors"":[],""summary"":{""repository"":{""overall"":{""count"":4,""lastUpdated"":""2021-02-23T01:26:55.000-0800"",""dataType"":""repository""},""byInstanceType"":{""GitHub"":{""count"":4,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,gavin.king(gavin.king),sanne.grinovero(sanne.grinovero),,,,,,,https://github.com/hibernate/hibernate-orm/pull/3747,0|104s4w:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Approved,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to ByteBuddy 1.10.21: OOB support for JDK17,HHH-14463,70781,,Tâche,Fermée,HHH,Hibernate ORM,software,Steve Ebersole,557058:aafa2e9a-7a21-4c62-bf4a-050acb31276c,"Project for tracking issues with Hibernate ORM, from version 3 onward. ",http://www.hibernate.org/orm/,Important,Corrigé,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,Sanne Grinovero,557058:690dd548-c602-4a58-9c7e-0923346f4e97,23/févr./2021 05:23 AM,03/mars/2021 03:01 AM,14/mars/2022 12:54 PM,23/févr./2021 06:11 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.4.29,5.5.0.Alpha1,,,,,,,,bytecode-enhancement,,,,0,,,,,,"The version of ByteBuddy {{1.10.21}} is now available and supports JDK17 w/o needing to set the {{net.bytebuddy.experimental}} JVM flag.

For convenience of all our users we should upgrade to this. ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-02-23T07:08:33.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,sanne.grinovero(sanne.grinovero),,,,,,,,,0|104s4o:,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Document query caching configuration,HSEARCH-4168,70779,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/févr./2021 04:43 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,28/avr./2021 03:28 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-lucene,documentation,,,0,,,,,,Follows up on HSEARCH-3880,,,,,,,,,,,,,,,,,,,HSEARCH-3880,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-28T03:28:25.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2560,0|104mtz:v,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Improve parameter handling in named predicates,HSEARCH-4167,70778,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/févr./2021 04:41 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,26/mai/2021 04:08 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"Follows up on [HSEARCH-3325]

In particular:

* {{NamedPredicateFactoryContext#param(String)}} should throw an exception if the param has no value.
* There should be another method, {{NamedPredicateFactoryContext#paramOptional(String)}}, to retrieve parameters that may not have been set. This method will return an Optional.
* Note if we do the above, we should probably also add a {{paramOptional}} method to {{ValueBindingContext}} and similar ({{IdentifierBindingContext}}, etc.).
* Not consuming all parameters in {{NamedPredicateFactory#create}} should yield an exception (unrecognized/unused parameters). We can check that by remembering which parameters are retrieved through {{NamedPredicateFactoryContext#param(String)}}, then checking that all parameters were retrieved just after we call {{NamedPredicateFactory#create}}.
* Note if we do the above, we should probably introduce the same behavior in {{ValueBindingContext}} and similar ({{IdentifierBindingContext}}, etc.).",,,,,,,,,,,,,,,,,,,HSEARCH-3325,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-26T04:08:31.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2581,0|1009cw:000000xdur3mhxzzzxezrzr,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,HSEARCH - 2021-11,,,,,,,,,,,,,,,,,,2021-05-23 13:47:13.399,,,,"23/mai/2021 06:47 AM;557058:097eae70-1c75-4c16-ab75-ab9600f8e584;When we did the issue:[https://hibernate.atlassian.net/browse/HSEARCH-3608|https://hibernate.atlassian.net/browse/HSEARCH-3608|smart-link] ,

we decided to not check if a parameter is never used by the binder.

See [https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-3608/near/236289301|https://hibernate.zulipchat.com/#narrow/stream/132092-hibernate-search-dev/topic/HSEARCH-3608/near/236289301]

I think we should do the same for named predicates.","24/mai/2021 23:57 PM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Still torn about this, but ok. For consistency.",,,,,,,,,,,,,,,Terminé,,
Document and test named predicates more extensively,HSEARCH-4166,70777,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/févr./2021 04:38 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,26/avr./2021 23:44 PM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"Follows up on [HSEARCH-3325]

In particular:

* Test declaration of named predicates in the POJO mapper (including error cases). Do that for both type bridges and property bridges.
* Test declaration of a named predicate in an IndexedEmbedded, in particular when using includePaths. I think there’s a bug and we will not register the named predicate in that case, but we should.
* Test that the a nested predicate is applied automatically *around the named predicate* when the named predicate is declared on a nested object field, or on a flattened object field inside a nested document.
* Test the various methods from the context ({{param}}, {{paramNames}}, {{resolvePath}}, ...)
* Test error cases when using a named predicate: incompatible definitions in multi-index scope, unknown name, …
* ...",,,,,,,,,,,,,,,,,,,HSEARCH-3325,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-04-26T23:44:06.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2559,0|104mtz:r,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Avoid duplicate event sending when using PojoIndexingQueueEventSendingPlan,HSEARCH-4165,70776,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,23/févr./2021 00:18 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,24/févr./2021 01:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,mapper-pojo-base,,,,0,,,,,,"Since all types share the same sink in that case, by calling executeAndReport for each type we effectively send the events multiple times, once per type.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-03-02T05:30:09.000-0800"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2502,0|1009cw:000000xdur3mhxzzzxezr,,,,,,HSEARCH - 2021-04,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Fix transient failure in AbstractAutomaticIndexingMultiAssociationIT,HSEARCH-4164,70775,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2021 04:53 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,25/févr./2021 08:05 AM,6.1.0.Alpha1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,tests,,,,0,,,,,,See https://github.com/hibernate/hibernate-search/pull/2479/checks?check_run_id=1952181287,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=3}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":3,""lastUpdated"":""2021-03-02T05:30:09.000-0800"",""stateCount"":3,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":3,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2502,0|1009cw:000000xdur3mhxzzzxezi,,,,,,HSEARCH - 2021-04,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,"25/févr./2021 02:07 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;The problem is still there, see https://ci.hibernate.org/job/hibernate-search/view/change-requests/job/PR-2486/6",25/févr./2021 04:45 AM;557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b;Should be solved by [https://hibernate.atlassian.net/browse/HSEARCH-4172|https://hibernate.atlassian.net/browse/HSEARCH-4172|smart-link] ,,,,,,,,,,,,,,,Terminé,,
Improve behavior when using multi-tenancy in ORM but not in the backend,HSEARCH-4163,70774,,Amélioration,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Fabio Massimo Ercoli,557058:097eae70-1c75-4c16-ab75-ab9600f8e584,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2021 01:12 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,06/mai/2021 07:53 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,mapper-orm,,0,,,,,,"See https://stackoverflow.com/q/66303479/6692043

I'm thinking we should at the very least have a more useful error message, where we explain which property must be set.

Maybe, just maybe, we could also enable multi-tenancy automatically in the backend if the mapper tells us it needs multi-tenancy?",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-05-06T07:51:18.000-0700"",""stateCount"":1,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,fercoli(fercoli),yrodiere(fenrhil),,,,,,,https://github.com/hibernate/hibernate-search/pull/2565,0|1009cw:000000xdur3mhxzzzxezrr,,,,,,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
SearchPredicateFactory should expect relative paths in NamedPredicateProvider,HSEARCH-4162,70773,,Tâche,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,22/févr./2021 01:03 AM,10/sept./2021 00:24 AM,14/mars/2022 12:54 PM,17/juin/2021 07:48 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.1.0.Alpha1,,,,,,,,,backend-elasticsearch,backend-lucene,engine,,0,,,,,,"Follow-up on [https://hibernate.atlassian.net/browse/HSEARCH-3325|https://hibernate.atlassian.net/browse/HSEARCH-3325|smart-link] . Must be addressed before the 6.1 release since it would break the newly-introduced NamedPredicateProvider API.

See [https://github.com/hibernate/hibernate-search/pull/2478#discussion_r577632513|https://github.com/hibernate/hibernate-search/pull/2478#discussion_r577632513]",,,,,,,,,,,,,,,,,,,HSEARCH-3325,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=DECLINED, stateCount=1}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":1,""lastUpdated"":""2021-06-17T08:03:13.000-0700"",""stateCount"":1,""state"":""DECLINED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":1,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2592,0|1009cw:000000xdur3mhxzzzx1v,,,,,,HSEARCH - 2021-06,HSEARCH - 2021-07,HSEARCH - 2021-08,HSEARCH - 2021-09,HSEARCH - 2021-11,HSEARCH - 2021-12,HSEARCH - 2021-13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
LuceneIndexManager.computeSizeInBytes() may fail if a file is deleted while computing size,HSEARCH-4161,70771,,Bug,Fermée,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/févr./2021 00:33 AM,23/févr./2021 06:00 AM,14/mars/2022 12:54 PM,19/févr./2021 03:15 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6.0.2.Final,6.1.0.Alpha1,,,,,,,,backend-lucene,,,,0,,,,,,"This code:

{code}
			for ( String fileName : directory.listAll() ) {
				try {
					totalSize += directory.fileLength( fileName );
				}
				catch (FileNotFoundException ignored) {
					// Ignore: the file was probably removed since the call to listAll
				}
			}
{code}

... should catch {{java.nio.file.NoSuchFileException}}, since {{fileLength}} may throw it.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Bug reports should generally be accompanied by [a test case|https://github.com/hibernate/hibernate-test-case-templates]!,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-02T05:30:07.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2499,0|1009cw:000000xdur3mhxzzzxez,,,,,,HSEARCH - 2021-04,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
Upgrade to Byteman 4.0.14,HSEARCH-4160,70770,,Tâche,Résolu,HSEARCH,Hibernate Search,software,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Hibernate Search: Apache Lucene(tm) and Elasticsearch integration,http://hibernate.org/search/,Important,Corrigé,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,Yoann Rodière,557058:58fa1ced-171a-4c00-97e8-5d70d442cc4b,19/févr./2021 00:20 AM,24/févr./2021 08:07 AM,14/mars/2022 12:54 PM,24/févr./2021 08:07 AM,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.10.10.Final,5.11.9.Final,,,,,,,,build,tests,,,0,,,,,,https://downloads.jboss.org/byteman/latest/ReleaseNotes.txt,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"{pullrequest={dataType=pullrequest, state=MERGED, stateCount=2}, json={""cachedValue"":{""errors"":[],""summary"":{""pullrequest"":{""overall"":{""count"":2,""lastUpdated"":""2021-03-02T05:30:06.000-0800"",""stateCount"":2,""state"":""MERGED"",""dataType"":""pullrequest"",""open"":false},""byInstanceType"":{""GitHub"":{""count"":2,""name"":""GitHub""}}}}},""isStale"":true}}",,,,,,,,,,true,0.0,yrodiere(fenrhil),,,,,,,,https://github.com/hibernate/hibernate-search/pull/2505,0|104mty:,,,,,,HSEARCH - 2021-05,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Terminé,,
